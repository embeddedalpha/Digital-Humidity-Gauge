
Digital-Humidity-Gauge.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000586c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007e4  080059f4  080059f4  000069f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061d8  080061d8  00008004  2**0
                  CONTENTS
  4 .ARM          00000000  080061d8  080061d8  00008004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080061d8  080061d8  00008004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061d8  080061d8  000071d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080061dc  080061dc  000071dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080061e0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008004  2**0
                  CONTENTS
 10 .bss          00000338  20000004  20000004  00008004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000033c  2000033c  00008004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008004  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e37c  00000000  00000000  00008034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000015d7  00000000  00000000  000163b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000005e0  00000000  00000000  00017988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004b2  00000000  00000000  00017f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000013d8  00000000  00000000  0001841a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b539  00000000  00000000  000197f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00090f6c  00000000  00000000  00024d2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000b5c97  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000187c  00000000  00000000  000b5cdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000056  00000000  00000000  000b7558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080059dc 	.word	0x080059dc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	080059dc 	.word	0x080059dc

080001c8 <Delay_ms>:
	while((SysTick->CTRL & 0x00010000) == 0);
	return (0UL);                                                     /* Function successful */
}

__STATIC_INLINE uint32_t Delay_ms(volatile float ms)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	ed87 0a01 	vstr	s0, [r7, #4]
	unsigned long x =0x29040 * (ms);
 80001d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80001d6:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 800021c <Delay_ms+0x54>
 80001da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80001de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80001e2:	ee17 3a90 	vmov	r3, s15
 80001e6:	60fb      	str	r3, [r7, #12]
	SysTick->LOAD =  x ;
 80001e8:	4a0d      	ldr	r2, [pc, #52]	@ (8000220 <Delay_ms+0x58>)
 80001ea:	68fb      	ldr	r3, [r7, #12]
 80001ec:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0;
 80001ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000220 <Delay_ms+0x58>)
 80001f0:	2200      	movs	r2, #0
 80001f2:	609a      	str	r2, [r3, #8]
	SysTick->CTRL |= 1;
 80001f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000220 <Delay_ms+0x58>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a09      	ldr	r2, [pc, #36]	@ (8000220 <Delay_ms+0x58>)
 80001fa:	f043 0301 	orr.w	r3, r3, #1
 80001fe:	6013      	str	r3, [r2, #0]
	while((SysTick->CTRL & 0x00010000) == 0);
 8000200:	bf00      	nop
 8000202:	4b07      	ldr	r3, [pc, #28]	@ (8000220 <Delay_ms+0x58>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800020a:	2b00      	cmp	r3, #0
 800020c:	d0f9      	beq.n	8000202 <Delay_ms+0x3a>
	return (0UL);                                                     /* Function successful */
 800020e:	2300      	movs	r3, #0
}
 8000210:	4618      	mov	r0, r3
 8000212:	3714      	adds	r7, #20
 8000214:	46bd      	mov	sp, r7
 8000216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021a:	4770      	bx	lr
 800021c:	48241000 	.word	0x48241000
 8000220:	e000e010 	.word	0xe000e010

08000224 <Delay_milli>:


__STATIC_INLINE uint32_t Delay_milli(float ms)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0
 800022a:	ed87 0a01 	vstr	s0, [r7, #4]
	for (; ms>0; ms--)
 800022e:	e00b      	b.n	8000248 <Delay_milli+0x24>
	{
		Delay_ms(1);
 8000230:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000234:	f7ff ffc8 	bl	80001c8 <Delay_ms>
	for (; ms>0; ms--)
 8000238:	edd7 7a01 	vldr	s15, [r7, #4]
 800023c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000240:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000244:	edc7 7a01 	vstr	s15, [r7, #4]
 8000248:	edd7 7a01 	vldr	s15, [r7, #4]
 800024c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000254:	dcec      	bgt.n	8000230 <Delay_milli+0xc>
	}
	return ms;
 8000256:	edd7 7a01 	vldr	s15, [r7, #4]
 800025a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800025e:	ee17 3a90 	vmov	r3, s15
}
 8000262:	4618      	mov	r0, r3
 8000264:	3708      	adds	r7, #8
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}

0800026a <GPIO_Pin_Low>:
 * @brief  Sets a specific pin low.
 * @param  Port: Pointer to GPIO port base address.
 * @param  pin: Pin number to set low (0-15).
 */
__STATIC_INLINE  void GPIO_Pin_Low(GPIO_TypeDef *Port, int pin)
{
 800026a:	b480      	push	{r7}
 800026c:	b083      	sub	sp, #12
 800026e:	af00      	add	r7, sp, #0
 8000270:	6078      	str	r0, [r7, #4]
 8000272:	6039      	str	r1, [r7, #0]
	Port -> ODR &= ~(1 << pin);
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	695b      	ldr	r3, [r3, #20]
 8000278:	2101      	movs	r1, #1
 800027a:	683a      	ldr	r2, [r7, #0]
 800027c:	fa01 f202 	lsl.w	r2, r1, r2
 8000280:	43d2      	mvns	r2, r2
 8000282:	401a      	ands	r2, r3
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	615a      	str	r2, [r3, #20]
}
 8000288:	bf00      	nop
 800028a:	370c      	adds	r7, #12
 800028c:	46bd      	mov	sp, r7
 800028e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000292:	4770      	bx	lr

08000294 <GPIO_Pin_High>:
 * @brief  Sets a specific pin high.
 * @param  Port: Pointer to GPIO port base address.
 * @param  pin: Pin number to set high (0-15).
 */
__STATIC_INLINE  void GPIO_Pin_High(GPIO_TypeDef *Port, int pin)
{
 8000294:	b480      	push	{r7}
 8000296:	b083      	sub	sp, #12
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
 800029c:	6039      	str	r1, [r7, #0]
	Port -> ODR |= 1 << pin;
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	695b      	ldr	r3, [r3, #20]
 80002a2:	2101      	movs	r1, #1
 80002a4:	683a      	ldr	r2, [r7, #0]
 80002a6:	fa01 f202 	lsl.w	r2, r1, r2
 80002aa:	431a      	orrs	r2, r3
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	615a      	str	r2, [r3, #20]
}
 80002b0:	bf00      	nop
 80002b2:	370c      	adds	r7, #12
 80002b4:	46bd      	mov	sp, r7
 80002b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ba:	4770      	bx	lr

080002bc <CS_L>:
 *      Author: kunal
 */

#include "GC9A01.h"

static  void CS_L(GC9A01_Config *config) { GPIO_Pin_Low(config->cs_port, config->cs_pin); }
 80002bc:	b580      	push	{r7, lr}
 80002be:	b082      	sub	sp, #8
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	685a      	ldr	r2, [r3, #4]
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	891b      	ldrh	r3, [r3, #8]
 80002cc:	4619      	mov	r1, r3
 80002ce:	4610      	mov	r0, r2
 80002d0:	f7ff ffcb 	bl	800026a <GPIO_Pin_Low>
 80002d4:	bf00      	nop
 80002d6:	3708      	adds	r7, #8
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}

080002dc <CS_H>:
static  void CS_H(GC9A01_Config *config) { GPIO_Pin_High(config->cs_port, config->cs_pin); }
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	685a      	ldr	r2, [r3, #4]
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	891b      	ldrh	r3, [r3, #8]
 80002ec:	4619      	mov	r1, r3
 80002ee:	4610      	mov	r0, r2
 80002f0:	f7ff ffd0 	bl	8000294 <GPIO_Pin_High>
 80002f4:	bf00      	nop
 80002f6:	3708      	adds	r7, #8
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}

080002fc <DC_C>:

static  void DC_C(GC9A01_Config *config) { GPIO_Pin_Low(config->dc_port, config->dc_pin); }
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	68da      	ldr	r2, [r3, #12]
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	8a1b      	ldrh	r3, [r3, #16]
 800030c:	4619      	mov	r1, r3
 800030e:	4610      	mov	r0, r2
 8000310:	f7ff ffab 	bl	800026a <GPIO_Pin_Low>
 8000314:	bf00      	nop
 8000316:	3708      	adds	r7, #8
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}

0800031c <DC_D>:
static  void DC_D(GC9A01_Config *config) { GPIO_Pin_High(config->dc_port, config->dc_pin); }
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	68da      	ldr	r2, [r3, #12]
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	8a1b      	ldrh	r3, [r3, #16]
 800032c:	4619      	mov	r1, r3
 800032e:	4610      	mov	r0, r2
 8000330:	f7ff ffb0 	bl	8000294 <GPIO_Pin_High>
 8000334:	bf00      	nop
 8000336:	3708      	adds	r7, #8
 8000338:	46bd      	mov	sp, r7
 800033a:	bd80      	pop	{r7, pc}

0800033c <RST_L>:

static  void RST_L(GC9A01_Config *config) { GPIO_Pin_Low(config->rst_port, config->rst_pin); }
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	695a      	ldr	r2, [r3, #20]
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	8b1b      	ldrh	r3, [r3, #24]
 800034c:	4619      	mov	r1, r3
 800034e:	4610      	mov	r0, r2
 8000350:	f7ff ff8b 	bl	800026a <GPIO_Pin_Low>
 8000354:	bf00      	nop
 8000356:	3708      	adds	r7, #8
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}

0800035c <RST_H>:
static  void RST_H(GC9A01_Config *config) { GPIO_Pin_High(config->rst_port, config->rst_pin); }
 800035c:	b580      	push	{r7, lr}
 800035e:	b082      	sub	sp, #8
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	695a      	ldr	r2, [r3, #20]
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	8b1b      	ldrh	r3, [r3, #24]
 800036c:	4619      	mov	r1, r3
 800036e:	4610      	mov	r0, r2
 8000370:	f7ff ff90 	bl	8000294 <GPIO_Pin_High>
 8000374:	bf00      	nop
 8000376:	3708      	adds	r7, #8
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}

0800037c <write_command>:


static void write_command(GC9A01_Config *config, uint8_t cmd)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b082      	sub	sp, #8
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
 8000384:	460b      	mov	r3, r1
 8000386:	70fb      	strb	r3, [r7, #3]
	DC_C(config);
 8000388:	6878      	ldr	r0, [r7, #4]
 800038a:	f7ff ffb7 	bl	80002fc <DC_C>
	CS_L(config);
 800038e:	6878      	ldr	r0, [r7, #4]
 8000390:	f7ff ff94 	bl	80002bc <CS_L>
	CS_L(config);
 8000394:	6878      	ldr	r0, [r7, #4]
 8000396:	f7ff ff91 	bl	80002bc <CS_L>
	SPI_TRX_Byte(config->SPI_Port, cmd);
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	78fa      	ldrb	r2, [r7, #3]
 80003a0:	b292      	uxth	r2, r2
 80003a2:	4611      	mov	r1, r2
 80003a4:	4618      	mov	r0, r3
 80003a6:	f003 fcbd 	bl	8003d24 <SPI_TRX_Byte>
	CS_H(config);
 80003aa:	6878      	ldr	r0, [r7, #4]
 80003ac:	f7ff ff96 	bl	80002dc <CS_H>
}
 80003b0:	bf00      	nop
 80003b2:	3708      	adds	r7, #8
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}

080003b8 <write_data>:

static void write_data(GC9A01_Config *config, uint8_t *data, size_t len)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b086      	sub	sp, #24
 80003bc:	af00      	add	r7, sp, #0
 80003be:	60f8      	str	r0, [r7, #12]
 80003c0:	60b9      	str	r1, [r7, #8]
 80003c2:	607a      	str	r2, [r7, #4]
	DC_D(config);
 80003c4:	68f8      	ldr	r0, [r7, #12]
 80003c6:	f7ff ffa9 	bl	800031c <DC_D>
	CS_L(config);
 80003ca:	68f8      	ldr	r0, [r7, #12]
 80003cc:	f7ff ff76 	bl	80002bc <CS_L>
	for(int i = 0; i < len; i++) SPI_TRX_Byte(config->SPI_Port, *data++);
 80003d0:	2300      	movs	r3, #0
 80003d2:	617b      	str	r3, [r7, #20]
 80003d4:	e00b      	b.n	80003ee <write_data+0x36>
 80003d6:	68fb      	ldr	r3, [r7, #12]
 80003d8:	6818      	ldr	r0, [r3, #0]
 80003da:	68bb      	ldr	r3, [r7, #8]
 80003dc:	1c5a      	adds	r2, r3, #1
 80003de:	60ba      	str	r2, [r7, #8]
 80003e0:	781b      	ldrb	r3, [r3, #0]
 80003e2:	4619      	mov	r1, r3
 80003e4:	f003 fc9e 	bl	8003d24 <SPI_TRX_Byte>
 80003e8:	697b      	ldr	r3, [r7, #20]
 80003ea:	3301      	adds	r3, #1
 80003ec:	617b      	str	r3, [r7, #20]
 80003ee:	697b      	ldr	r3, [r7, #20]
 80003f0:	687a      	ldr	r2, [r7, #4]
 80003f2:	429a      	cmp	r2, r3
 80003f4:	d8ef      	bhi.n	80003d6 <write_data+0x1e>
	CS_H(config);
 80003f6:	68f8      	ldr	r0, [r7, #12]
 80003f8:	f7ff ff70 	bl	80002dc <CS_H>
}
 80003fc:	bf00      	nop
 80003fe:	3718      	adds	r7, #24
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}

08000404 <GC9A01_write_byte>:

static inline void GC9A01_write_byte(GC9A01_Config *config,uint8_t val) {
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
 800040c:	460b      	mov	r3, r1
 800040e:	70fb      	strb	r3, [r7, #3]
	write_data(config,&val, sizeof(val));
 8000410:	1cfb      	adds	r3, r7, #3
 8000412:	2201      	movs	r2, #1
 8000414:	4619      	mov	r1, r3
 8000416:	6878      	ldr	r0, [r7, #4]
 8000418:	f7ff ffce 	bl	80003b8 <write_data>
}
 800041c:	bf00      	nop
 800041e:	3708      	adds	r7, #8
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}

08000424 <GC9A01_Write_Data>:


static void GC9A01_Write_Data(GC9A01_Config *config, uint8_t *data, uint32_t len)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b084      	sub	sp, #16
 8000428:	af00      	add	r7, sp, #0
 800042a:	60f8      	str	r0, [r7, #12]
 800042c:	60b9      	str	r1, [r7, #8]
 800042e:	607a      	str	r2, [r7, #4]
	DC_D(config);
 8000430:	68f8      	ldr	r0, [r7, #12]
 8000432:	f7ff ff73 	bl	800031c <DC_D>
	CS_L(config);
 8000436:	68f8      	ldr	r0, [r7, #12]
 8000438:	f7ff ff40 	bl	80002bc <CS_L>

	while(len--)
 800043c:	e008      	b.n	8000450 <GC9A01_Write_Data+0x2c>
	{
		SPI_TRX_Byte(config->SPI_Port, *data++);
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	6818      	ldr	r0, [r3, #0]
 8000442:	68bb      	ldr	r3, [r7, #8]
 8000444:	1c5a      	adds	r2, r3, #1
 8000446:	60ba      	str	r2, [r7, #8]
 8000448:	781b      	ldrb	r3, [r3, #0]
 800044a:	4619      	mov	r1, r3
 800044c:	f003 fc6a 	bl	8003d24 <SPI_TRX_Byte>
	while(len--)
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	1e5a      	subs	r2, r3, #1
 8000454:	607a      	str	r2, [r7, #4]
 8000456:	2b00      	cmp	r3, #0
 8000458:	d1f1      	bne.n	800043e <GC9A01_Write_Data+0x1a>
	}
	CS_H(config);
 800045a:	68f8      	ldr	r0, [r7, #12]
 800045c:	f7ff ff3e 	bl	80002dc <CS_H>
}
 8000460:	bf00      	nop
 8000462:	3710      	adds	r7, #16
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}

08000468 <GC9A01_Drite_Data16_Repeat>:

static void GC9A01_Drite_Data16_Repeat(GC9A01_Config *config, uint16_t color, uint32_t count)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b084      	sub	sp, #16
 800046c:	af00      	add	r7, sp, #0
 800046e:	60f8      	str	r0, [r7, #12]
 8000470:	460b      	mov	r3, r1
 8000472:	607a      	str	r2, [r7, #4]
 8000474:	817b      	strh	r3, [r7, #10]
	DC_D(config);
 8000476:	68f8      	ldr	r0, [r7, #12]
 8000478:	f7ff ff50 	bl	800031c <DC_D>
	CS_L(config);
 800047c:	68f8      	ldr	r0, [r7, #12]
 800047e:	f7ff ff1d 	bl	80002bc <CS_L>

	while(count--) {
 8000482:	e011      	b.n	80004a8 <GC9A01_Drite_Data16_Repeat+0x40>
		SPI_TRX_Byte(config->SPI_Port, color >> 8);
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	681a      	ldr	r2, [r3, #0]
 8000488:	897b      	ldrh	r3, [r7, #10]
 800048a:	0a1b      	lsrs	r3, r3, #8
 800048c:	b29b      	uxth	r3, r3
 800048e:	4619      	mov	r1, r3
 8000490:	4610      	mov	r0, r2
 8000492:	f003 fc47 	bl	8003d24 <SPI_TRX_Byte>
		SPI_TRX_Byte(config->SPI_Port, color & 0xFF);
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	897a      	ldrh	r2, [r7, #10]
 800049c:	b2d2      	uxtb	r2, r2
 800049e:	b292      	uxth	r2, r2
 80004a0:	4611      	mov	r1, r2
 80004a2:	4618      	mov	r0, r3
 80004a4:	f003 fc3e 	bl	8003d24 <SPI_TRX_Byte>
	while(count--) {
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	1e5a      	subs	r2, r3, #1
 80004ac:	607a      	str	r2, [r7, #4]
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d1e8      	bne.n	8000484 <GC9A01_Drite_Data16_Repeat+0x1c>
	}
	CS_H(config);
 80004b2:	68f8      	ldr	r0, [r7, #12]
 80004b4:	f7ff ff12 	bl	80002dc <CS_H>
}
 80004b8:	bf00      	nop
 80004ba:	3710      	adds	r7, #16
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}

080004c0 <GC9A01_DrawPixelSafe>:

static inline void GC9A01_DrawPixelSafe(GC9A01_Config *cfg,
                                        int16_t x, int16_t y,
                                        uint16_t color)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	60f8      	str	r0, [r7, #12]
 80004c8:	4608      	mov	r0, r1
 80004ca:	4611      	mov	r1, r2
 80004cc:	461a      	mov	r2, r3
 80004ce:	4603      	mov	r3, r0
 80004d0:	817b      	strh	r3, [r7, #10]
 80004d2:	460b      	mov	r3, r1
 80004d4:	813b      	strh	r3, [r7, #8]
 80004d6:	4613      	mov	r3, r2
 80004d8:	80fb      	strh	r3, [r7, #6]
    if ((uint16_t)x < GC9A01_WIDTH &&     /* same as 0 ≤ x < width  */
 80004da:	897b      	ldrh	r3, [r7, #10]
 80004dc:	2bef      	cmp	r3, #239	@ 0xef
 80004de:	d808      	bhi.n	80004f2 <GC9A01_DrawPixelSafe+0x32>
        (uint16_t)y < GC9A01_HEIGHT)      /*      0 ≤ y < height   */
 80004e0:	893b      	ldrh	r3, [r7, #8]
    if ((uint16_t)x < GC9A01_WIDTH &&     /* same as 0 ≤ x < width  */
 80004e2:	2bef      	cmp	r3, #239	@ 0xef
 80004e4:	d805      	bhi.n	80004f2 <GC9A01_DrawPixelSafe+0x32>
    {
        GC9A01_DrawPixel(cfg, (uint16_t)x, (uint16_t)y, color);
 80004e6:	8979      	ldrh	r1, [r7, #10]
 80004e8:	893a      	ldrh	r2, [r7, #8]
 80004ea:	88fb      	ldrh	r3, [r7, #6]
 80004ec:	68f8      	ldr	r0, [r7, #12]
 80004ee:	f000 fbb5 	bl	8000c5c <GC9A01_DrawPixel>
    }
}
 80004f2:	bf00      	nop
 80004f4:	3710      	adds	r7, #16
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
	...

080004fc <GC9A01_Init>:

/** Initialise GPIO, reset display, execute vendor init sequence */
void GC9A01_Init(GC9A01_Config *config)
{
 80004fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004fe:	b087      	sub	sp, #28
 8000500:	af04      	add	r7, sp, #16
 8000502:	6078      	str	r0, [r7, #4]
	GPIO_Pin_Init(config->cs_port, config->cs_pin, GPIO_Configuration.Mode.General_Purpose_Output, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.Pull_Up, GPIO_Configuration.Alternate_Functions.None);
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	6858      	ldr	r0, [r3, #4]
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	891b      	ldrh	r3, [r3, #8]
 800050c:	b2d9      	uxtb	r1, r3
 800050e:	2501      	movs	r5, #1
 8000510:	2600      	movs	r6, #0
 8000512:	2303      	movs	r3, #3
 8000514:	2201      	movs	r2, #1
 8000516:	2400      	movs	r4, #0
 8000518:	9402      	str	r4, [sp, #8]
 800051a:	9201      	str	r2, [sp, #4]
 800051c:	9300      	str	r3, [sp, #0]
 800051e:	4633      	mov	r3, r6
 8000520:	462a      	mov	r2, r5
 8000522:	f002 fb7b 	bl	8002c1c <GPIO_Pin_Init>

	GPIO_Pin_Init(config->rst_port, config->rst_pin, GPIO_Configuration.Mode.General_Purpose_Output, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.Pull_Up, GPIO_Configuration.Alternate_Functions.None);
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	6958      	ldr	r0, [r3, #20]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	8b1b      	ldrh	r3, [r3, #24]
 800052e:	b2d9      	uxtb	r1, r3
 8000530:	2501      	movs	r5, #1
 8000532:	2600      	movs	r6, #0
 8000534:	2303      	movs	r3, #3
 8000536:	2201      	movs	r2, #1
 8000538:	2400      	movs	r4, #0
 800053a:	9402      	str	r4, [sp, #8]
 800053c:	9201      	str	r2, [sp, #4]
 800053e:	9300      	str	r3, [sp, #0]
 8000540:	4633      	mov	r3, r6
 8000542:	462a      	mov	r2, r5
 8000544:	f002 fb6a 	bl	8002c1c <GPIO_Pin_Init>

	GPIO_Pin_Init(config->dc_port, config->dc_pin, GPIO_Configuration.Mode.General_Purpose_Output, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.Pull_Up, GPIO_Configuration.Alternate_Functions.None);
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	68d8      	ldr	r0, [r3, #12]
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	8a1b      	ldrh	r3, [r3, #16]
 8000550:	b2d9      	uxtb	r1, r3
 8000552:	2501      	movs	r5, #1
 8000554:	2600      	movs	r6, #0
 8000556:	2303      	movs	r3, #3
 8000558:	2201      	movs	r2, #1
 800055a:	2400      	movs	r4, #0
 800055c:	9402      	str	r4, [sp, #8]
 800055e:	9201      	str	r2, [sp, #4]
 8000560:	9300      	str	r3, [sp, #0]
 8000562:	4633      	mov	r3, r6
 8000564:	462a      	mov	r2, r5
 8000566:	f002 fb59 	bl	8002c1c <GPIO_Pin_Init>

	CS_H(config);
 800056a:	6878      	ldr	r0, [r7, #4]
 800056c:	f7ff feb6 	bl	80002dc <CS_H>


	SPI_Init(config->SPI_Port);
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4618      	mov	r0, r3
 8000576:	f003 f9b1 	bl	80038dc <SPI_Init>
	SPI_Enable(config->SPI_Port);
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4618      	mov	r0, r3
 8000580:	f003 fbbe 	bl	8003d00 <SPI_Enable>


	CS_H(config);
 8000584:	6878      	ldr	r0, [r7, #4]
 8000586:	f7ff fea9 	bl	80002dc <CS_H>
	Delay_milli(150);
 800058a:	ed9f 0acc 	vldr	s0, [pc, #816]	@ 80008bc <GC9A01_Init+0x3c0>
 800058e:	f7ff fe49 	bl	8000224 <Delay_milli>
	RST_L(config);
 8000592:	6878      	ldr	r0, [r7, #4]
 8000594:	f7ff fed2 	bl	800033c <RST_L>
	Delay_milli(150);
 8000598:	ed9f 0ac8 	vldr	s0, [pc, #800]	@ 80008bc <GC9A01_Init+0x3c0>
 800059c:	f7ff fe42 	bl	8000224 <Delay_milli>
	RST_H(config);
 80005a0:	6878      	ldr	r0, [r7, #4]
 80005a2:	f7ff fedb 	bl	800035c <RST_H>
	Delay_milli(150);
 80005a6:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 80008bc <GC9A01_Init+0x3c0>
 80005aa:	f7ff fe3b 	bl	8000224 <Delay_milli>

	write_command(config,0xEF);
 80005ae:	21ef      	movs	r1, #239	@ 0xef
 80005b0:	6878      	ldr	r0, [r7, #4]
 80005b2:	f7ff fee3 	bl	800037c <write_command>

	write_command(config,0xEB);
 80005b6:	21eb      	movs	r1, #235	@ 0xeb
 80005b8:	6878      	ldr	r0, [r7, #4]
 80005ba:	f7ff fedf 	bl	800037c <write_command>
	GC9A01_write_byte(config,0x14);
 80005be:	2114      	movs	r1, #20
 80005c0:	6878      	ldr	r0, [r7, #4]
 80005c2:	f7ff ff1f 	bl	8000404 <GC9A01_write_byte>

	write_command(config,0xFE);
 80005c6:	21fe      	movs	r1, #254	@ 0xfe
 80005c8:	6878      	ldr	r0, [r7, #4]
 80005ca:	f7ff fed7 	bl	800037c <write_command>
	write_command(config,0xEF);
 80005ce:	21ef      	movs	r1, #239	@ 0xef
 80005d0:	6878      	ldr	r0, [r7, #4]
 80005d2:	f7ff fed3 	bl	800037c <write_command>

	write_command(config,0xEB);
 80005d6:	21eb      	movs	r1, #235	@ 0xeb
 80005d8:	6878      	ldr	r0, [r7, #4]
 80005da:	f7ff fecf 	bl	800037c <write_command>
	GC9A01_write_byte(config,0x14);
 80005de:	2114      	movs	r1, #20
 80005e0:	6878      	ldr	r0, [r7, #4]
 80005e2:	f7ff ff0f 	bl	8000404 <GC9A01_write_byte>

	write_command(config,0x84);
 80005e6:	2184      	movs	r1, #132	@ 0x84
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f7ff fec7 	bl	800037c <write_command>
	GC9A01_write_byte(config,0x40);
 80005ee:	2140      	movs	r1, #64	@ 0x40
 80005f0:	6878      	ldr	r0, [r7, #4]
 80005f2:	f7ff ff07 	bl	8000404 <GC9A01_write_byte>

	write_command(config,0x85);
 80005f6:	2185      	movs	r1, #133	@ 0x85
 80005f8:	6878      	ldr	r0, [r7, #4]
 80005fa:	f7ff febf 	bl	800037c <write_command>
	GC9A01_write_byte(config,0xFF);
 80005fe:	21ff      	movs	r1, #255	@ 0xff
 8000600:	6878      	ldr	r0, [r7, #4]
 8000602:	f7ff feff 	bl	8000404 <GC9A01_write_byte>

	write_command(config,0x86);
 8000606:	2186      	movs	r1, #134	@ 0x86
 8000608:	6878      	ldr	r0, [r7, #4]
 800060a:	f7ff feb7 	bl	800037c <write_command>
	GC9A01_write_byte(config,0xFF);
 800060e:	21ff      	movs	r1, #255	@ 0xff
 8000610:	6878      	ldr	r0, [r7, #4]
 8000612:	f7ff fef7 	bl	8000404 <GC9A01_write_byte>

	write_command(config,0x87);
 8000616:	2187      	movs	r1, #135	@ 0x87
 8000618:	6878      	ldr	r0, [r7, #4]
 800061a:	f7ff feaf 	bl	800037c <write_command>
	GC9A01_write_byte(config,0xFF);
 800061e:	21ff      	movs	r1, #255	@ 0xff
 8000620:	6878      	ldr	r0, [r7, #4]
 8000622:	f7ff feef 	bl	8000404 <GC9A01_write_byte>

	write_command(config,0x88);
 8000626:	2188      	movs	r1, #136	@ 0x88
 8000628:	6878      	ldr	r0, [r7, #4]
 800062a:	f7ff fea7 	bl	800037c <write_command>
	GC9A01_write_byte(config,0x0A);
 800062e:	210a      	movs	r1, #10
 8000630:	6878      	ldr	r0, [r7, #4]
 8000632:	f7ff fee7 	bl	8000404 <GC9A01_write_byte>

	write_command(config,0x89);
 8000636:	2189      	movs	r1, #137	@ 0x89
 8000638:	6878      	ldr	r0, [r7, #4]
 800063a:	f7ff fe9f 	bl	800037c <write_command>
	GC9A01_write_byte(config,0x21);
 800063e:	2121      	movs	r1, #33	@ 0x21
 8000640:	6878      	ldr	r0, [r7, #4]
 8000642:	f7ff fedf 	bl	8000404 <GC9A01_write_byte>

	write_command(config,0x8A);
 8000646:	218a      	movs	r1, #138	@ 0x8a
 8000648:	6878      	ldr	r0, [r7, #4]
 800064a:	f7ff fe97 	bl	800037c <write_command>
	GC9A01_write_byte(config,0x00);
 800064e:	2100      	movs	r1, #0
 8000650:	6878      	ldr	r0, [r7, #4]
 8000652:	f7ff fed7 	bl	8000404 <GC9A01_write_byte>

	write_command(config,0x8B);
 8000656:	218b      	movs	r1, #139	@ 0x8b
 8000658:	6878      	ldr	r0, [r7, #4]
 800065a:	f7ff fe8f 	bl	800037c <write_command>
	GC9A01_write_byte(config,0x80);
 800065e:	2180      	movs	r1, #128	@ 0x80
 8000660:	6878      	ldr	r0, [r7, #4]
 8000662:	f7ff fecf 	bl	8000404 <GC9A01_write_byte>

	write_command(config,0x8C);
 8000666:	218c      	movs	r1, #140	@ 0x8c
 8000668:	6878      	ldr	r0, [r7, #4]
 800066a:	f7ff fe87 	bl	800037c <write_command>
	GC9A01_write_byte(config,0x01);
 800066e:	2101      	movs	r1, #1
 8000670:	6878      	ldr	r0, [r7, #4]
 8000672:	f7ff fec7 	bl	8000404 <GC9A01_write_byte>

	write_command(config,0x8D);
 8000676:	218d      	movs	r1, #141	@ 0x8d
 8000678:	6878      	ldr	r0, [r7, #4]
 800067a:	f7ff fe7f 	bl	800037c <write_command>
	GC9A01_write_byte(config,0x01);
 800067e:	2101      	movs	r1, #1
 8000680:	6878      	ldr	r0, [r7, #4]
 8000682:	f7ff febf 	bl	8000404 <GC9A01_write_byte>

	write_command(config,0x8E);
 8000686:	218e      	movs	r1, #142	@ 0x8e
 8000688:	6878      	ldr	r0, [r7, #4]
 800068a:	f7ff fe77 	bl	800037c <write_command>
	GC9A01_write_byte(config,0xFF);
 800068e:	21ff      	movs	r1, #255	@ 0xff
 8000690:	6878      	ldr	r0, [r7, #4]
 8000692:	f7ff feb7 	bl	8000404 <GC9A01_write_byte>

	write_command(config,0x8F);
 8000696:	218f      	movs	r1, #143	@ 0x8f
 8000698:	6878      	ldr	r0, [r7, #4]
 800069a:	f7ff fe6f 	bl	800037c <write_command>
	GC9A01_write_byte(config,0xFF);
 800069e:	21ff      	movs	r1, #255	@ 0xff
 80006a0:	6878      	ldr	r0, [r7, #4]
 80006a2:	f7ff feaf 	bl	8000404 <GC9A01_write_byte>


	write_command(config,0xB6);
 80006a6:	21b6      	movs	r1, #182	@ 0xb6
 80006a8:	6878      	ldr	r0, [r7, #4]
 80006aa:	f7ff fe67 	bl	800037c <write_command>
	GC9A01_write_byte(config,0x00);
 80006ae:	2100      	movs	r1, #0
 80006b0:	6878      	ldr	r0, [r7, #4]
 80006b2:	f7ff fea7 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x00);
 80006b6:	2100      	movs	r1, #0
 80006b8:	6878      	ldr	r0, [r7, #4]
 80006ba:	f7ff fea3 	bl	8000404 <GC9A01_write_byte>

	write_command(config,0x36);
 80006be:	2136      	movs	r1, #54	@ 0x36
 80006c0:	6878      	ldr	r0, [r7, #4]
 80006c2:	f7ff fe5b 	bl	800037c <write_command>

	GC9A01_write_byte(config,0x18);
 80006c6:	2118      	movs	r1, #24
 80006c8:	6878      	ldr	r0, [r7, #4]
 80006ca:	f7ff fe9b 	bl	8000404 <GC9A01_write_byte>

	write_command(config,0x3A);
 80006ce:	213a      	movs	r1, #58	@ 0x3a
 80006d0:	6878      	ldr	r0, [r7, #4]
 80006d2:	f7ff fe53 	bl	800037c <write_command>
	GC9A01_write_byte(config,0x05);
 80006d6:	2105      	movs	r1, #5
 80006d8:	6878      	ldr	r0, [r7, #4]
 80006da:	f7ff fe93 	bl	8000404 <GC9A01_write_byte>

	write_command(config,0x90);
 80006de:	2190      	movs	r1, #144	@ 0x90
 80006e0:	6878      	ldr	r0, [r7, #4]
 80006e2:	f7ff fe4b 	bl	800037c <write_command>
	GC9A01_write_byte(config,0x08);
 80006e6:	2108      	movs	r1, #8
 80006e8:	6878      	ldr	r0, [r7, #4]
 80006ea:	f7ff fe8b 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x08);
 80006ee:	2108      	movs	r1, #8
 80006f0:	6878      	ldr	r0, [r7, #4]
 80006f2:	f7ff fe87 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x08);
 80006f6:	2108      	movs	r1, #8
 80006f8:	6878      	ldr	r0, [r7, #4]
 80006fa:	f7ff fe83 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x08);
 80006fe:	2108      	movs	r1, #8
 8000700:	6878      	ldr	r0, [r7, #4]
 8000702:	f7ff fe7f 	bl	8000404 <GC9A01_write_byte>

	write_command(config,0xBD);
 8000706:	21bd      	movs	r1, #189	@ 0xbd
 8000708:	6878      	ldr	r0, [r7, #4]
 800070a:	f7ff fe37 	bl	800037c <write_command>
	GC9A01_write_byte(config,0x06);
 800070e:	2106      	movs	r1, #6
 8000710:	6878      	ldr	r0, [r7, #4]
 8000712:	f7ff fe77 	bl	8000404 <GC9A01_write_byte>

	write_command(config,0xBC);
 8000716:	21bc      	movs	r1, #188	@ 0xbc
 8000718:	6878      	ldr	r0, [r7, #4]
 800071a:	f7ff fe2f 	bl	800037c <write_command>
	GC9A01_write_byte(config,0x00);
 800071e:	2100      	movs	r1, #0
 8000720:	6878      	ldr	r0, [r7, #4]
 8000722:	f7ff fe6f 	bl	8000404 <GC9A01_write_byte>

	write_command(config,0xFF);
 8000726:	21ff      	movs	r1, #255	@ 0xff
 8000728:	6878      	ldr	r0, [r7, #4]
 800072a:	f7ff fe27 	bl	800037c <write_command>
	GC9A01_write_byte(config,0x60);
 800072e:	2160      	movs	r1, #96	@ 0x60
 8000730:	6878      	ldr	r0, [r7, #4]
 8000732:	f7ff fe67 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x01);
 8000736:	2101      	movs	r1, #1
 8000738:	6878      	ldr	r0, [r7, #4]
 800073a:	f7ff fe63 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x04);
 800073e:	2104      	movs	r1, #4
 8000740:	6878      	ldr	r0, [r7, #4]
 8000742:	f7ff fe5f 	bl	8000404 <GC9A01_write_byte>

	write_command(config,0xC3);
 8000746:	21c3      	movs	r1, #195	@ 0xc3
 8000748:	6878      	ldr	r0, [r7, #4]
 800074a:	f7ff fe17 	bl	800037c <write_command>
	GC9A01_write_byte(config,0x13);
 800074e:	2113      	movs	r1, #19
 8000750:	6878      	ldr	r0, [r7, #4]
 8000752:	f7ff fe57 	bl	8000404 <GC9A01_write_byte>
	write_command(config,0xC4);
 8000756:	21c4      	movs	r1, #196	@ 0xc4
 8000758:	6878      	ldr	r0, [r7, #4]
 800075a:	f7ff fe0f 	bl	800037c <write_command>
	GC9A01_write_byte(config,0x13);
 800075e:	2113      	movs	r1, #19
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f7ff fe4f 	bl	8000404 <GC9A01_write_byte>

	write_command(config,0xC9);
 8000766:	21c9      	movs	r1, #201	@ 0xc9
 8000768:	6878      	ldr	r0, [r7, #4]
 800076a:	f7ff fe07 	bl	800037c <write_command>
	GC9A01_write_byte(config,0x22);
 800076e:	2122      	movs	r1, #34	@ 0x22
 8000770:	6878      	ldr	r0, [r7, #4]
 8000772:	f7ff fe47 	bl	8000404 <GC9A01_write_byte>

	write_command(config,0xBE);
 8000776:	21be      	movs	r1, #190	@ 0xbe
 8000778:	6878      	ldr	r0, [r7, #4]
 800077a:	f7ff fdff 	bl	800037c <write_command>
	GC9A01_write_byte(config,0x11);
 800077e:	2111      	movs	r1, #17
 8000780:	6878      	ldr	r0, [r7, #4]
 8000782:	f7ff fe3f 	bl	8000404 <GC9A01_write_byte>

	write_command(config,0xE1);
 8000786:	21e1      	movs	r1, #225	@ 0xe1
 8000788:	6878      	ldr	r0, [r7, #4]
 800078a:	f7ff fdf7 	bl	800037c <write_command>
	GC9A01_write_byte(config,0x10);
 800078e:	2110      	movs	r1, #16
 8000790:	6878      	ldr	r0, [r7, #4]
 8000792:	f7ff fe37 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x0E);
 8000796:	210e      	movs	r1, #14
 8000798:	6878      	ldr	r0, [r7, #4]
 800079a:	f7ff fe33 	bl	8000404 <GC9A01_write_byte>

	write_command(config,0xDF);
 800079e:	21df      	movs	r1, #223	@ 0xdf
 80007a0:	6878      	ldr	r0, [r7, #4]
 80007a2:	f7ff fdeb 	bl	800037c <write_command>
	GC9A01_write_byte(config,0x21);
 80007a6:	2121      	movs	r1, #33	@ 0x21
 80007a8:	6878      	ldr	r0, [r7, #4]
 80007aa:	f7ff fe2b 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x0c);
 80007ae:	210c      	movs	r1, #12
 80007b0:	6878      	ldr	r0, [r7, #4]
 80007b2:	f7ff fe27 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x02);
 80007b6:	2102      	movs	r1, #2
 80007b8:	6878      	ldr	r0, [r7, #4]
 80007ba:	f7ff fe23 	bl	8000404 <GC9A01_write_byte>

	write_command(config,0xF0);
 80007be:	21f0      	movs	r1, #240	@ 0xf0
 80007c0:	6878      	ldr	r0, [r7, #4]
 80007c2:	f7ff fddb 	bl	800037c <write_command>
	GC9A01_write_byte(config,0x45);
 80007c6:	2145      	movs	r1, #69	@ 0x45
 80007c8:	6878      	ldr	r0, [r7, #4]
 80007ca:	f7ff fe1b 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x09);
 80007ce:	2109      	movs	r1, #9
 80007d0:	6878      	ldr	r0, [r7, #4]
 80007d2:	f7ff fe17 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x08);
 80007d6:	2108      	movs	r1, #8
 80007d8:	6878      	ldr	r0, [r7, #4]
 80007da:	f7ff fe13 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x08);
 80007de:	2108      	movs	r1, #8
 80007e0:	6878      	ldr	r0, [r7, #4]
 80007e2:	f7ff fe0f 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x26);
 80007e6:	2126      	movs	r1, #38	@ 0x26
 80007e8:	6878      	ldr	r0, [r7, #4]
 80007ea:	f7ff fe0b 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x2A);
 80007ee:	212a      	movs	r1, #42	@ 0x2a
 80007f0:	6878      	ldr	r0, [r7, #4]
 80007f2:	f7ff fe07 	bl	8000404 <GC9A01_write_byte>

	write_command(config,0xF1);
 80007f6:	21f1      	movs	r1, #241	@ 0xf1
 80007f8:	6878      	ldr	r0, [r7, #4]
 80007fa:	f7ff fdbf 	bl	800037c <write_command>
	GC9A01_write_byte(config,0x43);
 80007fe:	2143      	movs	r1, #67	@ 0x43
 8000800:	6878      	ldr	r0, [r7, #4]
 8000802:	f7ff fdff 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x70);
 8000806:	2170      	movs	r1, #112	@ 0x70
 8000808:	6878      	ldr	r0, [r7, #4]
 800080a:	f7ff fdfb 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x72);
 800080e:	2172      	movs	r1, #114	@ 0x72
 8000810:	6878      	ldr	r0, [r7, #4]
 8000812:	f7ff fdf7 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x36);
 8000816:	2136      	movs	r1, #54	@ 0x36
 8000818:	6878      	ldr	r0, [r7, #4]
 800081a:	f7ff fdf3 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x37);
 800081e:	2137      	movs	r1, #55	@ 0x37
 8000820:	6878      	ldr	r0, [r7, #4]
 8000822:	f7ff fdef 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x6F);
 8000826:	216f      	movs	r1, #111	@ 0x6f
 8000828:	6878      	ldr	r0, [r7, #4]
 800082a:	f7ff fdeb 	bl	8000404 <GC9A01_write_byte>

	write_command(config,0xF2);
 800082e:	21f2      	movs	r1, #242	@ 0xf2
 8000830:	6878      	ldr	r0, [r7, #4]
 8000832:	f7ff fda3 	bl	800037c <write_command>
	GC9A01_write_byte(config,0x45);
 8000836:	2145      	movs	r1, #69	@ 0x45
 8000838:	6878      	ldr	r0, [r7, #4]
 800083a:	f7ff fde3 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x09);
 800083e:	2109      	movs	r1, #9
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f7ff fddf 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x08);
 8000846:	2108      	movs	r1, #8
 8000848:	6878      	ldr	r0, [r7, #4]
 800084a:	f7ff fddb 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x08);
 800084e:	2108      	movs	r1, #8
 8000850:	6878      	ldr	r0, [r7, #4]
 8000852:	f7ff fdd7 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x26);
 8000856:	2126      	movs	r1, #38	@ 0x26
 8000858:	6878      	ldr	r0, [r7, #4]
 800085a:	f7ff fdd3 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x2A);
 800085e:	212a      	movs	r1, #42	@ 0x2a
 8000860:	6878      	ldr	r0, [r7, #4]
 8000862:	f7ff fdcf 	bl	8000404 <GC9A01_write_byte>

	write_command(config,0xF3);
 8000866:	21f3      	movs	r1, #243	@ 0xf3
 8000868:	6878      	ldr	r0, [r7, #4]
 800086a:	f7ff fd87 	bl	800037c <write_command>
	GC9A01_write_byte(config,0x43);
 800086e:	2143      	movs	r1, #67	@ 0x43
 8000870:	6878      	ldr	r0, [r7, #4]
 8000872:	f7ff fdc7 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x70);
 8000876:	2170      	movs	r1, #112	@ 0x70
 8000878:	6878      	ldr	r0, [r7, #4]
 800087a:	f7ff fdc3 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x72);
 800087e:	2172      	movs	r1, #114	@ 0x72
 8000880:	6878      	ldr	r0, [r7, #4]
 8000882:	f7ff fdbf 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x36);
 8000886:	2136      	movs	r1, #54	@ 0x36
 8000888:	6878      	ldr	r0, [r7, #4]
 800088a:	f7ff fdbb 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x37);
 800088e:	2137      	movs	r1, #55	@ 0x37
 8000890:	6878      	ldr	r0, [r7, #4]
 8000892:	f7ff fdb7 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x6F);
 8000896:	216f      	movs	r1, #111	@ 0x6f
 8000898:	6878      	ldr	r0, [r7, #4]
 800089a:	f7ff fdb3 	bl	8000404 <GC9A01_write_byte>

	write_command(config,0xED);
 800089e:	21ed      	movs	r1, #237	@ 0xed
 80008a0:	6878      	ldr	r0, [r7, #4]
 80008a2:	f7ff fd6b 	bl	800037c <write_command>
	GC9A01_write_byte(config,0x1B);
 80008a6:	211b      	movs	r1, #27
 80008a8:	6878      	ldr	r0, [r7, #4]
 80008aa:	f7ff fdab 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x0B);
 80008ae:	210b      	movs	r1, #11
 80008b0:	6878      	ldr	r0, [r7, #4]
 80008b2:	f7ff fda7 	bl	8000404 <GC9A01_write_byte>

	write_command(config,0xAE);
 80008b6:	21ae      	movs	r1, #174	@ 0xae
 80008b8:	6878      	ldr	r0, [r7, #4]
 80008ba:	e003      	b.n	80008c4 <GC9A01_Init+0x3c8>
 80008bc:	43160000 	.word	0x43160000
 80008c0:	42f00000 	.word	0x42f00000
 80008c4:	f7ff fd5a 	bl	800037c <write_command>
	GC9A01_write_byte(config,0x77);
 80008c8:	2177      	movs	r1, #119	@ 0x77
 80008ca:	6878      	ldr	r0, [r7, #4]
 80008cc:	f7ff fd9a 	bl	8000404 <GC9A01_write_byte>

	write_command(config,0xCD);
 80008d0:	21cd      	movs	r1, #205	@ 0xcd
 80008d2:	6878      	ldr	r0, [r7, #4]
 80008d4:	f7ff fd52 	bl	800037c <write_command>
	GC9A01_write_byte(config,0x63);
 80008d8:	2163      	movs	r1, #99	@ 0x63
 80008da:	6878      	ldr	r0, [r7, #4]
 80008dc:	f7ff fd92 	bl	8000404 <GC9A01_write_byte>

	write_command(config,0x70);
 80008e0:	2170      	movs	r1, #112	@ 0x70
 80008e2:	6878      	ldr	r0, [r7, #4]
 80008e4:	f7ff fd4a 	bl	800037c <write_command>
	GC9A01_write_byte(config,0x07);
 80008e8:	2107      	movs	r1, #7
 80008ea:	6878      	ldr	r0, [r7, #4]
 80008ec:	f7ff fd8a 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x07);
 80008f0:	2107      	movs	r1, #7
 80008f2:	6878      	ldr	r0, [r7, #4]
 80008f4:	f7ff fd86 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x04);
 80008f8:	2104      	movs	r1, #4
 80008fa:	6878      	ldr	r0, [r7, #4]
 80008fc:	f7ff fd82 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x0E);
 8000900:	210e      	movs	r1, #14
 8000902:	6878      	ldr	r0, [r7, #4]
 8000904:	f7ff fd7e 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x0F);
 8000908:	210f      	movs	r1, #15
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	f7ff fd7a 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x09);
 8000910:	2109      	movs	r1, #9
 8000912:	6878      	ldr	r0, [r7, #4]
 8000914:	f7ff fd76 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x07);
 8000918:	2107      	movs	r1, #7
 800091a:	6878      	ldr	r0, [r7, #4]
 800091c:	f7ff fd72 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x08);
 8000920:	2108      	movs	r1, #8
 8000922:	6878      	ldr	r0, [r7, #4]
 8000924:	f7ff fd6e 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x03);
 8000928:	2103      	movs	r1, #3
 800092a:	6878      	ldr	r0, [r7, #4]
 800092c:	f7ff fd6a 	bl	8000404 <GC9A01_write_byte>

	write_command(config,0xE8);
 8000930:	21e8      	movs	r1, #232	@ 0xe8
 8000932:	6878      	ldr	r0, [r7, #4]
 8000934:	f7ff fd22 	bl	800037c <write_command>
	GC9A01_write_byte(config,0x34);
 8000938:	2134      	movs	r1, #52	@ 0x34
 800093a:	6878      	ldr	r0, [r7, #4]
 800093c:	f7ff fd62 	bl	8000404 <GC9A01_write_byte>

	write_command(config,0x62);
 8000940:	2162      	movs	r1, #98	@ 0x62
 8000942:	6878      	ldr	r0, [r7, #4]
 8000944:	f7ff fd1a 	bl	800037c <write_command>
	GC9A01_write_byte(config,0x18);
 8000948:	2118      	movs	r1, #24
 800094a:	6878      	ldr	r0, [r7, #4]
 800094c:	f7ff fd5a 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x0D);
 8000950:	210d      	movs	r1, #13
 8000952:	6878      	ldr	r0, [r7, #4]
 8000954:	f7ff fd56 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x71);
 8000958:	2171      	movs	r1, #113	@ 0x71
 800095a:	6878      	ldr	r0, [r7, #4]
 800095c:	f7ff fd52 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0xED);
 8000960:	21ed      	movs	r1, #237	@ 0xed
 8000962:	6878      	ldr	r0, [r7, #4]
 8000964:	f7ff fd4e 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x70);
 8000968:	2170      	movs	r1, #112	@ 0x70
 800096a:	6878      	ldr	r0, [r7, #4]
 800096c:	f7ff fd4a 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x70);
 8000970:	2170      	movs	r1, #112	@ 0x70
 8000972:	6878      	ldr	r0, [r7, #4]
 8000974:	f7ff fd46 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x18);
 8000978:	2118      	movs	r1, #24
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	f7ff fd42 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x0F);
 8000980:	210f      	movs	r1, #15
 8000982:	6878      	ldr	r0, [r7, #4]
 8000984:	f7ff fd3e 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x71);
 8000988:	2171      	movs	r1, #113	@ 0x71
 800098a:	6878      	ldr	r0, [r7, #4]
 800098c:	f7ff fd3a 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0xEF);
 8000990:	21ef      	movs	r1, #239	@ 0xef
 8000992:	6878      	ldr	r0, [r7, #4]
 8000994:	f7ff fd36 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x70);
 8000998:	2170      	movs	r1, #112	@ 0x70
 800099a:	6878      	ldr	r0, [r7, #4]
 800099c:	f7ff fd32 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x70);
 80009a0:	2170      	movs	r1, #112	@ 0x70
 80009a2:	6878      	ldr	r0, [r7, #4]
 80009a4:	f7ff fd2e 	bl	8000404 <GC9A01_write_byte>

	write_command(config,0x63);
 80009a8:	2163      	movs	r1, #99	@ 0x63
 80009aa:	6878      	ldr	r0, [r7, #4]
 80009ac:	f7ff fce6 	bl	800037c <write_command>
	GC9A01_write_byte(config,0x18);
 80009b0:	2118      	movs	r1, #24
 80009b2:	6878      	ldr	r0, [r7, #4]
 80009b4:	f7ff fd26 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x11);
 80009b8:	2111      	movs	r1, #17
 80009ba:	6878      	ldr	r0, [r7, #4]
 80009bc:	f7ff fd22 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x71);
 80009c0:	2171      	movs	r1, #113	@ 0x71
 80009c2:	6878      	ldr	r0, [r7, #4]
 80009c4:	f7ff fd1e 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0xF1);
 80009c8:	21f1      	movs	r1, #241	@ 0xf1
 80009ca:	6878      	ldr	r0, [r7, #4]
 80009cc:	f7ff fd1a 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x70);
 80009d0:	2170      	movs	r1, #112	@ 0x70
 80009d2:	6878      	ldr	r0, [r7, #4]
 80009d4:	f7ff fd16 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x70);
 80009d8:	2170      	movs	r1, #112	@ 0x70
 80009da:	6878      	ldr	r0, [r7, #4]
 80009dc:	f7ff fd12 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x18);
 80009e0:	2118      	movs	r1, #24
 80009e2:	6878      	ldr	r0, [r7, #4]
 80009e4:	f7ff fd0e 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x13);
 80009e8:	2113      	movs	r1, #19
 80009ea:	6878      	ldr	r0, [r7, #4]
 80009ec:	f7ff fd0a 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x71);
 80009f0:	2171      	movs	r1, #113	@ 0x71
 80009f2:	6878      	ldr	r0, [r7, #4]
 80009f4:	f7ff fd06 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0xF3);
 80009f8:	21f3      	movs	r1, #243	@ 0xf3
 80009fa:	6878      	ldr	r0, [r7, #4]
 80009fc:	f7ff fd02 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x70);
 8000a00:	2170      	movs	r1, #112	@ 0x70
 8000a02:	6878      	ldr	r0, [r7, #4]
 8000a04:	f7ff fcfe 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x70);
 8000a08:	2170      	movs	r1, #112	@ 0x70
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f7ff fcfa 	bl	8000404 <GC9A01_write_byte>

	write_command(config,0x64);
 8000a10:	2164      	movs	r1, #100	@ 0x64
 8000a12:	6878      	ldr	r0, [r7, #4]
 8000a14:	f7ff fcb2 	bl	800037c <write_command>
	GC9A01_write_byte(config,0x28);
 8000a18:	2128      	movs	r1, #40	@ 0x28
 8000a1a:	6878      	ldr	r0, [r7, #4]
 8000a1c:	f7ff fcf2 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x29);
 8000a20:	2129      	movs	r1, #41	@ 0x29
 8000a22:	6878      	ldr	r0, [r7, #4]
 8000a24:	f7ff fcee 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0xF1);
 8000a28:	21f1      	movs	r1, #241	@ 0xf1
 8000a2a:	6878      	ldr	r0, [r7, #4]
 8000a2c:	f7ff fcea 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x01);
 8000a30:	2101      	movs	r1, #1
 8000a32:	6878      	ldr	r0, [r7, #4]
 8000a34:	f7ff fce6 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0xF1);
 8000a38:	21f1      	movs	r1, #241	@ 0xf1
 8000a3a:	6878      	ldr	r0, [r7, #4]
 8000a3c:	f7ff fce2 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x00);
 8000a40:	2100      	movs	r1, #0
 8000a42:	6878      	ldr	r0, [r7, #4]
 8000a44:	f7ff fcde 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x07);
 8000a48:	2107      	movs	r1, #7
 8000a4a:	6878      	ldr	r0, [r7, #4]
 8000a4c:	f7ff fcda 	bl	8000404 <GC9A01_write_byte>

	write_command(config,0x66);
 8000a50:	2166      	movs	r1, #102	@ 0x66
 8000a52:	6878      	ldr	r0, [r7, #4]
 8000a54:	f7ff fc92 	bl	800037c <write_command>
	GC9A01_write_byte(config,0x3C);
 8000a58:	213c      	movs	r1, #60	@ 0x3c
 8000a5a:	6878      	ldr	r0, [r7, #4]
 8000a5c:	f7ff fcd2 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x00);
 8000a60:	2100      	movs	r1, #0
 8000a62:	6878      	ldr	r0, [r7, #4]
 8000a64:	f7ff fcce 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0xCD);
 8000a68:	21cd      	movs	r1, #205	@ 0xcd
 8000a6a:	6878      	ldr	r0, [r7, #4]
 8000a6c:	f7ff fcca 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x67);
 8000a70:	2167      	movs	r1, #103	@ 0x67
 8000a72:	6878      	ldr	r0, [r7, #4]
 8000a74:	f7ff fcc6 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x45);
 8000a78:	2145      	movs	r1, #69	@ 0x45
 8000a7a:	6878      	ldr	r0, [r7, #4]
 8000a7c:	f7ff fcc2 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x45);
 8000a80:	2145      	movs	r1, #69	@ 0x45
 8000a82:	6878      	ldr	r0, [r7, #4]
 8000a84:	f7ff fcbe 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x10);
 8000a88:	2110      	movs	r1, #16
 8000a8a:	6878      	ldr	r0, [r7, #4]
 8000a8c:	f7ff fcba 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x00);
 8000a90:	2100      	movs	r1, #0
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	f7ff fcb6 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x00);
 8000a98:	2100      	movs	r1, #0
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f7ff fcb2 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x00);
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	6878      	ldr	r0, [r7, #4]
 8000aa4:	f7ff fcae 	bl	8000404 <GC9A01_write_byte>

	write_command(config,0x67);
 8000aa8:	2167      	movs	r1, #103	@ 0x67
 8000aaa:	6878      	ldr	r0, [r7, #4]
 8000aac:	f7ff fc66 	bl	800037c <write_command>
	GC9A01_write_byte(config,0x00);
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	6878      	ldr	r0, [r7, #4]
 8000ab4:	f7ff fca6 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x3C);
 8000ab8:	213c      	movs	r1, #60	@ 0x3c
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	f7ff fca2 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x00);
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	6878      	ldr	r0, [r7, #4]
 8000ac4:	f7ff fc9e 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x00);
 8000ac8:	2100      	movs	r1, #0
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f7ff fc9a 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x00);
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	6878      	ldr	r0, [r7, #4]
 8000ad4:	f7ff fc96 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x01);
 8000ad8:	2101      	movs	r1, #1
 8000ada:	6878      	ldr	r0, [r7, #4]
 8000adc:	f7ff fc92 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x54);
 8000ae0:	2154      	movs	r1, #84	@ 0x54
 8000ae2:	6878      	ldr	r0, [r7, #4]
 8000ae4:	f7ff fc8e 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x10);
 8000ae8:	2110      	movs	r1, #16
 8000aea:	6878      	ldr	r0, [r7, #4]
 8000aec:	f7ff fc8a 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x32);
 8000af0:	2132      	movs	r1, #50	@ 0x32
 8000af2:	6878      	ldr	r0, [r7, #4]
 8000af4:	f7ff fc86 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x98);
 8000af8:	2198      	movs	r1, #152	@ 0x98
 8000afa:	6878      	ldr	r0, [r7, #4]
 8000afc:	f7ff fc82 	bl	8000404 <GC9A01_write_byte>

	write_command(config,0x74);
 8000b00:	2174      	movs	r1, #116	@ 0x74
 8000b02:	6878      	ldr	r0, [r7, #4]
 8000b04:	f7ff fc3a 	bl	800037c <write_command>
	GC9A01_write_byte(config,0x10);
 8000b08:	2110      	movs	r1, #16
 8000b0a:	6878      	ldr	r0, [r7, #4]
 8000b0c:	f7ff fc7a 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x85);
 8000b10:	2185      	movs	r1, #133	@ 0x85
 8000b12:	6878      	ldr	r0, [r7, #4]
 8000b14:	f7ff fc76 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x80);
 8000b18:	2180      	movs	r1, #128	@ 0x80
 8000b1a:	6878      	ldr	r0, [r7, #4]
 8000b1c:	f7ff fc72 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x00);
 8000b20:	2100      	movs	r1, #0
 8000b22:	6878      	ldr	r0, [r7, #4]
 8000b24:	f7ff fc6e 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x00);
 8000b28:	2100      	movs	r1, #0
 8000b2a:	6878      	ldr	r0, [r7, #4]
 8000b2c:	f7ff fc6a 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x4E);
 8000b30:	214e      	movs	r1, #78	@ 0x4e
 8000b32:	6878      	ldr	r0, [r7, #4]
 8000b34:	f7ff fc66 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x00);
 8000b38:	2100      	movs	r1, #0
 8000b3a:	6878      	ldr	r0, [r7, #4]
 8000b3c:	f7ff fc62 	bl	8000404 <GC9A01_write_byte>

	write_command(config,0x98);
 8000b40:	2198      	movs	r1, #152	@ 0x98
 8000b42:	6878      	ldr	r0, [r7, #4]
 8000b44:	f7ff fc1a 	bl	800037c <write_command>
	GC9A01_write_byte(config,0x3e);
 8000b48:	213e      	movs	r1, #62	@ 0x3e
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	f7ff fc5a 	bl	8000404 <GC9A01_write_byte>
	GC9A01_write_byte(config,0x07);
 8000b50:	2107      	movs	r1, #7
 8000b52:	6878      	ldr	r0, [r7, #4]
 8000b54:	f7ff fc56 	bl	8000404 <GC9A01_write_byte>

	write_command(config,0x35);
 8000b58:	2135      	movs	r1, #53	@ 0x35
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	f7ff fc0e 	bl	800037c <write_command>
	write_command(config,0x21);
 8000b60:	2121      	movs	r1, #33	@ 0x21
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	f7ff fc0a 	bl	800037c <write_command>

	write_command(config,0x11);
 8000b68:	2111      	movs	r1, #17
 8000b6a:	6878      	ldr	r0, [r7, #4]
 8000b6c:	f7ff fc06 	bl	800037c <write_command>
    Delay_milli(120);
 8000b70:	ed1f 0aad 	vldr	s0, [pc, #-692]	@ 80008c0 <GC9A01_Init+0x3c4>
 8000b74:	f7ff fb56 	bl	8000224 <Delay_milli>
    write_command(config,0x29);
 8000b78:	2129      	movs	r1, #41	@ 0x29
 8000b7a:	6878      	ldr	r0, [r7, #4]
 8000b7c:	f7ff fbfe 	bl	800037c <write_command>
    Delay_milli(20);
 8000b80:	eeb3 0a04 	vmov.f32	s0, #52	@ 0x41a00000  20.0
 8000b84:	f7ff fb4e 	bl	8000224 <Delay_milli>




}
 8000b88:	bf00      	nop
 8000b8a:	370c      	adds	r7, #12
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000b90 <GC9A01_SetAddressWindow>:

/** Set an address window (inclusive X0..X1, Y0..Y1) ready for RAM write */
void GC9A01_SetAddressWindow(GC9A01_Config *config,
		uint16_t x0, uint16_t y0,
		uint16_t x1, uint16_t y1)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	4608      	mov	r0, r1
 8000b9a:	4611      	mov	r1, r2
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	817b      	strh	r3, [r7, #10]
 8000ba2:	460b      	mov	r3, r1
 8000ba4:	813b      	strh	r3, [r7, #8]
 8000ba6:	4613      	mov	r3, r2
 8000ba8:	80fb      	strh	r3, [r7, #6]
	uint8_t buf[4];
	write_command(config, 0x2A);           // CASET
 8000baa:	212a      	movs	r1, #42	@ 0x2a
 8000bac:	68f8      	ldr	r0, [r7, #12]
 8000bae:	f7ff fbe5 	bl	800037c <write_command>
	buf[0] = x0 >> 8; buf[1] = x0 & 0xFF;
 8000bb2:	897b      	ldrh	r3, [r7, #10]
 8000bb4:	0a1b      	lsrs	r3, r3, #8
 8000bb6:	b29b      	uxth	r3, r3
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	753b      	strb	r3, [r7, #20]
 8000bbc:	897b      	ldrh	r3, [r7, #10]
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	757b      	strb	r3, [r7, #21]
	buf[2] = x1 >> 8; buf[3] = x1 & 0xFF;
 8000bc2:	88fb      	ldrh	r3, [r7, #6]
 8000bc4:	0a1b      	lsrs	r3, r3, #8
 8000bc6:	b29b      	uxth	r3, r3
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	75bb      	strb	r3, [r7, #22]
 8000bcc:	88fb      	ldrh	r3, [r7, #6]
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	75fb      	strb	r3, [r7, #23]
	GC9A01_Write_Data(config, buf, 4);
 8000bd2:	f107 0314 	add.w	r3, r7, #20
 8000bd6:	2204      	movs	r2, #4
 8000bd8:	4619      	mov	r1, r3
 8000bda:	68f8      	ldr	r0, [r7, #12]
 8000bdc:	f7ff fc22 	bl	8000424 <GC9A01_Write_Data>

	write_command(config, 0x2B);           // RASET
 8000be0:	212b      	movs	r1, #43	@ 0x2b
 8000be2:	68f8      	ldr	r0, [r7, #12]
 8000be4:	f7ff fbca 	bl	800037c <write_command>
	buf[0] = y0 >> 8; buf[1] = y0 & 0xFF;
 8000be8:	893b      	ldrh	r3, [r7, #8]
 8000bea:	0a1b      	lsrs	r3, r3, #8
 8000bec:	b29b      	uxth	r3, r3
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	753b      	strb	r3, [r7, #20]
 8000bf2:	893b      	ldrh	r3, [r7, #8]
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	757b      	strb	r3, [r7, #21]
	buf[2] = y1 >> 8; buf[3] = y1 & 0xFF;
 8000bf8:	8c3b      	ldrh	r3, [r7, #32]
 8000bfa:	0a1b      	lsrs	r3, r3, #8
 8000bfc:	b29b      	uxth	r3, r3
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	75bb      	strb	r3, [r7, #22]
 8000c02:	8c3b      	ldrh	r3, [r7, #32]
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	75fb      	strb	r3, [r7, #23]
	GC9A01_Write_Data(config, buf, 4);
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	2204      	movs	r2, #4
 8000c0e:	4619      	mov	r1, r3
 8000c10:	68f8      	ldr	r0, [r7, #12]
 8000c12:	f7ff fc07 	bl	8000424 <GC9A01_Write_Data>

	write_command(config, 0x2C);           // RAMWR
 8000c16:	212c      	movs	r1, #44	@ 0x2c
 8000c18:	68f8      	ldr	r0, [r7, #12]
 8000c1a:	f7ff fbaf 	bl	800037c <write_command>
}
 8000c1e:	bf00      	nop
 8000c20:	3718      	adds	r7, #24
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <GC9A01_PushColor>:

/** Push one RGB565 pixel.  _Must_ be preceded by SetAddressWindow */
void GC9A01_PushColor(GC9A01_Config *config, uint16_t rgb565)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b084      	sub	sp, #16
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
 8000c2e:	460b      	mov	r3, r1
 8000c30:	807b      	strh	r3, [r7, #2]

	uint8_t hi = rgb565 >> 8, lo = rgb565 & 0xFF;
 8000c32:	887b      	ldrh	r3, [r7, #2]
 8000c34:	0a1b      	lsrs	r3, r3, #8
 8000c36:	b29b      	uxth	r3, r3
 8000c38:	73fb      	strb	r3, [r7, #15]
 8000c3a:	887b      	ldrh	r3, [r7, #2]
 8000c3c:	73bb      	strb	r3, [r7, #14]
	uint8_t buf[2] = {hi, lo};
 8000c3e:	7bfb      	ldrb	r3, [r7, #15]
 8000c40:	733b      	strb	r3, [r7, #12]
 8000c42:	7bbb      	ldrb	r3, [r7, #14]
 8000c44:	737b      	strb	r3, [r7, #13]
	GC9A01_Write_Data(config, buf, 2);
 8000c46:	f107 030c 	add.w	r3, r7, #12
 8000c4a:	2202      	movs	r2, #2
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f7ff fbe8 	bl	8000424 <GC9A01_Write_Data>
}
 8000c54:	bf00      	nop
 8000c56:	3710      	adds	r7, #16
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <GC9A01_DrawPixel>:

/** Convenience helpers */
void GC9A01_DrawPixel(GC9A01_Config *config, uint16_t x, uint16_t y, uint16_t rgb)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af02      	add	r7, sp, #8
 8000c62:	60f8      	str	r0, [r7, #12]
 8000c64:	4608      	mov	r0, r1
 8000c66:	4611      	mov	r1, r2
 8000c68:	461a      	mov	r2, r3
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	817b      	strh	r3, [r7, #10]
 8000c6e:	460b      	mov	r3, r1
 8000c70:	813b      	strh	r3, [r7, #8]
 8000c72:	4613      	mov	r3, r2
 8000c74:	80fb      	strh	r3, [r7, #6]
	if(x >= GC9A01_WIDTH || y >= GC9A01_HEIGHT) return;
 8000c76:	897b      	ldrh	r3, [r7, #10]
 8000c78:	2bef      	cmp	r3, #239	@ 0xef
 8000c7a:	d811      	bhi.n	8000ca0 <GC9A01_DrawPixel+0x44>
 8000c7c:	893b      	ldrh	r3, [r7, #8]
 8000c7e:	2bef      	cmp	r3, #239	@ 0xef
 8000c80:	d80e      	bhi.n	8000ca0 <GC9A01_DrawPixel+0x44>
	GC9A01_SetAddressWindow(config, x, y, x, y);
 8000c82:	8978      	ldrh	r0, [r7, #10]
 8000c84:	893a      	ldrh	r2, [r7, #8]
 8000c86:	8979      	ldrh	r1, [r7, #10]
 8000c88:	893b      	ldrh	r3, [r7, #8]
 8000c8a:	9300      	str	r3, [sp, #0]
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	68f8      	ldr	r0, [r7, #12]
 8000c90:	f7ff ff7e 	bl	8000b90 <GC9A01_SetAddressWindow>
	GC9A01_PushColor(config, rgb);
 8000c94:	88fb      	ldrh	r3, [r7, #6]
 8000c96:	4619      	mov	r1, r3
 8000c98:	68f8      	ldr	r0, [r7, #12]
 8000c9a:	f7ff ffc4 	bl	8000c26 <GC9A01_PushColor>
 8000c9e:	e000      	b.n	8000ca2 <GC9A01_DrawPixel+0x46>
	if(x >= GC9A01_WIDTH || y >= GC9A01_HEIGHT) return;
 8000ca0:	bf00      	nop
}
 8000ca2:	3710      	adds	r7, #16
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <GC9A01_Fill>:

void GC9A01_Fill(GC9A01_Config *config, uint16_t rgb)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af02      	add	r7, sp, #8
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	460b      	mov	r3, r1
 8000cb2:	807b      	strh	r3, [r7, #2]
	GC9A01_SetAddressWindow(config, 0, 0, GC9A01_WIDTH-1, GC9A01_HEIGHT-1);
 8000cb4:	23ef      	movs	r3, #239	@ 0xef
 8000cb6:	9300      	str	r3, [sp, #0]
 8000cb8:	23ef      	movs	r3, #239	@ 0xef
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	f7ff ff66 	bl	8000b90 <GC9A01_SetAddressWindow>
	GC9A01_Drite_Data16_Repeat(config, rgb, (uint32_t)GC9A01_WIDTH * GC9A01_HEIGHT);
 8000cc4:	887b      	ldrh	r3, [r7, #2]
 8000cc6:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8000cca:	4619      	mov	r1, r3
 8000ccc:	6878      	ldr	r0, [r7, #4]
 8000cce:	f7ff fbcb 	bl	8000468 <GC9A01_Drite_Data16_Repeat>
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
	...

08000cdc <GC9A01_DrawArcStroke>:

 void GC9A01_DrawArcStroke(GC9A01_Config *cfg,
	                          int16_t xc, int16_t yc, int16_t r,
	                          uint16_t start_deg, uint16_t end_deg,
	                          int16_t thickness, uint16_t color)
	 {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08a      	sub	sp, #40	@ 0x28
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	60f8      	str	r0, [r7, #12]
 8000ce4:	4608      	mov	r0, r1
 8000ce6:	4611      	mov	r1, r2
 8000ce8:	461a      	mov	r2, r3
 8000cea:	4603      	mov	r3, r0
 8000cec:	817b      	strh	r3, [r7, #10]
 8000cee:	460b      	mov	r3, r1
 8000cf0:	813b      	strh	r3, [r7, #8]
 8000cf2:	4613      	mov	r3, r2
 8000cf4:	80fb      	strh	r3, [r7, #6]
	     if (r <= 0 || thickness <= 0) return;
 8000cf6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	f340 80ac 	ble.w	8000e58 <GC9A01_DrawArcStroke+0x17c>
 8000d00:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	f340 80a7 	ble.w	8000e58 <GC9A01_DrawArcStroke+0x17c>
	     if (thickness > r) thickness = r;
 8000d0a:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	@ 0x38
 8000d0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d12:	429a      	cmp	r2, r3
 8000d14:	dd01      	ble.n	8000d1a <GC9A01_DrawArcStroke+0x3e>
 8000d16:	88fb      	ldrh	r3, [r7, #6]
 8000d18:	873b      	strh	r3, [r7, #56]	@ 0x38

	     float step = 0.5f;                               /* 0.5° resolution */
 8000d1a:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 8000d1e:	61fb      	str	r3, [r7, #28]
	     for (float a = start_deg; ; a += step)
 8000d20:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8000d22:	ee07 3a90 	vmov	s15, r3
 8000d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d2a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	     {
	         if (a >= 360.0f) a -= 360.0f;
 8000d2e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000d32:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8000e64 <GC9A01_DrawArcStroke+0x188>
 8000d36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d3e:	db07      	blt.n	8000d50 <GC9A01_DrawArcStroke+0x74>
 8000d40:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000d44:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8000e64 <GC9A01_DrawArcStroke+0x188>
 8000d48:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000d4c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	         if (((int)(a*2+0.5f)) == (int)(end_deg*2+0.5f)) break; /* stop at end */
 8000d50:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000d54:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000d58:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000d5c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000d60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d64:	ee17 2a90 	vmov	r2, s15
 8000d68:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	ee07 3a90 	vmov	s15, r3
 8000d70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d74:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000d78:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000d7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d80:	ee17 3a90 	vmov	r3, s15
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d069      	beq.n	8000e5c <GC9A01_DrawArcStroke+0x180>

	         float rad = a * (float)M_PI / 180.0f;
 8000d88:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000d8c:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8000e68 <GC9A01_DrawArcStroke+0x18c>
 8000d90:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000d94:	eddf 6a35 	vldr	s13, [pc, #212]	@ 8000e6c <GC9A01_DrawArcStroke+0x190>
 8000d98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d9c:	edc7 7a06 	vstr	s15, [r7, #24]
	         float s = sinf(rad), c = cosf(rad);
 8000da0:	ed97 0a06 	vldr	s0, [r7, #24]
 8000da4:	f004 f8e8 	bl	8004f78 <sinf>
 8000da8:	ed87 0a05 	vstr	s0, [r7, #20]
 8000dac:	ed97 0a06 	vldr	s0, [r7, #24]
 8000db0:	f004 f896 	bl	8004ee0 <cosf>
 8000db4:	ed87 0a04 	vstr	s0, [r7, #16]

	         for (int16_t t = 0; t < thickness; ++t)
 8000db8:	2300      	movs	r3, #0
 8000dba:	847b      	strh	r3, [r7, #34]	@ 0x22
 8000dbc:	e03d      	b.n	8000e3a <GC9A01_DrawArcStroke+0x15e>
	             GC9A01_DrawPixelSafe(cfg,
	                 xc + (int16_t)((r - t) * c + 0.5f),
 8000dbe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000dc2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8000dc6:	1ad3      	subs	r3, r2, r3
 8000dc8:	ee07 3a90 	vmov	s15, r3
 8000dcc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000dd0:	edd7 7a04 	vldr	s15, [r7, #16]
 8000dd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dd8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000ddc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000de0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000de4:	ee17 3a90 	vmov	r3, s15
 8000de8:	b21b      	sxth	r3, r3
 8000dea:	b29a      	uxth	r2, r3
 8000dec:	897b      	ldrh	r3, [r7, #10]
 8000dee:	4413      	add	r3, r2
 8000df0:	b29b      	uxth	r3, r3
	             GC9A01_DrawPixelSafe(cfg,
 8000df2:	b219      	sxth	r1, r3
	                 yc + (int16_t)((r - t) * s + 0.5f),
 8000df4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000df8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8000dfc:	1ad3      	subs	r3, r2, r3
 8000dfe:	ee07 3a90 	vmov	s15, r3
 8000e02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e06:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e0e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000e12:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000e16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e1a:	ee17 3a90 	vmov	r3, s15
 8000e1e:	b21b      	sxth	r3, r3
 8000e20:	b29a      	uxth	r2, r3
 8000e22:	893b      	ldrh	r3, [r7, #8]
 8000e24:	4413      	add	r3, r2
 8000e26:	b29b      	uxth	r3, r3
	             GC9A01_DrawPixelSafe(cfg,
 8000e28:	b21a      	sxth	r2, r3
 8000e2a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8000e2c:	68f8      	ldr	r0, [r7, #12]
 8000e2e:	f7ff fb47 	bl	80004c0 <GC9A01_DrawPixelSafe>
	         for (int16_t t = 0; t < thickness; ++t)
 8000e32:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000e34:	3301      	adds	r3, #1
 8000e36:	b29b      	uxth	r3, r3
 8000e38:	847b      	strh	r3, [r7, #34]	@ 0x22
 8000e3a:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 8000e3e:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8000e42:	429a      	cmp	r2, r3
 8000e44:	dbbb      	blt.n	8000dbe <GC9A01_DrawArcStroke+0xe2>
	     for (float a = start_deg; ; a += step)
 8000e46:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8000e4a:	edd7 7a07 	vldr	s15, [r7, #28]
 8000e4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e52:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	     {
 8000e56:	e76a      	b.n	8000d2e <GC9A01_DrawArcStroke+0x52>
	     if (r <= 0 || thickness <= 0) return;
 8000e58:	bf00      	nop
 8000e5a:	e000      	b.n	8000e5e <GC9A01_DrawArcStroke+0x182>
	         if (((int)(a*2+0.5f)) == (int)(end_deg*2+0.5f)) break; /* stop at end */
 8000e5c:	bf00      	nop
	                 color);
	     }
	 }
 8000e5e:	3728      	adds	r7, #40	@ 0x28
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	43b40000 	.word	0x43b40000
 8000e68:	40490fdb 	.word	0x40490fdb
 8000e6c:	43340000 	.word	0x43340000

08000e70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	db0b      	blt.n	8000e9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e82:	79fb      	ldrb	r3, [r7, #7]
 8000e84:	f003 021f 	and.w	r2, r3, #31
 8000e88:	4907      	ldr	r1, [pc, #28]	@ (8000ea8 <__NVIC_EnableIRQ+0x38>)
 8000e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8e:	095b      	lsrs	r3, r3, #5
 8000e90:	2001      	movs	r0, #1
 8000e92:	fa00 f202 	lsl.w	r2, r0, r2
 8000e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e9a:	bf00      	nop
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	e000e100 	.word	0xe000e100

08000eac <DMA1_Stream0_IRQHandler>:
volatile uint32_t DMA_LISR = 0;
volatile uint32_t DMA_HISR = 0;


void DMA1_Stream0_IRQHandler(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
	DMA_LISR = DMA1 -> LISR;
 8000eb0:	4b60      	ldr	r3, [pc, #384]	@ (8001034 <DMA1_Stream0_IRQHandler+0x188>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a60      	ldr	r2, [pc, #384]	@ (8001038 <DMA1_Stream0_IRQHandler+0x18c>)
 8000eb6:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF0)
 8000eb8:	4b5f      	ldr	r3, [pc, #380]	@ (8001038 <DMA1_Stream0_IRQHandler+0x18c>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f003 0301 	and.w	r3, r3, #1
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d015      	beq.n	8000ef0 <DMA1_Stream0_IRQHandler+0x44>
	{

		if(__DMA1_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 8000ec4:	4b5d      	ldr	r3, [pc, #372]	@ (800103c <DMA1_Stream0_IRQHandler+0x190>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	69db      	ldr	r3, [r3, #28]
 8000eca:	2280      	movs	r2, #128	@ 0x80
 8000ecc:	4013      	ands	r3, r2
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d00e      	beq.n	8000ef0 <DMA1_Stream0_IRQHandler+0x44>
		{
			if (__DMA1_Stream0_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8000ed2:	4b5a      	ldr	r3, [pc, #360]	@ (800103c <DMA1_Stream0_IRQHandler+0x190>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d009      	beq.n	8000ef0 <DMA1_Stream0_IRQHandler+0x44>
			{
				__DMA1_Stream0_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8000edc:	4b57      	ldr	r3, [pc, #348]	@ (800103c <DMA1_Stream0_IRQHandler+0x190>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ee2:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CFEIF0;
 8000ee4:	4b53      	ldr	r3, [pc, #332]	@ (8001034 <DMA1_Stream0_IRQHandler+0x188>)
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	4a52      	ldr	r2, [pc, #328]	@ (8001034 <DMA1_Stream0_IRQHandler+0x188>)
 8000eea:	f043 0301 	orr.w	r3, r3, #1
 8000eee:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_DMEIF0)
 8000ef0:	4b51      	ldr	r3, [pc, #324]	@ (8001038 <DMA1_Stream0_IRQHandler+0x18c>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f003 0304 	and.w	r3, r3, #4
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d015      	beq.n	8000f28 <DMA1_Stream0_IRQHandler+0x7c>
	{
		if(__DMA1_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 8000efc:	4b4f      	ldr	r3, [pc, #316]	@ (800103c <DMA1_Stream0_IRQHandler+0x190>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	69db      	ldr	r3, [r3, #28]
 8000f02:	2202      	movs	r2, #2
 8000f04:	4013      	ands	r3, r2
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d00e      	beq.n	8000f28 <DMA1_Stream0_IRQHandler+0x7c>
		{
			if (__DMA1_Stream0_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8000f0a:	4b4c      	ldr	r3, [pc, #304]	@ (800103c <DMA1_Stream0_IRQHandler+0x190>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d009      	beq.n	8000f28 <DMA1_Stream0_IRQHandler+0x7c>
			{
				__DMA1_Stream0_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8000f14:	4b49      	ldr	r3, [pc, #292]	@ (800103c <DMA1_Stream0_IRQHandler+0x190>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f1a:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF0;
 8000f1c:	4b45      	ldr	r3, [pc, #276]	@ (8001034 <DMA1_Stream0_IRQHandler+0x188>)
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	4a44      	ldr	r2, [pc, #272]	@ (8001034 <DMA1_Stream0_IRQHandler+0x188>)
 8000f22:	f043 0304 	orr.w	r3, r3, #4
 8000f26:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TEIF0)
 8000f28:	4b43      	ldr	r3, [pc, #268]	@ (8001038 <DMA1_Stream0_IRQHandler+0x18c>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f003 0308 	and.w	r3, r3, #8
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d015      	beq.n	8000f60 <DMA1_Stream0_IRQHandler+0xb4>
	{
		if(__DMA1_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 8000f34:	4b41      	ldr	r3, [pc, #260]	@ (800103c <DMA1_Stream0_IRQHandler+0x190>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	69db      	ldr	r3, [r3, #28]
 8000f3a:	2204      	movs	r2, #4
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d00e      	beq.n	8000f60 <DMA1_Stream0_IRQHandler+0xb4>
		{
			if (__DMA1_Stream0_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8000f42:	4b3e      	ldr	r3, [pc, #248]	@ (800103c <DMA1_Stream0_IRQHandler+0x190>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d009      	beq.n	8000f60 <DMA1_Stream0_IRQHandler+0xb4>
			{
				__DMA1_Stream0_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8000f4c:	4b3b      	ldr	r3, [pc, #236]	@ (800103c <DMA1_Stream0_IRQHandler+0x190>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f52:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTEIF0;
 8000f54:	4b37      	ldr	r3, [pc, #220]	@ (8001034 <DMA1_Stream0_IRQHandler+0x188>)
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	4a36      	ldr	r2, [pc, #216]	@ (8001034 <DMA1_Stream0_IRQHandler+0x188>)
 8000f5a:	f043 0308 	orr.w	r3, r3, #8
 8000f5e:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF0)
 8000f60:	4b35      	ldr	r3, [pc, #212]	@ (8001038 <DMA1_Stream0_IRQHandler+0x18c>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f003 0310 	and.w	r3, r3, #16
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d02d      	beq.n	8000fc8 <DMA1_Stream0_IRQHandler+0x11c>
	{
		if(__DMA1_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 8000f6c:	4b33      	ldr	r3, [pc, #204]	@ (800103c <DMA1_Stream0_IRQHandler+0x190>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	69db      	ldr	r3, [r3, #28]
 8000f72:	2208      	movs	r2, #8
 8000f74:	4013      	ands	r3, r2
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d026      	beq.n	8000fc8 <DMA1_Stream0_IRQHandler+0x11c>
		{
			if (__DMA1_Stream0_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8000f7a:	4b30      	ldr	r3, [pc, #192]	@ (800103c <DMA1_Stream0_IRQHandler+0x190>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d021      	beq.n	8000fc8 <DMA1_Stream0_IRQHandler+0x11c>
			{
				__DMA1_Stream0_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000f84:	4b2d      	ldr	r3, [pc, #180]	@ (800103c <DMA1_Stream0_IRQHandler+0x190>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f8a:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CHTIF0;
 8000f8c:	4b29      	ldr	r3, [pc, #164]	@ (8001034 <DMA1_Stream0_IRQHandler+0x188>)
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	4a28      	ldr	r2, [pc, #160]	@ (8001034 <DMA1_Stream0_IRQHandler+0x188>)
 8000f92:	f043 0310 	orr.w	r3, r3, #16
 8000f96:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream0_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000f98:	4b28      	ldr	r3, [pc, #160]	@ (800103c <DMA1_Stream0_IRQHandler+0x190>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f9e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d110      	bne.n	8000fc8 <DMA1_Stream0_IRQHandler+0x11c>
				{
					if((__DMA1_Stream0_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000fa6:	4b25      	ldr	r3, [pc, #148]	@ (800103c <DMA1_Stream0_IRQHandler+0x190>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d004      	beq.n	8000fc0 <DMA1_Stream0_IRQHandler+0x114>
					{
						__DMA1_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000fb6:	4b21      	ldr	r3, [pc, #132]	@ (800103c <DMA1_Stream0_IRQHandler+0x190>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000fbc:	4798      	blx	r3
 8000fbe:	e003      	b.n	8000fc8 <DMA1_Stream0_IRQHandler+0x11c>
					}
					else
					{
						__DMA1_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000fc0:	4b1e      	ldr	r3, [pc, #120]	@ (800103c <DMA1_Stream0_IRQHandler+0x190>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000fc6:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TCIF0)
 8000fc8:	4b1b      	ldr	r3, [pc, #108]	@ (8001038 <DMA1_Stream0_IRQHandler+0x18c>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f003 0320 	and.w	r3, r3, #32
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d02d      	beq.n	8001030 <DMA1_Stream0_IRQHandler+0x184>
	{
		if(__DMA1_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 8000fd4:	4b19      	ldr	r3, [pc, #100]	@ (800103c <DMA1_Stream0_IRQHandler+0x190>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	69db      	ldr	r3, [r3, #28]
 8000fda:	2210      	movs	r2, #16
 8000fdc:	4013      	ands	r3, r2
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d026      	beq.n	8001030 <DMA1_Stream0_IRQHandler+0x184>
		{
			if (__DMA1_Stream0_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8000fe2:	4b16      	ldr	r3, [pc, #88]	@ (800103c <DMA1_Stream0_IRQHandler+0x190>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d021      	beq.n	8001030 <DMA1_Stream0_IRQHandler+0x184>
			{
				__DMA1_Stream0_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000fec:	4b13      	ldr	r3, [pc, #76]	@ (800103c <DMA1_Stream0_IRQHandler+0x190>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ff2:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTCIF0;
 8000ff4:	4b0f      	ldr	r3, [pc, #60]	@ (8001034 <DMA1_Stream0_IRQHandler+0x188>)
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	4a0e      	ldr	r2, [pc, #56]	@ (8001034 <DMA1_Stream0_IRQHandler+0x188>)
 8000ffa:	f043 0320 	orr.w	r3, r3, #32
 8000ffe:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream0_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001000:	4b0e      	ldr	r3, [pc, #56]	@ (800103c <DMA1_Stream0_IRQHandler+0x190>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001006:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800100a:	4293      	cmp	r3, r2
 800100c:	d110      	bne.n	8001030 <DMA1_Stream0_IRQHandler+0x184>
				{
					if((__DMA1_Stream0_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800100e:	4b0b      	ldr	r3, [pc, #44]	@ (800103c <DMA1_Stream0_IRQHandler+0x190>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800101a:	2b00      	cmp	r3, #0
 800101c:	d004      	beq.n	8001028 <DMA1_Stream0_IRQHandler+0x17c>
					{
						__DMA1_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800101e:	4b07      	ldr	r3, [pc, #28]	@ (800103c <DMA1_Stream0_IRQHandler+0x190>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001024:	4798      	blx	r3
				}
			}
		}

	}
}
 8001026:	e003      	b.n	8001030 <DMA1_Stream0_IRQHandler+0x184>
						__DMA1_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001028:	4b04      	ldr	r3, [pc, #16]	@ (800103c <DMA1_Stream0_IRQHandler+0x190>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800102e:	4798      	blx	r3
}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40026000 	.word	0x40026000
 8001038:	20000060 	.word	0x20000060
 800103c:	20000020 	.word	0x20000020

08001040 <DMA1_Stream1_IRQHandler>:

void DMA1_Stream1_IRQHandler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
	DMA_LISR = DMA1 -> LISR;
 8001044:	4b60      	ldr	r3, [pc, #384]	@ (80011c8 <DMA1_Stream1_IRQHandler+0x188>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a60      	ldr	r2, [pc, #384]	@ (80011cc <DMA1_Stream1_IRQHandler+0x18c>)
 800104a:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF1)
 800104c:	4b5f      	ldr	r3, [pc, #380]	@ (80011cc <DMA1_Stream1_IRQHandler+0x18c>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001054:	2b00      	cmp	r3, #0
 8001056:	d015      	beq.n	8001084 <DMA1_Stream1_IRQHandler+0x44>
	{
		if(__DMA1_Stream1_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 8001058:	4b5d      	ldr	r3, [pc, #372]	@ (80011d0 <DMA1_Stream1_IRQHandler+0x190>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	69db      	ldr	r3, [r3, #28]
 800105e:	2280      	movs	r2, #128	@ 0x80
 8001060:	4013      	ands	r3, r2
 8001062:	2b00      	cmp	r3, #0
 8001064:	d00e      	beq.n	8001084 <DMA1_Stream1_IRQHandler+0x44>
		{
			if (__DMA1_Stream1_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001066:	4b5a      	ldr	r3, [pc, #360]	@ (80011d0 <DMA1_Stream1_IRQHandler+0x190>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800106c:	2b00      	cmp	r3, #0
 800106e:	d009      	beq.n	8001084 <DMA1_Stream1_IRQHandler+0x44>
			{
				__DMA1_Stream1_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8001070:	4b57      	ldr	r3, [pc, #348]	@ (80011d0 <DMA1_Stream1_IRQHandler+0x190>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001076:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CFEIF1;
 8001078:	4b53      	ldr	r3, [pc, #332]	@ (80011c8 <DMA1_Stream1_IRQHandler+0x188>)
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	4a52      	ldr	r2, [pc, #328]	@ (80011c8 <DMA1_Stream1_IRQHandler+0x188>)
 800107e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001082:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_DMEIF1)
 8001084:	4b51      	ldr	r3, [pc, #324]	@ (80011cc <DMA1_Stream1_IRQHandler+0x18c>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800108c:	2b00      	cmp	r3, #0
 800108e:	d015      	beq.n	80010bc <DMA1_Stream1_IRQHandler+0x7c>
	{
		if(__DMA1_Stream1_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 8001090:	4b4f      	ldr	r3, [pc, #316]	@ (80011d0 <DMA1_Stream1_IRQHandler+0x190>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	69db      	ldr	r3, [r3, #28]
 8001096:	2202      	movs	r2, #2
 8001098:	4013      	ands	r3, r2
 800109a:	2b00      	cmp	r3, #0
 800109c:	d00e      	beq.n	80010bc <DMA1_Stream1_IRQHandler+0x7c>
		{
			if (__DMA1_Stream1_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 800109e:	4b4c      	ldr	r3, [pc, #304]	@ (80011d0 <DMA1_Stream1_IRQHandler+0x190>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d009      	beq.n	80010bc <DMA1_Stream1_IRQHandler+0x7c>
			{
				__DMA1_Stream1_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 80010a8:	4b49      	ldr	r3, [pc, #292]	@ (80011d0 <DMA1_Stream1_IRQHandler+0x190>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ae:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF1;
 80010b0:	4b45      	ldr	r3, [pc, #276]	@ (80011c8 <DMA1_Stream1_IRQHandler+0x188>)
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	4a44      	ldr	r2, [pc, #272]	@ (80011c8 <DMA1_Stream1_IRQHandler+0x188>)
 80010b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010ba:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TEIF1)
 80010bc:	4b43      	ldr	r3, [pc, #268]	@ (80011cc <DMA1_Stream1_IRQHandler+0x18c>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d015      	beq.n	80010f4 <DMA1_Stream1_IRQHandler+0xb4>
	{
		if(__DMA1_Stream1_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 80010c8:	4b41      	ldr	r3, [pc, #260]	@ (80011d0 <DMA1_Stream1_IRQHandler+0x190>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	69db      	ldr	r3, [r3, #28]
 80010ce:	2204      	movs	r2, #4
 80010d0:	4013      	ands	r3, r2
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d00e      	beq.n	80010f4 <DMA1_Stream1_IRQHandler+0xb4>
		{
			if (__DMA1_Stream1_Config__ -> ISR_Routines.Transfer_Error_ISR)
 80010d6:	4b3e      	ldr	r3, [pc, #248]	@ (80011d0 <DMA1_Stream1_IRQHandler+0x190>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d009      	beq.n	80010f4 <DMA1_Stream1_IRQHandler+0xb4>
			{
				__DMA1_Stream1_Config__ ->ISR_Routines.Transfer_Error_ISR();
 80010e0:	4b3b      	ldr	r3, [pc, #236]	@ (80011d0 <DMA1_Stream1_IRQHandler+0x190>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010e6:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTEIF1;
 80010e8:	4b37      	ldr	r3, [pc, #220]	@ (80011c8 <DMA1_Stream1_IRQHandler+0x188>)
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	4a36      	ldr	r2, [pc, #216]	@ (80011c8 <DMA1_Stream1_IRQHandler+0x188>)
 80010ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010f2:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF1)
 80010f4:	4b35      	ldr	r3, [pc, #212]	@ (80011cc <DMA1_Stream1_IRQHandler+0x18c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d02d      	beq.n	800115c <DMA1_Stream1_IRQHandler+0x11c>
	{
		if(__DMA1_Stream1_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 8001100:	4b33      	ldr	r3, [pc, #204]	@ (80011d0 <DMA1_Stream1_IRQHandler+0x190>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	69db      	ldr	r3, [r3, #28]
 8001106:	2208      	movs	r2, #8
 8001108:	4013      	ands	r3, r2
 800110a:	2b00      	cmp	r3, #0
 800110c:	d026      	beq.n	800115c <DMA1_Stream1_IRQHandler+0x11c>
		{
			if (__DMA1_Stream1_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 800110e:	4b30      	ldr	r3, [pc, #192]	@ (80011d0 <DMA1_Stream1_IRQHandler+0x190>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001114:	2b00      	cmp	r3, #0
 8001116:	d021      	beq.n	800115c <DMA1_Stream1_IRQHandler+0x11c>
			{
				__DMA1_Stream1_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001118:	4b2d      	ldr	r3, [pc, #180]	@ (80011d0 <DMA1_Stream1_IRQHandler+0x190>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800111e:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CHTIF1;
 8001120:	4b29      	ldr	r3, [pc, #164]	@ (80011c8 <DMA1_Stream1_IRQHandler+0x188>)
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	4a28      	ldr	r2, [pc, #160]	@ (80011c8 <DMA1_Stream1_IRQHandler+0x188>)
 8001126:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800112a:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream1_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800112c:	4b28      	ldr	r3, [pc, #160]	@ (80011d0 <DMA1_Stream1_IRQHandler+0x190>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001132:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001136:	4293      	cmp	r3, r2
 8001138:	d110      	bne.n	800115c <DMA1_Stream1_IRQHandler+0x11c>
				{
					if((__DMA1_Stream1_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800113a:	4b25      	ldr	r3, [pc, #148]	@ (80011d0 <DMA1_Stream1_IRQHandler+0x190>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d004      	beq.n	8001154 <DMA1_Stream1_IRQHandler+0x114>
					{
						__DMA1_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800114a:	4b21      	ldr	r3, [pc, #132]	@ (80011d0 <DMA1_Stream1_IRQHandler+0x190>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001150:	4798      	blx	r3
 8001152:	e003      	b.n	800115c <DMA1_Stream1_IRQHandler+0x11c>
					}
					else
					{
						__DMA1_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001154:	4b1e      	ldr	r3, [pc, #120]	@ (80011d0 <DMA1_Stream1_IRQHandler+0x190>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800115a:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TCIF1)
 800115c:	4b1b      	ldr	r3, [pc, #108]	@ (80011cc <DMA1_Stream1_IRQHandler+0x18c>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001164:	2b00      	cmp	r3, #0
 8001166:	d02d      	beq.n	80011c4 <DMA1_Stream1_IRQHandler+0x184>
	{
		if(__DMA1_Stream1_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 8001168:	4b19      	ldr	r3, [pc, #100]	@ (80011d0 <DMA1_Stream1_IRQHandler+0x190>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	69db      	ldr	r3, [r3, #28]
 800116e:	2210      	movs	r2, #16
 8001170:	4013      	ands	r3, r2
 8001172:	2b00      	cmp	r3, #0
 8001174:	d026      	beq.n	80011c4 <DMA1_Stream1_IRQHandler+0x184>
		{
			if (__DMA1_Stream1_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001176:	4b16      	ldr	r3, [pc, #88]	@ (80011d0 <DMA1_Stream1_IRQHandler+0x190>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800117c:	2b00      	cmp	r3, #0
 800117e:	d021      	beq.n	80011c4 <DMA1_Stream1_IRQHandler+0x184>
			{
				__DMA1_Stream1_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001180:	4b13      	ldr	r3, [pc, #76]	@ (80011d0 <DMA1_Stream1_IRQHandler+0x190>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001186:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTCIF1;
 8001188:	4b0f      	ldr	r3, [pc, #60]	@ (80011c8 <DMA1_Stream1_IRQHandler+0x188>)
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	4a0e      	ldr	r2, [pc, #56]	@ (80011c8 <DMA1_Stream1_IRQHandler+0x188>)
 800118e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001192:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream1_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001194:	4b0e      	ldr	r3, [pc, #56]	@ (80011d0 <DMA1_Stream1_IRQHandler+0x190>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800119a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800119e:	4293      	cmp	r3, r2
 80011a0:	d110      	bne.n	80011c4 <DMA1_Stream1_IRQHandler+0x184>
				{
					if((__DMA1_Stream1_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80011a2:	4b0b      	ldr	r3, [pc, #44]	@ (80011d0 <DMA1_Stream1_IRQHandler+0x190>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d004      	beq.n	80011bc <DMA1_Stream1_IRQHandler+0x17c>
					{
						__DMA1_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80011b2:	4b07      	ldr	r3, [pc, #28]	@ (80011d0 <DMA1_Stream1_IRQHandler+0x190>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80011b8:	4798      	blx	r3
					}
				}
			}
		}
	}
}
 80011ba:	e003      	b.n	80011c4 <DMA1_Stream1_IRQHandler+0x184>
						__DMA1_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80011bc:	4b04      	ldr	r3, [pc, #16]	@ (80011d0 <DMA1_Stream1_IRQHandler+0x190>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011c2:	4798      	blx	r3
}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40026000 	.word	0x40026000
 80011cc:	20000060 	.word	0x20000060
 80011d0:	20000024 	.word	0x20000024

080011d4 <DMA1_Stream2_IRQHandler>:


void DMA1_Stream2_IRQHandler(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
	DMA_LISR = DMA1 -> LISR;
 80011d8:	4b64      	ldr	r3, [pc, #400]	@ (800136c <DMA1_Stream2_IRQHandler+0x198>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a64      	ldr	r2, [pc, #400]	@ (8001370 <DMA1_Stream2_IRQHandler+0x19c>)
 80011de:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF2)
 80011e0:	4b63      	ldr	r3, [pc, #396]	@ (8001370 <DMA1_Stream2_IRQHandler+0x19c>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d015      	beq.n	8001218 <DMA1_Stream2_IRQHandler+0x44>
	{
		if(__DMA1_Stream2_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 80011ec:	4b61      	ldr	r3, [pc, #388]	@ (8001374 <DMA1_Stream2_IRQHandler+0x1a0>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	69db      	ldr	r3, [r3, #28]
 80011f2:	2280      	movs	r2, #128	@ 0x80
 80011f4:	4013      	ands	r3, r2
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d00e      	beq.n	8001218 <DMA1_Stream2_IRQHandler+0x44>
		{
			if (__DMA1_Stream2_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80011fa:	4b5e      	ldr	r3, [pc, #376]	@ (8001374 <DMA1_Stream2_IRQHandler+0x1a0>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001200:	2b00      	cmp	r3, #0
 8001202:	d009      	beq.n	8001218 <DMA1_Stream2_IRQHandler+0x44>
			{
				__DMA1_Stream2_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8001204:	4b5b      	ldr	r3, [pc, #364]	@ (8001374 <DMA1_Stream2_IRQHandler+0x1a0>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800120a:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CFEIF2;
 800120c:	4b57      	ldr	r3, [pc, #348]	@ (800136c <DMA1_Stream2_IRQHandler+0x198>)
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	4a56      	ldr	r2, [pc, #344]	@ (800136c <DMA1_Stream2_IRQHandler+0x198>)
 8001212:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001216:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_DMEIF2)
 8001218:	4b55      	ldr	r3, [pc, #340]	@ (8001370 <DMA1_Stream2_IRQHandler+0x19c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d015      	beq.n	8001250 <DMA1_Stream2_IRQHandler+0x7c>
	{
		if(__DMA1_Stream2_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 8001224:	4b53      	ldr	r3, [pc, #332]	@ (8001374 <DMA1_Stream2_IRQHandler+0x1a0>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	69db      	ldr	r3, [r3, #28]
 800122a:	2202      	movs	r2, #2
 800122c:	4013      	ands	r3, r2
 800122e:	2b00      	cmp	r3, #0
 8001230:	d00e      	beq.n	8001250 <DMA1_Stream2_IRQHandler+0x7c>
		{
			if (__DMA1_Stream2_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8001232:	4b50      	ldr	r3, [pc, #320]	@ (8001374 <DMA1_Stream2_IRQHandler+0x1a0>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001238:	2b00      	cmp	r3, #0
 800123a:	d009      	beq.n	8001250 <DMA1_Stream2_IRQHandler+0x7c>
			{
				__DMA1_Stream2_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 800123c:	4b4d      	ldr	r3, [pc, #308]	@ (8001374 <DMA1_Stream2_IRQHandler+0x1a0>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001242:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF2;
 8001244:	4b49      	ldr	r3, [pc, #292]	@ (800136c <DMA1_Stream2_IRQHandler+0x198>)
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	4a48      	ldr	r2, [pc, #288]	@ (800136c <DMA1_Stream2_IRQHandler+0x198>)
 800124a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800124e:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TEIF2)
 8001250:	4b47      	ldr	r3, [pc, #284]	@ (8001370 <DMA1_Stream2_IRQHandler+0x19c>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001258:	2b00      	cmp	r3, #0
 800125a:	d01c      	beq.n	8001296 <DMA1_Stream2_IRQHandler+0xc2>
	{
		if(__DMA1_Stream2_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 800125c:	4b45      	ldr	r3, [pc, #276]	@ (8001374 <DMA1_Stream2_IRQHandler+0x1a0>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	69db      	ldr	r3, [r3, #28]
 8001262:	2204      	movs	r2, #4
 8001264:	4013      	ands	r3, r2
 8001266:	2b00      	cmp	r3, #0
 8001268:	d015      	beq.n	8001296 <DMA1_Stream2_IRQHandler+0xc2>
		{
			if(__DMA1_Stream2_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 800126a:	4b42      	ldr	r3, [pc, #264]	@ (8001374 <DMA1_Stream2_IRQHandler+0x1a0>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	69db      	ldr	r3, [r3, #28]
 8001270:	2204      	movs	r2, #4
 8001272:	4013      	ands	r3, r2
 8001274:	2b00      	cmp	r3, #0
 8001276:	d00e      	beq.n	8001296 <DMA1_Stream2_IRQHandler+0xc2>
			{
				if (__DMA1_Stream2_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001278:	4b3e      	ldr	r3, [pc, #248]	@ (8001374 <DMA1_Stream2_IRQHandler+0x1a0>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800127e:	2b00      	cmp	r3, #0
 8001280:	d009      	beq.n	8001296 <DMA1_Stream2_IRQHandler+0xc2>
				{
					__DMA1_Stream2_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8001282:	4b3c      	ldr	r3, [pc, #240]	@ (8001374 <DMA1_Stream2_IRQHandler+0x1a0>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001288:	4798      	blx	r3
					DMA1 -> LIFCR |= DMA_LIFCR_CTEIF2;
 800128a:	4b38      	ldr	r3, [pc, #224]	@ (800136c <DMA1_Stream2_IRQHandler+0x198>)
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	4a37      	ldr	r2, [pc, #220]	@ (800136c <DMA1_Stream2_IRQHandler+0x198>)
 8001290:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001294:	6093      	str	r3, [r2, #8]
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF2)
 8001296:	4b36      	ldr	r3, [pc, #216]	@ (8001370 <DMA1_Stream2_IRQHandler+0x19c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d02d      	beq.n	80012fe <DMA1_Stream2_IRQHandler+0x12a>
	{
		if(__DMA1_Stream2_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 80012a2:	4b34      	ldr	r3, [pc, #208]	@ (8001374 <DMA1_Stream2_IRQHandler+0x1a0>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	69db      	ldr	r3, [r3, #28]
 80012a8:	2208      	movs	r2, #8
 80012aa:	4013      	ands	r3, r2
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d026      	beq.n	80012fe <DMA1_Stream2_IRQHandler+0x12a>
		{
			if (__DMA1_Stream2_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 80012b0:	4b30      	ldr	r3, [pc, #192]	@ (8001374 <DMA1_Stream2_IRQHandler+0x1a0>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d021      	beq.n	80012fe <DMA1_Stream2_IRQHandler+0x12a>
			{
				__DMA1_Stream2_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80012ba:	4b2e      	ldr	r3, [pc, #184]	@ (8001374 <DMA1_Stream2_IRQHandler+0x1a0>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012c0:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CHTIF2;
 80012c2:	4b2a      	ldr	r3, [pc, #168]	@ (800136c <DMA1_Stream2_IRQHandler+0x198>)
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	4a29      	ldr	r2, [pc, #164]	@ (800136c <DMA1_Stream2_IRQHandler+0x198>)
 80012c8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80012cc:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream2_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80012ce:	4b29      	ldr	r3, [pc, #164]	@ (8001374 <DMA1_Stream2_IRQHandler+0x1a0>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012d4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80012d8:	4293      	cmp	r3, r2
 80012da:	d110      	bne.n	80012fe <DMA1_Stream2_IRQHandler+0x12a>
				{
					if((__DMA1_Stream2_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80012dc:	4b25      	ldr	r3, [pc, #148]	@ (8001374 <DMA1_Stream2_IRQHandler+0x1a0>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d004      	beq.n	80012f6 <DMA1_Stream2_IRQHandler+0x122>
					{
						__DMA1_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80012ec:	4b21      	ldr	r3, [pc, #132]	@ (8001374 <DMA1_Stream2_IRQHandler+0x1a0>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80012f2:	4798      	blx	r3
 80012f4:	e003      	b.n	80012fe <DMA1_Stream2_IRQHandler+0x12a>
					}
					else
					{
						__DMA1_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80012f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001374 <DMA1_Stream2_IRQHandler+0x1a0>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012fc:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TCIF2)
 80012fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001370 <DMA1_Stream2_IRQHandler+0x19c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d02d      	beq.n	8001366 <DMA1_Stream2_IRQHandler+0x192>
	{
		if(__DMA1_Stream2_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 800130a:	4b1a      	ldr	r3, [pc, #104]	@ (8001374 <DMA1_Stream2_IRQHandler+0x1a0>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	69db      	ldr	r3, [r3, #28]
 8001310:	2208      	movs	r2, #8
 8001312:	4013      	ands	r3, r2
 8001314:	2b00      	cmp	r3, #0
 8001316:	d026      	beq.n	8001366 <DMA1_Stream2_IRQHandler+0x192>
		{
			if (__DMA1_Stream2_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001318:	4b16      	ldr	r3, [pc, #88]	@ (8001374 <DMA1_Stream2_IRQHandler+0x1a0>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800131e:	2b00      	cmp	r3, #0
 8001320:	d021      	beq.n	8001366 <DMA1_Stream2_IRQHandler+0x192>
			{
				__DMA1_Stream2_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001322:	4b14      	ldr	r3, [pc, #80]	@ (8001374 <DMA1_Stream2_IRQHandler+0x1a0>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001328:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTCIF2;
 800132a:	4b10      	ldr	r3, [pc, #64]	@ (800136c <DMA1_Stream2_IRQHandler+0x198>)
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	4a0f      	ldr	r2, [pc, #60]	@ (800136c <DMA1_Stream2_IRQHandler+0x198>)
 8001330:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001334:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream2_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001336:	4b0f      	ldr	r3, [pc, #60]	@ (8001374 <DMA1_Stream2_IRQHandler+0x1a0>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800133c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001340:	4293      	cmp	r3, r2
 8001342:	d110      	bne.n	8001366 <DMA1_Stream2_IRQHandler+0x192>
				{
					if((__DMA1_Stream2_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001344:	4b0b      	ldr	r3, [pc, #44]	@ (8001374 <DMA1_Stream2_IRQHandler+0x1a0>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001350:	2b00      	cmp	r3, #0
 8001352:	d004      	beq.n	800135e <DMA1_Stream2_IRQHandler+0x18a>
					{
						__DMA1_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001354:	4b07      	ldr	r3, [pc, #28]	@ (8001374 <DMA1_Stream2_IRQHandler+0x1a0>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800135a:	4798      	blx	r3
					}
				}
			}
		}
	}
}
 800135c:	e003      	b.n	8001366 <DMA1_Stream2_IRQHandler+0x192>
						__DMA1_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800135e:	4b05      	ldr	r3, [pc, #20]	@ (8001374 <DMA1_Stream2_IRQHandler+0x1a0>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001364:	4798      	blx	r3
}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40026000 	.word	0x40026000
 8001370:	20000060 	.word	0x20000060
 8001374:	20000028 	.word	0x20000028

08001378 <DMA1_Stream3_IRQHandler>:

void DMA1_Stream3_IRQHandler(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
	DMA_LISR = DMA1 -> LISR;
 800137c:	4b60      	ldr	r3, [pc, #384]	@ (8001500 <DMA1_Stream3_IRQHandler+0x188>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a60      	ldr	r2, [pc, #384]	@ (8001504 <DMA1_Stream3_IRQHandler+0x18c>)
 8001382:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF3)
 8001384:	4b5f      	ldr	r3, [pc, #380]	@ (8001504 <DMA1_Stream3_IRQHandler+0x18c>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800138c:	2b00      	cmp	r3, #0
 800138e:	d015      	beq.n	80013bc <DMA1_Stream3_IRQHandler+0x44>
	{
		if(__DMA1_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 8001390:	4b5d      	ldr	r3, [pc, #372]	@ (8001508 <DMA1_Stream3_IRQHandler+0x190>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	69db      	ldr	r3, [r3, #28]
 8001396:	2280      	movs	r2, #128	@ 0x80
 8001398:	4013      	ands	r3, r2
 800139a:	2b00      	cmp	r3, #0
 800139c:	d00e      	beq.n	80013bc <DMA1_Stream3_IRQHandler+0x44>
		{
			if (__DMA1_Stream3_Config__ -> ISR_Routines.FIFO_Error_ISR)
 800139e:	4b5a      	ldr	r3, [pc, #360]	@ (8001508 <DMA1_Stream3_IRQHandler+0x190>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d009      	beq.n	80013bc <DMA1_Stream3_IRQHandler+0x44>
			{
				__DMA1_Stream3_Config__ ->ISR_Routines.FIFO_Error_ISR();
 80013a8:	4b57      	ldr	r3, [pc, #348]	@ (8001508 <DMA1_Stream3_IRQHandler+0x190>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013ae:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CFEIF3;
 80013b0:	4b53      	ldr	r3, [pc, #332]	@ (8001500 <DMA1_Stream3_IRQHandler+0x188>)
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	4a52      	ldr	r2, [pc, #328]	@ (8001500 <DMA1_Stream3_IRQHandler+0x188>)
 80013b6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80013ba:	6093      	str	r3, [r2, #8]
			}
		}

	}

	if(DMA_LISR & DMA_LISR_DMEIF3)
 80013bc:	4b51      	ldr	r3, [pc, #324]	@ (8001504 <DMA1_Stream3_IRQHandler+0x18c>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d015      	beq.n	80013f4 <DMA1_Stream3_IRQHandler+0x7c>
	{
		if(__DMA1_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 80013c8:	4b4f      	ldr	r3, [pc, #316]	@ (8001508 <DMA1_Stream3_IRQHandler+0x190>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	69db      	ldr	r3, [r3, #28]
 80013ce:	2202      	movs	r2, #2
 80013d0:	4013      	ands	r3, r2
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d00e      	beq.n	80013f4 <DMA1_Stream3_IRQHandler+0x7c>
		{
			if (__DMA1_Stream3_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 80013d6:	4b4c      	ldr	r3, [pc, #304]	@ (8001508 <DMA1_Stream3_IRQHandler+0x190>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d009      	beq.n	80013f4 <DMA1_Stream3_IRQHandler+0x7c>
			{
				__DMA1_Stream3_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 80013e0:	4b49      	ldr	r3, [pc, #292]	@ (8001508 <DMA1_Stream3_IRQHandler+0x190>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e6:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF3;
 80013e8:	4b45      	ldr	r3, [pc, #276]	@ (8001500 <DMA1_Stream3_IRQHandler+0x188>)
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	4a44      	ldr	r2, [pc, #272]	@ (8001500 <DMA1_Stream3_IRQHandler+0x188>)
 80013ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80013f2:	6093      	str	r3, [r2, #8]
			}
		}

	}

	if(DMA_LISR & DMA_LISR_TEIF3)
 80013f4:	4b43      	ldr	r3, [pc, #268]	@ (8001504 <DMA1_Stream3_IRQHandler+0x18c>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d015      	beq.n	800142c <DMA1_Stream3_IRQHandler+0xb4>
	{
		if(__DMA1_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 8001400:	4b41      	ldr	r3, [pc, #260]	@ (8001508 <DMA1_Stream3_IRQHandler+0x190>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	69db      	ldr	r3, [r3, #28]
 8001406:	2204      	movs	r2, #4
 8001408:	4013      	ands	r3, r2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d00e      	beq.n	800142c <DMA1_Stream3_IRQHandler+0xb4>
		{
			if (__DMA1_Stream3_Config__ -> ISR_Routines.Transfer_Error_ISR)
 800140e:	4b3e      	ldr	r3, [pc, #248]	@ (8001508 <DMA1_Stream3_IRQHandler+0x190>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001414:	2b00      	cmp	r3, #0
 8001416:	d009      	beq.n	800142c <DMA1_Stream3_IRQHandler+0xb4>
			{
				__DMA1_Stream3_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8001418:	4b3b      	ldr	r3, [pc, #236]	@ (8001508 <DMA1_Stream3_IRQHandler+0x190>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800141e:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTEIF3;
 8001420:	4b37      	ldr	r3, [pc, #220]	@ (8001500 <DMA1_Stream3_IRQHandler+0x188>)
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	4a36      	ldr	r2, [pc, #216]	@ (8001500 <DMA1_Stream3_IRQHandler+0x188>)
 8001426:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800142a:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF3)
 800142c:	4b35      	ldr	r3, [pc, #212]	@ (8001504 <DMA1_Stream3_IRQHandler+0x18c>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d02d      	beq.n	8001494 <DMA1_Stream3_IRQHandler+0x11c>
	{
		if(__DMA1_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 8001438:	4b33      	ldr	r3, [pc, #204]	@ (8001508 <DMA1_Stream3_IRQHandler+0x190>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	69db      	ldr	r3, [r3, #28]
 800143e:	2208      	movs	r2, #8
 8001440:	4013      	ands	r3, r2
 8001442:	2b00      	cmp	r3, #0
 8001444:	d026      	beq.n	8001494 <DMA1_Stream3_IRQHandler+0x11c>
		{
			if (__DMA1_Stream3_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001446:	4b30      	ldr	r3, [pc, #192]	@ (8001508 <DMA1_Stream3_IRQHandler+0x190>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800144c:	2b00      	cmp	r3, #0
 800144e:	d021      	beq.n	8001494 <DMA1_Stream3_IRQHandler+0x11c>
			{
				__DMA1_Stream3_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001450:	4b2d      	ldr	r3, [pc, #180]	@ (8001508 <DMA1_Stream3_IRQHandler+0x190>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001456:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CHTIF3;
 8001458:	4b29      	ldr	r3, [pc, #164]	@ (8001500 <DMA1_Stream3_IRQHandler+0x188>)
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	4a28      	ldr	r2, [pc, #160]	@ (8001500 <DMA1_Stream3_IRQHandler+0x188>)
 800145e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001462:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream3_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001464:	4b28      	ldr	r3, [pc, #160]	@ (8001508 <DMA1_Stream3_IRQHandler+0x190>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800146a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800146e:	4293      	cmp	r3, r2
 8001470:	d110      	bne.n	8001494 <DMA1_Stream3_IRQHandler+0x11c>
				{
					if((__DMA1_Stream3_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001472:	4b25      	ldr	r3, [pc, #148]	@ (8001508 <DMA1_Stream3_IRQHandler+0x190>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d004      	beq.n	800148c <DMA1_Stream3_IRQHandler+0x114>
					{
						__DMA1_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001482:	4b21      	ldr	r3, [pc, #132]	@ (8001508 <DMA1_Stream3_IRQHandler+0x190>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001488:	4798      	blx	r3
 800148a:	e003      	b.n	8001494 <DMA1_Stream3_IRQHandler+0x11c>
					}
					else
					{
						__DMA1_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800148c:	4b1e      	ldr	r3, [pc, #120]	@ (8001508 <DMA1_Stream3_IRQHandler+0x190>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001492:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TCIF3)
 8001494:	4b1b      	ldr	r3, [pc, #108]	@ (8001504 <DMA1_Stream3_IRQHandler+0x18c>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d02d      	beq.n	80014fc <DMA1_Stream3_IRQHandler+0x184>
	{
		if(__DMA1_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 80014a0:	4b19      	ldr	r3, [pc, #100]	@ (8001508 <DMA1_Stream3_IRQHandler+0x190>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	69db      	ldr	r3, [r3, #28]
 80014a6:	2210      	movs	r2, #16
 80014a8:	4013      	ands	r3, r2
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d026      	beq.n	80014fc <DMA1_Stream3_IRQHandler+0x184>
		{
			if (__DMA1_Stream3_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 80014ae:	4b16      	ldr	r3, [pc, #88]	@ (8001508 <DMA1_Stream3_IRQHandler+0x190>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d021      	beq.n	80014fc <DMA1_Stream3_IRQHandler+0x184>
			{
				__DMA1_Stream3_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80014b8:	4b13      	ldr	r3, [pc, #76]	@ (8001508 <DMA1_Stream3_IRQHandler+0x190>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014be:	4798      	blx	r3
				DMA1 -> LIFCR |= DMA_LIFCR_CTCIF3;
 80014c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001500 <DMA1_Stream3_IRQHandler+0x188>)
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	4a0e      	ldr	r2, [pc, #56]	@ (8001500 <DMA1_Stream3_IRQHandler+0x188>)
 80014c6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80014ca:	6093      	str	r3, [r2, #8]

				if(__DMA1_Stream3_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80014cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001508 <DMA1_Stream3_IRQHandler+0x190>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014d2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d110      	bne.n	80014fc <DMA1_Stream3_IRQHandler+0x184>
				{
					if((__DMA1_Stream3_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80014da:	4b0b      	ldr	r3, [pc, #44]	@ (8001508 <DMA1_Stream3_IRQHandler+0x190>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d004      	beq.n	80014f4 <DMA1_Stream3_IRQHandler+0x17c>
					{
						__DMA1_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80014ea:	4b07      	ldr	r3, [pc, #28]	@ (8001508 <DMA1_Stream3_IRQHandler+0x190>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80014f0:	4798      	blx	r3
					}
				}
			}
		}
	}
}
 80014f2:	e003      	b.n	80014fc <DMA1_Stream3_IRQHandler+0x184>
						__DMA1_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80014f4:	4b04      	ldr	r3, [pc, #16]	@ (8001508 <DMA1_Stream3_IRQHandler+0x190>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014fa:	4798      	blx	r3
}
 80014fc:	bf00      	nop
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40026000 	.word	0x40026000
 8001504:	20000060 	.word	0x20000060
 8001508:	2000002c 	.word	0x2000002c

0800150c <DMA1_Stream4_IRQHandler>:

void DMA1_Stream4_IRQHandler(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
	DMA_HISR = DMA1 -> HISR;
 8001510:	4b4f      	ldr	r3, [pc, #316]	@ (8001650 <DMA1_Stream4_IRQHandler+0x144>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	4a4f      	ldr	r2, [pc, #316]	@ (8001654 <DMA1_Stream4_IRQHandler+0x148>)
 8001516:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF4)
 8001518:	4b4e      	ldr	r3, [pc, #312]	@ (8001654 <DMA1_Stream4_IRQHandler+0x148>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0301 	and.w	r3, r3, #1
 8001520:	2b00      	cmp	r3, #0
 8001522:	d00e      	beq.n	8001542 <DMA1_Stream4_IRQHandler+0x36>
	{
		if (__DMA1_Stream4_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001524:	4b4c      	ldr	r3, [pc, #304]	@ (8001658 <DMA1_Stream4_IRQHandler+0x14c>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800152a:	2b00      	cmp	r3, #0
 800152c:	d009      	beq.n	8001542 <DMA1_Stream4_IRQHandler+0x36>
		{
			__DMA1_Stream4_Config__ ->ISR_Routines.FIFO_Error_ISR();
 800152e:	4b4a      	ldr	r3, [pc, #296]	@ (8001658 <DMA1_Stream4_IRQHandler+0x14c>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001534:	4798      	blx	r3
			DMA1 -> LIFCR |= DMA_HIFCR_CFEIF5;
 8001536:	4b46      	ldr	r3, [pc, #280]	@ (8001650 <DMA1_Stream4_IRQHandler+0x144>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	4a45      	ldr	r2, [pc, #276]	@ (8001650 <DMA1_Stream4_IRQHandler+0x144>)
 800153c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001540:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF4)
 8001542:	4b44      	ldr	r3, [pc, #272]	@ (8001654 <DMA1_Stream4_IRQHandler+0x148>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0304 	and.w	r3, r3, #4
 800154a:	2b00      	cmp	r3, #0
 800154c:	d00e      	beq.n	800156c <DMA1_Stream4_IRQHandler+0x60>
	{
		if (__DMA1_Stream4_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 800154e:	4b42      	ldr	r3, [pc, #264]	@ (8001658 <DMA1_Stream4_IRQHandler+0x14c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001554:	2b00      	cmp	r3, #0
 8001556:	d009      	beq.n	800156c <DMA1_Stream4_IRQHandler+0x60>
		{
			__DMA1_Stream4_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001558:	4b3f      	ldr	r3, [pc, #252]	@ (8001658 <DMA1_Stream4_IRQHandler+0x14c>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155e:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF4;
 8001560:	4b3b      	ldr	r3, [pc, #236]	@ (8001650 <DMA1_Stream4_IRQHandler+0x144>)
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	4a3a      	ldr	r2, [pc, #232]	@ (8001650 <DMA1_Stream4_IRQHandler+0x144>)
 8001566:	f043 0304 	orr.w	r3, r3, #4
 800156a:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF4)
 800156c:	4b39      	ldr	r3, [pc, #228]	@ (8001654 <DMA1_Stream4_IRQHandler+0x148>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0308 	and.w	r3, r3, #8
 8001574:	2b00      	cmp	r3, #0
 8001576:	d00e      	beq.n	8001596 <DMA1_Stream4_IRQHandler+0x8a>
	{
		if (__DMA1_Stream4_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001578:	4b37      	ldr	r3, [pc, #220]	@ (8001658 <DMA1_Stream4_IRQHandler+0x14c>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800157e:	2b00      	cmp	r3, #0
 8001580:	d009      	beq.n	8001596 <DMA1_Stream4_IRQHandler+0x8a>
		{
			__DMA1_Stream4_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8001582:	4b35      	ldr	r3, [pc, #212]	@ (8001658 <DMA1_Stream4_IRQHandler+0x14c>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001588:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTEIF4;
 800158a:	4b31      	ldr	r3, [pc, #196]	@ (8001650 <DMA1_Stream4_IRQHandler+0x144>)
 800158c:	68db      	ldr	r3, [r3, #12]
 800158e:	4a30      	ldr	r2, [pc, #192]	@ (8001650 <DMA1_Stream4_IRQHandler+0x144>)
 8001590:	f043 0308 	orr.w	r3, r3, #8
 8001594:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF4)
 8001596:	4b2f      	ldr	r3, [pc, #188]	@ (8001654 <DMA1_Stream4_IRQHandler+0x148>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0310 	and.w	r3, r3, #16
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d026      	beq.n	80015f0 <DMA1_Stream4_IRQHandler+0xe4>
	{
		if (__DMA1_Stream4_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 80015a2:	4b2d      	ldr	r3, [pc, #180]	@ (8001658 <DMA1_Stream4_IRQHandler+0x14c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d021      	beq.n	80015f0 <DMA1_Stream4_IRQHandler+0xe4>
		{
			__DMA1_Stream4_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80015ac:	4b2a      	ldr	r3, [pc, #168]	@ (8001658 <DMA1_Stream4_IRQHandler+0x14c>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015b2:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CHTIF4;
 80015b4:	4b26      	ldr	r3, [pc, #152]	@ (8001650 <DMA1_Stream4_IRQHandler+0x144>)
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	4a25      	ldr	r2, [pc, #148]	@ (8001650 <DMA1_Stream4_IRQHandler+0x144>)
 80015ba:	f043 0310 	orr.w	r3, r3, #16
 80015be:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream4_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80015c0:	4b25      	ldr	r3, [pc, #148]	@ (8001658 <DMA1_Stream4_IRQHandler+0x14c>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015c6:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d110      	bne.n	80015f0 <DMA1_Stream4_IRQHandler+0xe4>
			{
				if((__DMA1_Stream4_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80015ce:	4b22      	ldr	r3, [pc, #136]	@ (8001658 <DMA1_Stream4_IRQHandler+0x14c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d004      	beq.n	80015e8 <DMA1_Stream4_IRQHandler+0xdc>
				{
					__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80015de:	4b1e      	ldr	r3, [pc, #120]	@ (8001658 <DMA1_Stream4_IRQHandler+0x14c>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015e4:	4798      	blx	r3
 80015e6:	e003      	b.n	80015f0 <DMA1_Stream4_IRQHandler+0xe4>
				}
				else
				{
					__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80015e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001658 <DMA1_Stream4_IRQHandler+0x14c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015ee:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF4)
 80015f0:	4b18      	ldr	r3, [pc, #96]	@ (8001654 <DMA1_Stream4_IRQHandler+0x148>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0320 	and.w	r3, r3, #32
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d026      	beq.n	800164a <DMA1_Stream4_IRQHandler+0x13e>
	{
		if (__DMA1_Stream4_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 80015fc:	4b16      	ldr	r3, [pc, #88]	@ (8001658 <DMA1_Stream4_IRQHandler+0x14c>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001602:	2b00      	cmp	r3, #0
 8001604:	d021      	beq.n	800164a <DMA1_Stream4_IRQHandler+0x13e>
		{
			__DMA1_Stream4_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001606:	4b14      	ldr	r3, [pc, #80]	@ (8001658 <DMA1_Stream4_IRQHandler+0x14c>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800160c:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTCIF4;
 800160e:	4b10      	ldr	r3, [pc, #64]	@ (8001650 <DMA1_Stream4_IRQHandler+0x144>)
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	4a0f      	ldr	r2, [pc, #60]	@ (8001650 <DMA1_Stream4_IRQHandler+0x144>)
 8001614:	f043 0320 	orr.w	r3, r3, #32
 8001618:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream4_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800161a:	4b0f      	ldr	r3, [pc, #60]	@ (8001658 <DMA1_Stream4_IRQHandler+0x14c>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001620:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001624:	4293      	cmp	r3, r2
 8001626:	d110      	bne.n	800164a <DMA1_Stream4_IRQHandler+0x13e>
			{
				if((__DMA1_Stream4_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001628:	4b0b      	ldr	r3, [pc, #44]	@ (8001658 <DMA1_Stream4_IRQHandler+0x14c>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d004      	beq.n	8001642 <DMA1_Stream4_IRQHandler+0x136>
				{
					__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001638:	4b07      	ldr	r3, [pc, #28]	@ (8001658 <DMA1_Stream4_IRQHandler+0x14c>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800163e:	4798      	blx	r3
					__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 8001640:	e003      	b.n	800164a <DMA1_Stream4_IRQHandler+0x13e>
					__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001642:	4b05      	ldr	r3, [pc, #20]	@ (8001658 <DMA1_Stream4_IRQHandler+0x14c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001648:	4798      	blx	r3
}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40026000 	.word	0x40026000
 8001654:	20000064 	.word	0x20000064
 8001658:	20000030 	.word	0x20000030

0800165c <DMA1_Stream5_IRQHandler>:




void DMA1_Stream5_IRQHandler(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
	DMA_HISR = DMA1 -> HISR;
 8001660:	4b4f      	ldr	r3, [pc, #316]	@ (80017a0 <DMA1_Stream5_IRQHandler+0x144>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	4a4f      	ldr	r2, [pc, #316]	@ (80017a4 <DMA1_Stream5_IRQHandler+0x148>)
 8001666:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF5)
 8001668:	4b4e      	ldr	r3, [pc, #312]	@ (80017a4 <DMA1_Stream5_IRQHandler+0x148>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001670:	2b00      	cmp	r3, #0
 8001672:	d00e      	beq.n	8001692 <DMA1_Stream5_IRQHandler+0x36>
	{
		if (__DMA1_Stream5_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001674:	4b4c      	ldr	r3, [pc, #304]	@ (80017a8 <DMA1_Stream5_IRQHandler+0x14c>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800167a:	2b00      	cmp	r3, #0
 800167c:	d009      	beq.n	8001692 <DMA1_Stream5_IRQHandler+0x36>
		{
			__DMA1_Stream5_Config__ ->ISR_Routines.FIFO_Error_ISR();
 800167e:	4b4a      	ldr	r3, [pc, #296]	@ (80017a8 <DMA1_Stream5_IRQHandler+0x14c>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001684:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CFEIF5;
 8001686:	4b46      	ldr	r3, [pc, #280]	@ (80017a0 <DMA1_Stream5_IRQHandler+0x144>)
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	4a45      	ldr	r2, [pc, #276]	@ (80017a0 <DMA1_Stream5_IRQHandler+0x144>)
 800168c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001690:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF5)
 8001692:	4b44      	ldr	r3, [pc, #272]	@ (80017a4 <DMA1_Stream5_IRQHandler+0x148>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800169a:	2b00      	cmp	r3, #0
 800169c:	d00e      	beq.n	80016bc <DMA1_Stream5_IRQHandler+0x60>
	{
		if (__DMA1_Stream5_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 800169e:	4b42      	ldr	r3, [pc, #264]	@ (80017a8 <DMA1_Stream5_IRQHandler+0x14c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d009      	beq.n	80016bc <DMA1_Stream5_IRQHandler+0x60>
		{
			__DMA1_Stream5_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 80016a8:	4b3f      	ldr	r3, [pc, #252]	@ (80017a8 <DMA1_Stream5_IRQHandler+0x14c>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ae:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF5;
 80016b0:	4b3b      	ldr	r3, [pc, #236]	@ (80017a0 <DMA1_Stream5_IRQHandler+0x144>)
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	4a3a      	ldr	r2, [pc, #232]	@ (80017a0 <DMA1_Stream5_IRQHandler+0x144>)
 80016b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016ba:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF5)
 80016bc:	4b39      	ldr	r3, [pc, #228]	@ (80017a4 <DMA1_Stream5_IRQHandler+0x148>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d00e      	beq.n	80016e6 <DMA1_Stream5_IRQHandler+0x8a>
	{
		if (__DMA1_Stream5_Config__ -> ISR_Routines.Transfer_Error_ISR)
 80016c8:	4b37      	ldr	r3, [pc, #220]	@ (80017a8 <DMA1_Stream5_IRQHandler+0x14c>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d009      	beq.n	80016e6 <DMA1_Stream5_IRQHandler+0x8a>
		{
			__DMA1_Stream5_Config__ ->ISR_Routines.Transfer_Error_ISR();
 80016d2:	4b35      	ldr	r3, [pc, #212]	@ (80017a8 <DMA1_Stream5_IRQHandler+0x14c>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016d8:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTEIF5;
 80016da:	4b31      	ldr	r3, [pc, #196]	@ (80017a0 <DMA1_Stream5_IRQHandler+0x144>)
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	4a30      	ldr	r2, [pc, #192]	@ (80017a0 <DMA1_Stream5_IRQHandler+0x144>)
 80016e0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016e4:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF5)
 80016e6:	4b2f      	ldr	r3, [pc, #188]	@ (80017a4 <DMA1_Stream5_IRQHandler+0x148>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d026      	beq.n	8001740 <DMA1_Stream5_IRQHandler+0xe4>
	{
		if (__DMA1_Stream5_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 80016f2:	4b2d      	ldr	r3, [pc, #180]	@ (80017a8 <DMA1_Stream5_IRQHandler+0x14c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d021      	beq.n	8001740 <DMA1_Stream5_IRQHandler+0xe4>
		{
			__DMA1_Stream5_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80016fc:	4b2a      	ldr	r3, [pc, #168]	@ (80017a8 <DMA1_Stream5_IRQHandler+0x14c>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001702:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CHTIF5;
 8001704:	4b26      	ldr	r3, [pc, #152]	@ (80017a0 <DMA1_Stream5_IRQHandler+0x144>)
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	4a25      	ldr	r2, [pc, #148]	@ (80017a0 <DMA1_Stream5_IRQHandler+0x144>)
 800170a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800170e:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream5_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001710:	4b25      	ldr	r3, [pc, #148]	@ (80017a8 <DMA1_Stream5_IRQHandler+0x14c>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001716:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800171a:	4293      	cmp	r3, r2
 800171c:	d110      	bne.n	8001740 <DMA1_Stream5_IRQHandler+0xe4>
			{
				if((__DMA1_Stream5_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800171e:	4b22      	ldr	r3, [pc, #136]	@ (80017a8 <DMA1_Stream5_IRQHandler+0x14c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d004      	beq.n	8001738 <DMA1_Stream5_IRQHandler+0xdc>
				{
					__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800172e:	4b1e      	ldr	r3, [pc, #120]	@ (80017a8 <DMA1_Stream5_IRQHandler+0x14c>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001734:	4798      	blx	r3
 8001736:	e003      	b.n	8001740 <DMA1_Stream5_IRQHandler+0xe4>
				}
				else
				{
					__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001738:	4b1b      	ldr	r3, [pc, #108]	@ (80017a8 <DMA1_Stream5_IRQHandler+0x14c>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800173e:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF5)
 8001740:	4b18      	ldr	r3, [pc, #96]	@ (80017a4 <DMA1_Stream5_IRQHandler+0x148>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001748:	2b00      	cmp	r3, #0
 800174a:	d026      	beq.n	800179a <DMA1_Stream5_IRQHandler+0x13e>
	{
		if (__DMA1_Stream5_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 800174c:	4b16      	ldr	r3, [pc, #88]	@ (80017a8 <DMA1_Stream5_IRQHandler+0x14c>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001752:	2b00      	cmp	r3, #0
 8001754:	d021      	beq.n	800179a <DMA1_Stream5_IRQHandler+0x13e>
		{
			__DMA1_Stream5_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001756:	4b14      	ldr	r3, [pc, #80]	@ (80017a8 <DMA1_Stream5_IRQHandler+0x14c>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800175c:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTCIF5;
 800175e:	4b10      	ldr	r3, [pc, #64]	@ (80017a0 <DMA1_Stream5_IRQHandler+0x144>)
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	4a0f      	ldr	r2, [pc, #60]	@ (80017a0 <DMA1_Stream5_IRQHandler+0x144>)
 8001764:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001768:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream5_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800176a:	4b0f      	ldr	r3, [pc, #60]	@ (80017a8 <DMA1_Stream5_IRQHandler+0x14c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001770:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001774:	4293      	cmp	r3, r2
 8001776:	d110      	bne.n	800179a <DMA1_Stream5_IRQHandler+0x13e>
			{
				if((__DMA1_Stream5_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001778:	4b0b      	ldr	r3, [pc, #44]	@ (80017a8 <DMA1_Stream5_IRQHandler+0x14c>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d004      	beq.n	8001792 <DMA1_Stream5_IRQHandler+0x136>
				{
					__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001788:	4b07      	ldr	r3, [pc, #28]	@ (80017a8 <DMA1_Stream5_IRQHandler+0x14c>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800178e:	4798      	blx	r3
					__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 8001790:	e003      	b.n	800179a <DMA1_Stream5_IRQHandler+0x13e>
					__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001792:	4b05      	ldr	r3, [pc, #20]	@ (80017a8 <DMA1_Stream5_IRQHandler+0x14c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001798:	4798      	blx	r3
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	40026000 	.word	0x40026000
 80017a4:	20000064 	.word	0x20000064
 80017a8:	20000034 	.word	0x20000034

080017ac <DMA1_Stream6_IRQHandler>:



void DMA1_Stream6_IRQHandler(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
	DMA_HISR = DMA1 -> HISR;
 80017b0:	4b4f      	ldr	r3, [pc, #316]	@ (80018f0 <DMA1_Stream6_IRQHandler+0x144>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	4a4f      	ldr	r2, [pc, #316]	@ (80018f4 <DMA1_Stream6_IRQHandler+0x148>)
 80017b6:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF6)
 80017b8:	4b4e      	ldr	r3, [pc, #312]	@ (80018f4 <DMA1_Stream6_IRQHandler+0x148>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d00e      	beq.n	80017e2 <DMA1_Stream6_IRQHandler+0x36>
	{
		if (__DMA1_Stream6_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80017c4:	4b4c      	ldr	r3, [pc, #304]	@ (80018f8 <DMA1_Stream6_IRQHandler+0x14c>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d009      	beq.n	80017e2 <DMA1_Stream6_IRQHandler+0x36>
		{
			__DMA1_Stream6_Config__ ->ISR_Routines.FIFO_Error_ISR();
 80017ce:	4b4a      	ldr	r3, [pc, #296]	@ (80018f8 <DMA1_Stream6_IRQHandler+0x14c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017d4:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CFEIF6;
 80017d6:	4b46      	ldr	r3, [pc, #280]	@ (80018f0 <DMA1_Stream6_IRQHandler+0x144>)
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	4a45      	ldr	r2, [pc, #276]	@ (80018f0 <DMA1_Stream6_IRQHandler+0x144>)
 80017dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017e0:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF6)
 80017e2:	4b44      	ldr	r3, [pc, #272]	@ (80018f4 <DMA1_Stream6_IRQHandler+0x148>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d00e      	beq.n	800180c <DMA1_Stream6_IRQHandler+0x60>
	{
		if (__DMA1_Stream6_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 80017ee:	4b42      	ldr	r3, [pc, #264]	@ (80018f8 <DMA1_Stream6_IRQHandler+0x14c>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d009      	beq.n	800180c <DMA1_Stream6_IRQHandler+0x60>
		{
			__DMA1_Stream6_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 80017f8:	4b3f      	ldr	r3, [pc, #252]	@ (80018f8 <DMA1_Stream6_IRQHandler+0x14c>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017fe:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF6;
 8001800:	4b3b      	ldr	r3, [pc, #236]	@ (80018f0 <DMA1_Stream6_IRQHandler+0x144>)
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	4a3a      	ldr	r2, [pc, #232]	@ (80018f0 <DMA1_Stream6_IRQHandler+0x144>)
 8001806:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800180a:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF6)
 800180c:	4b39      	ldr	r3, [pc, #228]	@ (80018f4 <DMA1_Stream6_IRQHandler+0x148>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001814:	2b00      	cmp	r3, #0
 8001816:	d00e      	beq.n	8001836 <DMA1_Stream6_IRQHandler+0x8a>
	{
		if (__DMA1_Stream6_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001818:	4b37      	ldr	r3, [pc, #220]	@ (80018f8 <DMA1_Stream6_IRQHandler+0x14c>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800181e:	2b00      	cmp	r3, #0
 8001820:	d009      	beq.n	8001836 <DMA1_Stream6_IRQHandler+0x8a>
		{
			__DMA1_Stream6_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8001822:	4b35      	ldr	r3, [pc, #212]	@ (80018f8 <DMA1_Stream6_IRQHandler+0x14c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001828:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTEIF6;
 800182a:	4b31      	ldr	r3, [pc, #196]	@ (80018f0 <DMA1_Stream6_IRQHandler+0x144>)
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	4a30      	ldr	r2, [pc, #192]	@ (80018f0 <DMA1_Stream6_IRQHandler+0x144>)
 8001830:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001834:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF6)
 8001836:	4b2f      	ldr	r3, [pc, #188]	@ (80018f4 <DMA1_Stream6_IRQHandler+0x148>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d026      	beq.n	8001890 <DMA1_Stream6_IRQHandler+0xe4>
	{
		if (__DMA1_Stream6_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001842:	4b2d      	ldr	r3, [pc, #180]	@ (80018f8 <DMA1_Stream6_IRQHandler+0x14c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001848:	2b00      	cmp	r3, #0
 800184a:	d021      	beq.n	8001890 <DMA1_Stream6_IRQHandler+0xe4>
		{
			__DMA1_Stream6_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 800184c:	4b2a      	ldr	r3, [pc, #168]	@ (80018f8 <DMA1_Stream6_IRQHandler+0x14c>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001852:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CHTIF6;
 8001854:	4b26      	ldr	r3, [pc, #152]	@ (80018f0 <DMA1_Stream6_IRQHandler+0x144>)
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	4a25      	ldr	r2, [pc, #148]	@ (80018f0 <DMA1_Stream6_IRQHandler+0x144>)
 800185a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800185e:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream6_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001860:	4b25      	ldr	r3, [pc, #148]	@ (80018f8 <DMA1_Stream6_IRQHandler+0x14c>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001866:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800186a:	4293      	cmp	r3, r2
 800186c:	d110      	bne.n	8001890 <DMA1_Stream6_IRQHandler+0xe4>
			{
				if((__DMA1_Stream6_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800186e:	4b22      	ldr	r3, [pc, #136]	@ (80018f8 <DMA1_Stream6_IRQHandler+0x14c>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d004      	beq.n	8001888 <DMA1_Stream6_IRQHandler+0xdc>
				{
					__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800187e:	4b1e      	ldr	r3, [pc, #120]	@ (80018f8 <DMA1_Stream6_IRQHandler+0x14c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001884:	4798      	blx	r3
 8001886:	e003      	b.n	8001890 <DMA1_Stream6_IRQHandler+0xe4>
				}
				else
				{
					__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001888:	4b1b      	ldr	r3, [pc, #108]	@ (80018f8 <DMA1_Stream6_IRQHandler+0x14c>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800188e:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF6)
 8001890:	4b18      	ldr	r3, [pc, #96]	@ (80018f4 <DMA1_Stream6_IRQHandler+0x148>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d026      	beq.n	80018ea <DMA1_Stream6_IRQHandler+0x13e>
	{
		if (__DMA1_Stream6_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 800189c:	4b16      	ldr	r3, [pc, #88]	@ (80018f8 <DMA1_Stream6_IRQHandler+0x14c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d021      	beq.n	80018ea <DMA1_Stream6_IRQHandler+0x13e>
		{
			__DMA1_Stream6_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80018a6:	4b14      	ldr	r3, [pc, #80]	@ (80018f8 <DMA1_Stream6_IRQHandler+0x14c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018ac:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTCIF6;
 80018ae:	4b10      	ldr	r3, [pc, #64]	@ (80018f0 <DMA1_Stream6_IRQHandler+0x144>)
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	4a0f      	ldr	r2, [pc, #60]	@ (80018f0 <DMA1_Stream6_IRQHandler+0x144>)
 80018b4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80018b8:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream6_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80018ba:	4b0f      	ldr	r3, [pc, #60]	@ (80018f8 <DMA1_Stream6_IRQHandler+0x14c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018c0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d110      	bne.n	80018ea <DMA1_Stream6_IRQHandler+0x13e>
			{
				if((__DMA1_Stream6_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80018c8:	4b0b      	ldr	r3, [pc, #44]	@ (80018f8 <DMA1_Stream6_IRQHandler+0x14c>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d004      	beq.n	80018e2 <DMA1_Stream6_IRQHandler+0x136>
				{
					__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80018d8:	4b07      	ldr	r3, [pc, #28]	@ (80018f8 <DMA1_Stream6_IRQHandler+0x14c>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018de:	4798      	blx	r3
					__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 80018e0:	e003      	b.n	80018ea <DMA1_Stream6_IRQHandler+0x13e>
					__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80018e2:	4b05      	ldr	r3, [pc, #20]	@ (80018f8 <DMA1_Stream6_IRQHandler+0x14c>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018e8:	4798      	blx	r3
}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	40026000 	.word	0x40026000
 80018f4:	20000064 	.word	0x20000064
 80018f8:	20000038 	.word	0x20000038

080018fc <DMA1_Stream7_IRQHandler>:


void DMA1_Stream7_IRQHandler(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
	DMA_HISR = DMA1 -> HISR;
 8001900:	4b4f      	ldr	r3, [pc, #316]	@ (8001a40 <DMA1_Stream7_IRQHandler+0x144>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	4a4f      	ldr	r2, [pc, #316]	@ (8001a44 <DMA1_Stream7_IRQHandler+0x148>)
 8001906:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF7)
 8001908:	4b4e      	ldr	r3, [pc, #312]	@ (8001a44 <DMA1_Stream7_IRQHandler+0x148>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d00e      	beq.n	8001932 <DMA1_Stream7_IRQHandler+0x36>
	{
		if (__DMA1_Stream7_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001914:	4b4c      	ldr	r3, [pc, #304]	@ (8001a48 <DMA1_Stream7_IRQHandler+0x14c>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800191a:	2b00      	cmp	r3, #0
 800191c:	d009      	beq.n	8001932 <DMA1_Stream7_IRQHandler+0x36>
		{
			__DMA1_Stream7_Config__ ->ISR_Routines.FIFO_Error_ISR();
 800191e:	4b4a      	ldr	r3, [pc, #296]	@ (8001a48 <DMA1_Stream7_IRQHandler+0x14c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001924:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CFEIF7;
 8001926:	4b46      	ldr	r3, [pc, #280]	@ (8001a40 <DMA1_Stream7_IRQHandler+0x144>)
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	4a45      	ldr	r2, [pc, #276]	@ (8001a40 <DMA1_Stream7_IRQHandler+0x144>)
 800192c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001930:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF7)
 8001932:	4b44      	ldr	r3, [pc, #272]	@ (8001a44 <DMA1_Stream7_IRQHandler+0x148>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d00e      	beq.n	800195c <DMA1_Stream7_IRQHandler+0x60>
	{
		if (__DMA1_Stream7_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 800193e:	4b42      	ldr	r3, [pc, #264]	@ (8001a48 <DMA1_Stream7_IRQHandler+0x14c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001944:	2b00      	cmp	r3, #0
 8001946:	d009      	beq.n	800195c <DMA1_Stream7_IRQHandler+0x60>
		{
			__DMA1_Stream7_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001948:	4b3f      	ldr	r3, [pc, #252]	@ (8001a48 <DMA1_Stream7_IRQHandler+0x14c>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194e:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF7;
 8001950:	4b3b      	ldr	r3, [pc, #236]	@ (8001a40 <DMA1_Stream7_IRQHandler+0x144>)
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	4a3a      	ldr	r2, [pc, #232]	@ (8001a40 <DMA1_Stream7_IRQHandler+0x144>)
 8001956:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800195a:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF7)
 800195c:	4b39      	ldr	r3, [pc, #228]	@ (8001a44 <DMA1_Stream7_IRQHandler+0x148>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d00e      	beq.n	8001986 <DMA1_Stream7_IRQHandler+0x8a>
	{
		if (__DMA1_Stream7_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001968:	4b37      	ldr	r3, [pc, #220]	@ (8001a48 <DMA1_Stream7_IRQHandler+0x14c>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800196e:	2b00      	cmp	r3, #0
 8001970:	d009      	beq.n	8001986 <DMA1_Stream7_IRQHandler+0x8a>
		{
			__DMA1_Stream7_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8001972:	4b35      	ldr	r3, [pc, #212]	@ (8001a48 <DMA1_Stream7_IRQHandler+0x14c>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001978:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTEIF7;
 800197a:	4b31      	ldr	r3, [pc, #196]	@ (8001a40 <DMA1_Stream7_IRQHandler+0x144>)
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	4a30      	ldr	r2, [pc, #192]	@ (8001a40 <DMA1_Stream7_IRQHandler+0x144>)
 8001980:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001984:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF7)
 8001986:	4b2f      	ldr	r3, [pc, #188]	@ (8001a44 <DMA1_Stream7_IRQHandler+0x148>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d026      	beq.n	80019e0 <DMA1_Stream7_IRQHandler+0xe4>
	{
		if (__DMA1_Stream7_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001992:	4b2d      	ldr	r3, [pc, #180]	@ (8001a48 <DMA1_Stream7_IRQHandler+0x14c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001998:	2b00      	cmp	r3, #0
 800199a:	d021      	beq.n	80019e0 <DMA1_Stream7_IRQHandler+0xe4>
		{
			__DMA1_Stream7_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 800199c:	4b2a      	ldr	r3, [pc, #168]	@ (8001a48 <DMA1_Stream7_IRQHandler+0x14c>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019a2:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CHTIF7;
 80019a4:	4b26      	ldr	r3, [pc, #152]	@ (8001a40 <DMA1_Stream7_IRQHandler+0x144>)
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	4a25      	ldr	r2, [pc, #148]	@ (8001a40 <DMA1_Stream7_IRQHandler+0x144>)
 80019aa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80019ae:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream7_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80019b0:	4b25      	ldr	r3, [pc, #148]	@ (8001a48 <DMA1_Stream7_IRQHandler+0x14c>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019b6:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d110      	bne.n	80019e0 <DMA1_Stream7_IRQHandler+0xe4>
			{
				if((__DMA1_Stream7_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80019be:	4b22      	ldr	r3, [pc, #136]	@ (8001a48 <DMA1_Stream7_IRQHandler+0x14c>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d004      	beq.n	80019d8 <DMA1_Stream7_IRQHandler+0xdc>
				{
					__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80019ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001a48 <DMA1_Stream7_IRQHandler+0x14c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80019d4:	4798      	blx	r3
 80019d6:	e003      	b.n	80019e0 <DMA1_Stream7_IRQHandler+0xe4>
				}
				else
				{
					__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80019d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001a48 <DMA1_Stream7_IRQHandler+0x14c>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019de:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF7)
 80019e0:	4b18      	ldr	r3, [pc, #96]	@ (8001a44 <DMA1_Stream7_IRQHandler+0x148>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d026      	beq.n	8001a3a <DMA1_Stream7_IRQHandler+0x13e>
	{
		if (__DMA1_Stream7_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 80019ec:	4b16      	ldr	r3, [pc, #88]	@ (8001a48 <DMA1_Stream7_IRQHandler+0x14c>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d021      	beq.n	8001a3a <DMA1_Stream7_IRQHandler+0x13e>
		{
			__DMA1_Stream7_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80019f6:	4b14      	ldr	r3, [pc, #80]	@ (8001a48 <DMA1_Stream7_IRQHandler+0x14c>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019fc:	4798      	blx	r3
			DMA1 -> HIFCR |= DMA_HIFCR_CTCIF7;
 80019fe:	4b10      	ldr	r3, [pc, #64]	@ (8001a40 <DMA1_Stream7_IRQHandler+0x144>)
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	4a0f      	ldr	r2, [pc, #60]	@ (8001a40 <DMA1_Stream7_IRQHandler+0x144>)
 8001a04:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001a08:	60d3      	str	r3, [r2, #12]

			if(__DMA1_Stream7_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001a0a:	4b0f      	ldr	r3, [pc, #60]	@ (8001a48 <DMA1_Stream7_IRQHandler+0x14c>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a10:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d110      	bne.n	8001a3a <DMA1_Stream7_IRQHandler+0x13e>
			{
				if((__DMA1_Stream7_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001a18:	4b0b      	ldr	r3, [pc, #44]	@ (8001a48 <DMA1_Stream7_IRQHandler+0x14c>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d004      	beq.n	8001a32 <DMA1_Stream7_IRQHandler+0x136>
				{
					__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001a28:	4b07      	ldr	r3, [pc, #28]	@ (8001a48 <DMA1_Stream7_IRQHandler+0x14c>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a2e:	4798      	blx	r3
					__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 8001a30:	e003      	b.n	8001a3a <DMA1_Stream7_IRQHandler+0x13e>
					__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001a32:	4b05      	ldr	r3, [pc, #20]	@ (8001a48 <DMA1_Stream7_IRQHandler+0x14c>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a38:	4798      	blx	r3
}
 8001a3a:	bf00      	nop
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	40026000 	.word	0x40026000
 8001a44:	20000064 	.word	0x20000064
 8001a48:	2000003c 	.word	0x2000003c

08001a4c <DMA2_Stream0_IRQHandler>:

void DMA2_Stream0_IRQHandler(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
	DMA_LISR = DMA2 -> LISR;
 8001a50:	4b60      	ldr	r3, [pc, #384]	@ (8001bd4 <DMA2_Stream0_IRQHandler+0x188>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a60      	ldr	r2, [pc, #384]	@ (8001bd8 <DMA2_Stream0_IRQHandler+0x18c>)
 8001a56:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF0)
 8001a58:	4b5f      	ldr	r3, [pc, #380]	@ (8001bd8 <DMA2_Stream0_IRQHandler+0x18c>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0301 	and.w	r3, r3, #1
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d015      	beq.n	8001a90 <DMA2_Stream0_IRQHandler+0x44>
	{
		if(__DMA2_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 8001a64:	4b5d      	ldr	r3, [pc, #372]	@ (8001bdc <DMA2_Stream0_IRQHandler+0x190>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	69db      	ldr	r3, [r3, #28]
 8001a6a:	2280      	movs	r2, #128	@ 0x80
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d00e      	beq.n	8001a90 <DMA2_Stream0_IRQHandler+0x44>
		{
			if (__DMA2_Stream0_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001a72:	4b5a      	ldr	r3, [pc, #360]	@ (8001bdc <DMA2_Stream0_IRQHandler+0x190>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d009      	beq.n	8001a90 <DMA2_Stream0_IRQHandler+0x44>
			{
				__DMA2_Stream0_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8001a7c:	4b57      	ldr	r3, [pc, #348]	@ (8001bdc <DMA2_Stream0_IRQHandler+0x190>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a82:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CFEIF0;
 8001a84:	4b53      	ldr	r3, [pc, #332]	@ (8001bd4 <DMA2_Stream0_IRQHandler+0x188>)
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	4a52      	ldr	r2, [pc, #328]	@ (8001bd4 <DMA2_Stream0_IRQHandler+0x188>)
 8001a8a:	f043 0301 	orr.w	r3, r3, #1
 8001a8e:	6093      	str	r3, [r2, #8]
			}
		}

	}

	if(DMA_LISR & DMA_LISR_DMEIF0)
 8001a90:	4b51      	ldr	r3, [pc, #324]	@ (8001bd8 <DMA2_Stream0_IRQHandler+0x18c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0304 	and.w	r3, r3, #4
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d015      	beq.n	8001ac8 <DMA2_Stream0_IRQHandler+0x7c>
	{
		if(__DMA2_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 8001a9c:	4b4f      	ldr	r3, [pc, #316]	@ (8001bdc <DMA2_Stream0_IRQHandler+0x190>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	69db      	ldr	r3, [r3, #28]
 8001aa2:	2202      	movs	r2, #2
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d00e      	beq.n	8001ac8 <DMA2_Stream0_IRQHandler+0x7c>
		{
			if (__DMA2_Stream0_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8001aaa:	4b4c      	ldr	r3, [pc, #304]	@ (8001bdc <DMA2_Stream0_IRQHandler+0x190>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d009      	beq.n	8001ac8 <DMA2_Stream0_IRQHandler+0x7c>
			{
				__DMA2_Stream0_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001ab4:	4b49      	ldr	r3, [pc, #292]	@ (8001bdc <DMA2_Stream0_IRQHandler+0x190>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aba:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF0;
 8001abc:	4b45      	ldr	r3, [pc, #276]	@ (8001bd4 <DMA2_Stream0_IRQHandler+0x188>)
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	4a44      	ldr	r2, [pc, #272]	@ (8001bd4 <DMA2_Stream0_IRQHandler+0x188>)
 8001ac2:	f043 0304 	orr.w	r3, r3, #4
 8001ac6:	6093      	str	r3, [r2, #8]
			}
		}

	}

	if(DMA_LISR & DMA_LISR_TEIF0)
 8001ac8:	4b43      	ldr	r3, [pc, #268]	@ (8001bd8 <DMA2_Stream0_IRQHandler+0x18c>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0308 	and.w	r3, r3, #8
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d015      	beq.n	8001b00 <DMA2_Stream0_IRQHandler+0xb4>
	{
		if(__DMA2_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 8001ad4:	4b41      	ldr	r3, [pc, #260]	@ (8001bdc <DMA2_Stream0_IRQHandler+0x190>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	2204      	movs	r2, #4
 8001adc:	4013      	ands	r3, r2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d00e      	beq.n	8001b00 <DMA2_Stream0_IRQHandler+0xb4>
		{
			if (__DMA2_Stream0_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001ae2:	4b3e      	ldr	r3, [pc, #248]	@ (8001bdc <DMA2_Stream0_IRQHandler+0x190>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d009      	beq.n	8001b00 <DMA2_Stream0_IRQHandler+0xb4>
			{
				__DMA2_Stream0_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8001aec:	4b3b      	ldr	r3, [pc, #236]	@ (8001bdc <DMA2_Stream0_IRQHandler+0x190>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001af2:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CTEIF0;
 8001af4:	4b37      	ldr	r3, [pc, #220]	@ (8001bd4 <DMA2_Stream0_IRQHandler+0x188>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	4a36      	ldr	r2, [pc, #216]	@ (8001bd4 <DMA2_Stream0_IRQHandler+0x188>)
 8001afa:	f043 0308 	orr.w	r3, r3, #8
 8001afe:	6093      	str	r3, [r2, #8]
			}
		}

	}

	if(DMA_LISR & DMA_LISR_HTIF0)
 8001b00:	4b35      	ldr	r3, [pc, #212]	@ (8001bd8 <DMA2_Stream0_IRQHandler+0x18c>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0310 	and.w	r3, r3, #16
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d02d      	beq.n	8001b68 <DMA2_Stream0_IRQHandler+0x11c>
	{
		if(__DMA2_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 8001b0c:	4b33      	ldr	r3, [pc, #204]	@ (8001bdc <DMA2_Stream0_IRQHandler+0x190>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	69db      	ldr	r3, [r3, #28]
 8001b12:	2208      	movs	r2, #8
 8001b14:	4013      	ands	r3, r2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d026      	beq.n	8001b68 <DMA2_Stream0_IRQHandler+0x11c>
		{
			if (__DMA2_Stream0_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001b1a:	4b30      	ldr	r3, [pc, #192]	@ (8001bdc <DMA2_Stream0_IRQHandler+0x190>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d021      	beq.n	8001b68 <DMA2_Stream0_IRQHandler+0x11c>
			{
				__DMA2_Stream0_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001b24:	4b2d      	ldr	r3, [pc, #180]	@ (8001bdc <DMA2_Stream0_IRQHandler+0x190>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b2a:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CHTIF0;
 8001b2c:	4b29      	ldr	r3, [pc, #164]	@ (8001bd4 <DMA2_Stream0_IRQHandler+0x188>)
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	4a28      	ldr	r2, [pc, #160]	@ (8001bd4 <DMA2_Stream0_IRQHandler+0x188>)
 8001b32:	f043 0310 	orr.w	r3, r3, #16
 8001b36:	6093      	str	r3, [r2, #8]

				if(__DMA2_Stream0_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001b38:	4b28      	ldr	r3, [pc, #160]	@ (8001bdc <DMA2_Stream0_IRQHandler+0x190>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b3e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d110      	bne.n	8001b68 <DMA2_Stream0_IRQHandler+0x11c>
				{
					if((__DMA2_Stream0_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001b46:	4b25      	ldr	r3, [pc, #148]	@ (8001bdc <DMA2_Stream0_IRQHandler+0x190>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d004      	beq.n	8001b60 <DMA2_Stream0_IRQHandler+0x114>
					{
						__DMA2_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001b56:	4b21      	ldr	r3, [pc, #132]	@ (8001bdc <DMA2_Stream0_IRQHandler+0x190>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b5c:	4798      	blx	r3
 8001b5e:	e003      	b.n	8001b68 <DMA2_Stream0_IRQHandler+0x11c>
					}
					else
					{
						__DMA2_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001b60:	4b1e      	ldr	r3, [pc, #120]	@ (8001bdc <DMA2_Stream0_IRQHandler+0x190>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b66:	4798      	blx	r3
			}
		}

	}

	if(DMA_LISR & DMA_LISR_TCIF0)
 8001b68:	4b1b      	ldr	r3, [pc, #108]	@ (8001bd8 <DMA2_Stream0_IRQHandler+0x18c>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0320 	and.w	r3, r3, #32
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d02d      	beq.n	8001bd0 <DMA2_Stream0_IRQHandler+0x184>
	{
		if(__DMA2_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 8001b74:	4b19      	ldr	r3, [pc, #100]	@ (8001bdc <DMA2_Stream0_IRQHandler+0x190>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	69db      	ldr	r3, [r3, #28]
 8001b7a:	2210      	movs	r2, #16
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d026      	beq.n	8001bd0 <DMA2_Stream0_IRQHandler+0x184>
		{
			if (__DMA2_Stream0_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001b82:	4b16      	ldr	r3, [pc, #88]	@ (8001bdc <DMA2_Stream0_IRQHandler+0x190>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d021      	beq.n	8001bd0 <DMA2_Stream0_IRQHandler+0x184>
			{
				__DMA2_Stream0_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 8001b8c:	4b13      	ldr	r3, [pc, #76]	@ (8001bdc <DMA2_Stream0_IRQHandler+0x190>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b92:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CTCIF0;
 8001b94:	4b0f      	ldr	r3, [pc, #60]	@ (8001bd4 <DMA2_Stream0_IRQHandler+0x188>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	4a0e      	ldr	r2, [pc, #56]	@ (8001bd4 <DMA2_Stream0_IRQHandler+0x188>)
 8001b9a:	f043 0320 	orr.w	r3, r3, #32
 8001b9e:	6093      	str	r3, [r2, #8]

				if(__DMA2_Stream0_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001ba0:	4b0e      	ldr	r3, [pc, #56]	@ (8001bdc <DMA2_Stream0_IRQHandler+0x190>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ba6:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d110      	bne.n	8001bd0 <DMA2_Stream0_IRQHandler+0x184>
				{
					if((__DMA2_Stream0_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001bae:	4b0b      	ldr	r3, [pc, #44]	@ (8001bdc <DMA2_Stream0_IRQHandler+0x190>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d004      	beq.n	8001bc8 <DMA2_Stream0_IRQHandler+0x17c>
					{
						__DMA2_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001bbe:	4b07      	ldr	r3, [pc, #28]	@ (8001bdc <DMA2_Stream0_IRQHandler+0x190>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bc4:	4798      	blx	r3
				}
			}
		}

	}
}
 8001bc6:	e003      	b.n	8001bd0 <DMA2_Stream0_IRQHandler+0x184>
						__DMA2_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001bc8:	4b04      	ldr	r3, [pc, #16]	@ (8001bdc <DMA2_Stream0_IRQHandler+0x190>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bce:	4798      	blx	r3
}
 8001bd0:	bf00      	nop
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40026400 	.word	0x40026400
 8001bd8:	20000060 	.word	0x20000060
 8001bdc:	20000040 	.word	0x20000040

08001be0 <DMA2_Stream1_IRQHandler>:

void DMA2_Stream1_IRQHandler(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
	DMA_LISR = DMA2 -> LISR;
 8001be4:	4b4f      	ldr	r3, [pc, #316]	@ (8001d24 <DMA2_Stream1_IRQHandler+0x144>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a4f      	ldr	r2, [pc, #316]	@ (8001d28 <DMA2_Stream1_IRQHandler+0x148>)
 8001bea:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF1)
 8001bec:	4b4e      	ldr	r3, [pc, #312]	@ (8001d28 <DMA2_Stream1_IRQHandler+0x148>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d00e      	beq.n	8001c16 <DMA2_Stream1_IRQHandler+0x36>
	{
		if (__DMA2_Stream1_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001bf8:	4b4c      	ldr	r3, [pc, #304]	@ (8001d2c <DMA2_Stream1_IRQHandler+0x14c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d009      	beq.n	8001c16 <DMA2_Stream1_IRQHandler+0x36>
		{
			__DMA2_Stream1_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8001c02:	4b4a      	ldr	r3, [pc, #296]	@ (8001d2c <DMA2_Stream1_IRQHandler+0x14c>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c08:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CFEIF1;
 8001c0a:	4b46      	ldr	r3, [pc, #280]	@ (8001d24 <DMA2_Stream1_IRQHandler+0x144>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	4a45      	ldr	r2, [pc, #276]	@ (8001d24 <DMA2_Stream1_IRQHandler+0x144>)
 8001c10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c14:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_LISR & DMA_LISR_DMEIF1)
 8001c16:	4b44      	ldr	r3, [pc, #272]	@ (8001d28 <DMA2_Stream1_IRQHandler+0x148>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d00e      	beq.n	8001c40 <DMA2_Stream1_IRQHandler+0x60>
	{
		if (__DMA2_Stream1_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8001c22:	4b42      	ldr	r3, [pc, #264]	@ (8001d2c <DMA2_Stream1_IRQHandler+0x14c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d009      	beq.n	8001c40 <DMA2_Stream1_IRQHandler+0x60>
		{
			__DMA2_Stream1_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001c2c:	4b3f      	ldr	r3, [pc, #252]	@ (8001d2c <DMA2_Stream1_IRQHandler+0x14c>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c32:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF1;
 8001c34:	4b3b      	ldr	r3, [pc, #236]	@ (8001d24 <DMA2_Stream1_IRQHandler+0x144>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	4a3a      	ldr	r2, [pc, #232]	@ (8001d24 <DMA2_Stream1_IRQHandler+0x144>)
 8001c3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c3e:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_LISR & DMA_LISR_TEIF1)
 8001c40:	4b39      	ldr	r3, [pc, #228]	@ (8001d28 <DMA2_Stream1_IRQHandler+0x148>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d00e      	beq.n	8001c6a <DMA2_Stream1_IRQHandler+0x8a>
	{
		if (__DMA2_Stream1_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001c4c:	4b37      	ldr	r3, [pc, #220]	@ (8001d2c <DMA2_Stream1_IRQHandler+0x14c>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d009      	beq.n	8001c6a <DMA2_Stream1_IRQHandler+0x8a>
		{
			__DMA2_Stream1_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8001c56:	4b35      	ldr	r3, [pc, #212]	@ (8001d2c <DMA2_Stream1_IRQHandler+0x14c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c5c:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CTEIF1;
 8001c5e:	4b31      	ldr	r3, [pc, #196]	@ (8001d24 <DMA2_Stream1_IRQHandler+0x144>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	4a30      	ldr	r2, [pc, #192]	@ (8001d24 <DMA2_Stream1_IRQHandler+0x144>)
 8001c64:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c68:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF1)
 8001c6a:	4b2f      	ldr	r3, [pc, #188]	@ (8001d28 <DMA2_Stream1_IRQHandler+0x148>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d026      	beq.n	8001cc4 <DMA2_Stream1_IRQHandler+0xe4>
	{
		if (__DMA2_Stream1_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001c76:	4b2d      	ldr	r3, [pc, #180]	@ (8001d2c <DMA2_Stream1_IRQHandler+0x14c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d021      	beq.n	8001cc4 <DMA2_Stream1_IRQHandler+0xe4>
		{
			__DMA2_Stream1_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001c80:	4b2a      	ldr	r3, [pc, #168]	@ (8001d2c <DMA2_Stream1_IRQHandler+0x14c>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c86:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CHTIF1;
 8001c88:	4b26      	ldr	r3, [pc, #152]	@ (8001d24 <DMA2_Stream1_IRQHandler+0x144>)
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	4a25      	ldr	r2, [pc, #148]	@ (8001d24 <DMA2_Stream1_IRQHandler+0x144>)
 8001c8e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c92:	6093      	str	r3, [r2, #8]

			if(__DMA2_Stream1_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001c94:	4b25      	ldr	r3, [pc, #148]	@ (8001d2c <DMA2_Stream1_IRQHandler+0x14c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c9a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d110      	bne.n	8001cc4 <DMA2_Stream1_IRQHandler+0xe4>
			{
				if((__DMA2_Stream1_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001ca2:	4b22      	ldr	r3, [pc, #136]	@ (8001d2c <DMA2_Stream1_IRQHandler+0x14c>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d004      	beq.n	8001cbc <DMA2_Stream1_IRQHandler+0xdc>
				{
					__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001cb2:	4b1e      	ldr	r3, [pc, #120]	@ (8001d2c <DMA2_Stream1_IRQHandler+0x14c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001cb8:	4798      	blx	r3
 8001cba:	e003      	b.n	8001cc4 <DMA2_Stream1_IRQHandler+0xe4>
				}
				else
				{
					__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001cbc:	4b1b      	ldr	r3, [pc, #108]	@ (8001d2c <DMA2_Stream1_IRQHandler+0x14c>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cc2:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TCIF1)
 8001cc4:	4b18      	ldr	r3, [pc, #96]	@ (8001d28 <DMA2_Stream1_IRQHandler+0x148>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d026      	beq.n	8001d1e <DMA2_Stream1_IRQHandler+0x13e>
	{
		if (__DMA2_Stream1_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001cd0:	4b16      	ldr	r3, [pc, #88]	@ (8001d2c <DMA2_Stream1_IRQHandler+0x14c>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d021      	beq.n	8001d1e <DMA2_Stream1_IRQHandler+0x13e>
		{
			__DMA2_Stream1_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001cda:	4b14      	ldr	r3, [pc, #80]	@ (8001d2c <DMA2_Stream1_IRQHandler+0x14c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ce0:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CTCIF1;
 8001ce2:	4b10      	ldr	r3, [pc, #64]	@ (8001d24 <DMA2_Stream1_IRQHandler+0x144>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	4a0f      	ldr	r2, [pc, #60]	@ (8001d24 <DMA2_Stream1_IRQHandler+0x144>)
 8001ce8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001cec:	6093      	str	r3, [r2, #8]

			if(__DMA2_Stream1_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001cee:	4b0f      	ldr	r3, [pc, #60]	@ (8001d2c <DMA2_Stream1_IRQHandler+0x14c>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cf4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d110      	bne.n	8001d1e <DMA2_Stream1_IRQHandler+0x13e>
			{
				if((__DMA2_Stream1_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001cfc:	4b0b      	ldr	r3, [pc, #44]	@ (8001d2c <DMA2_Stream1_IRQHandler+0x14c>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d004      	beq.n	8001d16 <DMA2_Stream1_IRQHandler+0x136>
				{
					__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001d0c:	4b07      	ldr	r3, [pc, #28]	@ (8001d2c <DMA2_Stream1_IRQHandler+0x14c>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d12:	4798      	blx	r3
					__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 8001d14:	e003      	b.n	8001d1e <DMA2_Stream1_IRQHandler+0x13e>
					__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001d16:	4b05      	ldr	r3, [pc, #20]	@ (8001d2c <DMA2_Stream1_IRQHandler+0x14c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d1c:	4798      	blx	r3
}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40026400 	.word	0x40026400
 8001d28:	20000060 	.word	0x20000060
 8001d2c:	20000044 	.word	0x20000044

08001d30 <DMA2_Stream2_IRQHandler>:


void DMA2_Stream2_IRQHandler(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
	DMA_LISR = DMA2 -> LISR;
 8001d34:	4b4f      	ldr	r3, [pc, #316]	@ (8001e74 <DMA2_Stream2_IRQHandler+0x144>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a4f      	ldr	r2, [pc, #316]	@ (8001e78 <DMA2_Stream2_IRQHandler+0x148>)
 8001d3a:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF2)
 8001d3c:	4b4e      	ldr	r3, [pc, #312]	@ (8001e78 <DMA2_Stream2_IRQHandler+0x148>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d00e      	beq.n	8001d66 <DMA2_Stream2_IRQHandler+0x36>
	{
		if (__DMA2_Stream2_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001d48:	4b4c      	ldr	r3, [pc, #304]	@ (8001e7c <DMA2_Stream2_IRQHandler+0x14c>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d009      	beq.n	8001d66 <DMA2_Stream2_IRQHandler+0x36>
		{
			__DMA2_Stream2_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8001d52:	4b4a      	ldr	r3, [pc, #296]	@ (8001e7c <DMA2_Stream2_IRQHandler+0x14c>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d58:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CFEIF2;
 8001d5a:	4b46      	ldr	r3, [pc, #280]	@ (8001e74 <DMA2_Stream2_IRQHandler+0x144>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	4a45      	ldr	r2, [pc, #276]	@ (8001e74 <DMA2_Stream2_IRQHandler+0x144>)
 8001d60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d64:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_LISR & DMA_LISR_DMEIF2)
 8001d66:	4b44      	ldr	r3, [pc, #272]	@ (8001e78 <DMA2_Stream2_IRQHandler+0x148>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d00e      	beq.n	8001d90 <DMA2_Stream2_IRQHandler+0x60>
	{
		if (__DMA2_Stream2_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8001d72:	4b42      	ldr	r3, [pc, #264]	@ (8001e7c <DMA2_Stream2_IRQHandler+0x14c>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d009      	beq.n	8001d90 <DMA2_Stream2_IRQHandler+0x60>
		{
			__DMA2_Stream2_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001d7c:	4b3f      	ldr	r3, [pc, #252]	@ (8001e7c <DMA2_Stream2_IRQHandler+0x14c>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d82:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF2;
 8001d84:	4b3b      	ldr	r3, [pc, #236]	@ (8001e74 <DMA2_Stream2_IRQHandler+0x144>)
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	4a3a      	ldr	r2, [pc, #232]	@ (8001e74 <DMA2_Stream2_IRQHandler+0x144>)
 8001d8a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d8e:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_LISR & DMA_LISR_TEIF2)
 8001d90:	4b39      	ldr	r3, [pc, #228]	@ (8001e78 <DMA2_Stream2_IRQHandler+0x148>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d00e      	beq.n	8001dba <DMA2_Stream2_IRQHandler+0x8a>
	{
		if (__DMA2_Stream2_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001d9c:	4b37      	ldr	r3, [pc, #220]	@ (8001e7c <DMA2_Stream2_IRQHandler+0x14c>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d009      	beq.n	8001dba <DMA2_Stream2_IRQHandler+0x8a>
		{
			__DMA2_Stream2_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8001da6:	4b35      	ldr	r3, [pc, #212]	@ (8001e7c <DMA2_Stream2_IRQHandler+0x14c>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dac:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CTEIF2;
 8001dae:	4b31      	ldr	r3, [pc, #196]	@ (8001e74 <DMA2_Stream2_IRQHandler+0x144>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	4a30      	ldr	r2, [pc, #192]	@ (8001e74 <DMA2_Stream2_IRQHandler+0x144>)
 8001db4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001db8:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF2)
 8001dba:	4b2f      	ldr	r3, [pc, #188]	@ (8001e78 <DMA2_Stream2_IRQHandler+0x148>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d026      	beq.n	8001e14 <DMA2_Stream2_IRQHandler+0xe4>
	{
		if (__DMA2_Stream2_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001dc6:	4b2d      	ldr	r3, [pc, #180]	@ (8001e7c <DMA2_Stream2_IRQHandler+0x14c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d021      	beq.n	8001e14 <DMA2_Stream2_IRQHandler+0xe4>
		{
			__DMA2_Stream2_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001dd0:	4b2a      	ldr	r3, [pc, #168]	@ (8001e7c <DMA2_Stream2_IRQHandler+0x14c>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dd6:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CHTIF2;
 8001dd8:	4b26      	ldr	r3, [pc, #152]	@ (8001e74 <DMA2_Stream2_IRQHandler+0x144>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	4a25      	ldr	r2, [pc, #148]	@ (8001e74 <DMA2_Stream2_IRQHandler+0x144>)
 8001dde:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001de2:	6093      	str	r3, [r2, #8]

			if(__DMA2_Stream2_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001de4:	4b25      	ldr	r3, [pc, #148]	@ (8001e7c <DMA2_Stream2_IRQHandler+0x14c>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001dea:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d110      	bne.n	8001e14 <DMA2_Stream2_IRQHandler+0xe4>
			{
				if((__DMA2_Stream2_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001df2:	4b22      	ldr	r3, [pc, #136]	@ (8001e7c <DMA2_Stream2_IRQHandler+0x14c>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d004      	beq.n	8001e0c <DMA2_Stream2_IRQHandler+0xdc>
				{
					__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001e02:	4b1e      	ldr	r3, [pc, #120]	@ (8001e7c <DMA2_Stream2_IRQHandler+0x14c>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e08:	4798      	blx	r3
 8001e0a:	e003      	b.n	8001e14 <DMA2_Stream2_IRQHandler+0xe4>
				}
				else
				{
					__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001e0c:	4b1b      	ldr	r3, [pc, #108]	@ (8001e7c <DMA2_Stream2_IRQHandler+0x14c>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e12:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TCIF2)
 8001e14:	4b18      	ldr	r3, [pc, #96]	@ (8001e78 <DMA2_Stream2_IRQHandler+0x148>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d026      	beq.n	8001e6e <DMA2_Stream2_IRQHandler+0x13e>
	{
		if (__DMA2_Stream2_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001e20:	4b16      	ldr	r3, [pc, #88]	@ (8001e7c <DMA2_Stream2_IRQHandler+0x14c>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d021      	beq.n	8001e6e <DMA2_Stream2_IRQHandler+0x13e>
		{
			__DMA2_Stream2_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001e2a:	4b14      	ldr	r3, [pc, #80]	@ (8001e7c <DMA2_Stream2_IRQHandler+0x14c>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e30:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_LIFCR_CTCIF2;
 8001e32:	4b10      	ldr	r3, [pc, #64]	@ (8001e74 <DMA2_Stream2_IRQHandler+0x144>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	4a0f      	ldr	r2, [pc, #60]	@ (8001e74 <DMA2_Stream2_IRQHandler+0x144>)
 8001e38:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e3c:	6093      	str	r3, [r2, #8]

			if(__DMA2_Stream2_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001e3e:	4b0f      	ldr	r3, [pc, #60]	@ (8001e7c <DMA2_Stream2_IRQHandler+0x14c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e44:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d110      	bne.n	8001e6e <DMA2_Stream2_IRQHandler+0x13e>
			{
				if((__DMA2_Stream2_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e7c <DMA2_Stream2_IRQHandler+0x14c>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d004      	beq.n	8001e66 <DMA2_Stream2_IRQHandler+0x136>
				{
					__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001e5c:	4b07      	ldr	r3, [pc, #28]	@ (8001e7c <DMA2_Stream2_IRQHandler+0x14c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e62:	4798      	blx	r3
					__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 8001e64:	e003      	b.n	8001e6e <DMA2_Stream2_IRQHandler+0x13e>
					__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001e66:	4b05      	ldr	r3, [pc, #20]	@ (8001e7c <DMA2_Stream2_IRQHandler+0x14c>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e6c:	4798      	blx	r3
}
 8001e6e:	bf00      	nop
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	40026400 	.word	0x40026400
 8001e78:	20000060 	.word	0x20000060
 8001e7c:	20000048 	.word	0x20000048

08001e80 <DMA2_Stream3_IRQHandler>:

void DMA2_Stream3_IRQHandler(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
	DMA_LISR = DMA2 -> LISR;
 8001e84:	4b60      	ldr	r3, [pc, #384]	@ (8002008 <DMA2_Stream3_IRQHandler+0x188>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a60      	ldr	r2, [pc, #384]	@ (800200c <DMA2_Stream3_IRQHandler+0x18c>)
 8001e8a:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF3)
 8001e8c:	4b5f      	ldr	r3, [pc, #380]	@ (800200c <DMA2_Stream3_IRQHandler+0x18c>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d015      	beq.n	8001ec4 <DMA2_Stream3_IRQHandler+0x44>
	{
		if(__DMA2_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 8001e98:	4b5d      	ldr	r3, [pc, #372]	@ (8002010 <DMA2_Stream3_IRQHandler+0x190>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	69db      	ldr	r3, [r3, #28]
 8001e9e:	2280      	movs	r2, #128	@ 0x80
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d00e      	beq.n	8001ec4 <DMA2_Stream3_IRQHandler+0x44>
		{
			if (__DMA2_Stream3_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001ea6:	4b5a      	ldr	r3, [pc, #360]	@ (8002010 <DMA2_Stream3_IRQHandler+0x190>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d009      	beq.n	8001ec4 <DMA2_Stream3_IRQHandler+0x44>
			{
				__DMA2_Stream3_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8001eb0:	4b57      	ldr	r3, [pc, #348]	@ (8002010 <DMA2_Stream3_IRQHandler+0x190>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001eb6:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CFEIF3;
 8001eb8:	4b53      	ldr	r3, [pc, #332]	@ (8002008 <DMA2_Stream3_IRQHandler+0x188>)
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	4a52      	ldr	r2, [pc, #328]	@ (8002008 <DMA2_Stream3_IRQHandler+0x188>)
 8001ebe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001ec2:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_DMEIF3)
 8001ec4:	4b51      	ldr	r3, [pc, #324]	@ (800200c <DMA2_Stream3_IRQHandler+0x18c>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d015      	beq.n	8001efc <DMA2_Stream3_IRQHandler+0x7c>
	{
		if(__DMA2_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 8001ed0:	4b4f      	ldr	r3, [pc, #316]	@ (8002010 <DMA2_Stream3_IRQHandler+0x190>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	69db      	ldr	r3, [r3, #28]
 8001ed6:	2202      	movs	r2, #2
 8001ed8:	4013      	ands	r3, r2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d00e      	beq.n	8001efc <DMA2_Stream3_IRQHandler+0x7c>
		{
			if (__DMA2_Stream3_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8001ede:	4b4c      	ldr	r3, [pc, #304]	@ (8002010 <DMA2_Stream3_IRQHandler+0x190>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d009      	beq.n	8001efc <DMA2_Stream3_IRQHandler+0x7c>
			{
				__DMA2_Stream3_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001ee8:	4b49      	ldr	r3, [pc, #292]	@ (8002010 <DMA2_Stream3_IRQHandler+0x190>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eee:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF3;
 8001ef0:	4b45      	ldr	r3, [pc, #276]	@ (8002008 <DMA2_Stream3_IRQHandler+0x188>)
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	4a44      	ldr	r2, [pc, #272]	@ (8002008 <DMA2_Stream3_IRQHandler+0x188>)
 8001ef6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001efa:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_TEIF3)
 8001efc:	4b43      	ldr	r3, [pc, #268]	@ (800200c <DMA2_Stream3_IRQHandler+0x18c>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d015      	beq.n	8001f34 <DMA2_Stream3_IRQHandler+0xb4>
	{
		if(__DMA2_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 8001f08:	4b41      	ldr	r3, [pc, #260]	@ (8002010 <DMA2_Stream3_IRQHandler+0x190>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	69db      	ldr	r3, [r3, #28]
 8001f0e:	2204      	movs	r2, #4
 8001f10:	4013      	ands	r3, r2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d00e      	beq.n	8001f34 <DMA2_Stream3_IRQHandler+0xb4>
		{
			if (__DMA2_Stream3_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001f16:	4b3e      	ldr	r3, [pc, #248]	@ (8002010 <DMA2_Stream3_IRQHandler+0x190>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d009      	beq.n	8001f34 <DMA2_Stream3_IRQHandler+0xb4>
			{
				__DMA2_Stream3_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8001f20:	4b3b      	ldr	r3, [pc, #236]	@ (8002010 <DMA2_Stream3_IRQHandler+0x190>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f26:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CTEIF3;
 8001f28:	4b37      	ldr	r3, [pc, #220]	@ (8002008 <DMA2_Stream3_IRQHandler+0x188>)
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	4a36      	ldr	r2, [pc, #216]	@ (8002008 <DMA2_Stream3_IRQHandler+0x188>)
 8001f2e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f32:	6093      	str	r3, [r2, #8]
			}
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF3)
 8001f34:	4b35      	ldr	r3, [pc, #212]	@ (800200c <DMA2_Stream3_IRQHandler+0x18c>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d02d      	beq.n	8001f9c <DMA2_Stream3_IRQHandler+0x11c>
	{
		if(__DMA2_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 8001f40:	4b33      	ldr	r3, [pc, #204]	@ (8002010 <DMA2_Stream3_IRQHandler+0x190>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	69db      	ldr	r3, [r3, #28]
 8001f46:	2208      	movs	r2, #8
 8001f48:	4013      	ands	r3, r2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d026      	beq.n	8001f9c <DMA2_Stream3_IRQHandler+0x11c>
		{
			if (__DMA2_Stream3_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001f4e:	4b30      	ldr	r3, [pc, #192]	@ (8002010 <DMA2_Stream3_IRQHandler+0x190>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d021      	beq.n	8001f9c <DMA2_Stream3_IRQHandler+0x11c>
			{
				__DMA2_Stream3_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001f58:	4b2d      	ldr	r3, [pc, #180]	@ (8002010 <DMA2_Stream3_IRQHandler+0x190>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f5e:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CHTIF3;
 8001f60:	4b29      	ldr	r3, [pc, #164]	@ (8002008 <DMA2_Stream3_IRQHandler+0x188>)
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	4a28      	ldr	r2, [pc, #160]	@ (8002008 <DMA2_Stream3_IRQHandler+0x188>)
 8001f66:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001f6a:	6093      	str	r3, [r2, #8]

				if(__DMA2_Stream3_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001f6c:	4b28      	ldr	r3, [pc, #160]	@ (8002010 <DMA2_Stream3_IRQHandler+0x190>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f72:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d110      	bne.n	8001f9c <DMA2_Stream3_IRQHandler+0x11c>
				{
					if((__DMA2_Stream3_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001f7a:	4b25      	ldr	r3, [pc, #148]	@ (8002010 <DMA2_Stream3_IRQHandler+0x190>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d004      	beq.n	8001f94 <DMA2_Stream3_IRQHandler+0x114>
					{
						__DMA2_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001f8a:	4b21      	ldr	r3, [pc, #132]	@ (8002010 <DMA2_Stream3_IRQHandler+0x190>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f90:	4798      	blx	r3
 8001f92:	e003      	b.n	8001f9c <DMA2_Stream3_IRQHandler+0x11c>
					}
					else
					{
						__DMA2_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001f94:	4b1e      	ldr	r3, [pc, #120]	@ (8002010 <DMA2_Stream3_IRQHandler+0x190>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f9a:	4798      	blx	r3
			}
		}

	}

	if(DMA_LISR & DMA_LISR_TCIF3)
 8001f9c:	4b1b      	ldr	r3, [pc, #108]	@ (800200c <DMA2_Stream3_IRQHandler+0x18c>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d02d      	beq.n	8002004 <DMA2_Stream3_IRQHandler+0x184>
	{
		if(__DMA2_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 8001fa8:	4b19      	ldr	r3, [pc, #100]	@ (8002010 <DMA2_Stream3_IRQHandler+0x190>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	69db      	ldr	r3, [r3, #28]
 8001fae:	2210      	movs	r2, #16
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d026      	beq.n	8002004 <DMA2_Stream3_IRQHandler+0x184>
		{
			if (__DMA2_Stream3_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001fb6:	4b16      	ldr	r3, [pc, #88]	@ (8002010 <DMA2_Stream3_IRQHandler+0x190>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d021      	beq.n	8002004 <DMA2_Stream3_IRQHandler+0x184>
			{
				__DMA2_Stream3_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 8001fc0:	4b13      	ldr	r3, [pc, #76]	@ (8002010 <DMA2_Stream3_IRQHandler+0x190>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fc6:	4798      	blx	r3
				DMA2 -> LIFCR |= DMA_LIFCR_CTCIF3;
 8001fc8:	4b0f      	ldr	r3, [pc, #60]	@ (8002008 <DMA2_Stream3_IRQHandler+0x188>)
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	4a0e      	ldr	r2, [pc, #56]	@ (8002008 <DMA2_Stream3_IRQHandler+0x188>)
 8001fce:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001fd2:	6093      	str	r3, [r2, #8]

				if(__DMA2_Stream3_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001fd4:	4b0e      	ldr	r3, [pc, #56]	@ (8002010 <DMA2_Stream3_IRQHandler+0x190>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fda:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d110      	bne.n	8002004 <DMA2_Stream3_IRQHandler+0x184>
				{
					if((__DMA2_Stream3_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001fe2:	4b0b      	ldr	r3, [pc, #44]	@ (8002010 <DMA2_Stream3_IRQHandler+0x190>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d004      	beq.n	8001ffc <DMA2_Stream3_IRQHandler+0x17c>
					{
						__DMA2_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001ff2:	4b07      	ldr	r3, [pc, #28]	@ (8002010 <DMA2_Stream3_IRQHandler+0x190>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ff8:	4798      	blx	r3
					}
				}
			}
		}
	}
}
 8001ffa:	e003      	b.n	8002004 <DMA2_Stream3_IRQHandler+0x184>
						__DMA2_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001ffc:	4b04      	ldr	r3, [pc, #16]	@ (8002010 <DMA2_Stream3_IRQHandler+0x190>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002002:	4798      	blx	r3
}
 8002004:	bf00      	nop
 8002006:	bd80      	pop	{r7, pc}
 8002008:	40026400 	.word	0x40026400
 800200c:	20000060 	.word	0x20000060
 8002010:	2000004c 	.word	0x2000004c

08002014 <DMA2_Stream4_IRQHandler>:

void DMA2_Stream4_IRQHandler(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
	DMA_HISR = DMA2 -> HISR;
 8002018:	4b4f      	ldr	r3, [pc, #316]	@ (8002158 <DMA2_Stream4_IRQHandler+0x144>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	4a4f      	ldr	r2, [pc, #316]	@ (800215c <DMA2_Stream4_IRQHandler+0x148>)
 800201e:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF4)
 8002020:	4b4e      	ldr	r3, [pc, #312]	@ (800215c <DMA2_Stream4_IRQHandler+0x148>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0301 	and.w	r3, r3, #1
 8002028:	2b00      	cmp	r3, #0
 800202a:	d00e      	beq.n	800204a <DMA2_Stream4_IRQHandler+0x36>
	{
		if (__DMA2_Stream4_Config__ -> ISR_Routines.FIFO_Error_ISR)
 800202c:	4b4c      	ldr	r3, [pc, #304]	@ (8002160 <DMA2_Stream4_IRQHandler+0x14c>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002032:	2b00      	cmp	r3, #0
 8002034:	d009      	beq.n	800204a <DMA2_Stream4_IRQHandler+0x36>
		{
			__DMA2_Stream4_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8002036:	4b4a      	ldr	r3, [pc, #296]	@ (8002160 <DMA2_Stream4_IRQHandler+0x14c>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800203c:	4798      	blx	r3
			DMA2 -> LIFCR |= DMA_HIFCR_CFEIF5;
 800203e:	4b46      	ldr	r3, [pc, #280]	@ (8002158 <DMA2_Stream4_IRQHandler+0x144>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	4a45      	ldr	r2, [pc, #276]	@ (8002158 <DMA2_Stream4_IRQHandler+0x144>)
 8002044:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002048:	6093      	str	r3, [r2, #8]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF4)
 800204a:	4b44      	ldr	r3, [pc, #272]	@ (800215c <DMA2_Stream4_IRQHandler+0x148>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0304 	and.w	r3, r3, #4
 8002052:	2b00      	cmp	r3, #0
 8002054:	d00e      	beq.n	8002074 <DMA2_Stream4_IRQHandler+0x60>
	{
		if (__DMA2_Stream4_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8002056:	4b42      	ldr	r3, [pc, #264]	@ (8002160 <DMA2_Stream4_IRQHandler+0x14c>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800205c:	2b00      	cmp	r3, #0
 800205e:	d009      	beq.n	8002074 <DMA2_Stream4_IRQHandler+0x60>
		{
			__DMA2_Stream4_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8002060:	4b3f      	ldr	r3, [pc, #252]	@ (8002160 <DMA2_Stream4_IRQHandler+0x14c>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002066:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF4;
 8002068:	4b3b      	ldr	r3, [pc, #236]	@ (8002158 <DMA2_Stream4_IRQHandler+0x144>)
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	4a3a      	ldr	r2, [pc, #232]	@ (8002158 <DMA2_Stream4_IRQHandler+0x144>)
 800206e:	f043 0304 	orr.w	r3, r3, #4
 8002072:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF4)
 8002074:	4b39      	ldr	r3, [pc, #228]	@ (800215c <DMA2_Stream4_IRQHandler+0x148>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0308 	and.w	r3, r3, #8
 800207c:	2b00      	cmp	r3, #0
 800207e:	d00e      	beq.n	800209e <DMA2_Stream4_IRQHandler+0x8a>
	{
		if (__DMA2_Stream4_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8002080:	4b37      	ldr	r3, [pc, #220]	@ (8002160 <DMA2_Stream4_IRQHandler+0x14c>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002086:	2b00      	cmp	r3, #0
 8002088:	d009      	beq.n	800209e <DMA2_Stream4_IRQHandler+0x8a>
		{
			__DMA2_Stream4_Config__ ->ISR_Routines.Transfer_Error_ISR();
 800208a:	4b35      	ldr	r3, [pc, #212]	@ (8002160 <DMA2_Stream4_IRQHandler+0x14c>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002090:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTEIF4;
 8002092:	4b31      	ldr	r3, [pc, #196]	@ (8002158 <DMA2_Stream4_IRQHandler+0x144>)
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	4a30      	ldr	r2, [pc, #192]	@ (8002158 <DMA2_Stream4_IRQHandler+0x144>)
 8002098:	f043 0308 	orr.w	r3, r3, #8
 800209c:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF4)
 800209e:	4b2f      	ldr	r3, [pc, #188]	@ (800215c <DMA2_Stream4_IRQHandler+0x148>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0310 	and.w	r3, r3, #16
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d026      	beq.n	80020f8 <DMA2_Stream4_IRQHandler+0xe4>
	{
		if (__DMA2_Stream4_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 80020aa:	4b2d      	ldr	r3, [pc, #180]	@ (8002160 <DMA2_Stream4_IRQHandler+0x14c>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d021      	beq.n	80020f8 <DMA2_Stream4_IRQHandler+0xe4>
		{
			__DMA2_Stream4_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80020b4:	4b2a      	ldr	r3, [pc, #168]	@ (8002160 <DMA2_Stream4_IRQHandler+0x14c>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020ba:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CHTIF4;
 80020bc:	4b26      	ldr	r3, [pc, #152]	@ (8002158 <DMA2_Stream4_IRQHandler+0x144>)
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	4a25      	ldr	r2, [pc, #148]	@ (8002158 <DMA2_Stream4_IRQHandler+0x144>)
 80020c2:	f043 0310 	orr.w	r3, r3, #16
 80020c6:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream4_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80020c8:	4b25      	ldr	r3, [pc, #148]	@ (8002160 <DMA2_Stream4_IRQHandler+0x14c>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020ce:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d110      	bne.n	80020f8 <DMA2_Stream4_IRQHandler+0xe4>
			{
				if((__DMA2_Stream4_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80020d6:	4b22      	ldr	r3, [pc, #136]	@ (8002160 <DMA2_Stream4_IRQHandler+0x14c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d004      	beq.n	80020f0 <DMA2_Stream4_IRQHandler+0xdc>
				{
					__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80020e6:	4b1e      	ldr	r3, [pc, #120]	@ (8002160 <DMA2_Stream4_IRQHandler+0x14c>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020ec:	4798      	blx	r3
 80020ee:	e003      	b.n	80020f8 <DMA2_Stream4_IRQHandler+0xe4>
				}
				else
				{
					__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80020f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002160 <DMA2_Stream4_IRQHandler+0x14c>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020f6:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF4)
 80020f8:	4b18      	ldr	r3, [pc, #96]	@ (800215c <DMA2_Stream4_IRQHandler+0x148>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0320 	and.w	r3, r3, #32
 8002100:	2b00      	cmp	r3, #0
 8002102:	d026      	beq.n	8002152 <DMA2_Stream4_IRQHandler+0x13e>
	{
		if (__DMA2_Stream4_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8002104:	4b16      	ldr	r3, [pc, #88]	@ (8002160 <DMA2_Stream4_IRQHandler+0x14c>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800210a:	2b00      	cmp	r3, #0
 800210c:	d021      	beq.n	8002152 <DMA2_Stream4_IRQHandler+0x13e>
		{
			__DMA2_Stream4_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 800210e:	4b14      	ldr	r3, [pc, #80]	@ (8002160 <DMA2_Stream4_IRQHandler+0x14c>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002114:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTCIF4;
 8002116:	4b10      	ldr	r3, [pc, #64]	@ (8002158 <DMA2_Stream4_IRQHandler+0x144>)
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	4a0f      	ldr	r2, [pc, #60]	@ (8002158 <DMA2_Stream4_IRQHandler+0x144>)
 800211c:	f043 0320 	orr.w	r3, r3, #32
 8002120:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream4_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8002122:	4b0f      	ldr	r3, [pc, #60]	@ (8002160 <DMA2_Stream4_IRQHandler+0x14c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002128:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800212c:	4293      	cmp	r3, r2
 800212e:	d110      	bne.n	8002152 <DMA2_Stream4_IRQHandler+0x13e>
			{
				if((__DMA2_Stream4_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8002130:	4b0b      	ldr	r3, [pc, #44]	@ (8002160 <DMA2_Stream4_IRQHandler+0x14c>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d004      	beq.n	800214a <DMA2_Stream4_IRQHandler+0x136>
				{
					__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8002140:	4b07      	ldr	r3, [pc, #28]	@ (8002160 <DMA2_Stream4_IRQHandler+0x14c>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002146:	4798      	blx	r3
					__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 8002148:	e003      	b.n	8002152 <DMA2_Stream4_IRQHandler+0x13e>
					__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800214a:	4b05      	ldr	r3, [pc, #20]	@ (8002160 <DMA2_Stream4_IRQHandler+0x14c>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002150:	4798      	blx	r3
}
 8002152:	bf00      	nop
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	40026400 	.word	0x40026400
 800215c:	20000064 	.word	0x20000064
 8002160:	20000050 	.word	0x20000050

08002164 <DMA2_Stream5_IRQHandler>:




void DMA2_Stream5_IRQHandler(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
	DMA_HISR = DMA2 -> HISR;
 8002168:	4b4f      	ldr	r3, [pc, #316]	@ (80022a8 <DMA2_Stream5_IRQHandler+0x144>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	4a4f      	ldr	r2, [pc, #316]	@ (80022ac <DMA2_Stream5_IRQHandler+0x148>)
 800216e:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF5)
 8002170:	4b4e      	ldr	r3, [pc, #312]	@ (80022ac <DMA2_Stream5_IRQHandler+0x148>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002178:	2b00      	cmp	r3, #0
 800217a:	d00e      	beq.n	800219a <DMA2_Stream5_IRQHandler+0x36>
	{
		if (__DMA2_Stream5_Config__ -> ISR_Routines.FIFO_Error_ISR)
 800217c:	4b4c      	ldr	r3, [pc, #304]	@ (80022b0 <DMA2_Stream5_IRQHandler+0x14c>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002182:	2b00      	cmp	r3, #0
 8002184:	d009      	beq.n	800219a <DMA2_Stream5_IRQHandler+0x36>
		{
			__DMA2_Stream5_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8002186:	4b4a      	ldr	r3, [pc, #296]	@ (80022b0 <DMA2_Stream5_IRQHandler+0x14c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800218c:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CFEIF5;
 800218e:	4b46      	ldr	r3, [pc, #280]	@ (80022a8 <DMA2_Stream5_IRQHandler+0x144>)
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	4a45      	ldr	r2, [pc, #276]	@ (80022a8 <DMA2_Stream5_IRQHandler+0x144>)
 8002194:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002198:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF5)
 800219a:	4b44      	ldr	r3, [pc, #272]	@ (80022ac <DMA2_Stream5_IRQHandler+0x148>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00e      	beq.n	80021c4 <DMA2_Stream5_IRQHandler+0x60>
	{
		if (__DMA2_Stream5_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 80021a6:	4b42      	ldr	r3, [pc, #264]	@ (80022b0 <DMA2_Stream5_IRQHandler+0x14c>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d009      	beq.n	80021c4 <DMA2_Stream5_IRQHandler+0x60>
		{
			__DMA2_Stream5_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 80021b0:	4b3f      	ldr	r3, [pc, #252]	@ (80022b0 <DMA2_Stream5_IRQHandler+0x14c>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b6:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF5;
 80021b8:	4b3b      	ldr	r3, [pc, #236]	@ (80022a8 <DMA2_Stream5_IRQHandler+0x144>)
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	4a3a      	ldr	r2, [pc, #232]	@ (80022a8 <DMA2_Stream5_IRQHandler+0x144>)
 80021be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021c2:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF5)
 80021c4:	4b39      	ldr	r3, [pc, #228]	@ (80022ac <DMA2_Stream5_IRQHandler+0x148>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d00e      	beq.n	80021ee <DMA2_Stream5_IRQHandler+0x8a>
	{
		if (__DMA2_Stream5_Config__ -> ISR_Routines.Transfer_Error_ISR)
 80021d0:	4b37      	ldr	r3, [pc, #220]	@ (80022b0 <DMA2_Stream5_IRQHandler+0x14c>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d009      	beq.n	80021ee <DMA2_Stream5_IRQHandler+0x8a>
		{
			__DMA2_Stream5_Config__ ->ISR_Routines.Transfer_Error_ISR();
 80021da:	4b35      	ldr	r3, [pc, #212]	@ (80022b0 <DMA2_Stream5_IRQHandler+0x14c>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021e0:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTEIF5;
 80021e2:	4b31      	ldr	r3, [pc, #196]	@ (80022a8 <DMA2_Stream5_IRQHandler+0x144>)
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	4a30      	ldr	r2, [pc, #192]	@ (80022a8 <DMA2_Stream5_IRQHandler+0x144>)
 80021e8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021ec:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF5)
 80021ee:	4b2f      	ldr	r3, [pc, #188]	@ (80022ac <DMA2_Stream5_IRQHandler+0x148>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d026      	beq.n	8002248 <DMA2_Stream5_IRQHandler+0xe4>
	{
		if (__DMA2_Stream5_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 80021fa:	4b2d      	ldr	r3, [pc, #180]	@ (80022b0 <DMA2_Stream5_IRQHandler+0x14c>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002200:	2b00      	cmp	r3, #0
 8002202:	d021      	beq.n	8002248 <DMA2_Stream5_IRQHandler+0xe4>
		{
			__DMA2_Stream5_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8002204:	4b2a      	ldr	r3, [pc, #168]	@ (80022b0 <DMA2_Stream5_IRQHandler+0x14c>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800220a:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CHTIF5;
 800220c:	4b26      	ldr	r3, [pc, #152]	@ (80022a8 <DMA2_Stream5_IRQHandler+0x144>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	4a25      	ldr	r2, [pc, #148]	@ (80022a8 <DMA2_Stream5_IRQHandler+0x144>)
 8002212:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002216:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream5_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8002218:	4b25      	ldr	r3, [pc, #148]	@ (80022b0 <DMA2_Stream5_IRQHandler+0x14c>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800221e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002222:	4293      	cmp	r3, r2
 8002224:	d110      	bne.n	8002248 <DMA2_Stream5_IRQHandler+0xe4>
			{
				if((__DMA2_Stream5_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8002226:	4b22      	ldr	r3, [pc, #136]	@ (80022b0 <DMA2_Stream5_IRQHandler+0x14c>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d004      	beq.n	8002240 <DMA2_Stream5_IRQHandler+0xdc>
				{
					__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8002236:	4b1e      	ldr	r3, [pc, #120]	@ (80022b0 <DMA2_Stream5_IRQHandler+0x14c>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800223c:	4798      	blx	r3
 800223e:	e003      	b.n	8002248 <DMA2_Stream5_IRQHandler+0xe4>
				}
				else
				{
					__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8002240:	4b1b      	ldr	r3, [pc, #108]	@ (80022b0 <DMA2_Stream5_IRQHandler+0x14c>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002246:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF5)
 8002248:	4b18      	ldr	r3, [pc, #96]	@ (80022ac <DMA2_Stream5_IRQHandler+0x148>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002250:	2b00      	cmp	r3, #0
 8002252:	d026      	beq.n	80022a2 <DMA2_Stream5_IRQHandler+0x13e>
	{
		if (__DMA2_Stream5_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8002254:	4b16      	ldr	r3, [pc, #88]	@ (80022b0 <DMA2_Stream5_IRQHandler+0x14c>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800225a:	2b00      	cmp	r3, #0
 800225c:	d021      	beq.n	80022a2 <DMA2_Stream5_IRQHandler+0x13e>
		{
			__DMA2_Stream5_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 800225e:	4b14      	ldr	r3, [pc, #80]	@ (80022b0 <DMA2_Stream5_IRQHandler+0x14c>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002264:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTCIF5;
 8002266:	4b10      	ldr	r3, [pc, #64]	@ (80022a8 <DMA2_Stream5_IRQHandler+0x144>)
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	4a0f      	ldr	r2, [pc, #60]	@ (80022a8 <DMA2_Stream5_IRQHandler+0x144>)
 800226c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002270:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream5_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8002272:	4b0f      	ldr	r3, [pc, #60]	@ (80022b0 <DMA2_Stream5_IRQHandler+0x14c>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002278:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800227c:	4293      	cmp	r3, r2
 800227e:	d110      	bne.n	80022a2 <DMA2_Stream5_IRQHandler+0x13e>
			{
				if((__DMA2_Stream5_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8002280:	4b0b      	ldr	r3, [pc, #44]	@ (80022b0 <DMA2_Stream5_IRQHandler+0x14c>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d004      	beq.n	800229a <DMA2_Stream5_IRQHandler+0x136>
				{
					__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8002290:	4b07      	ldr	r3, [pc, #28]	@ (80022b0 <DMA2_Stream5_IRQHandler+0x14c>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002296:	4798      	blx	r3
					__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 8002298:	e003      	b.n	80022a2 <DMA2_Stream5_IRQHandler+0x13e>
					__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800229a:	4b05      	ldr	r3, [pc, #20]	@ (80022b0 <DMA2_Stream5_IRQHandler+0x14c>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022a0:	4798      	blx	r3
}
 80022a2:	bf00      	nop
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	40026400 	.word	0x40026400
 80022ac:	20000064 	.word	0x20000064
 80022b0:	20000054 	.word	0x20000054

080022b4 <DMA2_Stream6_IRQHandler>:



void DMA2_Stream6_IRQHandler(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
	DMA_HISR = DMA2 -> HISR;
 80022b8:	4b4f      	ldr	r3, [pc, #316]	@ (80023f8 <DMA2_Stream6_IRQHandler+0x144>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	4a4f      	ldr	r2, [pc, #316]	@ (80023fc <DMA2_Stream6_IRQHandler+0x148>)
 80022be:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF6)
 80022c0:	4b4e      	ldr	r3, [pc, #312]	@ (80023fc <DMA2_Stream6_IRQHandler+0x148>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d00e      	beq.n	80022ea <DMA2_Stream6_IRQHandler+0x36>
	{
		if (__DMA2_Stream6_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80022cc:	4b4c      	ldr	r3, [pc, #304]	@ (8002400 <DMA2_Stream6_IRQHandler+0x14c>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d009      	beq.n	80022ea <DMA2_Stream6_IRQHandler+0x36>
		{
			__DMA2_Stream6_Config__ ->ISR_Routines.FIFO_Error_ISR();
 80022d6:	4b4a      	ldr	r3, [pc, #296]	@ (8002400 <DMA2_Stream6_IRQHandler+0x14c>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022dc:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CFEIF6;
 80022de:	4b46      	ldr	r3, [pc, #280]	@ (80023f8 <DMA2_Stream6_IRQHandler+0x144>)
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	4a45      	ldr	r2, [pc, #276]	@ (80023f8 <DMA2_Stream6_IRQHandler+0x144>)
 80022e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022e8:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF6)
 80022ea:	4b44      	ldr	r3, [pc, #272]	@ (80023fc <DMA2_Stream6_IRQHandler+0x148>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00e      	beq.n	8002314 <DMA2_Stream6_IRQHandler+0x60>
	{
		if (__DMA2_Stream6_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 80022f6:	4b42      	ldr	r3, [pc, #264]	@ (8002400 <DMA2_Stream6_IRQHandler+0x14c>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d009      	beq.n	8002314 <DMA2_Stream6_IRQHandler+0x60>
		{
			__DMA2_Stream6_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8002300:	4b3f      	ldr	r3, [pc, #252]	@ (8002400 <DMA2_Stream6_IRQHandler+0x14c>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002306:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF6;
 8002308:	4b3b      	ldr	r3, [pc, #236]	@ (80023f8 <DMA2_Stream6_IRQHandler+0x144>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	4a3a      	ldr	r2, [pc, #232]	@ (80023f8 <DMA2_Stream6_IRQHandler+0x144>)
 800230e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002312:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF6)
 8002314:	4b39      	ldr	r3, [pc, #228]	@ (80023fc <DMA2_Stream6_IRQHandler+0x148>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d00e      	beq.n	800233e <DMA2_Stream6_IRQHandler+0x8a>
	{
		if (__DMA2_Stream6_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8002320:	4b37      	ldr	r3, [pc, #220]	@ (8002400 <DMA2_Stream6_IRQHandler+0x14c>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002326:	2b00      	cmp	r3, #0
 8002328:	d009      	beq.n	800233e <DMA2_Stream6_IRQHandler+0x8a>
		{
			__DMA2_Stream6_Config__ ->ISR_Routines.Transfer_Error_ISR();
 800232a:	4b35      	ldr	r3, [pc, #212]	@ (8002400 <DMA2_Stream6_IRQHandler+0x14c>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002330:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTEIF6;
 8002332:	4b31      	ldr	r3, [pc, #196]	@ (80023f8 <DMA2_Stream6_IRQHandler+0x144>)
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	4a30      	ldr	r2, [pc, #192]	@ (80023f8 <DMA2_Stream6_IRQHandler+0x144>)
 8002338:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800233c:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF6)
 800233e:	4b2f      	ldr	r3, [pc, #188]	@ (80023fc <DMA2_Stream6_IRQHandler+0x148>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d026      	beq.n	8002398 <DMA2_Stream6_IRQHandler+0xe4>
	{
		if (__DMA2_Stream6_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 800234a:	4b2d      	ldr	r3, [pc, #180]	@ (8002400 <DMA2_Stream6_IRQHandler+0x14c>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002350:	2b00      	cmp	r3, #0
 8002352:	d021      	beq.n	8002398 <DMA2_Stream6_IRQHandler+0xe4>
		{
			__DMA2_Stream6_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8002354:	4b2a      	ldr	r3, [pc, #168]	@ (8002400 <DMA2_Stream6_IRQHandler+0x14c>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800235a:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CHTIF6;
 800235c:	4b26      	ldr	r3, [pc, #152]	@ (80023f8 <DMA2_Stream6_IRQHandler+0x144>)
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	4a25      	ldr	r2, [pc, #148]	@ (80023f8 <DMA2_Stream6_IRQHandler+0x144>)
 8002362:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002366:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream6_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8002368:	4b25      	ldr	r3, [pc, #148]	@ (8002400 <DMA2_Stream6_IRQHandler+0x14c>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800236e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002372:	4293      	cmp	r3, r2
 8002374:	d110      	bne.n	8002398 <DMA2_Stream6_IRQHandler+0xe4>
			{
				if((__DMA2_Stream6_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8002376:	4b22      	ldr	r3, [pc, #136]	@ (8002400 <DMA2_Stream6_IRQHandler+0x14c>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d004      	beq.n	8002390 <DMA2_Stream6_IRQHandler+0xdc>
				{
					__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8002386:	4b1e      	ldr	r3, [pc, #120]	@ (8002400 <DMA2_Stream6_IRQHandler+0x14c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800238c:	4798      	blx	r3
 800238e:	e003      	b.n	8002398 <DMA2_Stream6_IRQHandler+0xe4>
				}
				else
				{
					__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8002390:	4b1b      	ldr	r3, [pc, #108]	@ (8002400 <DMA2_Stream6_IRQHandler+0x14c>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002396:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF6)
 8002398:	4b18      	ldr	r3, [pc, #96]	@ (80023fc <DMA2_Stream6_IRQHandler+0x148>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d026      	beq.n	80023f2 <DMA2_Stream6_IRQHandler+0x13e>
	{
		if (__DMA2_Stream6_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 80023a4:	4b16      	ldr	r3, [pc, #88]	@ (8002400 <DMA2_Stream6_IRQHandler+0x14c>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d021      	beq.n	80023f2 <DMA2_Stream6_IRQHandler+0x13e>
		{
			__DMA2_Stream6_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80023ae:	4b14      	ldr	r3, [pc, #80]	@ (8002400 <DMA2_Stream6_IRQHandler+0x14c>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023b4:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTCIF6;
 80023b6:	4b10      	ldr	r3, [pc, #64]	@ (80023f8 <DMA2_Stream6_IRQHandler+0x144>)
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	4a0f      	ldr	r2, [pc, #60]	@ (80023f8 <DMA2_Stream6_IRQHandler+0x144>)
 80023bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80023c0:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream6_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80023c2:	4b0f      	ldr	r3, [pc, #60]	@ (8002400 <DMA2_Stream6_IRQHandler+0x14c>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023c8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d110      	bne.n	80023f2 <DMA2_Stream6_IRQHandler+0x13e>
			{
				if((__DMA2_Stream6_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80023d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002400 <DMA2_Stream6_IRQHandler+0x14c>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d004      	beq.n	80023ea <DMA2_Stream6_IRQHandler+0x136>
				{
					__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80023e0:	4b07      	ldr	r3, [pc, #28]	@ (8002400 <DMA2_Stream6_IRQHandler+0x14c>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023e6:	4798      	blx	r3
					__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 80023e8:	e003      	b.n	80023f2 <DMA2_Stream6_IRQHandler+0x13e>
					__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80023ea:	4b05      	ldr	r3, [pc, #20]	@ (8002400 <DMA2_Stream6_IRQHandler+0x14c>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023f0:	4798      	blx	r3
}
 80023f2:	bf00      	nop
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	40026400 	.word	0x40026400
 80023fc:	20000064 	.word	0x20000064
 8002400:	20000058 	.word	0x20000058

08002404 <DMA2_Stream7_IRQHandler>:


void DMA2_Stream7_IRQHandler(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
	DMA_HISR = DMA2 -> HISR;
 8002408:	4b4f      	ldr	r3, [pc, #316]	@ (8002548 <DMA2_Stream7_IRQHandler+0x144>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	4a4f      	ldr	r2, [pc, #316]	@ (800254c <DMA2_Stream7_IRQHandler+0x148>)
 800240e:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF7)
 8002410:	4b4e      	ldr	r3, [pc, #312]	@ (800254c <DMA2_Stream7_IRQHandler+0x148>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d00e      	beq.n	800243a <DMA2_Stream7_IRQHandler+0x36>
	{
		if (__DMA2_Stream7_Config__ -> ISR_Routines.FIFO_Error_ISR)
 800241c:	4b4c      	ldr	r3, [pc, #304]	@ (8002550 <DMA2_Stream7_IRQHandler+0x14c>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002422:	2b00      	cmp	r3, #0
 8002424:	d009      	beq.n	800243a <DMA2_Stream7_IRQHandler+0x36>
		{
			__DMA2_Stream7_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8002426:	4b4a      	ldr	r3, [pc, #296]	@ (8002550 <DMA2_Stream7_IRQHandler+0x14c>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800242c:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CFEIF7;
 800242e:	4b46      	ldr	r3, [pc, #280]	@ (8002548 <DMA2_Stream7_IRQHandler+0x144>)
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	4a45      	ldr	r2, [pc, #276]	@ (8002548 <DMA2_Stream7_IRQHandler+0x144>)
 8002434:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002438:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_DMEIF7)
 800243a:	4b44      	ldr	r3, [pc, #272]	@ (800254c <DMA2_Stream7_IRQHandler+0x148>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d00e      	beq.n	8002464 <DMA2_Stream7_IRQHandler+0x60>
	{
		if (__DMA2_Stream7_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8002446:	4b42      	ldr	r3, [pc, #264]	@ (8002550 <DMA2_Stream7_IRQHandler+0x14c>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800244c:	2b00      	cmp	r3, #0
 800244e:	d009      	beq.n	8002464 <DMA2_Stream7_IRQHandler+0x60>
		{
			__DMA2_Stream7_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8002450:	4b3f      	ldr	r3, [pc, #252]	@ (8002550 <DMA2_Stream7_IRQHandler+0x14c>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002456:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF7;
 8002458:	4b3b      	ldr	r3, [pc, #236]	@ (8002548 <DMA2_Stream7_IRQHandler+0x144>)
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	4a3a      	ldr	r2, [pc, #232]	@ (8002548 <DMA2_Stream7_IRQHandler+0x144>)
 800245e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002462:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_TEIF7)
 8002464:	4b39      	ldr	r3, [pc, #228]	@ (800254c <DMA2_Stream7_IRQHandler+0x148>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d00e      	beq.n	800248e <DMA2_Stream7_IRQHandler+0x8a>
	{
		if (__DMA2_Stream7_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8002470:	4b37      	ldr	r3, [pc, #220]	@ (8002550 <DMA2_Stream7_IRQHandler+0x14c>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002476:	2b00      	cmp	r3, #0
 8002478:	d009      	beq.n	800248e <DMA2_Stream7_IRQHandler+0x8a>
		{
			__DMA2_Stream7_Config__ ->ISR_Routines.Transfer_Error_ISR();
 800247a:	4b35      	ldr	r3, [pc, #212]	@ (8002550 <DMA2_Stream7_IRQHandler+0x14c>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002480:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTEIF7;
 8002482:	4b31      	ldr	r3, [pc, #196]	@ (8002548 <DMA2_Stream7_IRQHandler+0x144>)
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	4a30      	ldr	r2, [pc, #192]	@ (8002548 <DMA2_Stream7_IRQHandler+0x144>)
 8002488:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800248c:	60d3      	str	r3, [r2, #12]
		}
	}

	if(DMA_HISR & DMA_HISR_HTIF7)
 800248e:	4b2f      	ldr	r3, [pc, #188]	@ (800254c <DMA2_Stream7_IRQHandler+0x148>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d026      	beq.n	80024e8 <DMA2_Stream7_IRQHandler+0xe4>
	{
		if (__DMA2_Stream7_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 800249a:	4b2d      	ldr	r3, [pc, #180]	@ (8002550 <DMA2_Stream7_IRQHandler+0x14c>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d021      	beq.n	80024e8 <DMA2_Stream7_IRQHandler+0xe4>
		{
			__DMA2_Stream7_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80024a4:	4b2a      	ldr	r3, [pc, #168]	@ (8002550 <DMA2_Stream7_IRQHandler+0x14c>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024aa:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CHTIF7;
 80024ac:	4b26      	ldr	r3, [pc, #152]	@ (8002548 <DMA2_Stream7_IRQHandler+0x144>)
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	4a25      	ldr	r2, [pc, #148]	@ (8002548 <DMA2_Stream7_IRQHandler+0x144>)
 80024b2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80024b6:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream7_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80024b8:	4b25      	ldr	r3, [pc, #148]	@ (8002550 <DMA2_Stream7_IRQHandler+0x14c>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024be:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d110      	bne.n	80024e8 <DMA2_Stream7_IRQHandler+0xe4>
			{
				if((__DMA2_Stream7_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80024c6:	4b22      	ldr	r3, [pc, #136]	@ (8002550 <DMA2_Stream7_IRQHandler+0x14c>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d004      	beq.n	80024e0 <DMA2_Stream7_IRQHandler+0xdc>
				{
					__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80024d6:	4b1e      	ldr	r3, [pc, #120]	@ (8002550 <DMA2_Stream7_IRQHandler+0x14c>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024dc:	4798      	blx	r3
 80024de:	e003      	b.n	80024e8 <DMA2_Stream7_IRQHandler+0xe4>
				}
				else
				{
					__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80024e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002550 <DMA2_Stream7_IRQHandler+0x14c>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024e6:	4798      	blx	r3
				}
			}
		}
	}

	if(DMA_HISR & DMA_HISR_TCIF7)
 80024e8:	4b18      	ldr	r3, [pc, #96]	@ (800254c <DMA2_Stream7_IRQHandler+0x148>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d026      	beq.n	8002542 <DMA2_Stream7_IRQHandler+0x13e>
	{
		if (__DMA2_Stream7_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 80024f4:	4b16      	ldr	r3, [pc, #88]	@ (8002550 <DMA2_Stream7_IRQHandler+0x14c>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d021      	beq.n	8002542 <DMA2_Stream7_IRQHandler+0x13e>
		{
			__DMA2_Stream7_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80024fe:	4b14      	ldr	r3, [pc, #80]	@ (8002550 <DMA2_Stream7_IRQHandler+0x14c>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002504:	4798      	blx	r3
			DMA2 -> HIFCR |= DMA_HIFCR_CTCIF7;
 8002506:	4b10      	ldr	r3, [pc, #64]	@ (8002548 <DMA2_Stream7_IRQHandler+0x144>)
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	4a0f      	ldr	r2, [pc, #60]	@ (8002548 <DMA2_Stream7_IRQHandler+0x144>)
 800250c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002510:	60d3      	str	r3, [r2, #12]

			if(__DMA2_Stream7_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8002512:	4b0f      	ldr	r3, [pc, #60]	@ (8002550 <DMA2_Stream7_IRQHandler+0x14c>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002518:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800251c:	4293      	cmp	r3, r2
 800251e:	d110      	bne.n	8002542 <DMA2_Stream7_IRQHandler+0x13e>
			{
				if((__DMA2_Stream7_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8002520:	4b0b      	ldr	r3, [pc, #44]	@ (8002550 <DMA2_Stream7_IRQHandler+0x14c>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d004      	beq.n	800253a <DMA2_Stream7_IRQHandler+0x136>
				{
					__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8002530:	4b07      	ldr	r3, [pc, #28]	@ (8002550 <DMA2_Stream7_IRQHandler+0x14c>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002536:	4798      	blx	r3
					__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
				}
			}
		}
	}
}
 8002538:	e003      	b.n	8002542 <DMA2_Stream7_IRQHandler+0x13e>
					__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800253a:	4b05      	ldr	r3, [pc, #20]	@ (8002550 <DMA2_Stream7_IRQHandler+0x14c>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002540:	4798      	blx	r3
}
 8002542:	bf00      	nop
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	40026400 	.word	0x40026400
 800254c:	20000064 	.word	0x20000064
 8002550:	2000005c 	.word	0x2000005c

08002554 <DMA_Clock_Enable>:
 * the RCC AHB1 peripheral clock enable register.
 *
 * @param[in] config Pointer to the `DMA_Config` structure that contains the DMA controller configuration.
 */
void DMA_Clock_Enable(DMA_Config *config)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
	if(config -> Request.Controller == DMA1){
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a0c      	ldr	r2, [pc, #48]	@ (8002594 <DMA_Clock_Enable+0x40>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d105      	bne.n	8002572 <DMA_Clock_Enable+0x1e>
		RCC -> AHB1ENR |= RCC_AHB1ENR_DMA1EN;
 8002566:	4b0c      	ldr	r3, [pc, #48]	@ (8002598 <DMA_Clock_Enable+0x44>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800256a:	4a0b      	ldr	r2, [pc, #44]	@ (8002598 <DMA_Clock_Enable+0x44>)
 800256c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002570:	6313      	str	r3, [r2, #48]	@ 0x30
	}
	if(config -> Request.Controller == DMA2)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a09      	ldr	r2, [pc, #36]	@ (800259c <DMA_Clock_Enable+0x48>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d105      	bne.n	8002588 <DMA_Clock_Enable+0x34>
	{
		RCC -> AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 800257c:	4b06      	ldr	r3, [pc, #24]	@ (8002598 <DMA_Clock_Enable+0x44>)
 800257e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002580:	4a05      	ldr	r2, [pc, #20]	@ (8002598 <DMA_Clock_Enable+0x44>)
 8002582:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002586:	6313      	str	r3, [r2, #48]	@ 0x30
	}
}
 8002588:	bf00      	nop
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	40026000 	.word	0x40026000
 8002598:	40023800 	.word	0x40023800
 800259c:	40026400 	.word	0x40026400

080025a0 <DMA_Init>:
 * @param[in] config Pointer to the `DMA_Config` structure containing the configuration parameters.
 *
 * @return int8_t Returns 1 on successful initialization, or -1 if an error occurs.
 */
int8_t DMA_Init(DMA_Config *config)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
	//	DMA_Clock_Disable(config);
	DMA_Clock_Enable(config);  // Enable the clock for the specified DMA controller
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f7ff ffd3 	bl	8002554 <DMA_Clock_Enable>

	if (config->Request.Stream->CR & DMA_SxCR_EN)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0301 	and.w	r3, r3, #1
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d00f      	beq.n	80025dc <DMA_Init+0x3c>
	{
		config->Request.Stream->CR &= ~DMA_SxCR_EN;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f022 0201 	bic.w	r2, r2, #1
 80025ca:	601a      	str	r2, [r3, #0]
		while (config->Request.Stream->CR & DMA_SxCR_EN);  // Wait until disabled
 80025cc:	bf00      	nop
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0301 	and.w	r3, r3, #1
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1f8      	bne.n	80025ce <DMA_Init+0x2e>
	}


	config->Request.Stream->CR |= config->Request.channel << DMA_SxCR_CHSEL_Pos;  // Set the DMA channel
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	6819      	ldr	r1, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	7a1b      	ldrb	r3, [r3, #8]
 80025e6:	065a      	lsls	r2, r3, #25
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	430a      	orrs	r2, r1
 80025ee:	601a      	str	r2, [r3, #0]
	config->Request.Stream->CR |= config->circular_mode;  // Configure circular mode
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	6819      	ldr	r1, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	699a      	ldr	r2, [r3, #24]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	430a      	orrs	r2, r1
 8002600:	601a      	str	r2, [r3, #0]
	config->Request.Stream->CR |= config->flow_control;  // Set flow control
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	6819      	ldr	r1, [r3, #0]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	68da      	ldr	r2, [r3, #12]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	430a      	orrs	r2, r1
 8002612:	601a      	str	r2, [r3, #0]
	config->Request.Stream->CR |= config->priority_level;  // Set priority level
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	6819      	ldr	r1, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	695a      	ldr	r2, [r3, #20]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	430a      	orrs	r2, r1
 8002624:	601a      	str	r2, [r3, #0]
	config->Request.Stream->CR |= config->memory_data_size;  // Set memory data size
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	6819      	ldr	r1, [r3, #0]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	430a      	orrs	r2, r1
 8002636:	601a      	str	r2, [r3, #0]
	config->Request.Stream->CR |= config->peripheral_data_size;  // Set peripheral data size
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	6819      	ldr	r1, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	430a      	orrs	r2, r1
 8002648:	601a      	str	r2, [r3, #0]
	config->Request.Stream->CR |= config->transfer_direction;  // Set transfer direction
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	6819      	ldr	r1, [r3, #0]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	691a      	ldr	r2, [r3, #16]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	430a      	orrs	r2, r1
 800265a:	601a      	str	r2, [r3, #0]

	// Configure DMA interrupts if enabled


	if(config->interrupts != DMA_Configuration.DMA_Interrupts.Disable)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	69db      	ldr	r3, [r3, #28]
 8002660:	2200      	movs	r2, #0
 8002662:	4293      	cmp	r3, r2
 8002664:	f000 8110 	beq.w	8002888 <DMA_Init+0x2e8>
	{

		if(config->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	69db      	ldr	r3, [r3, #28]
 800266c:	2280      	movs	r2, #128	@ 0x80
 800266e:	4013      	ands	r3, r2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d008      	beq.n	8002686 <DMA_Init+0xe6>
		{
			config->Request.Stream->FCR |= config->interrupts;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	6959      	ldr	r1, [r3, #20]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	69da      	ldr	r2, [r3, #28]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	430a      	orrs	r2, r1
 8002684:	615a      	str	r2, [r3, #20]
		}

		if(config->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	69db      	ldr	r3, [r3, #28]
 800268a:	2210      	movs	r2, #16
 800268c:	4013      	ands	r3, r2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d007      	beq.n	80026a2 <DMA_Init+0x102>
		{
			config->Request.Stream->CR |= DMA_SxCR_TCIE;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f042 0210 	orr.w	r2, r2, #16
 80026a0:	601a      	str	r2, [r3, #0]
		}

		if(config->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	2208      	movs	r2, #8
 80026a8:	4013      	ands	r3, r2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d007      	beq.n	80026be <DMA_Init+0x11e>
		{
			config->Request.Stream->CR |= DMA_SxCR_HTIE;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f042 0208 	orr.w	r2, r2, #8
 80026bc:	601a      	str	r2, [r3, #0]
		}

		if(config->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	2204      	movs	r2, #4
 80026c4:	4013      	ands	r3, r2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d007      	beq.n	80026da <DMA_Init+0x13a>
		{
			config->Request.Stream->CR |= DMA_SxCR_TEIE;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f042 0204 	orr.w	r2, r2, #4
 80026d8:	601a      	str	r2, [r3, #0]
		}
		if(config->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	69db      	ldr	r3, [r3, #28]
 80026de:	2202      	movs	r2, #2
 80026e0:	4013      	ands	r3, r2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d007      	beq.n	80026f6 <DMA_Init+0x156>
		{
			config->Request.Stream->CR |= DMA_SxCR_DMEIE;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f042 0202 	orr.w	r2, r2, #2
 80026f4:	601a      	str	r2, [r3, #0]
		}

		// Enable the corresponding NVIC interrupt for the DMA stream
		if(config->Request.Controller == DMA1)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a80      	ldr	r2, [pc, #512]	@ (80028fc <DMA_Init+0x35c>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d15f      	bne.n	80027c0 <DMA_Init+0x220>
		{
			if(config->Request.Stream == DMA1_Stream0){
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	4a7e      	ldr	r2, [pc, #504]	@ (8002900 <DMA_Init+0x360>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d106      	bne.n	8002718 <DMA_Init+0x178>
				__DMA1_Stream0_Config__ = config;
 800270a:	4a7e      	ldr	r2, [pc, #504]	@ (8002904 <DMA_Init+0x364>)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002710:	200b      	movs	r0, #11
 8002712:	f7fe fbad 	bl	8000e70 <__NVIC_EnableIRQ>
 8002716:	e0b7      	b.n	8002888 <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA1_Stream1){
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	4a7a      	ldr	r2, [pc, #488]	@ (8002908 <DMA_Init+0x368>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d106      	bne.n	8002730 <DMA_Init+0x190>
				__DMA1_Stream1_Config__ = config;
 8002722:	4a7a      	ldr	r2, [pc, #488]	@ (800290c <DMA_Init+0x36c>)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002728:	200c      	movs	r0, #12
 800272a:	f7fe fba1 	bl	8000e70 <__NVIC_EnableIRQ>
 800272e:	e0ab      	b.n	8002888 <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA1_Stream2){
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	4a76      	ldr	r2, [pc, #472]	@ (8002910 <DMA_Init+0x370>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d106      	bne.n	8002748 <DMA_Init+0x1a8>
				__DMA1_Stream2_Config__ = config;
 800273a:	4a76      	ldr	r2, [pc, #472]	@ (8002914 <DMA_Init+0x374>)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002740:	200d      	movs	r0, #13
 8002742:	f7fe fb95 	bl	8000e70 <__NVIC_EnableIRQ>
 8002746:	e09f      	b.n	8002888 <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA1_Stream3){
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	4a72      	ldr	r2, [pc, #456]	@ (8002918 <DMA_Init+0x378>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d106      	bne.n	8002760 <DMA_Init+0x1c0>
				__DMA1_Stream3_Config__ = config;
 8002752:	4a72      	ldr	r2, [pc, #456]	@ (800291c <DMA_Init+0x37c>)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002758:	200e      	movs	r0, #14
 800275a:	f7fe fb89 	bl	8000e70 <__NVIC_EnableIRQ>
 800275e:	e093      	b.n	8002888 <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA1_Stream4){
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	4a6e      	ldr	r2, [pc, #440]	@ (8002920 <DMA_Init+0x380>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d106      	bne.n	8002778 <DMA_Init+0x1d8>
				__DMA1_Stream4_Config__ = config;
 800276a:	4a6e      	ldr	r2, [pc, #440]	@ (8002924 <DMA_Init+0x384>)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002770:	200f      	movs	r0, #15
 8002772:	f7fe fb7d 	bl	8000e70 <__NVIC_EnableIRQ>
 8002776:	e087      	b.n	8002888 <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA1_Stream5){
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	4a6a      	ldr	r2, [pc, #424]	@ (8002928 <DMA_Init+0x388>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d106      	bne.n	8002790 <DMA_Init+0x1f0>
				__DMA1_Stream5_Config__ = config;
 8002782:	4a6a      	ldr	r2, [pc, #424]	@ (800292c <DMA_Init+0x38c>)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002788:	2010      	movs	r0, #16
 800278a:	f7fe fb71 	bl	8000e70 <__NVIC_EnableIRQ>
 800278e:	e07b      	b.n	8002888 <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA1_Stream6) {
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	4a66      	ldr	r2, [pc, #408]	@ (8002930 <DMA_Init+0x390>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d106      	bne.n	80027a8 <DMA_Init+0x208>
				__DMA1_Stream6_Config__ = config;
 800279a:	4a66      	ldr	r2, [pc, #408]	@ (8002934 <DMA_Init+0x394>)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80027a0:	2011      	movs	r0, #17
 80027a2:	f7fe fb65 	bl	8000e70 <__NVIC_EnableIRQ>
 80027a6:	e06f      	b.n	8002888 <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA1_Stream7){
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	4a62      	ldr	r2, [pc, #392]	@ (8002938 <DMA_Init+0x398>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d16a      	bne.n	8002888 <DMA_Init+0x2e8>
				__DMA1_Stream7_Config__ = config;
 80027b2:	4a62      	ldr	r2, [pc, #392]	@ (800293c <DMA_Init+0x39c>)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80027b8:	202f      	movs	r0, #47	@ 0x2f
 80027ba:	f7fe fb59 	bl	8000e70 <__NVIC_EnableIRQ>
 80027be:	e063      	b.n	8002888 <DMA_Init+0x2e8>
			}
		}
		else if(config->Request.Controller == DMA2)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a5e      	ldr	r2, [pc, #376]	@ (8002940 <DMA_Init+0x3a0>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d15e      	bne.n	8002888 <DMA_Init+0x2e8>
		{
			if(config->Request.Stream == DMA2_Stream0){
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	4a5d      	ldr	r2, [pc, #372]	@ (8002944 <DMA_Init+0x3a4>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d106      	bne.n	80027e2 <DMA_Init+0x242>
				__DMA2_Stream0_Config__ = config;
 80027d4:	4a5c      	ldr	r2, [pc, #368]	@ (8002948 <DMA_Init+0x3a8>)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80027da:	2038      	movs	r0, #56	@ 0x38
 80027dc:	f7fe fb48 	bl	8000e70 <__NVIC_EnableIRQ>
 80027e0:	e052      	b.n	8002888 <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA2_Stream1){
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	4a59      	ldr	r2, [pc, #356]	@ (800294c <DMA_Init+0x3ac>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d106      	bne.n	80027fa <DMA_Init+0x25a>
				__DMA2_Stream1_Config__ = config;
 80027ec:	4a58      	ldr	r2, [pc, #352]	@ (8002950 <DMA_Init+0x3b0>)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80027f2:	2039      	movs	r0, #57	@ 0x39
 80027f4:	f7fe fb3c 	bl	8000e70 <__NVIC_EnableIRQ>
 80027f8:	e046      	b.n	8002888 <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA2_Stream2){
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	4a55      	ldr	r2, [pc, #340]	@ (8002954 <DMA_Init+0x3b4>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d106      	bne.n	8002812 <DMA_Init+0x272>
				__DMA2_Stream2_Config__ = config;
 8002804:	4a54      	ldr	r2, [pc, #336]	@ (8002958 <DMA_Init+0x3b8>)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800280a:	203a      	movs	r0, #58	@ 0x3a
 800280c:	f7fe fb30 	bl	8000e70 <__NVIC_EnableIRQ>
 8002810:	e03a      	b.n	8002888 <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA2_Stream3){
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	4a51      	ldr	r2, [pc, #324]	@ (800295c <DMA_Init+0x3bc>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d106      	bne.n	800282a <DMA_Init+0x28a>
				__DMA2_Stream3_Config__ = config;
 800281c:	4a50      	ldr	r2, [pc, #320]	@ (8002960 <DMA_Init+0x3c0>)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002822:	203b      	movs	r0, #59	@ 0x3b
 8002824:	f7fe fb24 	bl	8000e70 <__NVIC_EnableIRQ>
 8002828:	e02e      	b.n	8002888 <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA2_Stream4){
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	4a4d      	ldr	r2, [pc, #308]	@ (8002964 <DMA_Init+0x3c4>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d106      	bne.n	8002842 <DMA_Init+0x2a2>
				__DMA2_Stream4_Config__ = config;
 8002834:	4a4c      	ldr	r2, [pc, #304]	@ (8002968 <DMA_Init+0x3c8>)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 800283a:	203c      	movs	r0, #60	@ 0x3c
 800283c:	f7fe fb18 	bl	8000e70 <__NVIC_EnableIRQ>
 8002840:	e022      	b.n	8002888 <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA2_Stream5){
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	4a49      	ldr	r2, [pc, #292]	@ (800296c <DMA_Init+0x3cc>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d106      	bne.n	800285a <DMA_Init+0x2ba>
				__DMA2_Stream5_Config__ = config;
 800284c:	4a48      	ldr	r2, [pc, #288]	@ (8002970 <DMA_Init+0x3d0>)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8002852:	2044      	movs	r0, #68	@ 0x44
 8002854:	f7fe fb0c 	bl	8000e70 <__NVIC_EnableIRQ>
 8002858:	e016      	b.n	8002888 <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA2_Stream6){
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	4a45      	ldr	r2, [pc, #276]	@ (8002974 <DMA_Init+0x3d4>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d106      	bne.n	8002872 <DMA_Init+0x2d2>
				__DMA2_Stream6_Config__ = config;
 8002864:	4a44      	ldr	r2, [pc, #272]	@ (8002978 <DMA_Init+0x3d8>)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6013      	str	r3, [r2, #0]
				NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800286a:	2045      	movs	r0, #69	@ 0x45
 800286c:	f7fe fb00 	bl	8000e70 <__NVIC_EnableIRQ>
 8002870:	e00a      	b.n	8002888 <DMA_Init+0x2e8>
			}
			else if(config->Request.Stream == DMA2_Stream7){
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	4a41      	ldr	r2, [pc, #260]	@ (800297c <DMA_Init+0x3dc>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d105      	bne.n	8002888 <DMA_Init+0x2e8>
				__DMA2_Stream7_Config__ = config;
 800287c:	4a40      	ldr	r2, [pc, #256]	@ (8002980 <DMA_Init+0x3e0>)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6013      	str	r3, [r2, #0]
				//            	NVIC_SetPriority(DMA2_Stream7_IRQn,0);
				NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002882:	2046      	movs	r0, #70	@ 0x46
 8002884:	f7fe faf4 	bl	8000e70 <__NVIC_EnableIRQ>
			}
		}
	}

	// Configure memory and peripheral pointer increments
	config->Request.Stream->CR |= config->memory_pointer_increment;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	8c1b      	ldrh	r3, [r3, #32]
 8002892:	4619      	mov	r1, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	430a      	orrs	r2, r1
 800289a:	601a      	str	r2, [r3, #0]
	config->Request.Stream->CR |= config->peripheral_pointer_increment;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80028a6:	4619      	mov	r1, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	430a      	orrs	r2, r1
 80028ae:	601a      	str	r2, [r3, #0]

	// Configure circular mode
	if(config->circular_mode == DMA_Configuration.Circular_Mode.Enable)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d108      	bne.n	80028ce <DMA_Init+0x32e>
	{
		config->Request.Stream->CR |= DMA_SxCR_CIRC;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	e010      	b.n	80028f0 <DMA_Init+0x350>
	}
	else if(config->circular_mode == DMA_Configuration.Circular_Mode.Disable)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	2200      	movs	r2, #0
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d108      	bne.n	80028ea <DMA_Init+0x34a>
	{
		config->Request.Stream->CR &= ~DMA_SxCR_CIRC;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	e002      	b.n	80028f0 <DMA_Init+0x350>
	}
	else
	{
		return -1;  // Return -1 if circular mode configuration is invalid
 80028ea:	f04f 33ff 	mov.w	r3, #4294967295
 80028ee:	e000      	b.n	80028f2 <DMA_Init+0x352>
	}

	return 1;  // Return 1 on successful initialization
 80028f0:	2301      	movs	r3, #1
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3708      	adds	r7, #8
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	40026000 	.word	0x40026000
 8002900:	40026010 	.word	0x40026010
 8002904:	20000020 	.word	0x20000020
 8002908:	40026028 	.word	0x40026028
 800290c:	20000024 	.word	0x20000024
 8002910:	40026040 	.word	0x40026040
 8002914:	20000028 	.word	0x20000028
 8002918:	40026058 	.word	0x40026058
 800291c:	2000002c 	.word	0x2000002c
 8002920:	40026070 	.word	0x40026070
 8002924:	20000030 	.word	0x20000030
 8002928:	40026088 	.word	0x40026088
 800292c:	20000034 	.word	0x20000034
 8002930:	400260a0 	.word	0x400260a0
 8002934:	20000038 	.word	0x20000038
 8002938:	400260b8 	.word	0x400260b8
 800293c:	2000003c 	.word	0x2000003c
 8002940:	40026400 	.word	0x40026400
 8002944:	40026410 	.word	0x40026410
 8002948:	20000040 	.word	0x20000040
 800294c:	40026428 	.word	0x40026428
 8002950:	20000044 	.word	0x20000044
 8002954:	40026440 	.word	0x40026440
 8002958:	20000048 	.word	0x20000048
 800295c:	40026458 	.word	0x40026458
 8002960:	2000004c 	.word	0x2000004c
 8002964:	40026470 	.word	0x40026470
 8002968:	20000050 	.word	0x20000050
 800296c:	40026488 	.word	0x40026488
 8002970:	20000054 	.word	0x20000054
 8002974:	400264a0 	.word	0x400264a0
 8002978:	20000058 	.word	0x20000058
 800297c:	400264b8 	.word	0x400264b8
 8002980:	2000005c 	.word	0x2000005c

08002984 <EXTI0_IRQHandler>:
 * @brief Interrupt handler for EXTI line 0.
 *
 * This ISR handles interrupts for pin 0, invoking the associated callback
 * function if one is registered.
 */
void EXTI0_IRQHandler(void) {
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
    if (EXTI_ISR[0]) EXTI_ISR[0](); // Invoke registered callback
 8002988:	4b07      	ldr	r3, [pc, #28]	@ (80029a8 <EXTI0_IRQHandler+0x24>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d002      	beq.n	8002996 <EXTI0_IRQHandler+0x12>
 8002990:	4b05      	ldr	r3, [pc, #20]	@ (80029a8 <EXTI0_IRQHandler+0x24>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR0;        // Clear interrupt flag
 8002996:	4b05      	ldr	r3, [pc, #20]	@ (80029ac <EXTI0_IRQHandler+0x28>)
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	4a04      	ldr	r2, [pc, #16]	@ (80029ac <EXTI0_IRQHandler+0x28>)
 800299c:	f043 0301 	orr.w	r3, r3, #1
 80029a0:	6153      	str	r3, [r2, #20]
}
 80029a2:	bf00      	nop
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	20000068 	.word	0x20000068
 80029ac:	40013c00 	.word	0x40013c00

080029b0 <EXTI1_IRQHandler>:

/**
 * @brief Interrupt handler for EXTI line 1.
 */
void EXTI1_IRQHandler(void) {
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
    if (EXTI_ISR[1]) EXTI_ISR[1]();
 80029b4:	4b07      	ldr	r3, [pc, #28]	@ (80029d4 <EXTI1_IRQHandler+0x24>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d002      	beq.n	80029c2 <EXTI1_IRQHandler+0x12>
 80029bc:	4b05      	ldr	r3, [pc, #20]	@ (80029d4 <EXTI1_IRQHandler+0x24>)
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR1;
 80029c2:	4b05      	ldr	r3, [pc, #20]	@ (80029d8 <EXTI1_IRQHandler+0x28>)
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	4a04      	ldr	r2, [pc, #16]	@ (80029d8 <EXTI1_IRQHandler+0x28>)
 80029c8:	f043 0302 	orr.w	r3, r3, #2
 80029cc:	6153      	str	r3, [r2, #20]
}
 80029ce:	bf00      	nop
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	20000068 	.word	0x20000068
 80029d8:	40013c00 	.word	0x40013c00

080029dc <EXTI2_IRQHandler>:

/**
 * @brief Interrupt handler for EXTI line 2.
 */
void EXTI2_IRQHandler(void) {
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
    if (EXTI_ISR[2]) EXTI_ISR[2]();
 80029e0:	4b07      	ldr	r3, [pc, #28]	@ (8002a00 <EXTI2_IRQHandler+0x24>)
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d002      	beq.n	80029ee <EXTI2_IRQHandler+0x12>
 80029e8:	4b05      	ldr	r3, [pc, #20]	@ (8002a00 <EXTI2_IRQHandler+0x24>)
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR2;
 80029ee:	4b05      	ldr	r3, [pc, #20]	@ (8002a04 <EXTI2_IRQHandler+0x28>)
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	4a04      	ldr	r2, [pc, #16]	@ (8002a04 <EXTI2_IRQHandler+0x28>)
 80029f4:	f043 0304 	orr.w	r3, r3, #4
 80029f8:	6153      	str	r3, [r2, #20]
}
 80029fa:	bf00      	nop
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	20000068 	.word	0x20000068
 8002a04:	40013c00 	.word	0x40013c00

08002a08 <EXTI3_IRQHandler>:

/**
 * @brief Interrupt handler for EXTI line 3.
 */
void EXTI3_IRQHandler(void) {
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
    if (EXTI_ISR[3]) EXTI_ISR[3]();
 8002a0c:	4b07      	ldr	r3, [pc, #28]	@ (8002a2c <EXTI3_IRQHandler+0x24>)
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d002      	beq.n	8002a1a <EXTI3_IRQHandler+0x12>
 8002a14:	4b05      	ldr	r3, [pc, #20]	@ (8002a2c <EXTI3_IRQHandler+0x24>)
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR3;
 8002a1a:	4b05      	ldr	r3, [pc, #20]	@ (8002a30 <EXTI3_IRQHandler+0x28>)
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	4a04      	ldr	r2, [pc, #16]	@ (8002a30 <EXTI3_IRQHandler+0x28>)
 8002a20:	f043 0308 	orr.w	r3, r3, #8
 8002a24:	6153      	str	r3, [r2, #20]
}
 8002a26:	bf00      	nop
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	20000068 	.word	0x20000068
 8002a30:	40013c00 	.word	0x40013c00

08002a34 <EXTI4_IRQHandler>:

/**
 * @brief Interrupt handler for EXTI line 4.
 */
void EXTI4_IRQHandler(void) {
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
    if (EXTI_ISR[4]) EXTI_ISR[4]();
 8002a38:	4b07      	ldr	r3, [pc, #28]	@ (8002a58 <EXTI4_IRQHandler+0x24>)
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d002      	beq.n	8002a46 <EXTI4_IRQHandler+0x12>
 8002a40:	4b05      	ldr	r3, [pc, #20]	@ (8002a58 <EXTI4_IRQHandler+0x24>)
 8002a42:	691b      	ldr	r3, [r3, #16]
 8002a44:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR4;
 8002a46:	4b05      	ldr	r3, [pc, #20]	@ (8002a5c <EXTI4_IRQHandler+0x28>)
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	4a04      	ldr	r2, [pc, #16]	@ (8002a5c <EXTI4_IRQHandler+0x28>)
 8002a4c:	f043 0310 	orr.w	r3, r3, #16
 8002a50:	6153      	str	r3, [r2, #20]
}
 8002a52:	bf00      	nop
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	20000068 	.word	0x20000068
 8002a5c:	40013c00 	.word	0x40013c00

08002a60 <EXTI9_5_IRQHandler>:
/**
 * @brief Interrupt handler for EXTI lines 5 to 9.
 *
 * Handles interrupts for pins 5 to 9, checking each pin for active flags.
 */
void EXTI9_5_IRQHandler(void) {
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
    for (int i = 5; i <= 9; ++i) {
 8002a66:	2305      	movs	r3, #5
 8002a68:	607b      	str	r3, [r7, #4]
 8002a6a:	e020      	b.n	8002aae <EXTI9_5_IRQHandler+0x4e>
        if ((EXTI->PR & (1 << i)) && EXTI_ISR[i]) {
 8002a6c:	4b14      	ldr	r3, [pc, #80]	@ (8002ac0 <EXTI9_5_IRQHandler+0x60>)
 8002a6e:	695b      	ldr	r3, [r3, #20]
 8002a70:	2101      	movs	r1, #1
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	fa01 f202 	lsl.w	r2, r1, r2
 8002a78:	4013      	ands	r3, r2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d014      	beq.n	8002aa8 <EXTI9_5_IRQHandler+0x48>
 8002a7e:	4a11      	ldr	r2, [pc, #68]	@ (8002ac4 <EXTI9_5_IRQHandler+0x64>)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00e      	beq.n	8002aa8 <EXTI9_5_IRQHandler+0x48>
            EXTI_ISR[i]();        // Invoke callback for pin `i`
 8002a8a:	4a0e      	ldr	r2, [pc, #56]	@ (8002ac4 <EXTI9_5_IRQHandler+0x64>)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a92:	4798      	blx	r3
            EXTI->PR |= (1 << i); // Clear interrupt flag
 8002a94:	4b0a      	ldr	r3, [pc, #40]	@ (8002ac0 <EXTI9_5_IRQHandler+0x60>)
 8002a96:	695b      	ldr	r3, [r3, #20]
 8002a98:	2101      	movs	r1, #1
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	fa01 f202 	lsl.w	r2, r1, r2
 8002aa0:	4611      	mov	r1, r2
 8002aa2:	4a07      	ldr	r2, [pc, #28]	@ (8002ac0 <EXTI9_5_IRQHandler+0x60>)
 8002aa4:	430b      	orrs	r3, r1
 8002aa6:	6153      	str	r3, [r2, #20]
    for (int i = 5; i <= 9; ++i) {
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	3301      	adds	r3, #1
 8002aac:	607b      	str	r3, [r7, #4]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2b09      	cmp	r3, #9
 8002ab2:	dddb      	ble.n	8002a6c <EXTI9_5_IRQHandler+0xc>
        }
    }
}
 8002ab4:	bf00      	nop
 8002ab6:	bf00      	nop
 8002ab8:	3708      	adds	r7, #8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	40013c00 	.word	0x40013c00
 8002ac4:	20000068 	.word	0x20000068

08002ac8 <EXTI15_10_IRQHandler>:
/**
 * @brief Interrupt handler for EXTI lines 10 to 15.
 *
 * Handles interrupts for pins 10 to 15, checking each pin for active flags.
 */
void EXTI15_10_IRQHandler(void) {
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
    for (int i = 10; i <= 15; ++i) {
 8002ace:	230a      	movs	r3, #10
 8002ad0:	607b      	str	r3, [r7, #4]
 8002ad2:	e020      	b.n	8002b16 <EXTI15_10_IRQHandler+0x4e>
        if ((EXTI->PR & (1 << i)) && EXTI_ISR[i]) {
 8002ad4:	4b14      	ldr	r3, [pc, #80]	@ (8002b28 <EXTI15_10_IRQHandler+0x60>)
 8002ad6:	695b      	ldr	r3, [r3, #20]
 8002ad8:	2101      	movs	r1, #1
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	fa01 f202 	lsl.w	r2, r1, r2
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d014      	beq.n	8002b10 <EXTI15_10_IRQHandler+0x48>
 8002ae6:	4a11      	ldr	r2, [pc, #68]	@ (8002b2c <EXTI15_10_IRQHandler+0x64>)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00e      	beq.n	8002b10 <EXTI15_10_IRQHandler+0x48>
            EXTI_ISR[i]();        // Invoke callback for pin `i`
 8002af2:	4a0e      	ldr	r2, [pc, #56]	@ (8002b2c <EXTI15_10_IRQHandler+0x64>)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002afa:	4798      	blx	r3
            EXTI->PR |= (1 << i); // Clear interrupt flag
 8002afc:	4b0a      	ldr	r3, [pc, #40]	@ (8002b28 <EXTI15_10_IRQHandler+0x60>)
 8002afe:	695b      	ldr	r3, [r3, #20]
 8002b00:	2101      	movs	r1, #1
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	fa01 f202 	lsl.w	r2, r1, r2
 8002b08:	4611      	mov	r1, r2
 8002b0a:	4a07      	ldr	r2, [pc, #28]	@ (8002b28 <EXTI15_10_IRQHandler+0x60>)
 8002b0c:	430b      	orrs	r3, r1
 8002b0e:	6153      	str	r3, [r2, #20]
    for (int i = 10; i <= 15; ++i) {
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	3301      	adds	r3, #1
 8002b14:	607b      	str	r3, [r7, #4]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2b0f      	cmp	r3, #15
 8002b1a:	dddb      	ble.n	8002ad4 <EXTI15_10_IRQHandler+0xc>
        }
    }
}
 8002b1c:	bf00      	nop
 8002b1e:	bf00      	nop
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	40013c00 	.word	0x40013c00
 8002b2c:	20000068 	.word	0x20000068

08002b30 <GPIO_Clock_Enable>:
 * @brief Enables the clock for a specific GPIO port.
 *
 * @param PORT Pointer to GPIO port base address.
 * @return GPIO_SUCCESS on success, GPIO_INVALID_PORT on failure.
 */
int GPIO_Clock_Enable(GPIO_TypeDef *PORT) {
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)PORT) {
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4a30      	ldr	r2, [pc, #192]	@ (8002bfc <GPIO_Clock_Enable+0xcc>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d04b      	beq.n	8002bd8 <GPIO_Clock_Enable+0xa8>
 8002b40:	4a2e      	ldr	r2, [pc, #184]	@ (8002bfc <GPIO_Clock_Enable+0xcc>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d84f      	bhi.n	8002be6 <GPIO_Clock_Enable+0xb6>
 8002b46:	4a2e      	ldr	r2, [pc, #184]	@ (8002c00 <GPIO_Clock_Enable+0xd0>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d03e      	beq.n	8002bca <GPIO_Clock_Enable+0x9a>
 8002b4c:	4a2c      	ldr	r2, [pc, #176]	@ (8002c00 <GPIO_Clock_Enable+0xd0>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d849      	bhi.n	8002be6 <GPIO_Clock_Enable+0xb6>
 8002b52:	4a2c      	ldr	r2, [pc, #176]	@ (8002c04 <GPIO_Clock_Enable+0xd4>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d031      	beq.n	8002bbc <GPIO_Clock_Enable+0x8c>
 8002b58:	4a2a      	ldr	r2, [pc, #168]	@ (8002c04 <GPIO_Clock_Enable+0xd4>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d843      	bhi.n	8002be6 <GPIO_Clock_Enable+0xb6>
 8002b5e:	4a2a      	ldr	r2, [pc, #168]	@ (8002c08 <GPIO_Clock_Enable+0xd8>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d024      	beq.n	8002bae <GPIO_Clock_Enable+0x7e>
 8002b64:	4a28      	ldr	r2, [pc, #160]	@ (8002c08 <GPIO_Clock_Enable+0xd8>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d83d      	bhi.n	8002be6 <GPIO_Clock_Enable+0xb6>
 8002b6a:	4a28      	ldr	r2, [pc, #160]	@ (8002c0c <GPIO_Clock_Enable+0xdc>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d017      	beq.n	8002ba0 <GPIO_Clock_Enable+0x70>
 8002b70:	4a26      	ldr	r2, [pc, #152]	@ (8002c0c <GPIO_Clock_Enable+0xdc>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d837      	bhi.n	8002be6 <GPIO_Clock_Enable+0xb6>
 8002b76:	4a26      	ldr	r2, [pc, #152]	@ (8002c10 <GPIO_Clock_Enable+0xe0>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d003      	beq.n	8002b84 <GPIO_Clock_Enable+0x54>
 8002b7c:	4a25      	ldr	r2, [pc, #148]	@ (8002c14 <GPIO_Clock_Enable+0xe4>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d007      	beq.n	8002b92 <GPIO_Clock_Enable+0x62>
 8002b82:	e030      	b.n	8002be6 <GPIO_Clock_Enable+0xb6>
        case (uint32_t)GPIOA: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN; break;
 8002b84:	4b24      	ldr	r3, [pc, #144]	@ (8002c18 <GPIO_Clock_Enable+0xe8>)
 8002b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b88:	4a23      	ldr	r2, [pc, #140]	@ (8002c18 <GPIO_Clock_Enable+0xe8>)
 8002b8a:	f043 0301 	orr.w	r3, r3, #1
 8002b8e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b90:	e02c      	b.n	8002bec <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOB: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN; break;
 8002b92:	4b21      	ldr	r3, [pc, #132]	@ (8002c18 <GPIO_Clock_Enable+0xe8>)
 8002b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b96:	4a20      	ldr	r2, [pc, #128]	@ (8002c18 <GPIO_Clock_Enable+0xe8>)
 8002b98:	f043 0302 	orr.w	r3, r3, #2
 8002b9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b9e:	e025      	b.n	8002bec <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOC: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN; break;
 8002ba0:	4b1d      	ldr	r3, [pc, #116]	@ (8002c18 <GPIO_Clock_Enable+0xe8>)
 8002ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba4:	4a1c      	ldr	r2, [pc, #112]	@ (8002c18 <GPIO_Clock_Enable+0xe8>)
 8002ba6:	f043 0304 	orr.w	r3, r3, #4
 8002baa:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bac:	e01e      	b.n	8002bec <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOD: RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN; break;
 8002bae:	4b1a      	ldr	r3, [pc, #104]	@ (8002c18 <GPIO_Clock_Enable+0xe8>)
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb2:	4a19      	ldr	r2, [pc, #100]	@ (8002c18 <GPIO_Clock_Enable+0xe8>)
 8002bb4:	f043 0308 	orr.w	r3, r3, #8
 8002bb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bba:	e017      	b.n	8002bec <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOE: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN; break;
 8002bbc:	4b16      	ldr	r3, [pc, #88]	@ (8002c18 <GPIO_Clock_Enable+0xe8>)
 8002bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc0:	4a15      	ldr	r2, [pc, #84]	@ (8002c18 <GPIO_Clock_Enable+0xe8>)
 8002bc2:	f043 0310 	orr.w	r3, r3, #16
 8002bc6:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bc8:	e010      	b.n	8002bec <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOF: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOFEN; break;
 8002bca:	4b13      	ldr	r3, [pc, #76]	@ (8002c18 <GPIO_Clock_Enable+0xe8>)
 8002bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bce:	4a12      	ldr	r2, [pc, #72]	@ (8002c18 <GPIO_Clock_Enable+0xe8>)
 8002bd0:	f043 0320 	orr.w	r3, r3, #32
 8002bd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bd6:	e009      	b.n	8002bec <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOH: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN; break;
 8002bd8:	4b0f      	ldr	r3, [pc, #60]	@ (8002c18 <GPIO_Clock_Enable+0xe8>)
 8002bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bdc:	4a0e      	ldr	r2, [pc, #56]	@ (8002c18 <GPIO_Clock_Enable+0xe8>)
 8002bde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002be2:	6313      	str	r3, [r2, #48]	@ 0x30
 8002be4:	e002      	b.n	8002bec <GPIO_Clock_Enable+0xbc>
        default: return GPIO_INVALID_PORT;
 8002be6:	f04f 33ff 	mov.w	r3, #4294967295
 8002bea:	e000      	b.n	8002bee <GPIO_Clock_Enable+0xbe>
    }
    return GPIO_SUCCESS;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	40021c00 	.word	0x40021c00
 8002c00:	40021400 	.word	0x40021400
 8002c04:	40021000 	.word	0x40021000
 8002c08:	40020c00 	.word	0x40020c00
 8002c0c:	40020800 	.word	0x40020800
 8002c10:	40020000 	.word	0x40020000
 8002c14:	40020400 	.word	0x40020400
 8002c18:	40023800 	.word	0x40023800

08002c1c <GPIO_Pin_Init>:


GPIO_Status GPIO_Pin_Init(GPIO_TypeDef *Port, uint8_t pin, uint8_t mode, uint8_t output_type, uint8_t speed, uint8_t pull, uint8_t alternate_function) {
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	4608      	mov	r0, r1
 8002c26:	4611      	mov	r1, r2
 8002c28:	461a      	mov	r2, r3
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	70fb      	strb	r3, [r7, #3]
 8002c2e:	460b      	mov	r3, r1
 8002c30:	70bb      	strb	r3, [r7, #2]
 8002c32:	4613      	mov	r3, r2
 8002c34:	707b      	strb	r3, [r7, #1]
//    if (pin > 15 || mode > 3 || speed > 3 || pull > 2) return GPIO_INVALID_PIN;

    GPIO_Clock_Enable(Port);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f7ff ff7a 	bl	8002b30 <GPIO_Clock_Enable>

    // Reset and set mode
    Port->MODER &= ~(3 << PIN_POS(pin));
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	78fa      	ldrb	r2, [r7, #3]
 8002c42:	0052      	lsls	r2, r2, #1
 8002c44:	2103      	movs	r1, #3
 8002c46:	fa01 f202 	lsl.w	r2, r1, r2
 8002c4a:	43d2      	mvns	r2, r2
 8002c4c:	401a      	ands	r2, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	601a      	str	r2, [r3, #0]
    Port->MODER |= mode << PIN_POS(pin);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	78b9      	ldrb	r1, [r7, #2]
 8002c58:	78fa      	ldrb	r2, [r7, #3]
 8002c5a:	0052      	lsls	r2, r2, #1
 8002c5c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c60:	431a      	orrs	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	601a      	str	r2, [r3, #0]

    // Reset and set output type
    Port->OTYPER &= ~(1 << pin);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	78fa      	ldrb	r2, [r7, #3]
 8002c6c:	2101      	movs	r1, #1
 8002c6e:	fa01 f202 	lsl.w	r2, r1, r2
 8002c72:	43d2      	mvns	r2, r2
 8002c74:	401a      	ands	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	605a      	str	r2, [r3, #4]
    if (output_type != GPIO_Configuration.Output_Type.None) {
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	787b      	ldrb	r3, [r7, #1]
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d008      	beq.n	8002c94 <GPIO_Pin_Init+0x78>
        Port->OTYPER |= output_type << pin;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	7879      	ldrb	r1, [r7, #1]
 8002c88:	78fa      	ldrb	r2, [r7, #3]
 8002c8a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c8e:	431a      	orrs	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	605a      	str	r2, [r3, #4]
    }

    // Reset and set speed
    Port->OSPEEDR &= ~(3 << PIN_POS(pin));
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	78fa      	ldrb	r2, [r7, #3]
 8002c9a:	0052      	lsls	r2, r2, #1
 8002c9c:	2103      	movs	r1, #3
 8002c9e:	fa01 f202 	lsl.w	r2, r1, r2
 8002ca2:	43d2      	mvns	r2, r2
 8002ca4:	401a      	ands	r2, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	609a      	str	r2, [r3, #8]
    if (speed != GPIO_Configuration.Speed.None) {
 8002caa:	2204      	movs	r2, #4
 8002cac:	7c3b      	ldrb	r3, [r7, #16]
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d009      	beq.n	8002cc6 <GPIO_Pin_Init+0xaa>
        Port->OSPEEDR |= speed << PIN_POS(pin);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	7c39      	ldrb	r1, [r7, #16]
 8002cb8:	78fa      	ldrb	r2, [r7, #3]
 8002cba:	0052      	lsls	r2, r2, #1
 8002cbc:	fa01 f202 	lsl.w	r2, r1, r2
 8002cc0:	431a      	orrs	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	609a      	str	r2, [r3, #8]
    }

    // Reset and set pull-up/pull-down
    Port->PUPDR &= ~(3 << PIN_POS(pin));
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	78fa      	ldrb	r2, [r7, #3]
 8002ccc:	0052      	lsls	r2, r2, #1
 8002cce:	2103      	movs	r1, #3
 8002cd0:	fa01 f202 	lsl.w	r2, r1, r2
 8002cd4:	43d2      	mvns	r2, r2
 8002cd6:	401a      	ands	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	60da      	str	r2, [r3, #12]
    if (pull != GPIO_Configuration.Pull.None) {
 8002cdc:	2204      	movs	r2, #4
 8002cde:	7d3b      	ldrb	r3, [r7, #20]
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d009      	beq.n	8002cf8 <GPIO_Pin_Init+0xdc>
        Port->PUPDR |= pull << PIN_POS(pin);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	7d39      	ldrb	r1, [r7, #20]
 8002cea:	78fa      	ldrb	r2, [r7, #3]
 8002cec:	0052      	lsls	r2, r2, #1
 8002cee:	fa01 f202 	lsl.w	r2, r1, r2
 8002cf2:	431a      	orrs	r2, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	60da      	str	r2, [r3, #12]
    }

    // Set alternate function
    if (mode == GPIO_Configuration.Mode.Alternate_Function) {
 8002cf8:	2202      	movs	r2, #2
 8002cfa:	78bb      	ldrb	r3, [r7, #2]
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d12f      	bne.n	8002d60 <GPIO_Pin_Init+0x144>
        if (pin < GPIO_AF_SPLIT_POINT) {
 8002d00:	78fb      	ldrb	r3, [r7, #3]
 8002d02:	2b07      	cmp	r3, #7
 8002d04:	d815      	bhi.n	8002d32 <GPIO_Pin_Init+0x116>
            Port->AFR[0] &= ~(0xF << (pin * 4));
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a1b      	ldr	r3, [r3, #32]
 8002d0a:	78fa      	ldrb	r2, [r7, #3]
 8002d0c:	0092      	lsls	r2, r2, #2
 8002d0e:	210f      	movs	r1, #15
 8002d10:	fa01 f202 	lsl.w	r2, r1, r2
 8002d14:	43d2      	mvns	r2, r2
 8002d16:	401a      	ands	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	621a      	str	r2, [r3, #32]
            Port->AFR[0] |= alternate_function << (pin * 4);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a1b      	ldr	r3, [r3, #32]
 8002d20:	7e39      	ldrb	r1, [r7, #24]
 8002d22:	78fa      	ldrb	r2, [r7, #3]
 8002d24:	0092      	lsls	r2, r2, #2
 8002d26:	fa01 f202 	lsl.w	r2, r1, r2
 8002d2a:	431a      	orrs	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	621a      	str	r2, [r3, #32]
 8002d30:	e016      	b.n	8002d60 <GPIO_Pin_Init+0x144>
        } else {
            Port->AFR[1] &= ~(0xF << ((pin - GPIO_AF_SPLIT_POINT) * 4));
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d36:	78fa      	ldrb	r2, [r7, #3]
 8002d38:	3a08      	subs	r2, #8
 8002d3a:	0092      	lsls	r2, r2, #2
 8002d3c:	210f      	movs	r1, #15
 8002d3e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d42:	43d2      	mvns	r2, r2
 8002d44:	401a      	ands	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	625a      	str	r2, [r3, #36]	@ 0x24
            Port->AFR[1] |= alternate_function << ((pin - GPIO_AF_SPLIT_POINT) * 4);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d4e:	7e39      	ldrb	r1, [r7, #24]
 8002d50:	78fa      	ldrb	r2, [r7, #3]
 8002d52:	3a08      	subs	r2, #8
 8002d54:	0092      	lsls	r2, r2, #2
 8002d56:	fa01 f202 	lsl.w	r2, r1, r2
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    }

    return GPIO_SUCCESS;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
	...

08002d6c <SPI1_TX_ISR>:

volatile bool TX_Complete = 0;
volatile bool RX_Complete = 0;

void SPI1_TX_ISR()
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
	TX_Complete = 1;
 8002d70:	4b03      	ldr	r3, [pc, #12]	@ (8002d80 <SPI1_TX_ISR+0x14>)
 8002d72:	2201      	movs	r2, #1
 8002d74:	701a      	strb	r2, [r3, #0]
}
 8002d76:	bf00      	nop
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr
 8002d80:	200000a8 	.word	0x200000a8

08002d84 <SPI1_RX_ISR>:

void SPI1_RX_ISR()
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0
	RX_Complete = 1;
 8002d88:	4b03      	ldr	r3, [pc, #12]	@ (8002d98 <SPI1_RX_ISR+0x14>)
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	701a      	strb	r2, [r3, #0]
}
 8002d8e:	bf00      	nop
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr
 8002d98:	200000a9 	.word	0x200000a9

08002d9c <xDMA1_TX_Init>:
 * @brief Initializes the DMA for SPI1 TX.
 *
 * Configures and initializes the DMA channel for transmitting data via SPI1.
 */
static void xDMA1_TX_Init()
{
 8002d9c:	b598      	push	{r3, r4, r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
	xDMA1_TX.Request = DMA_Configuration.Request.SPI1_TX;
 8002da0:	4a14      	ldr	r2, [pc, #80]	@ (8002df4 <xDMA1_TX_Init+0x58>)
 8002da2:	4b15      	ldr	r3, [pc, #84]	@ (8002df8 <xDMA1_TX_Init+0x5c>)
 8002da4:	4614      	mov	r4, r2
 8002da6:	333c      	adds	r3, #60	@ 0x3c
 8002da8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002dac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	xDMA1_TX.transfer_direction = DMA_Configuration.Transfer_Direction.Memory_to_peripheral;
 8002db0:	2240      	movs	r2, #64	@ 0x40
 8002db2:	4b10      	ldr	r3, [pc, #64]	@ (8002df4 <xDMA1_TX_Init+0x58>)
 8002db4:	611a      	str	r2, [r3, #16]
	xDMA1_TX.circular_mode = DMA_Configuration.Circular_Mode.Disable;
 8002db6:	2200      	movs	r2, #0
 8002db8:	4b0e      	ldr	r3, [pc, #56]	@ (8002df4 <xDMA1_TX_Init+0x58>)
 8002dba:	619a      	str	r2, [r3, #24]
	xDMA1_TX.flow_control = DMA_Configuration.Flow_Control.DMA_Control;
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8002df4 <xDMA1_TX_Init+0x58>)
 8002dc0:	60da      	str	r2, [r3, #12]
	xDMA1_TX.interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 8002dc2:	2210      	movs	r2, #16
 8002dc4:	4b0b      	ldr	r3, [pc, #44]	@ (8002df4 <xDMA1_TX_Init+0x58>)
 8002dc6:	61da      	str	r2, [r3, #28]
	xDMA1_TX.peripheral_pointer_increment = DMA_Configuration.Peripheral_Pointer_Increment.Disable;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	4b09      	ldr	r3, [pc, #36]	@ (8002df4 <xDMA1_TX_Init+0x58>)
 8002dce:	845a      	strh	r2, [r3, #34]	@ 0x22
	xDMA1_TX.memory_pointer_increment = DMA_Configuration.Memory_Pointer_Increment.Enable;
 8002dd0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002dd4:	b29a      	uxth	r2, r3
 8002dd6:	4b07      	ldr	r3, [pc, #28]	@ (8002df4 <xDMA1_TX_Init+0x58>)
 8002dd8:	841a      	strh	r2, [r3, #32]
	xDMA1_TX.priority_level = DMA_Configuration.Priority_Level.Very_high;
 8002dda:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002dde:	4b05      	ldr	r3, [pc, #20]	@ (8002df4 <xDMA1_TX_Init+0x58>)
 8002de0:	615a      	str	r2, [r3, #20]
	xDMA1_TX.ISR_Routines.Full_Transfer_Commplete_ISR = SPI1_TX_ISR;
 8002de2:	4b04      	ldr	r3, [pc, #16]	@ (8002df4 <xDMA1_TX_Init+0x58>)
 8002de4:	4a05      	ldr	r2, [pc, #20]	@ (8002dfc <xDMA1_TX_Init+0x60>)
 8002de6:	64da      	str	r2, [r3, #76]	@ 0x4c
	DMA_Init(&xDMA1_TX);
 8002de8:	4802      	ldr	r0, [pc, #8]	@ (8002df4 <xDMA1_TX_Init+0x58>)
 8002dea:	f7ff fbd9 	bl	80025a0 <DMA_Init>
}
 8002dee:	bf00      	nop
 8002df0:	bd98      	pop	{r3, r4, r7, pc}
 8002df2:	bf00      	nop
 8002df4:	200000ac 	.word	0x200000ac
 8002df8:	080059f4 	.word	0x080059f4
 8002dfc:	08002d6d 	.word	0x08002d6d

08002e00 <xDMA2_TX_Init>:
 * @brief Initializes the DMA for SPI2 TX.
 *
 * Configures and initializes the DMA channel for transmitting data via SPI2.
 */
static void xDMA2_TX_Init()
{
 8002e00:	b598      	push	{r3, r4, r7, lr}
 8002e02:	af00      	add	r7, sp, #0
	xDMA2_TX.Request = DMA_Configuration.Request.SPI2_TX;
 8002e04:	4a12      	ldr	r2, [pc, #72]	@ (8002e50 <xDMA2_TX_Init+0x50>)
 8002e06:	4b13      	ldr	r3, [pc, #76]	@ (8002e54 <xDMA2_TX_Init+0x54>)
 8002e08:	4614      	mov	r4, r2
 8002e0a:	3324      	adds	r3, #36	@ 0x24
 8002e0c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002e10:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	xDMA2_TX.transfer_direction = DMA_Configuration.Transfer_Direction.Memory_to_peripheral;
 8002e14:	2240      	movs	r2, #64	@ 0x40
 8002e16:	4b0e      	ldr	r3, [pc, #56]	@ (8002e50 <xDMA2_TX_Init+0x50>)
 8002e18:	611a      	str	r2, [r3, #16]
	xDMA2_TX.circular_mode = DMA_Configuration.Circular_Mode.Disable;
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	4b0c      	ldr	r3, [pc, #48]	@ (8002e50 <xDMA2_TX_Init+0x50>)
 8002e1e:	619a      	str	r2, [r3, #24]
	xDMA2_TX.flow_control = DMA_Configuration.Flow_Control.DMA_Control;
 8002e20:	2200      	movs	r2, #0
 8002e22:	4b0b      	ldr	r3, [pc, #44]	@ (8002e50 <xDMA2_TX_Init+0x50>)
 8002e24:	60da      	str	r2, [r3, #12]
	xDMA2_TX.interrupts = DMA_Configuration.DMA_Interrupts.Disable;
 8002e26:	2200      	movs	r2, #0
 8002e28:	4b09      	ldr	r3, [pc, #36]	@ (8002e50 <xDMA2_TX_Init+0x50>)
 8002e2a:	61da      	str	r2, [r3, #28]
	xDMA2_TX.peripheral_pointer_increment = DMA_Configuration.Peripheral_Pointer_Increment.Disable;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	b29a      	uxth	r2, r3
 8002e30:	4b07      	ldr	r3, [pc, #28]	@ (8002e50 <xDMA2_TX_Init+0x50>)
 8002e32:	845a      	strh	r2, [r3, #34]	@ 0x22
	xDMA2_TX.memory_pointer_increment = DMA_Configuration.Memory_Pointer_Increment.Enable;
 8002e34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002e38:	b29a      	uxth	r2, r3
 8002e3a:	4b05      	ldr	r3, [pc, #20]	@ (8002e50 <xDMA2_TX_Init+0x50>)
 8002e3c:	841a      	strh	r2, [r3, #32]
	xDMA2_TX.priority_level = DMA_Configuration.Priority_Level.Very_high;
 8002e3e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002e42:	4b03      	ldr	r3, [pc, #12]	@ (8002e50 <xDMA2_TX_Init+0x50>)
 8002e44:	615a      	str	r2, [r3, #20]

	DMA_Init(&xDMA2_TX);
 8002e46:	4802      	ldr	r0, [pc, #8]	@ (8002e50 <xDMA2_TX_Init+0x50>)
 8002e48:	f7ff fbaa 	bl	80025a0 <DMA_Init>
}
 8002e4c:	bf00      	nop
 8002e4e:	bd98      	pop	{r3, r4, r7, pc}
 8002e50:	2000015c 	.word	0x2000015c
 8002e54:	080059f4 	.word	0x080059f4

08002e58 <xDMA3_TX_Init>:

static void xDMA3_TX_Init()
{
 8002e58:	b598      	push	{r3, r4, r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
	xDMA3_TX.Request = DMA_Configuration.Request.SPI3_TX;
 8002e5c:	4a12      	ldr	r2, [pc, #72]	@ (8002ea8 <xDMA3_TX_Init+0x50>)
 8002e5e:	4b13      	ldr	r3, [pc, #76]	@ (8002eac <xDMA3_TX_Init+0x54>)
 8002e60:	4614      	mov	r4, r2
 8002e62:	330c      	adds	r3, #12
 8002e64:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002e68:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	xDMA3_TX.transfer_direction = DMA_Configuration.Transfer_Direction.Memory_to_peripheral;
 8002e6c:	2240      	movs	r2, #64	@ 0x40
 8002e6e:	4b0e      	ldr	r3, [pc, #56]	@ (8002ea8 <xDMA3_TX_Init+0x50>)
 8002e70:	611a      	str	r2, [r3, #16]
	xDMA3_TX.circular_mode = DMA_Configuration.Circular_Mode.Disable;
 8002e72:	2200      	movs	r2, #0
 8002e74:	4b0c      	ldr	r3, [pc, #48]	@ (8002ea8 <xDMA3_TX_Init+0x50>)
 8002e76:	619a      	str	r2, [r3, #24]
	xDMA3_TX.flow_control = DMA_Configuration.Flow_Control.DMA_Control;
 8002e78:	2200      	movs	r2, #0
 8002e7a:	4b0b      	ldr	r3, [pc, #44]	@ (8002ea8 <xDMA3_TX_Init+0x50>)
 8002e7c:	60da      	str	r2, [r3, #12]
	xDMA3_TX.interrupts = DMA_Configuration.DMA_Interrupts.Disable;
 8002e7e:	2200      	movs	r2, #0
 8002e80:	4b09      	ldr	r3, [pc, #36]	@ (8002ea8 <xDMA3_TX_Init+0x50>)
 8002e82:	61da      	str	r2, [r3, #28]
	xDMA3_TX.peripheral_pointer_increment = DMA_Configuration.Peripheral_Pointer_Increment.Disable;
 8002e84:	2300      	movs	r3, #0
 8002e86:	b29a      	uxth	r2, r3
 8002e88:	4b07      	ldr	r3, [pc, #28]	@ (8002ea8 <xDMA3_TX_Init+0x50>)
 8002e8a:	845a      	strh	r2, [r3, #34]	@ 0x22
	xDMA3_TX.memory_pointer_increment = DMA_Configuration.Memory_Pointer_Increment.Enable;
 8002e8c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002e90:	b29a      	uxth	r2, r3
 8002e92:	4b05      	ldr	r3, [pc, #20]	@ (8002ea8 <xDMA3_TX_Init+0x50>)
 8002e94:	841a      	strh	r2, [r3, #32]
	xDMA3_TX.priority_level = DMA_Configuration.Priority_Level.Very_high;
 8002e96:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002e9a:	4b03      	ldr	r3, [pc, #12]	@ (8002ea8 <xDMA3_TX_Init+0x50>)
 8002e9c:	615a      	str	r2, [r3, #20]
	DMA_Init(&xDMA3_TX);
 8002e9e:	4802      	ldr	r0, [pc, #8]	@ (8002ea8 <xDMA3_TX_Init+0x50>)
 8002ea0:	f7ff fb7e 	bl	80025a0 <DMA_Init>
}
 8002ea4:	bf00      	nop
 8002ea6:	bd98      	pop	{r3, r4, r7, pc}
 8002ea8:	2000020c 	.word	0x2000020c
 8002eac:	080059f4 	.word	0x080059f4

08002eb0 <xDMA1_RX_Init>:
 * @brief Initializes the DMA for SPI3 TX.
 *
 * Configures and initializes the DMA channel for transmitting data via SPI3.
 */
static void xDMA1_RX_Init()
{
 8002eb0:	b598      	push	{r3, r4, r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
	xDMA1_RX.Request = DMA_Configuration.Request.SPI1_RX;
 8002eb4:	4a14      	ldr	r2, [pc, #80]	@ (8002f08 <xDMA1_RX_Init+0x58>)
 8002eb6:	4b15      	ldr	r3, [pc, #84]	@ (8002f0c <xDMA1_RX_Init+0x5c>)
 8002eb8:	4614      	mov	r4, r2
 8002eba:	3330      	adds	r3, #48	@ 0x30
 8002ebc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002ec0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	xDMA1_RX.transfer_direction = DMA_Configuration.Transfer_Direction.Peripheral_to_memory;
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	4b10      	ldr	r3, [pc, #64]	@ (8002f08 <xDMA1_RX_Init+0x58>)
 8002ec8:	611a      	str	r2, [r3, #16]
	xDMA1_RX.circular_mode = DMA_Configuration.Circular_Mode.Disable;
 8002eca:	2200      	movs	r2, #0
 8002ecc:	4b0e      	ldr	r3, [pc, #56]	@ (8002f08 <xDMA1_RX_Init+0x58>)
 8002ece:	619a      	str	r2, [r3, #24]
	xDMA1_RX.flow_control = DMA_Configuration.Flow_Control.DMA_Control;
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	4b0d      	ldr	r3, [pc, #52]	@ (8002f08 <xDMA1_RX_Init+0x58>)
 8002ed4:	60da      	str	r2, [r3, #12]
	xDMA1_RX.interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 8002ed6:	2210      	movs	r2, #16
 8002ed8:	4b0b      	ldr	r3, [pc, #44]	@ (8002f08 <xDMA1_RX_Init+0x58>)
 8002eda:	61da      	str	r2, [r3, #28]
	xDMA1_RX.peripheral_pointer_increment = DMA_Configuration.Peripheral_Pointer_Increment.Disable;
 8002edc:	2300      	movs	r3, #0
 8002ede:	b29a      	uxth	r2, r3
 8002ee0:	4b09      	ldr	r3, [pc, #36]	@ (8002f08 <xDMA1_RX_Init+0x58>)
 8002ee2:	845a      	strh	r2, [r3, #34]	@ 0x22
	xDMA1_RX.memory_pointer_increment = DMA_Configuration.Memory_Pointer_Increment.Enable;
 8002ee4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002ee8:	b29a      	uxth	r2, r3
 8002eea:	4b07      	ldr	r3, [pc, #28]	@ (8002f08 <xDMA1_RX_Init+0x58>)
 8002eec:	841a      	strh	r2, [r3, #32]
	xDMA1_RX.priority_level = DMA_Configuration.Priority_Level.Very_high;
 8002eee:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002ef2:	4b05      	ldr	r3, [pc, #20]	@ (8002f08 <xDMA1_RX_Init+0x58>)
 8002ef4:	615a      	str	r2, [r3, #20]
	xDMA1_RX.ISR_Routines.Full_Transfer_Commplete_ISR = SPI1_RX_ISR;
 8002ef6:	4b04      	ldr	r3, [pc, #16]	@ (8002f08 <xDMA1_RX_Init+0x58>)
 8002ef8:	4a05      	ldr	r2, [pc, #20]	@ (8002f10 <xDMA1_RX_Init+0x60>)
 8002efa:	64da      	str	r2, [r3, #76]	@ 0x4c
	DMA_Init(&xDMA1_RX);
 8002efc:	4802      	ldr	r0, [pc, #8]	@ (8002f08 <xDMA1_RX_Init+0x58>)
 8002efe:	f7ff fb4f 	bl	80025a0 <DMA_Init>
}
 8002f02:	bf00      	nop
 8002f04:	bd98      	pop	{r3, r4, r7, pc}
 8002f06:	bf00      	nop
 8002f08:	20000104 	.word	0x20000104
 8002f0c:	080059f4 	.word	0x080059f4
 8002f10:	08002d85 	.word	0x08002d85

08002f14 <xDMA2_RX_Init>:
 * @brief Initializes the DMA for SPI1 RX.
 *
 * Configures and initializes the DMA channel for receiving data via SPI1.
 */
static void xDMA2_RX_Init()
{
 8002f14:	b598      	push	{r3, r4, r7, lr}
 8002f16:	af00      	add	r7, sp, #0
	xDMA2_RX.Request = DMA_Configuration.Request.SPI2_RX;
 8002f18:	4a12      	ldr	r2, [pc, #72]	@ (8002f64 <xDMA2_RX_Init+0x50>)
 8002f1a:	4b13      	ldr	r3, [pc, #76]	@ (8002f68 <xDMA2_RX_Init+0x54>)
 8002f1c:	4614      	mov	r4, r2
 8002f1e:	3318      	adds	r3, #24
 8002f20:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002f24:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	xDMA2_RX.transfer_direction = DMA_Configuration.Transfer_Direction.Memory_to_peripheral;
 8002f28:	2240      	movs	r2, #64	@ 0x40
 8002f2a:	4b0e      	ldr	r3, [pc, #56]	@ (8002f64 <xDMA2_RX_Init+0x50>)
 8002f2c:	611a      	str	r2, [r3, #16]
	xDMA2_RX.circular_mode = DMA_Configuration.Circular_Mode.Disable;
 8002f2e:	2200      	movs	r2, #0
 8002f30:	4b0c      	ldr	r3, [pc, #48]	@ (8002f64 <xDMA2_RX_Init+0x50>)
 8002f32:	619a      	str	r2, [r3, #24]
	xDMA2_RX.flow_control = DMA_Configuration.Flow_Control.DMA_Control;
 8002f34:	2200      	movs	r2, #0
 8002f36:	4b0b      	ldr	r3, [pc, #44]	@ (8002f64 <xDMA2_RX_Init+0x50>)
 8002f38:	60da      	str	r2, [r3, #12]
	xDMA2_RX.interrupts = DMA_Configuration.DMA_Interrupts.Disable;
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	4b09      	ldr	r3, [pc, #36]	@ (8002f64 <xDMA2_RX_Init+0x50>)
 8002f3e:	61da      	str	r2, [r3, #28]
	xDMA2_RX.peripheral_pointer_increment = DMA_Configuration.Peripheral_Pointer_Increment.Disable;
 8002f40:	2300      	movs	r3, #0
 8002f42:	b29a      	uxth	r2, r3
 8002f44:	4b07      	ldr	r3, [pc, #28]	@ (8002f64 <xDMA2_RX_Init+0x50>)
 8002f46:	845a      	strh	r2, [r3, #34]	@ 0x22
	xDMA2_RX.memory_pointer_increment = DMA_Configuration.Memory_Pointer_Increment.Enable;
 8002f48:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f4c:	b29a      	uxth	r2, r3
 8002f4e:	4b05      	ldr	r3, [pc, #20]	@ (8002f64 <xDMA2_RX_Init+0x50>)
 8002f50:	841a      	strh	r2, [r3, #32]
	xDMA2_RX.priority_level = DMA_Configuration.Priority_Level.Very_high;
 8002f52:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002f56:	4b03      	ldr	r3, [pc, #12]	@ (8002f64 <xDMA2_RX_Init+0x50>)
 8002f58:	615a      	str	r2, [r3, #20]
	DMA_Init(&xDMA2_RX);
 8002f5a:	4802      	ldr	r0, [pc, #8]	@ (8002f64 <xDMA2_RX_Init+0x50>)
 8002f5c:	f7ff fb20 	bl	80025a0 <DMA_Init>
}
 8002f60:	bf00      	nop
 8002f62:	bd98      	pop	{r3, r4, r7, pc}
 8002f64:	200001b4 	.word	0x200001b4
 8002f68:	080059f4 	.word	0x080059f4

08002f6c <xDMA3_RX_Init>:
 * @brief Initializes the DMA for SPI2 RX.
 *
 * Configures and initializes the DMA channel for receiving data via SPI2.
 */
static void xDMA3_RX_Init()
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	af00      	add	r7, sp, #0
	xDMA3_RX.Request = DMA_Configuration.Request.SPI3_RX;
 8002f70:	4b11      	ldr	r3, [pc, #68]	@ (8002fb8 <xDMA3_RX_Init+0x4c>)
 8002f72:	4a12      	ldr	r2, [pc, #72]	@ (8002fbc <xDMA3_RX_Init+0x50>)
 8002f74:	ca07      	ldmia	r2, {r0, r1, r2}
 8002f76:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	xDMA3_RX.transfer_direction = DMA_Configuration.Transfer_Direction.Memory_to_peripheral;
 8002f7a:	2240      	movs	r2, #64	@ 0x40
 8002f7c:	4b0e      	ldr	r3, [pc, #56]	@ (8002fb8 <xDMA3_RX_Init+0x4c>)
 8002f7e:	611a      	str	r2, [r3, #16]
	xDMA3_RX.circular_mode = DMA_Configuration.Circular_Mode.Disable;
 8002f80:	2200      	movs	r2, #0
 8002f82:	4b0d      	ldr	r3, [pc, #52]	@ (8002fb8 <xDMA3_RX_Init+0x4c>)
 8002f84:	619a      	str	r2, [r3, #24]
	xDMA3_RX.flow_control = DMA_Configuration.Flow_Control.DMA_Control;
 8002f86:	2200      	movs	r2, #0
 8002f88:	4b0b      	ldr	r3, [pc, #44]	@ (8002fb8 <xDMA3_RX_Init+0x4c>)
 8002f8a:	60da      	str	r2, [r3, #12]
	xDMA3_RX.interrupts = DMA_Configuration.DMA_Interrupts.Disable;
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	4b0a      	ldr	r3, [pc, #40]	@ (8002fb8 <xDMA3_RX_Init+0x4c>)
 8002f90:	61da      	str	r2, [r3, #28]
	xDMA3_RX.peripheral_pointer_increment = DMA_Configuration.Peripheral_Pointer_Increment.Disable;
 8002f92:	2300      	movs	r3, #0
 8002f94:	b29a      	uxth	r2, r3
 8002f96:	4b08      	ldr	r3, [pc, #32]	@ (8002fb8 <xDMA3_RX_Init+0x4c>)
 8002f98:	845a      	strh	r2, [r3, #34]	@ 0x22
	xDMA3_RX.memory_pointer_increment = DMA_Configuration.Memory_Pointer_Increment.Enable;
 8002f9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	4b05      	ldr	r3, [pc, #20]	@ (8002fb8 <xDMA3_RX_Init+0x4c>)
 8002fa2:	841a      	strh	r2, [r3, #32]
	xDMA3_RX.priority_level = DMA_Configuration.Priority_Level.Very_high;
 8002fa4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002fa8:	4b03      	ldr	r3, [pc, #12]	@ (8002fb8 <xDMA3_RX_Init+0x4c>)
 8002faa:	615a      	str	r2, [r3, #20]
	DMA_Init(&xDMA3_RX);
 8002fac:	4802      	ldr	r0, [pc, #8]	@ (8002fb8 <xDMA3_RX_Init+0x4c>)
 8002fae:	f7ff faf7 	bl	80025a0 <DMA_Init>
}
 8002fb2:	bf00      	nop
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	20000264 	.word	0x20000264
 8002fbc:	080059f4 	.word	0x080059f4

08002fc0 <SPI_Clock_Enable>:
 *
 * @param[in] config Pointer to the SPI configuration structure.
 * @return int8_t Returns 0 on success, -1 on failure.
 */
int8_t SPI_Clock_Enable(SPI_Config *config)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
	int8_t retval = 0;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	73fb      	strb	r3, [r7, #15]
	if(config ->Port == SPI1)RCC -> APB2ENR |= RCC_APB2ENR_SPI1EN;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a14      	ldr	r2, [pc, #80]	@ (8003024 <SPI_Clock_Enable+0x64>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d105      	bne.n	8002fe2 <SPI_Clock_Enable+0x22>
 8002fd6:	4b14      	ldr	r3, [pc, #80]	@ (8003028 <SPI_Clock_Enable+0x68>)
 8002fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fda:	4a13      	ldr	r2, [pc, #76]	@ (8003028 <SPI_Clock_Enable+0x68>)
 8002fdc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002fe0:	6453      	str	r3, [r2, #68]	@ 0x44
	if(config ->Port == SPI2)RCC -> APB1ENR |= RCC_APB1ENR_SPI2EN;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a11      	ldr	r2, [pc, #68]	@ (800302c <SPI_Clock_Enable+0x6c>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d105      	bne.n	8002ff8 <SPI_Clock_Enable+0x38>
 8002fec:	4b0e      	ldr	r3, [pc, #56]	@ (8003028 <SPI_Clock_Enable+0x68>)
 8002fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff0:	4a0d      	ldr	r2, [pc, #52]	@ (8003028 <SPI_Clock_Enable+0x68>)
 8002ff2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ff6:	6413      	str	r3, [r2, #64]	@ 0x40
	if(config ->Port == SPI3)RCC -> APB1ENR |= RCC_APB1ENR_SPI3EN;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a0c      	ldr	r2, [pc, #48]	@ (8003030 <SPI_Clock_Enable+0x70>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d106      	bne.n	8003010 <SPI_Clock_Enable+0x50>
 8003002:	4b09      	ldr	r3, [pc, #36]	@ (8003028 <SPI_Clock_Enable+0x68>)
 8003004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003006:	4a08      	ldr	r2, [pc, #32]	@ (8003028 <SPI_Clock_Enable+0x68>)
 8003008:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800300c:	6413      	str	r3, [r2, #64]	@ 0x40
 800300e:	e001      	b.n	8003014 <SPI_Clock_Enable+0x54>
	else
		retval = -1;
 8003010:	23ff      	movs	r3, #255	@ 0xff
 8003012:	73fb      	strb	r3, [r7, #15]
	return retval;
 8003014:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003018:	4618      	mov	r0, r3
 800301a:	3714      	adds	r7, #20
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr
 8003024:	40013000 	.word	0x40013000
 8003028:	40023800 	.word	0x40023800
 800302c:	40003800 	.word	0x40003800
 8003030:	40003c00 	.word	0x40003c00

08003034 <SPI_Pin_Init>:
 * This function configures the necessary GPIO pins for the specified SPI port.
 *
 * @param[in] config Pointer to the SPI configuration structure.
 */
static void SPI_Pin_Init(SPI_Config *config)
{
 8003034:	b590      	push	{r4, r7, lr}
 8003036:	b087      	sub	sp, #28
 8003038:	af04      	add	r7, sp, #16
 800303a:	6078      	str	r0, [r7, #4]
	if(config -> Port == SPI1)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4aa2      	ldr	r2, [pc, #648]	@ (80032cc <SPI_Pin_Init+0x298>)
 8003042:	4293      	cmp	r3, r2
 8003044:	f040 816c 	bne.w	8003320 <SPI_Pin_Init+0x2ec>
	{
		if((config->mode == SPI_Configurations.Mode.Full_Duplex_Master) || (config->mode == SPI_Configurations.Mode.Full_Duplex_Slave))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	891b      	ldrh	r3, [r3, #8]
 800304c:	220b      	movs	r2, #11
 800304e:	4293      	cmp	r3, r2
 8003050:	d004      	beq.n	800305c <SPI_Pin_Init+0x28>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	891b      	ldrh	r3, [r3, #8]
 8003056:	220c      	movs	r2, #12
 8003058:	4293      	cmp	r3, r2
 800305a:	d17d      	bne.n	8003158 <SPI_Pin_Init+0x124>
		{
			if(config->clock_pin == SPI_Configurations.Pin._SPI1_.CLK1.PA5) GPIO_Pin_Init(GPIOA, 5, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_1);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	791b      	ldrb	r3, [r3, #4]
 8003060:	220f      	movs	r2, #15
 8003062:	4293      	cmp	r3, r2
 8003064:	d10e      	bne.n	8003084 <SPI_Pin_Init+0x50>
 8003066:	2002      	movs	r0, #2
 8003068:	2400      	movs	r4, #0
 800306a:	2303      	movs	r3, #3
 800306c:	2200      	movs	r2, #0
 800306e:	2105      	movs	r1, #5
 8003070:	9102      	str	r1, [sp, #8]
 8003072:	9201      	str	r2, [sp, #4]
 8003074:	9300      	str	r3, [sp, #0]
 8003076:	4623      	mov	r3, r4
 8003078:	4602      	mov	r2, r0
 800307a:	2105      	movs	r1, #5
 800307c:	4894      	ldr	r0, [pc, #592]	@ (80032d0 <SPI_Pin_Init+0x29c>)
 800307e:	f7ff fdcd 	bl	8002c1c <GPIO_Pin_Init>
 8003082:	e012      	b.n	80030aa <SPI_Pin_Init+0x76>
			else if(config->clock_pin == SPI_Configurations.Pin._SPI1_.CLK1.PB3) GPIO_Pin_Init(GPIOB, 3, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_1);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	791b      	ldrb	r3, [r3, #4]
 8003088:	2221      	movs	r2, #33	@ 0x21
 800308a:	4293      	cmp	r3, r2
 800308c:	d10d      	bne.n	80030aa <SPI_Pin_Init+0x76>
 800308e:	2002      	movs	r0, #2
 8003090:	2400      	movs	r4, #0
 8003092:	2303      	movs	r3, #3
 8003094:	2200      	movs	r2, #0
 8003096:	2105      	movs	r1, #5
 8003098:	9102      	str	r1, [sp, #8]
 800309a:	9201      	str	r2, [sp, #4]
 800309c:	9300      	str	r3, [sp, #0]
 800309e:	4623      	mov	r3, r4
 80030a0:	4602      	mov	r2, r0
 80030a2:	2103      	movs	r1, #3
 80030a4:	488b      	ldr	r0, [pc, #556]	@ (80032d4 <SPI_Pin_Init+0x2a0>)
 80030a6:	f7ff fdb9 	bl	8002c1c <GPIO_Pin_Init>

			if(config->miso_pin == SPI_Configurations.Pin._SPI1_.MISO1.PA6) GPIO_Pin_Init(GPIOA, 6, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_1);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	799b      	ldrb	r3, [r3, #6]
 80030ae:	2210      	movs	r2, #16
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d10e      	bne.n	80030d2 <SPI_Pin_Init+0x9e>
 80030b4:	2002      	movs	r0, #2
 80030b6:	2400      	movs	r4, #0
 80030b8:	2303      	movs	r3, #3
 80030ba:	2200      	movs	r2, #0
 80030bc:	2105      	movs	r1, #5
 80030be:	9102      	str	r1, [sp, #8]
 80030c0:	9201      	str	r2, [sp, #4]
 80030c2:	9300      	str	r3, [sp, #0]
 80030c4:	4623      	mov	r3, r4
 80030c6:	4602      	mov	r2, r0
 80030c8:	2106      	movs	r1, #6
 80030ca:	4881      	ldr	r0, [pc, #516]	@ (80032d0 <SPI_Pin_Init+0x29c>)
 80030cc:	f7ff fda6 	bl	8002c1c <GPIO_Pin_Init>
 80030d0:	e012      	b.n	80030f8 <SPI_Pin_Init+0xc4>
			else if(config->miso_pin == SPI_Configurations.Pin._SPI1_.MISO1.PB4) GPIO_Pin_Init(GPIOB, 4, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_1);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	799b      	ldrb	r3, [r3, #6]
 80030d6:	2222      	movs	r2, #34	@ 0x22
 80030d8:	4293      	cmp	r3, r2
 80030da:	d10d      	bne.n	80030f8 <SPI_Pin_Init+0xc4>
 80030dc:	2002      	movs	r0, #2
 80030de:	2400      	movs	r4, #0
 80030e0:	2303      	movs	r3, #3
 80030e2:	2200      	movs	r2, #0
 80030e4:	2105      	movs	r1, #5
 80030e6:	9102      	str	r1, [sp, #8]
 80030e8:	9201      	str	r2, [sp, #4]
 80030ea:	9300      	str	r3, [sp, #0]
 80030ec:	4623      	mov	r3, r4
 80030ee:	4602      	mov	r2, r0
 80030f0:	2104      	movs	r1, #4
 80030f2:	4878      	ldr	r0, [pc, #480]	@ (80032d4 <SPI_Pin_Init+0x2a0>)
 80030f4:	f7ff fd92 	bl	8002c1c <GPIO_Pin_Init>

			if(config->mosi_pin == SPI_Configurations.Pin._SPI1_.MOSI1.PA7) GPIO_Pin_Init(GPIOA, 7, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_1);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	795b      	ldrb	r3, [r3, #5]
 80030fc:	2211      	movs	r2, #17
 80030fe:	4293      	cmp	r3, r2
 8003100:	d10e      	bne.n	8003120 <SPI_Pin_Init+0xec>
 8003102:	2002      	movs	r0, #2
 8003104:	2400      	movs	r4, #0
 8003106:	2303      	movs	r3, #3
 8003108:	2200      	movs	r2, #0
 800310a:	2105      	movs	r1, #5
 800310c:	9102      	str	r1, [sp, #8]
 800310e:	9201      	str	r2, [sp, #4]
 8003110:	9300      	str	r3, [sp, #0]
 8003112:	4623      	mov	r3, r4
 8003114:	4602      	mov	r2, r0
 8003116:	2107      	movs	r1, #7
 8003118:	486d      	ldr	r0, [pc, #436]	@ (80032d0 <SPI_Pin_Init+0x29c>)
 800311a:	f7ff fd7f 	bl	8002c1c <GPIO_Pin_Init>
 800311e:	e012      	b.n	8003146 <SPI_Pin_Init+0x112>
			else if(config->mosi_pin == SPI_Configurations.Pin._SPI1_.MOSI1.PB5) GPIO_Pin_Init(GPIOB, 5, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_1);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	795b      	ldrb	r3, [r3, #5]
 8003124:	2223      	movs	r2, #35	@ 0x23
 8003126:	4293      	cmp	r3, r2
 8003128:	d10d      	bne.n	8003146 <SPI_Pin_Init+0x112>
 800312a:	2002      	movs	r0, #2
 800312c:	2400      	movs	r4, #0
 800312e:	2303      	movs	r3, #3
 8003130:	2200      	movs	r2, #0
 8003132:	2105      	movs	r1, #5
 8003134:	9102      	str	r1, [sp, #8]
 8003136:	9201      	str	r2, [sp, #4]
 8003138:	9300      	str	r3, [sp, #0]
 800313a:	4623      	mov	r3, r4
 800313c:	4602      	mov	r2, r0
 800313e:	2105      	movs	r1, #5
 8003140:	4864      	ldr	r0, [pc, #400]	@ (80032d4 <SPI_Pin_Init+0x2a0>)
 8003142:	f7ff fd6b 	bl	8002c1c <GPIO_Pin_Init>

			config->Port -> CR1 &= ~SPI_CR1_BIDIMODE;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003154:	601a      	str	r2, [r3, #0]
 8003156:	e3b9      	b.n	80038cc <SPI_Pin_Init+0x898>
		}
		else if((config->mode == SPI_Configurations.Mode.Half_Duplex_Master) || (config->mode == SPI_Configurations.Mode.TX_Only_Master) || (config->mode == SPI_Configurations.Mode.RX_Only_Slave))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	891b      	ldrh	r3, [r3, #8]
 800315c:	220d      	movs	r2, #13
 800315e:	4293      	cmp	r3, r2
 8003160:	d009      	beq.n	8003176 <SPI_Pin_Init+0x142>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	891b      	ldrh	r3, [r3, #8]
 8003166:	2211      	movs	r2, #17
 8003168:	4293      	cmp	r3, r2
 800316a:	d004      	beq.n	8003176 <SPI_Pin_Init+0x142>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	891b      	ldrh	r3, [r3, #8]
 8003170:	2210      	movs	r2, #16
 8003172:	4293      	cmp	r3, r2
 8003174:	d15e      	bne.n	8003234 <SPI_Pin_Init+0x200>
		{
			if(config->clock_pin == SPI_Configurations.Pin._SPI1_.CLK1.PA5) GPIO_Pin_Init(GPIOA, 5, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_1);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	791b      	ldrb	r3, [r3, #4]
 800317a:	220f      	movs	r2, #15
 800317c:	4293      	cmp	r3, r2
 800317e:	d10e      	bne.n	800319e <SPI_Pin_Init+0x16a>
 8003180:	2002      	movs	r0, #2
 8003182:	2400      	movs	r4, #0
 8003184:	2303      	movs	r3, #3
 8003186:	2200      	movs	r2, #0
 8003188:	2105      	movs	r1, #5
 800318a:	9102      	str	r1, [sp, #8]
 800318c:	9201      	str	r2, [sp, #4]
 800318e:	9300      	str	r3, [sp, #0]
 8003190:	4623      	mov	r3, r4
 8003192:	4602      	mov	r2, r0
 8003194:	2105      	movs	r1, #5
 8003196:	484e      	ldr	r0, [pc, #312]	@ (80032d0 <SPI_Pin_Init+0x29c>)
 8003198:	f7ff fd40 	bl	8002c1c <GPIO_Pin_Init>
 800319c:	e012      	b.n	80031c4 <SPI_Pin_Init+0x190>
			else if(config->clock_pin == SPI_Configurations.Pin._SPI1_.CLK1.PB3) GPIO_Pin_Init(GPIOB, 3, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_1);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	791b      	ldrb	r3, [r3, #4]
 80031a2:	2221      	movs	r2, #33	@ 0x21
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d10d      	bne.n	80031c4 <SPI_Pin_Init+0x190>
 80031a8:	2002      	movs	r0, #2
 80031aa:	2400      	movs	r4, #0
 80031ac:	2303      	movs	r3, #3
 80031ae:	2200      	movs	r2, #0
 80031b0:	2105      	movs	r1, #5
 80031b2:	9102      	str	r1, [sp, #8]
 80031b4:	9201      	str	r2, [sp, #4]
 80031b6:	9300      	str	r3, [sp, #0]
 80031b8:	4623      	mov	r3, r4
 80031ba:	4602      	mov	r2, r0
 80031bc:	2103      	movs	r1, #3
 80031be:	4845      	ldr	r0, [pc, #276]	@ (80032d4 <SPI_Pin_Init+0x2a0>)
 80031c0:	f7ff fd2c 	bl	8002c1c <GPIO_Pin_Init>

			if(config->mosi_pin == SPI_Configurations.Pin._SPI1_.MOSI1.PA7) GPIO_Pin_Init(GPIOA, 7, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_1);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	795b      	ldrb	r3, [r3, #5]
 80031c8:	2211      	movs	r2, #17
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d10e      	bne.n	80031ec <SPI_Pin_Init+0x1b8>
 80031ce:	2002      	movs	r0, #2
 80031d0:	2400      	movs	r4, #0
 80031d2:	2303      	movs	r3, #3
 80031d4:	2200      	movs	r2, #0
 80031d6:	2105      	movs	r1, #5
 80031d8:	9102      	str	r1, [sp, #8]
 80031da:	9201      	str	r2, [sp, #4]
 80031dc:	9300      	str	r3, [sp, #0]
 80031de:	4623      	mov	r3, r4
 80031e0:	4602      	mov	r2, r0
 80031e2:	2107      	movs	r1, #7
 80031e4:	483a      	ldr	r0, [pc, #232]	@ (80032d0 <SPI_Pin_Init+0x29c>)
 80031e6:	f7ff fd19 	bl	8002c1c <GPIO_Pin_Init>
 80031ea:	e012      	b.n	8003212 <SPI_Pin_Init+0x1de>
			else if(config->mosi_pin == SPI_Configurations.Pin._SPI1_.MOSI1.PB5) GPIO_Pin_Init(GPIOB, 5, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_1);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	795b      	ldrb	r3, [r3, #5]
 80031f0:	2223      	movs	r2, #35	@ 0x23
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d10d      	bne.n	8003212 <SPI_Pin_Init+0x1de>
 80031f6:	2002      	movs	r0, #2
 80031f8:	2400      	movs	r4, #0
 80031fa:	2303      	movs	r3, #3
 80031fc:	2200      	movs	r2, #0
 80031fe:	2105      	movs	r1, #5
 8003200:	9102      	str	r1, [sp, #8]
 8003202:	9201      	str	r2, [sp, #4]
 8003204:	9300      	str	r3, [sp, #0]
 8003206:	4623      	mov	r3, r4
 8003208:	4602      	mov	r2, r0
 800320a:	2105      	movs	r1, #5
 800320c:	4831      	ldr	r0, [pc, #196]	@ (80032d4 <SPI_Pin_Init+0x2a0>)
 800320e:	f7ff fd05 	bl	8002c1c <GPIO_Pin_Init>

			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003220:	601a      	str	r2, [r3, #0]
			config->Port -> CR1 |= SPI_CR1_BIDIOE;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003230:	601a      	str	r2, [r3, #0]
 8003232:	e34b      	b.n	80038cc <SPI_Pin_Init+0x898>
		}
		else if((config->mode == SPI_Configurations.Mode.Half_Duplex_Slave) || (config->mode == SPI_Configurations.Mode.RX_Only_Master) || (config->mode == SPI_Configurations.Mode.TX_Only_Slave))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	891b      	ldrh	r3, [r3, #8]
 8003238:	220e      	movs	r2, #14
 800323a:	4293      	cmp	r3, r2
 800323c:	d00a      	beq.n	8003254 <SPI_Pin_Init+0x220>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	891b      	ldrh	r3, [r3, #8]
 8003242:	220f      	movs	r2, #15
 8003244:	4293      	cmp	r3, r2
 8003246:	d005      	beq.n	8003254 <SPI_Pin_Init+0x220>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	891b      	ldrh	r3, [r3, #8]
 800324c:	2212      	movs	r2, #18
 800324e:	4293      	cmp	r3, r2
 8003250:	f040 833c 	bne.w	80038cc <SPI_Pin_Init+0x898>
		{
			if(config->clock_pin == SPI_Configurations.Pin._SPI1_.CLK1.PA5) GPIO_Pin_Init(GPIOA, 5, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_1);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	791b      	ldrb	r3, [r3, #4]
 8003258:	220f      	movs	r2, #15
 800325a:	4293      	cmp	r3, r2
 800325c:	d10e      	bne.n	800327c <SPI_Pin_Init+0x248>
 800325e:	2002      	movs	r0, #2
 8003260:	2400      	movs	r4, #0
 8003262:	2303      	movs	r3, #3
 8003264:	2200      	movs	r2, #0
 8003266:	2105      	movs	r1, #5
 8003268:	9102      	str	r1, [sp, #8]
 800326a:	9201      	str	r2, [sp, #4]
 800326c:	9300      	str	r3, [sp, #0]
 800326e:	4623      	mov	r3, r4
 8003270:	4602      	mov	r2, r0
 8003272:	2105      	movs	r1, #5
 8003274:	4816      	ldr	r0, [pc, #88]	@ (80032d0 <SPI_Pin_Init+0x29c>)
 8003276:	f7ff fcd1 	bl	8002c1c <GPIO_Pin_Init>
 800327a:	e012      	b.n	80032a2 <SPI_Pin_Init+0x26e>
			else if(config->clock_pin == SPI_Configurations.Pin._SPI1_.CLK1.PB3) GPIO_Pin_Init(GPIOB, 3, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_1);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	791b      	ldrb	r3, [r3, #4]
 8003280:	2221      	movs	r2, #33	@ 0x21
 8003282:	4293      	cmp	r3, r2
 8003284:	d10d      	bne.n	80032a2 <SPI_Pin_Init+0x26e>
 8003286:	2002      	movs	r0, #2
 8003288:	2400      	movs	r4, #0
 800328a:	2303      	movs	r3, #3
 800328c:	2200      	movs	r2, #0
 800328e:	2105      	movs	r1, #5
 8003290:	9102      	str	r1, [sp, #8]
 8003292:	9201      	str	r2, [sp, #4]
 8003294:	9300      	str	r3, [sp, #0]
 8003296:	4623      	mov	r3, r4
 8003298:	4602      	mov	r2, r0
 800329a:	2103      	movs	r1, #3
 800329c:	480d      	ldr	r0, [pc, #52]	@ (80032d4 <SPI_Pin_Init+0x2a0>)
 800329e:	f7ff fcbd 	bl	8002c1c <GPIO_Pin_Init>

			if(config->miso_pin == SPI_Configurations.Pin._SPI1_.MISO1.PA6) GPIO_Pin_Init(GPIOA, 6, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_1);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	799b      	ldrb	r3, [r3, #6]
 80032a6:	2210      	movs	r2, #16
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d115      	bne.n	80032d8 <SPI_Pin_Init+0x2a4>
 80032ac:	2002      	movs	r0, #2
 80032ae:	2400      	movs	r4, #0
 80032b0:	2303      	movs	r3, #3
 80032b2:	2200      	movs	r2, #0
 80032b4:	2105      	movs	r1, #5
 80032b6:	9102      	str	r1, [sp, #8]
 80032b8:	9201      	str	r2, [sp, #4]
 80032ba:	9300      	str	r3, [sp, #0]
 80032bc:	4623      	mov	r3, r4
 80032be:	4602      	mov	r2, r0
 80032c0:	2106      	movs	r1, #6
 80032c2:	4803      	ldr	r0, [pc, #12]	@ (80032d0 <SPI_Pin_Init+0x29c>)
 80032c4:	f7ff fcaa 	bl	8002c1c <GPIO_Pin_Init>
 80032c8:	e019      	b.n	80032fe <SPI_Pin_Init+0x2ca>
 80032ca:	bf00      	nop
 80032cc:	40013000 	.word	0x40013000
 80032d0:	40020000 	.word	0x40020000
 80032d4:	40020400 	.word	0x40020400
			else if(config->miso_pin == SPI_Configurations.Pin._SPI1_.MISO1.PB4) GPIO_Pin_Init(GPIOB, 4, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_1);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	799b      	ldrb	r3, [r3, #6]
 80032dc:	2222      	movs	r2, #34	@ 0x22
 80032de:	4293      	cmp	r3, r2
 80032e0:	d10d      	bne.n	80032fe <SPI_Pin_Init+0x2ca>
 80032e2:	2002      	movs	r0, #2
 80032e4:	2400      	movs	r4, #0
 80032e6:	2303      	movs	r3, #3
 80032e8:	2200      	movs	r2, #0
 80032ea:	2105      	movs	r1, #5
 80032ec:	9102      	str	r1, [sp, #8]
 80032ee:	9201      	str	r2, [sp, #4]
 80032f0:	9300      	str	r3, [sp, #0]
 80032f2:	4623      	mov	r3, r4
 80032f4:	4602      	mov	r2, r0
 80032f6:	2104      	movs	r1, #4
 80032f8:	489f      	ldr	r0, [pc, #636]	@ (8003578 <SPI_Pin_Init+0x544>)
 80032fa:	f7ff fc8f 	bl	8002c1c <GPIO_Pin_Init>

			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800330c:	601a      	str	r2, [r3, #0]
			config->Port -> CR1 &= ~SPI_CR1_BIDIOE;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800331c:	601a      	str	r2, [r3, #0]

			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
			config->Port -> CR1 &= ~SPI_CR1_BIDIOE;
		}
	}
}
 800331e:	e2d5      	b.n	80038cc <SPI_Pin_Init+0x898>
	else if(config -> Port == SPI2)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a95      	ldr	r2, [pc, #596]	@ (800357c <SPI_Pin_Init+0x548>)
 8003326:	4293      	cmp	r3, r2
 8003328:	f040 8151 	bne.w	80035ce <SPI_Pin_Init+0x59a>
		if((config->mode == SPI_Configurations.Mode.Full_Duplex_Master) || (config->mode == SPI_Configurations.Mode.Full_Duplex_Slave))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	891b      	ldrh	r3, [r3, #8]
 8003330:	220b      	movs	r2, #11
 8003332:	4293      	cmp	r3, r2
 8003334:	d005      	beq.n	8003342 <SPI_Pin_Init+0x30e>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	891b      	ldrh	r3, [r3, #8]
 800333a:	220c      	movs	r2, #12
 800333c:	4293      	cmp	r3, r2
 800333e:	f040 8084 	bne.w	800344a <SPI_Pin_Init+0x416>
			if(config->clock_pin == SPI_Configurations.Pin._SPI2_.CLK2.PB10) GPIO_Pin_Init(GPIOB, 10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_2);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	791b      	ldrb	r3, [r3, #4]
 8003346:	461a      	mov	r2, r3
 8003348:	2313      	movs	r3, #19
 800334a:	429a      	cmp	r2, r3
 800334c:	d10e      	bne.n	800336c <SPI_Pin_Init+0x338>
 800334e:	2002      	movs	r0, #2
 8003350:	2400      	movs	r4, #0
 8003352:	2303      	movs	r3, #3
 8003354:	2200      	movs	r2, #0
 8003356:	2105      	movs	r1, #5
 8003358:	9102      	str	r1, [sp, #8]
 800335a:	9201      	str	r2, [sp, #4]
 800335c:	9300      	str	r3, [sp, #0]
 800335e:	4623      	mov	r3, r4
 8003360:	4602      	mov	r2, r0
 8003362:	210a      	movs	r1, #10
 8003364:	4884      	ldr	r0, [pc, #528]	@ (8003578 <SPI_Pin_Init+0x544>)
 8003366:	f7ff fc59 	bl	8002c1c <GPIO_Pin_Init>
 800336a:	e013      	b.n	8003394 <SPI_Pin_Init+0x360>
			else if(config->clock_pin == SPI_Configurations.Pin._SPI2_.CLK2.PB13) GPIO_Pin_Init(GPIOB, 13, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_2);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	791b      	ldrb	r3, [r3, #4]
 8003370:	461a      	mov	r2, r3
 8003372:	2317      	movs	r3, #23
 8003374:	429a      	cmp	r2, r3
 8003376:	d10d      	bne.n	8003394 <SPI_Pin_Init+0x360>
 8003378:	2002      	movs	r0, #2
 800337a:	2400      	movs	r4, #0
 800337c:	2303      	movs	r3, #3
 800337e:	2200      	movs	r2, #0
 8003380:	2105      	movs	r1, #5
 8003382:	9102      	str	r1, [sp, #8]
 8003384:	9201      	str	r2, [sp, #4]
 8003386:	9300      	str	r3, [sp, #0]
 8003388:	4623      	mov	r3, r4
 800338a:	4602      	mov	r2, r0
 800338c:	210d      	movs	r1, #13
 800338e:	487a      	ldr	r0, [pc, #488]	@ (8003578 <SPI_Pin_Init+0x544>)
 8003390:	f7ff fc44 	bl	8002c1c <GPIO_Pin_Init>
			if(config->miso_pin == SPI_Configurations.Pin._SPI2_.MISO2.PB14) GPIO_Pin_Init(GPIOB, 14, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_2);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	799b      	ldrb	r3, [r3, #6]
 8003398:	461a      	mov	r2, r3
 800339a:	231b      	movs	r3, #27
 800339c:	429a      	cmp	r2, r3
 800339e:	d10e      	bne.n	80033be <SPI_Pin_Init+0x38a>
 80033a0:	2002      	movs	r0, #2
 80033a2:	2400      	movs	r4, #0
 80033a4:	2303      	movs	r3, #3
 80033a6:	2200      	movs	r2, #0
 80033a8:	2105      	movs	r1, #5
 80033aa:	9102      	str	r1, [sp, #8]
 80033ac:	9201      	str	r2, [sp, #4]
 80033ae:	9300      	str	r3, [sp, #0]
 80033b0:	4623      	mov	r3, r4
 80033b2:	4602      	mov	r2, r0
 80033b4:	210e      	movs	r1, #14
 80033b6:	4870      	ldr	r0, [pc, #448]	@ (8003578 <SPI_Pin_Init+0x544>)
 80033b8:	f7ff fc30 	bl	8002c1c <GPIO_Pin_Init>
 80033bc:	e013      	b.n	80033e6 <SPI_Pin_Init+0x3b2>
			else if(config->miso_pin == SPI_Configurations.Pin._SPI2_.MISO2.PC2) GPIO_Pin_Init(GPIOC, 2, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_2);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	799b      	ldrb	r3, [r3, #6]
 80033c2:	461a      	mov	r2, r3
 80033c4:	2320      	movs	r3, #32
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d10d      	bne.n	80033e6 <SPI_Pin_Init+0x3b2>
 80033ca:	2002      	movs	r0, #2
 80033cc:	2400      	movs	r4, #0
 80033ce:	2303      	movs	r3, #3
 80033d0:	2200      	movs	r2, #0
 80033d2:	2105      	movs	r1, #5
 80033d4:	9102      	str	r1, [sp, #8]
 80033d6:	9201      	str	r2, [sp, #4]
 80033d8:	9300      	str	r3, [sp, #0]
 80033da:	4623      	mov	r3, r4
 80033dc:	4602      	mov	r2, r0
 80033de:	2102      	movs	r1, #2
 80033e0:	4867      	ldr	r0, [pc, #412]	@ (8003580 <SPI_Pin_Init+0x54c>)
 80033e2:	f7ff fc1b 	bl	8002c1c <GPIO_Pin_Init>
			if(config->mosi_pin == SPI_Configurations.Pin._SPI2_.MOSI2.PB15) GPIO_Pin_Init(GPIOB, 15, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_2);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	795b      	ldrb	r3, [r3, #5]
 80033ea:	461a      	mov	r2, r3
 80033ec:	231d      	movs	r3, #29
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d10e      	bne.n	8003410 <SPI_Pin_Init+0x3dc>
 80033f2:	2002      	movs	r0, #2
 80033f4:	2400      	movs	r4, #0
 80033f6:	2303      	movs	r3, #3
 80033f8:	2200      	movs	r2, #0
 80033fa:	2105      	movs	r1, #5
 80033fc:	9102      	str	r1, [sp, #8]
 80033fe:	9201      	str	r2, [sp, #4]
 8003400:	9300      	str	r3, [sp, #0]
 8003402:	4623      	mov	r3, r4
 8003404:	4602      	mov	r2, r0
 8003406:	210f      	movs	r1, #15
 8003408:	485b      	ldr	r0, [pc, #364]	@ (8003578 <SPI_Pin_Init+0x544>)
 800340a:	f7ff fc07 	bl	8002c1c <GPIO_Pin_Init>
 800340e:	e013      	b.n	8003438 <SPI_Pin_Init+0x404>
			else if(config->mosi_pin == SPI_Configurations.Pin._SPI2_.MOSI2.PC3) GPIO_Pin_Init(GPIOC, 3, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_2);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	795b      	ldrb	r3, [r3, #5]
 8003414:	461a      	mov	r2, r3
 8003416:	2311      	movs	r3, #17
 8003418:	429a      	cmp	r2, r3
 800341a:	d10d      	bne.n	8003438 <SPI_Pin_Init+0x404>
 800341c:	2002      	movs	r0, #2
 800341e:	2400      	movs	r4, #0
 8003420:	2303      	movs	r3, #3
 8003422:	2200      	movs	r2, #0
 8003424:	2105      	movs	r1, #5
 8003426:	9102      	str	r1, [sp, #8]
 8003428:	9201      	str	r2, [sp, #4]
 800342a:	9300      	str	r3, [sp, #0]
 800342c:	4623      	mov	r3, r4
 800342e:	4602      	mov	r2, r0
 8003430:	2103      	movs	r1, #3
 8003432:	4853      	ldr	r0, [pc, #332]	@ (8003580 <SPI_Pin_Init+0x54c>)
 8003434:	f7ff fbf2 	bl	8002c1c <GPIO_Pin_Init>
			config->Port -> CR1 &= ~SPI_CR1_BIDIMODE;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003446:	601a      	str	r2, [r3, #0]
 8003448:	e240      	b.n	80038cc <SPI_Pin_Init+0x898>
		else if((config->mode == SPI_Configurations.Mode.Half_Duplex_Master) || (config->mode == SPI_Configurations.Mode.TX_Only_Master) || (config->mode == SPI_Configurations.Mode.RX_Only_Slave))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	891b      	ldrh	r3, [r3, #8]
 800344e:	220d      	movs	r2, #13
 8003450:	4293      	cmp	r3, r2
 8003452:	d009      	beq.n	8003468 <SPI_Pin_Init+0x434>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	891b      	ldrh	r3, [r3, #8]
 8003458:	2211      	movs	r2, #17
 800345a:	4293      	cmp	r3, r2
 800345c:	d004      	beq.n	8003468 <SPI_Pin_Init+0x434>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	891b      	ldrh	r3, [r3, #8]
 8003462:	2210      	movs	r2, #16
 8003464:	4293      	cmp	r3, r2
 8003466:	d139      	bne.n	80034dc <SPI_Pin_Init+0x4a8>
			if(config->clock_pin == SPI_Configurations.Pin._SPI2_.CLK2.PB10) GPIO_Pin_Init(GPIOB, 10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_2);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	791b      	ldrb	r3, [r3, #4]
 800346c:	461a      	mov	r2, r3
 800346e:	2313      	movs	r3, #19
 8003470:	429a      	cmp	r2, r3
 8003472:	d10e      	bne.n	8003492 <SPI_Pin_Init+0x45e>
 8003474:	2002      	movs	r0, #2
 8003476:	2400      	movs	r4, #0
 8003478:	2303      	movs	r3, #3
 800347a:	2200      	movs	r2, #0
 800347c:	2105      	movs	r1, #5
 800347e:	9102      	str	r1, [sp, #8]
 8003480:	9201      	str	r2, [sp, #4]
 8003482:	9300      	str	r3, [sp, #0]
 8003484:	4623      	mov	r3, r4
 8003486:	4602      	mov	r2, r0
 8003488:	210a      	movs	r1, #10
 800348a:	483b      	ldr	r0, [pc, #236]	@ (8003578 <SPI_Pin_Init+0x544>)
 800348c:	f7ff fbc6 	bl	8002c1c <GPIO_Pin_Init>
 8003490:	e013      	b.n	80034ba <SPI_Pin_Init+0x486>
			else if(config->clock_pin == SPI_Configurations.Pin._SPI2_.CLK2.PB13) GPIO_Pin_Init(GPIOB, 13, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_2);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	791b      	ldrb	r3, [r3, #4]
 8003496:	461a      	mov	r2, r3
 8003498:	2317      	movs	r3, #23
 800349a:	429a      	cmp	r2, r3
 800349c:	d10d      	bne.n	80034ba <SPI_Pin_Init+0x486>
 800349e:	2002      	movs	r0, #2
 80034a0:	2400      	movs	r4, #0
 80034a2:	2303      	movs	r3, #3
 80034a4:	2200      	movs	r2, #0
 80034a6:	2105      	movs	r1, #5
 80034a8:	9102      	str	r1, [sp, #8]
 80034aa:	9201      	str	r2, [sp, #4]
 80034ac:	9300      	str	r3, [sp, #0]
 80034ae:	4623      	mov	r3, r4
 80034b0:	4602      	mov	r2, r0
 80034b2:	210d      	movs	r1, #13
 80034b4:	4830      	ldr	r0, [pc, #192]	@ (8003578 <SPI_Pin_Init+0x544>)
 80034b6:	f7ff fbb1 	bl	8002c1c <GPIO_Pin_Init>
			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80034c8:	601a      	str	r2, [r3, #0]
			config->Port -> CR1 |= SPI_CR1_BIDIOE;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80034d8:	601a      	str	r2, [r3, #0]
 80034da:	e1f7      	b.n	80038cc <SPI_Pin_Init+0x898>
		else if((config->mode == SPI_Configurations.Mode.Half_Duplex_Slave) || (config->mode == SPI_Configurations.Mode.RX_Only_Master) || (config->mode == SPI_Configurations.Mode.TX_Only_Slave))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	891b      	ldrh	r3, [r3, #8]
 80034e0:	220e      	movs	r2, #14
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d00a      	beq.n	80034fc <SPI_Pin_Init+0x4c8>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	891b      	ldrh	r3, [r3, #8]
 80034ea:	220f      	movs	r2, #15
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d005      	beq.n	80034fc <SPI_Pin_Init+0x4c8>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	891b      	ldrh	r3, [r3, #8]
 80034f4:	2212      	movs	r2, #18
 80034f6:	4293      	cmp	r3, r2
 80034f8:	f040 81e8 	bne.w	80038cc <SPI_Pin_Init+0x898>
			if(config->clock_pin == SPI_Configurations.Pin._SPI2_.CLK2.PB10) GPIO_Pin_Init(GPIOB, 10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_2);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	791b      	ldrb	r3, [r3, #4]
 8003500:	461a      	mov	r2, r3
 8003502:	2313      	movs	r3, #19
 8003504:	429a      	cmp	r2, r3
 8003506:	d10e      	bne.n	8003526 <SPI_Pin_Init+0x4f2>
 8003508:	2002      	movs	r0, #2
 800350a:	2400      	movs	r4, #0
 800350c:	2303      	movs	r3, #3
 800350e:	2200      	movs	r2, #0
 8003510:	2105      	movs	r1, #5
 8003512:	9102      	str	r1, [sp, #8]
 8003514:	9201      	str	r2, [sp, #4]
 8003516:	9300      	str	r3, [sp, #0]
 8003518:	4623      	mov	r3, r4
 800351a:	4602      	mov	r2, r0
 800351c:	210a      	movs	r1, #10
 800351e:	4816      	ldr	r0, [pc, #88]	@ (8003578 <SPI_Pin_Init+0x544>)
 8003520:	f7ff fb7c 	bl	8002c1c <GPIO_Pin_Init>
 8003524:	e013      	b.n	800354e <SPI_Pin_Init+0x51a>
			else if(config->clock_pin == SPI_Configurations.Pin._SPI2_.CLK2.PB13) GPIO_Pin_Init(GPIOB, 13, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_2);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	791b      	ldrb	r3, [r3, #4]
 800352a:	461a      	mov	r2, r3
 800352c:	2317      	movs	r3, #23
 800352e:	429a      	cmp	r2, r3
 8003530:	d10d      	bne.n	800354e <SPI_Pin_Init+0x51a>
 8003532:	2002      	movs	r0, #2
 8003534:	2400      	movs	r4, #0
 8003536:	2303      	movs	r3, #3
 8003538:	2200      	movs	r2, #0
 800353a:	2105      	movs	r1, #5
 800353c:	9102      	str	r1, [sp, #8]
 800353e:	9201      	str	r2, [sp, #4]
 8003540:	9300      	str	r3, [sp, #0]
 8003542:	4623      	mov	r3, r4
 8003544:	4602      	mov	r2, r0
 8003546:	210d      	movs	r1, #13
 8003548:	480b      	ldr	r0, [pc, #44]	@ (8003578 <SPI_Pin_Init+0x544>)
 800354a:	f7ff fb67 	bl	8002c1c <GPIO_Pin_Init>
			if(config->miso_pin == SPI_Configurations.Pin._SPI2_.MISO2.PB14) GPIO_Pin_Init(GPIOB, 14, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_2);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	799b      	ldrb	r3, [r3, #6]
 8003552:	461a      	mov	r2, r3
 8003554:	231b      	movs	r3, #27
 8003556:	429a      	cmp	r2, r3
 8003558:	d114      	bne.n	8003584 <SPI_Pin_Init+0x550>
 800355a:	2002      	movs	r0, #2
 800355c:	2400      	movs	r4, #0
 800355e:	2303      	movs	r3, #3
 8003560:	2200      	movs	r2, #0
 8003562:	2105      	movs	r1, #5
 8003564:	9102      	str	r1, [sp, #8]
 8003566:	9201      	str	r2, [sp, #4]
 8003568:	9300      	str	r3, [sp, #0]
 800356a:	4623      	mov	r3, r4
 800356c:	4602      	mov	r2, r0
 800356e:	210e      	movs	r1, #14
 8003570:	4801      	ldr	r0, [pc, #4]	@ (8003578 <SPI_Pin_Init+0x544>)
 8003572:	f7ff fb53 	bl	8002c1c <GPIO_Pin_Init>
 8003576:	e019      	b.n	80035ac <SPI_Pin_Init+0x578>
 8003578:	40020400 	.word	0x40020400
 800357c:	40003800 	.word	0x40003800
 8003580:	40020800 	.word	0x40020800
			else if(config->miso_pin == SPI_Configurations.Pin._SPI2_.MISO2.PC2) GPIO_Pin_Init(GPIOC, 2, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_2);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	799b      	ldrb	r3, [r3, #6]
 8003588:	461a      	mov	r2, r3
 800358a:	2320      	movs	r3, #32
 800358c:	429a      	cmp	r2, r3
 800358e:	d10d      	bne.n	80035ac <SPI_Pin_Init+0x578>
 8003590:	2002      	movs	r0, #2
 8003592:	2400      	movs	r4, #0
 8003594:	2303      	movs	r3, #3
 8003596:	2200      	movs	r2, #0
 8003598:	2105      	movs	r1, #5
 800359a:	9102      	str	r1, [sp, #8]
 800359c:	9201      	str	r2, [sp, #4]
 800359e:	9300      	str	r3, [sp, #0]
 80035a0:	4623      	mov	r3, r4
 80035a2:	4602      	mov	r2, r0
 80035a4:	2102      	movs	r1, #2
 80035a6:	489f      	ldr	r0, [pc, #636]	@ (8003824 <SPI_Pin_Init+0x7f0>)
 80035a8:	f7ff fb38 	bl	8002c1c <GPIO_Pin_Init>
			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80035ba:	601a      	str	r2, [r3, #0]
			config->Port -> CR1 &= ~SPI_CR1_BIDIOE;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80035ca:	601a      	str	r2, [r3, #0]
}
 80035cc:	e17e      	b.n	80038cc <SPI_Pin_Init+0x898>
	else if(config -> Port == SPI3)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a95      	ldr	r2, [pc, #596]	@ (8003828 <SPI_Pin_Init+0x7f4>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	f040 8179 	bne.w	80038cc <SPI_Pin_Init+0x898>
		if((config->mode == SPI_Configurations.Mode.Full_Duplex_Master) || (config->mode == SPI_Configurations.Mode.Full_Duplex_Slave))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	891b      	ldrh	r3, [r3, #8]
 80035de:	220b      	movs	r2, #11
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d005      	beq.n	80035f0 <SPI_Pin_Init+0x5bc>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	891b      	ldrh	r3, [r3, #8]
 80035e8:	220c      	movs	r2, #12
 80035ea:	4293      	cmp	r3, r2
 80035ec:	f040 8084 	bne.w	80036f8 <SPI_Pin_Init+0x6c4>
			if(config->clock_pin == SPI_Configurations.Pin._SPI3_.CLK3.PB3) GPIO_Pin_Init(GPIOB, 3, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_3);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	791b      	ldrb	r3, [r3, #4]
 80035f4:	461a      	mov	r2, r3
 80035f6:	2317      	movs	r3, #23
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d10e      	bne.n	800361a <SPI_Pin_Init+0x5e6>
 80035fc:	2002      	movs	r0, #2
 80035fe:	2400      	movs	r4, #0
 8003600:	2303      	movs	r3, #3
 8003602:	2200      	movs	r2, #0
 8003604:	2106      	movs	r1, #6
 8003606:	9102      	str	r1, [sp, #8]
 8003608:	9201      	str	r2, [sp, #4]
 800360a:	9300      	str	r3, [sp, #0]
 800360c:	4623      	mov	r3, r4
 800360e:	4602      	mov	r2, r0
 8003610:	2103      	movs	r1, #3
 8003612:	4886      	ldr	r0, [pc, #536]	@ (800382c <SPI_Pin_Init+0x7f8>)
 8003614:	f7ff fb02 	bl	8002c1c <GPIO_Pin_Init>
 8003618:	e013      	b.n	8003642 <SPI_Pin_Init+0x60e>
			else if(config->clock_pin == SPI_Configurations.Pin._SPI3_.CLK3.PC10) GPIO_Pin_Init(GPIOC, 10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_3);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	791b      	ldrb	r3, [r3, #4]
 800361e:	461a      	mov	r2, r3
 8003620:	2325      	movs	r3, #37	@ 0x25
 8003622:	429a      	cmp	r2, r3
 8003624:	d10d      	bne.n	8003642 <SPI_Pin_Init+0x60e>
 8003626:	2002      	movs	r0, #2
 8003628:	2400      	movs	r4, #0
 800362a:	2303      	movs	r3, #3
 800362c:	2200      	movs	r2, #0
 800362e:	2106      	movs	r1, #6
 8003630:	9102      	str	r1, [sp, #8]
 8003632:	9201      	str	r2, [sp, #4]
 8003634:	9300      	str	r3, [sp, #0]
 8003636:	4623      	mov	r3, r4
 8003638:	4602      	mov	r2, r0
 800363a:	210a      	movs	r1, #10
 800363c:	4879      	ldr	r0, [pc, #484]	@ (8003824 <SPI_Pin_Init+0x7f0>)
 800363e:	f7ff faed 	bl	8002c1c <GPIO_Pin_Init>
			if(config->miso_pin == SPI_Configurations.Pin._SPI3_.MISO3.PB4) GPIO_Pin_Init(GPIOB, 4, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_3);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	799b      	ldrb	r3, [r3, #6]
 8003646:	461a      	mov	r2, r3
 8003648:	2318      	movs	r3, #24
 800364a:	429a      	cmp	r2, r3
 800364c:	d10e      	bne.n	800366c <SPI_Pin_Init+0x638>
 800364e:	2002      	movs	r0, #2
 8003650:	2400      	movs	r4, #0
 8003652:	2303      	movs	r3, #3
 8003654:	2200      	movs	r2, #0
 8003656:	2106      	movs	r1, #6
 8003658:	9102      	str	r1, [sp, #8]
 800365a:	9201      	str	r2, [sp, #4]
 800365c:	9300      	str	r3, [sp, #0]
 800365e:	4623      	mov	r3, r4
 8003660:	4602      	mov	r2, r0
 8003662:	2104      	movs	r1, #4
 8003664:	4871      	ldr	r0, [pc, #452]	@ (800382c <SPI_Pin_Init+0x7f8>)
 8003666:	f7ff fad9 	bl	8002c1c <GPIO_Pin_Init>
 800366a:	e013      	b.n	8003694 <SPI_Pin_Init+0x660>
			else if(config->miso_pin == SPI_Configurations.Pin._SPI3_.MISO3.PC11) GPIO_Pin_Init(GPIOC,11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_3);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	799b      	ldrb	r3, [r3, #6]
 8003670:	461a      	mov	r2, r3
 8003672:	2327      	movs	r3, #39	@ 0x27
 8003674:	429a      	cmp	r2, r3
 8003676:	d10d      	bne.n	8003694 <SPI_Pin_Init+0x660>
 8003678:	2002      	movs	r0, #2
 800367a:	2400      	movs	r4, #0
 800367c:	2303      	movs	r3, #3
 800367e:	2200      	movs	r2, #0
 8003680:	2106      	movs	r1, #6
 8003682:	9102      	str	r1, [sp, #8]
 8003684:	9201      	str	r2, [sp, #4]
 8003686:	9300      	str	r3, [sp, #0]
 8003688:	4623      	mov	r3, r4
 800368a:	4602      	mov	r2, r0
 800368c:	210b      	movs	r1, #11
 800368e:	4865      	ldr	r0, [pc, #404]	@ (8003824 <SPI_Pin_Init+0x7f0>)
 8003690:	f7ff fac4 	bl	8002c1c <GPIO_Pin_Init>
			if(config->mosi_pin == SPI_Configurations.Pin._SPI3_.MOSI3.PB5) GPIO_Pin_Init(GPIOB, 5, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_3);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	795b      	ldrb	r3, [r3, #5]
 8003698:	461a      	mov	r2, r3
 800369a:	2319      	movs	r3, #25
 800369c:	429a      	cmp	r2, r3
 800369e:	d10e      	bne.n	80036be <SPI_Pin_Init+0x68a>
 80036a0:	2002      	movs	r0, #2
 80036a2:	2400      	movs	r4, #0
 80036a4:	2303      	movs	r3, #3
 80036a6:	2200      	movs	r2, #0
 80036a8:	2106      	movs	r1, #6
 80036aa:	9102      	str	r1, [sp, #8]
 80036ac:	9201      	str	r2, [sp, #4]
 80036ae:	9300      	str	r3, [sp, #0]
 80036b0:	4623      	mov	r3, r4
 80036b2:	4602      	mov	r2, r0
 80036b4:	2105      	movs	r1, #5
 80036b6:	485d      	ldr	r0, [pc, #372]	@ (800382c <SPI_Pin_Init+0x7f8>)
 80036b8:	f7ff fab0 	bl	8002c1c <GPIO_Pin_Init>
 80036bc:	e013      	b.n	80036e6 <SPI_Pin_Init+0x6b2>
			else if(config->mosi_pin == SPI_Configurations.Pin._SPI3_.MOSI3.PC12) GPIO_Pin_Init(GPIOC, 12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_3);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	795b      	ldrb	r3, [r3, #5]
 80036c2:	461a      	mov	r2, r3
 80036c4:	2327      	movs	r3, #39	@ 0x27
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d10d      	bne.n	80036e6 <SPI_Pin_Init+0x6b2>
 80036ca:	2002      	movs	r0, #2
 80036cc:	2400      	movs	r4, #0
 80036ce:	2303      	movs	r3, #3
 80036d0:	2200      	movs	r2, #0
 80036d2:	2106      	movs	r1, #6
 80036d4:	9102      	str	r1, [sp, #8]
 80036d6:	9201      	str	r2, [sp, #4]
 80036d8:	9300      	str	r3, [sp, #0]
 80036da:	4623      	mov	r3, r4
 80036dc:	4602      	mov	r2, r0
 80036de:	210c      	movs	r1, #12
 80036e0:	4850      	ldr	r0, [pc, #320]	@ (8003824 <SPI_Pin_Init+0x7f0>)
 80036e2:	f7ff fa9b 	bl	8002c1c <GPIO_Pin_Init>
			config->Port -> CR1 &= ~SPI_CR1_BIDIMODE;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80036f4:	601a      	str	r2, [r3, #0]
 80036f6:	e0e9      	b.n	80038cc <SPI_Pin_Init+0x898>
		else if((config->mode == SPI_Configurations.Mode.Half_Duplex_Master) || (config->mode == SPI_Configurations.Mode.TX_Only_Master) || (config->mode == SPI_Configurations.Mode.RX_Only_Slave))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	891b      	ldrh	r3, [r3, #8]
 80036fc:	220d      	movs	r2, #13
 80036fe:	4293      	cmp	r3, r2
 8003700:	d009      	beq.n	8003716 <SPI_Pin_Init+0x6e2>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	891b      	ldrh	r3, [r3, #8]
 8003706:	2211      	movs	r2, #17
 8003708:	4293      	cmp	r3, r2
 800370a:	d004      	beq.n	8003716 <SPI_Pin_Init+0x6e2>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	891b      	ldrh	r3, [r3, #8]
 8003710:	2210      	movs	r2, #16
 8003712:	4293      	cmp	r3, r2
 8003714:	d162      	bne.n	80037dc <SPI_Pin_Init+0x7a8>
			if(config->clock_pin == SPI_Configurations.Pin._SPI3_.CLK3.PB3) GPIO_Pin_Init(GPIOB, 3, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_3);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	791b      	ldrb	r3, [r3, #4]
 800371a:	461a      	mov	r2, r3
 800371c:	2317      	movs	r3, #23
 800371e:	429a      	cmp	r2, r3
 8003720:	d10e      	bne.n	8003740 <SPI_Pin_Init+0x70c>
 8003722:	2002      	movs	r0, #2
 8003724:	2400      	movs	r4, #0
 8003726:	2303      	movs	r3, #3
 8003728:	2200      	movs	r2, #0
 800372a:	2106      	movs	r1, #6
 800372c:	9102      	str	r1, [sp, #8]
 800372e:	9201      	str	r2, [sp, #4]
 8003730:	9300      	str	r3, [sp, #0]
 8003732:	4623      	mov	r3, r4
 8003734:	4602      	mov	r2, r0
 8003736:	2103      	movs	r1, #3
 8003738:	483c      	ldr	r0, [pc, #240]	@ (800382c <SPI_Pin_Init+0x7f8>)
 800373a:	f7ff fa6f 	bl	8002c1c <GPIO_Pin_Init>
 800373e:	e013      	b.n	8003768 <SPI_Pin_Init+0x734>
			else if(config->clock_pin == SPI_Configurations.Pin._SPI3_.CLK3.PC10) GPIO_Pin_Init(GPIOC, 10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_3);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	791b      	ldrb	r3, [r3, #4]
 8003744:	461a      	mov	r2, r3
 8003746:	2325      	movs	r3, #37	@ 0x25
 8003748:	429a      	cmp	r2, r3
 800374a:	d10d      	bne.n	8003768 <SPI_Pin_Init+0x734>
 800374c:	2002      	movs	r0, #2
 800374e:	2400      	movs	r4, #0
 8003750:	2303      	movs	r3, #3
 8003752:	2200      	movs	r2, #0
 8003754:	2106      	movs	r1, #6
 8003756:	9102      	str	r1, [sp, #8]
 8003758:	9201      	str	r2, [sp, #4]
 800375a:	9300      	str	r3, [sp, #0]
 800375c:	4623      	mov	r3, r4
 800375e:	4602      	mov	r2, r0
 8003760:	210a      	movs	r1, #10
 8003762:	4830      	ldr	r0, [pc, #192]	@ (8003824 <SPI_Pin_Init+0x7f0>)
 8003764:	f7ff fa5a 	bl	8002c1c <GPIO_Pin_Init>
			if(config->miso_pin == SPI_Configurations.Pin._SPI3_.MISO3.PB4) GPIO_Pin_Init(GPIOB, 4, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_3);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	799b      	ldrb	r3, [r3, #6]
 800376c:	461a      	mov	r2, r3
 800376e:	2318      	movs	r3, #24
 8003770:	429a      	cmp	r2, r3
 8003772:	d10e      	bne.n	8003792 <SPI_Pin_Init+0x75e>
 8003774:	2002      	movs	r0, #2
 8003776:	2400      	movs	r4, #0
 8003778:	2303      	movs	r3, #3
 800377a:	2200      	movs	r2, #0
 800377c:	2106      	movs	r1, #6
 800377e:	9102      	str	r1, [sp, #8]
 8003780:	9201      	str	r2, [sp, #4]
 8003782:	9300      	str	r3, [sp, #0]
 8003784:	4623      	mov	r3, r4
 8003786:	4602      	mov	r2, r0
 8003788:	2104      	movs	r1, #4
 800378a:	4828      	ldr	r0, [pc, #160]	@ (800382c <SPI_Pin_Init+0x7f8>)
 800378c:	f7ff fa46 	bl	8002c1c <GPIO_Pin_Init>
 8003790:	e013      	b.n	80037ba <SPI_Pin_Init+0x786>
			else if(config->miso_pin == SPI_Configurations.Pin._SPI3_.MISO3.PC11) GPIO_Pin_Init(GPIOC,11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_3);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	799b      	ldrb	r3, [r3, #6]
 8003796:	461a      	mov	r2, r3
 8003798:	2327      	movs	r3, #39	@ 0x27
 800379a:	429a      	cmp	r2, r3
 800379c:	d10d      	bne.n	80037ba <SPI_Pin_Init+0x786>
 800379e:	2002      	movs	r0, #2
 80037a0:	2400      	movs	r4, #0
 80037a2:	2303      	movs	r3, #3
 80037a4:	2200      	movs	r2, #0
 80037a6:	2106      	movs	r1, #6
 80037a8:	9102      	str	r1, [sp, #8]
 80037aa:	9201      	str	r2, [sp, #4]
 80037ac:	9300      	str	r3, [sp, #0]
 80037ae:	4623      	mov	r3, r4
 80037b0:	4602      	mov	r2, r0
 80037b2:	210b      	movs	r1, #11
 80037b4:	481b      	ldr	r0, [pc, #108]	@ (8003824 <SPI_Pin_Init+0x7f0>)
 80037b6:	f7ff fa31 	bl	8002c1c <GPIO_Pin_Init>
			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80037c8:	601a      	str	r2, [r3, #0]
			config->Port -> CR1 |= SPI_CR1_BIDIOE;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80037d8:	601a      	str	r2, [r3, #0]
 80037da:	e077      	b.n	80038cc <SPI_Pin_Init+0x898>
		else if((config->mode == SPI_Configurations.Mode.Half_Duplex_Slave) || (config->mode == SPI_Configurations.Mode.RX_Only_Master) || (config->mode == SPI_Configurations.Mode.TX_Only_Slave))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	891b      	ldrh	r3, [r3, #8]
 80037e0:	220e      	movs	r2, #14
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d009      	beq.n	80037fa <SPI_Pin_Init+0x7c6>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	891b      	ldrh	r3, [r3, #8]
 80037ea:	220f      	movs	r2, #15
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d004      	beq.n	80037fa <SPI_Pin_Init+0x7c6>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	891b      	ldrh	r3, [r3, #8]
 80037f4:	2212      	movs	r2, #18
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d168      	bne.n	80038cc <SPI_Pin_Init+0x898>
			if(config->clock_pin == SPI_Configurations.Pin._SPI3_.CLK3.PB3) GPIO_Pin_Init(GPIOB, 3, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_3);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	791b      	ldrb	r3, [r3, #4]
 80037fe:	461a      	mov	r2, r3
 8003800:	2317      	movs	r3, #23
 8003802:	429a      	cmp	r2, r3
 8003804:	d114      	bne.n	8003830 <SPI_Pin_Init+0x7fc>
 8003806:	2002      	movs	r0, #2
 8003808:	2400      	movs	r4, #0
 800380a:	2303      	movs	r3, #3
 800380c:	2200      	movs	r2, #0
 800380e:	2106      	movs	r1, #6
 8003810:	9102      	str	r1, [sp, #8]
 8003812:	9201      	str	r2, [sp, #4]
 8003814:	9300      	str	r3, [sp, #0]
 8003816:	4623      	mov	r3, r4
 8003818:	4602      	mov	r2, r0
 800381a:	2103      	movs	r1, #3
 800381c:	4803      	ldr	r0, [pc, #12]	@ (800382c <SPI_Pin_Init+0x7f8>)
 800381e:	f7ff f9fd 	bl	8002c1c <GPIO_Pin_Init>
 8003822:	e019      	b.n	8003858 <SPI_Pin_Init+0x824>
 8003824:	40020800 	.word	0x40020800
 8003828:	40003c00 	.word	0x40003c00
 800382c:	40020400 	.word	0x40020400
			else if(config->clock_pin == SPI_Configurations.Pin._SPI3_.CLK3.PC10) GPIO_Pin_Init(GPIOC, 10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_3);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	791b      	ldrb	r3, [r3, #4]
 8003834:	461a      	mov	r2, r3
 8003836:	2325      	movs	r3, #37	@ 0x25
 8003838:	429a      	cmp	r2, r3
 800383a:	d10d      	bne.n	8003858 <SPI_Pin_Init+0x824>
 800383c:	2002      	movs	r0, #2
 800383e:	2400      	movs	r4, #0
 8003840:	2303      	movs	r3, #3
 8003842:	2200      	movs	r2, #0
 8003844:	2106      	movs	r1, #6
 8003846:	9102      	str	r1, [sp, #8]
 8003848:	9201      	str	r2, [sp, #4]
 800384a:	9300      	str	r3, [sp, #0]
 800384c:	4623      	mov	r3, r4
 800384e:	4602      	mov	r2, r0
 8003850:	210a      	movs	r1, #10
 8003852:	4820      	ldr	r0, [pc, #128]	@ (80038d4 <SPI_Pin_Init+0x8a0>)
 8003854:	f7ff f9e2 	bl	8002c1c <GPIO_Pin_Init>
			if(config->mosi_pin == SPI_Configurations.Pin._SPI3_.MOSI3.PB5) GPIO_Pin_Init(GPIOB, 5, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_3);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	795b      	ldrb	r3, [r3, #5]
 800385c:	461a      	mov	r2, r3
 800385e:	2319      	movs	r3, #25
 8003860:	429a      	cmp	r2, r3
 8003862:	d10e      	bne.n	8003882 <SPI_Pin_Init+0x84e>
 8003864:	2002      	movs	r0, #2
 8003866:	2400      	movs	r4, #0
 8003868:	2303      	movs	r3, #3
 800386a:	2200      	movs	r2, #0
 800386c:	2106      	movs	r1, #6
 800386e:	9102      	str	r1, [sp, #8]
 8003870:	9201      	str	r2, [sp, #4]
 8003872:	9300      	str	r3, [sp, #0]
 8003874:	4623      	mov	r3, r4
 8003876:	4602      	mov	r2, r0
 8003878:	2105      	movs	r1, #5
 800387a:	4817      	ldr	r0, [pc, #92]	@ (80038d8 <SPI_Pin_Init+0x8a4>)
 800387c:	f7ff f9ce 	bl	8002c1c <GPIO_Pin_Init>
 8003880:	e013      	b.n	80038aa <SPI_Pin_Init+0x876>
			else if(config->mosi_pin == SPI_Configurations.Pin._SPI3_.MOSI3.PC12) GPIO_Pin_Init(GPIOC, 12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_3);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	795b      	ldrb	r3, [r3, #5]
 8003886:	461a      	mov	r2, r3
 8003888:	2327      	movs	r3, #39	@ 0x27
 800388a:	429a      	cmp	r2, r3
 800388c:	d10d      	bne.n	80038aa <SPI_Pin_Init+0x876>
 800388e:	2002      	movs	r0, #2
 8003890:	2400      	movs	r4, #0
 8003892:	2303      	movs	r3, #3
 8003894:	2200      	movs	r2, #0
 8003896:	2106      	movs	r1, #6
 8003898:	9102      	str	r1, [sp, #8]
 800389a:	9201      	str	r2, [sp, #4]
 800389c:	9300      	str	r3, [sp, #0]
 800389e:	4623      	mov	r3, r4
 80038a0:	4602      	mov	r2, r0
 80038a2:	210c      	movs	r1, #12
 80038a4:	480b      	ldr	r0, [pc, #44]	@ (80038d4 <SPI_Pin_Init+0x8a0>)
 80038a6:	f7ff f9b9 	bl	8002c1c <GPIO_Pin_Init>
			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80038b8:	601a      	str	r2, [r3, #0]
			config->Port -> CR1 &= ~SPI_CR1_BIDIOE;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80038c8:	601a      	str	r2, [r3, #0]
}
 80038ca:	e7ff      	b.n	80038cc <SPI_Pin_Init+0x898>
 80038cc:	bf00      	nop
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd90      	pop	{r4, r7, pc}
 80038d4:	40020800 	.word	0x40020800
 80038d8:	40020400 	.word	0x40020400

080038dc <SPI_Init>:
 *
 * @param[in] config Pointer to the SPI configuration structure.
 * @return int8_t Returns 1 on success, -1 on failure.
 */
int8_t SPI_Init(SPI_Config *config)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
//	}
//	else if(config->type == SPI_Configurations.Type.Slave){
//		GPIO_Pin_Init(config->NSS_Port, config->NSS_Pin, GPIO_Configuration.Mode.Input, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.Pull_Up, GPIO_Configuration.Alternate_Functions.None);
//	}

	SPI_Clock_Enable(config);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f7ff fb6b 	bl	8002fc0 <SPI_Clock_Enable>
	SPI_Pin_Init(config);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f7ff fba2 	bl	8003034 <SPI_Pin_Init>

//	SPI_NSS_High(config);

	config -> Port -> CR1 &= ~SPI_CR1_SPE;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038fe:	601a      	str	r2, [r3, #0]



	if((config -> Port == SPI1) || (config -> Port == SPI2) || (config -> Port == SPI3))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a89      	ldr	r2, [pc, #548]	@ (8003b2c <SPI_Init+0x250>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d00a      	beq.n	8003920 <SPI_Init+0x44>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a88      	ldr	r2, [pc, #544]	@ (8003b30 <SPI_Init+0x254>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d005      	beq.n	8003920 <SPI_Init+0x44>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a86      	ldr	r2, [pc, #536]	@ (8003b34 <SPI_Init+0x258>)
 800391a:	4293      	cmp	r3, r2
 800391c:	f040 81e2 	bne.w	8003ce4 <SPI_Init+0x408>
	{

		config -> Port ->CR1 |= SPI_CR1_SSM | SPI_CR1_SSI;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800392e:	601a      	str	r2, [r3, #0]


		     if(config -> clock_phase == SPI_Configurations.Clock_Phase.Low_0) config-> Port -> CR1 &= ~SPI_CR1_CPHA;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	8adb      	ldrh	r3, [r3, #22]
 8003934:	2217      	movs	r2, #23
 8003936:	4293      	cmp	r3, r2
 8003938:	d108      	bne.n	800394c <SPI_Init+0x70>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f022 0201 	bic.w	r2, r2, #1
 8003948:	601a      	str	r2, [r3, #0]
 800394a:	e010      	b.n	800396e <SPI_Init+0x92>
		else if(config -> clock_phase == SPI_Configurations.Clock_Phase.High_1) config-> Port -> CR1 |= SPI_CR1_CPHA;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	8adb      	ldrh	r3, [r3, #22]
 8003950:	2216      	movs	r2, #22
 8003952:	4293      	cmp	r3, r2
 8003954:	d108      	bne.n	8003968 <SPI_Init+0x8c>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f042 0201 	orr.w	r2, r2, #1
 8003964:	601a      	str	r2, [r3, #0]
 8003966:	e002      	b.n	800396e <SPI_Init+0x92>
		else {return -1;}
 8003968:	f04f 33ff 	mov.w	r3, #4294967295
 800396c:	e1be      	b.n	8003cec <SPI_Init+0x410>

		     if(config -> clock_polarity == SPI_Configurations.Clock_Polarity.Low_0) config-> Port -> CR1 &= ~SPI_CR1_CPOL;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	8a9b      	ldrh	r3, [r3, #20]
 8003972:	2221      	movs	r2, #33	@ 0x21
 8003974:	4293      	cmp	r3, r2
 8003976:	d108      	bne.n	800398a <SPI_Init+0xae>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f022 0202 	bic.w	r2, r2, #2
 8003986:	601a      	str	r2, [r3, #0]
 8003988:	e010      	b.n	80039ac <SPI_Init+0xd0>
		else if(config -> clock_polarity == SPI_Configurations.Clock_Polarity.High_1) config-> Port -> CR1 |= SPI_CR1_CPOL;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	8a9b      	ldrh	r3, [r3, #20]
 800398e:	2220      	movs	r2, #32
 8003990:	4293      	cmp	r3, r2
 8003992:	d108      	bne.n	80039a6 <SPI_Init+0xca>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f042 0202 	orr.w	r2, r2, #2
 80039a2:	601a      	str	r2, [r3, #0]
 80039a4:	e002      	b.n	80039ac <SPI_Init+0xd0>
		else {return -1;}
 80039a6:	f04f 33ff 	mov.w	r3, #4294967295
 80039aa:	e19f      	b.n	8003cec <SPI_Init+0x410>

		     if(config -> crc == SPI_Configurations.CRC_Enable.Disable) config -> Port -> CR1 &= ~SPI_CR1_CRCEN;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	895b      	ldrh	r3, [r3, #10]
 80039b0:	2200      	movs	r2, #0
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d108      	bne.n	80039c8 <SPI_Init+0xec>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80039c4:	601a      	str	r2, [r3, #0]
 80039c6:	e010      	b.n	80039ea <SPI_Init+0x10e>
		else if(config -> crc == SPI_Configurations.CRC_Enable.Enable) config -> Port -> CR1 |=  SPI_CR1_CRCEN;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	895b      	ldrh	r3, [r3, #10]
 80039cc:	2201      	movs	r2, #1
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d108      	bne.n	80039e4 <SPI_Init+0x108>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80039e0:	601a      	str	r2, [r3, #0]
 80039e2:	e002      	b.n	80039ea <SPI_Init+0x10e>
		else {return -1;}
 80039e4:	f04f 33ff 	mov.w	r3, #4294967295
 80039e8:	e180      	b.n	8003cec <SPI_Init+0x410>

		     if(config -> data_format == SPI_Configurations.Data_Format.Bit8) config -> Port -> CR1 &= ~SPI_CR1_DFF;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	899b      	ldrh	r3, [r3, #12]
 80039ee:	220b      	movs	r2, #11
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d108      	bne.n	8003a06 <SPI_Init+0x12a>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a02:	601a      	str	r2, [r3, #0]
 8003a04:	e010      	b.n	8003a28 <SPI_Init+0x14c>
		else if(config -> data_format == SPI_Configurations.Data_Format.Bit16) config -> Port -> CR1 |=  SPI_CR1_DFF;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	899b      	ldrh	r3, [r3, #12]
 8003a0a:	220c      	movs	r2, #12
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d108      	bne.n	8003a22 <SPI_Init+0x146>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a1e:	601a      	str	r2, [r3, #0]
 8003a20:	e002      	b.n	8003a28 <SPI_Init+0x14c>
		else {return -1;}
 8003a22:	f04f 33ff 	mov.w	r3, #4294967295
 8003a26:	e161      	b.n	8003cec <SPI_Init+0x410>

		     if(config -> frame_format == SPI_Configurations.Frame_Format.LSB_First) config -> Port -> CR1 |= SPI_CR1_LSBFIRST;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	89db      	ldrh	r3, [r3, #14]
 8003a2c:	2218      	movs	r2, #24
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d108      	bne.n	8003a44 <SPI_Init+0x168>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003a40:	601a      	str	r2, [r3, #0]
 8003a42:	e010      	b.n	8003a66 <SPI_Init+0x18a>
		else if(config -> frame_format == SPI_Configurations.Frame_Format.MSB_First) config -> Port -> CR1 &= ~SPI_CR1_LSBFIRST;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	89db      	ldrh	r3, [r3, #14]
 8003a48:	2217      	movs	r2, #23
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d108      	bne.n	8003a60 <SPI_Init+0x184>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003a5c:	601a      	str	r2, [r3, #0]
 8003a5e:	e002      	b.n	8003a66 <SPI_Init+0x18a>
		else {return -1;}
 8003a60:	f04f 33ff 	mov.w	r3, #4294967295
 8003a64:	e142      	b.n	8003cec <SPI_Init+0x410>

		     if(config->prescaler == SPI_Configurations.Prescaler.CLK_div_2) config -> Port -> CR1 &=   ~SPI_CR1_BR;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	8a1b      	ldrh	r3, [r3, #16]
 8003a6a:	2228      	movs	r2, #40	@ 0x28
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d108      	bne.n	8003a82 <SPI_Init+0x1a6>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f022 0238 	bic.w	r2, r2, #56	@ 0x38
 8003a7e:	601a      	str	r2, [r3, #0]
 8003a80:	e06b      	b.n	8003b5a <SPI_Init+0x27e>
		else if(config->prescaler == SPI_Configurations.Prescaler.CLK_div_4) config -> Port -> CR1 |=    SPI_CR1_BR_0;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	8a1b      	ldrh	r3, [r3, #16]
 8003a86:	2229      	movs	r2, #41	@ 0x29
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d108      	bne.n	8003a9e <SPI_Init+0x1c2>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f042 0208 	orr.w	r2, r2, #8
 8003a9a:	601a      	str	r2, [r3, #0]
 8003a9c:	e05d      	b.n	8003b5a <SPI_Init+0x27e>
		else if(config->prescaler == SPI_Configurations.Prescaler.CLK_div_8) config -> Port -> CR1 |=    SPI_CR1_BR_1;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	8a1b      	ldrh	r3, [r3, #16]
 8003aa2:	222a      	movs	r2, #42	@ 0x2a
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d108      	bne.n	8003aba <SPI_Init+0x1de>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f042 0210 	orr.w	r2, r2, #16
 8003ab6:	601a      	str	r2, [r3, #0]
 8003ab8:	e04f      	b.n	8003b5a <SPI_Init+0x27e>
		else if(config->prescaler == SPI_Configurations.Prescaler.CLK_div_16) config -> Port -> CR1 |=   SPI_CR1_BR_0 | SPI_CR1_BR_1;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	8a1b      	ldrh	r3, [r3, #16]
 8003abe:	222b      	movs	r2, #43	@ 0x2b
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d108      	bne.n	8003ad6 <SPI_Init+0x1fa>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f042 0218 	orr.w	r2, r2, #24
 8003ad2:	601a      	str	r2, [r3, #0]
 8003ad4:	e041      	b.n	8003b5a <SPI_Init+0x27e>
		else if(config->prescaler == SPI_Configurations.Prescaler.CLK_div_32) config -> Port -> CR1 |=   SPI_CR1_BR_2;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	8a1b      	ldrh	r3, [r3, #16]
 8003ada:	222c      	movs	r2, #44	@ 0x2c
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d108      	bne.n	8003af2 <SPI_Init+0x216>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f042 0220 	orr.w	r2, r2, #32
 8003aee:	601a      	str	r2, [r3, #0]
 8003af0:	e033      	b.n	8003b5a <SPI_Init+0x27e>
		else if(config->prescaler == SPI_Configurations.Prescaler.CLK_div_64) config -> Port -> CR1 |=   SPI_CR1_BR_2 | SPI_CR1_BR_0;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	8a1b      	ldrh	r3, [r3, #16]
 8003af6:	222d      	movs	r2, #45	@ 0x2d
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d108      	bne.n	8003b0e <SPI_Init+0x232>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f042 0228 	orr.w	r2, r2, #40	@ 0x28
 8003b0a:	601a      	str	r2, [r3, #0]
 8003b0c:	e025      	b.n	8003b5a <SPI_Init+0x27e>
		else if(config->prescaler == SPI_Configurations.Prescaler.CLK_div_128) config -> Port -> CR1 |=  SPI_CR1_BR_2 | SPI_CR1_BR_1;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	8a1b      	ldrh	r3, [r3, #16]
 8003b12:	222e      	movs	r2, #46	@ 0x2e
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d10f      	bne.n	8003b38 <SPI_Init+0x25c>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 8003b26:	601a      	str	r2, [r3, #0]
 8003b28:	e017      	b.n	8003b5a <SPI_Init+0x27e>
 8003b2a:	bf00      	nop
 8003b2c:	40013000 	.word	0x40013000
 8003b30:	40003800 	.word	0x40003800
 8003b34:	40003c00 	.word	0x40003c00
		else if(config->prescaler == SPI_Configurations.Prescaler.CLK_div_256) config -> Port -> CR1 |=  SPI_CR1_BR_2 | SPI_CR1_BR_1 | SPI_CR1_BR_0;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	8a1b      	ldrh	r3, [r3, #16]
 8003b3c:	222f      	movs	r2, #47	@ 0x2f
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d108      	bne.n	8003b54 <SPI_Init+0x278>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f042 0238 	orr.w	r2, r2, #56	@ 0x38
 8003b50:	601a      	str	r2, [r3, #0]
 8003b52:	e002      	b.n	8003b5a <SPI_Init+0x27e>
		else {return -1;}
 8003b54:	f04f 33ff 	mov.w	r3, #4294967295
 8003b58:	e0c8      	b.n	8003cec <SPI_Init+0x410>

		     if(config->type == SPI_Configurations.Type.Master) config -> Port -> CR1 |= SPI_CR1_MSTR;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	8a5b      	ldrh	r3, [r3, #18]
 8003b5e:	2232      	movs	r2, #50	@ 0x32
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d108      	bne.n	8003b76 <SPI_Init+0x29a>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f042 0204 	orr.w	r2, r2, #4
 8003b72:	601a      	str	r2, [r3, #0]
 8003b74:	e010      	b.n	8003b98 <SPI_Init+0x2bc>
		else if(config->type == SPI_Configurations.Type.Slave) config -> Port -> CR1 &= ~SPI_CR1_MSTR;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	8a5b      	ldrh	r3, [r3, #18]
 8003b7a:	2233      	movs	r2, #51	@ 0x33
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d108      	bne.n	8003b92 <SPI_Init+0x2b6>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f022 0204 	bic.w	r2, r2, #4
 8003b8e:	601a      	str	r2, [r3, #0]
 8003b90:	e002      	b.n	8003b98 <SPI_Init+0x2bc>
		else {return -1;}
 8003b92:	f04f 33ff 	mov.w	r3, #4294967295
 8003b96:	e0a9      	b.n	8003cec <SPI_Init+0x410>

		     if(config->interrupt == SPI_Configurations.Interrupts.Disable) config -> Port ->  CR2 &= ~(SPI_CR2_TXEIE | SPI_CR2_RXNEIE | SPI_CR2_ERRIE);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	8b1b      	ldrh	r3, [r3, #24]
 8003b9c:	2246      	movs	r2, #70	@ 0x46
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d108      	bne.n	8003bb4 <SPI_Init+0x2d8>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	685a      	ldr	r2, [r3, #4]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003bb0:	605a      	str	r2, [r3, #4]
 8003bb2:	e02c      	b.n	8003c0e <SPI_Init+0x332>
		else if(config->interrupt == SPI_Configurations.Interrupts.Tx_Buffer_Empty) config -> Port ->  CR2 |= SPI_CR2_TXEIE;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	8b1b      	ldrh	r3, [r3, #24]
 8003bb8:	2249      	movs	r2, #73	@ 0x49
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d108      	bne.n	8003bd0 <SPI_Init+0x2f4>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	685a      	ldr	r2, [r3, #4]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003bcc:	605a      	str	r2, [r3, #4]
 8003bce:	e01e      	b.n	8003c0e <SPI_Init+0x332>
		else if(config->interrupt == SPI_Configurations.Interrupts.RX_Buffer_not_Empty) config -> Port ->  CR2 |= SPI_CR2_RXNEIE ;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	8b1b      	ldrh	r3, [r3, #24]
 8003bd4:	2248      	movs	r2, #72	@ 0x48
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d108      	bne.n	8003bec <SPI_Init+0x310>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	685a      	ldr	r2, [r3, #4]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003be8:	605a      	str	r2, [r3, #4]
 8003bea:	e010      	b.n	8003c0e <SPI_Init+0x332>
		else if(config->interrupt == SPI_Configurations.Interrupts.Error) config -> Port ->  CR2 |=  SPI_CR2_ERRIE;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	8b1b      	ldrh	r3, [r3, #24]
 8003bf0:	2247      	movs	r2, #71	@ 0x47
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d108      	bne.n	8003c08 <SPI_Init+0x32c>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	685a      	ldr	r2, [r3, #4]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f042 0220 	orr.w	r2, r2, #32
 8003c04:	605a      	str	r2, [r3, #4]
 8003c06:	e002      	b.n	8003c0e <SPI_Init+0x332>
		else { return -1;}
 8003c08:	f04f 33ff 	mov.w	r3, #4294967295
 8003c0c:	e06e      	b.n	8003cec <SPI_Init+0x410>




		if((config -> dma & SPI_Configurations.DMA_Type.RX_DMA_Disable) == SPI_Configurations.DMA_Type.RX_DMA_Disable){
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	8b5b      	ldrh	r3, [r3, #26]
 8003c12:	461a      	mov	r2, r3
 8003c14:	2310      	movs	r3, #16
 8003c16:	4013      	ands	r3, r2
 8003c18:	2210      	movs	r2, #16
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d108      	bne.n	8003c30 <SPI_Init+0x354>
		    config -> Port -> CR2 &= ~SPI_CR2_RXDMAEN;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	685a      	ldr	r2, [r3, #4]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f022 0201 	bic.w	r2, r2, #1
 8003c2c:	605a      	str	r2, [r3, #4]
 8003c2e:	e022      	b.n	8003c76 <SPI_Init+0x39a>
		 }
		else if((config -> dma & SPI_Configurations.DMA_Type.RX_DMA_Enable) == SPI_Configurations.DMA_Type.RX_DMA_Enable)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	8b5b      	ldrh	r3, [r3, #26]
 8003c34:	461a      	mov	r2, r3
 8003c36:	2308      	movs	r3, #8
 8003c38:	4013      	ands	r3, r2
 8003c3a:	2208      	movs	r2, #8
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d11a      	bne.n	8003c76 <SPI_Init+0x39a>
		{
//			config -> Port -> CR2 |=  SPI_CR2_RXDMAEN;
//			config -> Port -> CR2 |=  SPI_CR2_TXDMAEN;
			if(config -> Port == SPI1){
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a2b      	ldr	r2, [pc, #172]	@ (8003cf4 <SPI_Init+0x418>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d102      	bne.n	8003c50 <SPI_Init+0x374>
				xDMA1_RX_Init();
 8003c4a:	f7ff f931 	bl	8002eb0 <xDMA1_RX_Init>
 8003c4e:	e012      	b.n	8003c76 <SPI_Init+0x39a>
			}
			else if(config -> Port == SPI2){
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a28      	ldr	r2, [pc, #160]	@ (8003cf8 <SPI_Init+0x41c>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d102      	bne.n	8003c60 <SPI_Init+0x384>
				xDMA2_RX_Init();
 8003c5a:	f7ff f95b 	bl	8002f14 <xDMA2_RX_Init>
 8003c5e:	e00a      	b.n	8003c76 <SPI_Init+0x39a>
			}
			else if(config -> Port == SPI3){
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a25      	ldr	r2, [pc, #148]	@ (8003cfc <SPI_Init+0x420>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d102      	bne.n	8003c70 <SPI_Init+0x394>
				xDMA3_RX_Init();
 8003c6a:	f7ff f97f 	bl	8002f6c <xDMA3_RX_Init>
 8003c6e:	e002      	b.n	8003c76 <SPI_Init+0x39a>
			}
			else {return -1;}
 8003c70:	f04f 33ff 	mov.w	r3, #4294967295
 8003c74:	e03a      	b.n	8003cec <SPI_Init+0x410>
		}

		if((config -> dma & SPI_Configurations.DMA_Type.TX_DMA_Disable) == SPI_Configurations.DMA_Type.TX_DMA_Disable){
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	8b5b      	ldrh	r3, [r3, #26]
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	2304      	movs	r3, #4
 8003c7e:	4013      	ands	r3, r2
 8003c80:	2204      	movs	r2, #4
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d108      	bne.n	8003c98 <SPI_Init+0x3bc>
			config -> Port -> CR2 &= ~SPI_CR2_TXDMAEN;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	685a      	ldr	r2, [r3, #4]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f022 0202 	bic.w	r2, r2, #2
 8003c94:	605a      	str	r2, [r3, #4]
		if((config -> dma & SPI_Configurations.DMA_Type.TX_DMA_Disable) == SPI_Configurations.DMA_Type.TX_DMA_Disable){
 8003c96:	e028      	b.n	8003cea <SPI_Init+0x40e>
		}
		else if((config -> dma & SPI_Configurations.DMA_Type.TX_DMA_Enable) == SPI_Configurations.DMA_Type.TX_DMA_Enable){
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	8b5b      	ldrh	r3, [r3, #26]
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	2302      	movs	r3, #2
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	2202      	movs	r2, #2
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d11a      	bne.n	8003cde <SPI_Init+0x402>
//			config -> Port -> CR2 |=  SPI_CR2_TXDMAEN;
			if(config -> Port == SPI1){
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a11      	ldr	r2, [pc, #68]	@ (8003cf4 <SPI_Init+0x418>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d102      	bne.n	8003cb8 <SPI_Init+0x3dc>
				xDMA1_TX_Init();
 8003cb2:	f7ff f873 	bl	8002d9c <xDMA1_TX_Init>
		if((config -> dma & SPI_Configurations.DMA_Type.TX_DMA_Disable) == SPI_Configurations.DMA_Type.TX_DMA_Disable){
 8003cb6:	e018      	b.n	8003cea <SPI_Init+0x40e>
			}
			else if(config -> Port == SPI2){
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a0e      	ldr	r2, [pc, #56]	@ (8003cf8 <SPI_Init+0x41c>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d102      	bne.n	8003cc8 <SPI_Init+0x3ec>
				xDMA2_TX_Init();
 8003cc2:	f7ff f89d 	bl	8002e00 <xDMA2_TX_Init>
		if((config -> dma & SPI_Configurations.DMA_Type.TX_DMA_Disable) == SPI_Configurations.DMA_Type.TX_DMA_Disable){
 8003cc6:	e010      	b.n	8003cea <SPI_Init+0x40e>
			}
			else if(config -> Port == SPI3){
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a0b      	ldr	r2, [pc, #44]	@ (8003cfc <SPI_Init+0x420>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d102      	bne.n	8003cd8 <SPI_Init+0x3fc>
				xDMA3_TX_Init();
 8003cd2:	f7ff f8c1 	bl	8002e58 <xDMA3_TX_Init>
		if((config -> dma & SPI_Configurations.DMA_Type.TX_DMA_Disable) == SPI_Configurations.DMA_Type.TX_DMA_Disable){
 8003cd6:	e008      	b.n	8003cea <SPI_Init+0x40e>
			}
			else {return -1;}
 8003cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8003cdc:	e006      	b.n	8003cec <SPI_Init+0x410>
		}
		else {return -1;}
 8003cde:	f04f 33ff 	mov.w	r3, #4294967295
 8003ce2:	e003      	b.n	8003cec <SPI_Init+0x410>


	}
	else
	{
		return -1;
 8003ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ce8:	e000      	b.n	8003cec <SPI_Init+0x410>
	}

	return 1;
 8003cea:	2301      	movs	r3, #1
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3708      	adds	r7, #8
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	40013000 	.word	0x40013000
 8003cf8:	40003800 	.word	0x40003800
 8003cfc:	40003c00 	.word	0x40003c00

08003d00 <SPI_Enable>:
 * This function enables the SPI peripheral, allowing data transmission and reception.
 *
 * @param[in] config Pointer to the SPI configuration structure.
 */
void SPI_Enable(SPI_Config *config)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
	config->Port -> CR1 |= SPI_CR1_SPE;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d16:	601a      	str	r2, [r3, #0]
}
 8003d18:	bf00      	nop
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <SPI_TRX_Byte>:
 * @param[in] config Pointer to the SPI configuration structure.
 * @param[in] tx_data Data to transmit.
 * @return uint16_t Received data.
 */
uint16_t SPI_TRX_Byte(SPI_Config *config,uint16_t tx_data)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	807b      	strh	r3, [r7, #2]
	volatile uint16_t temp = 0;
 8003d30:	2300      	movs	r3, #0
 8003d32:	81fb      	strh	r3, [r7, #14]
	while (!(config->Port->SR & SPI_SR_TXE));
 8003d34:	bf00      	nop
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	f003 0302 	and.w	r3, r3, #2
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d0f8      	beq.n	8003d36 <SPI_TRX_Byte+0x12>
	config->Port -> DR = tx_data;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	887a      	ldrh	r2, [r7, #2]
 8003d4a:	60da      	str	r2, [r3, #12]
	while (!(config->Port->SR & SPI_SR_RXNE));
 8003d4c:	bf00      	nop
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f003 0301 	and.w	r3, r3, #1
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d0f8      	beq.n	8003d4e <SPI_TRX_Byte+0x2a>
	temp = config->Port -> DR;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	81fb      	strh	r3, [r7, #14]
	while (!(config->Port->SR & SPI_SR_TXE));
 8003d66:	bf00      	nop
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d0f8      	beq.n	8003d68 <SPI_TRX_Byte+0x44>
	while (config->Port->SR & SPI_SR_BSY);
 8003d76:	bf00      	nop
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1f8      	bne.n	8003d78 <SPI_TRX_Byte+0x54>
	return temp;
 8003d86:	89fb      	ldrh	r3, [r7, #14]
 8003d88:	b29b      	uxth	r3, r3
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3714      	adds	r7, #20
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
	...

08003d98 <TIM1_BRK_TIM9_IRQHandler>:
Timer_Config *__timer_13_config__;
Timer_Config *__timer_14_config__;



void TIM1_BRK_TIM9_IRQHandler(void) {
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	af00      	add	r7, sp, #0
    if (__timer_1_config__ ->ISR_Routines.Break_ISR) {
 8003d9c:	4b2b      	ldr	r3, [pc, #172]	@ (8003e4c <TIM1_BRK_TIM9_IRQHandler+0xb4>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d00a      	beq.n	8003dbe <TIM1_BRK_TIM9_IRQHandler+0x26>
    	__timer_1_config__ ->ISR_Routines.Break_ISR();
 8003da8:	4b28      	ldr	r3, [pc, #160]	@ (8003e4c <TIM1_BRK_TIM9_IRQHandler+0xb4>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003db0:	4798      	blx	r3
    	TIM1->SR &= ~TIM_SR_BIF;  // Clear the Break interrupt flag
 8003db2:	4b27      	ldr	r3, [pc, #156]	@ (8003e50 <TIM1_BRK_TIM9_IRQHandler+0xb8>)
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	4a26      	ldr	r2, [pc, #152]	@ (8003e50 <TIM1_BRK_TIM9_IRQHandler+0xb8>)
 8003db8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003dbc:	6113      	str	r3, [r2, #16]
    }

    if (__timer_9_config__ ->ISR_Routines.Capture_Compare_1_ISR){
 8003dbe:	4b25      	ldr	r3, [pc, #148]	@ (8003e54 <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00a      	beq.n	8003de0 <TIM1_BRK_TIM9_IRQHandler+0x48>
    	__timer_9_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 8003dca:	4b22      	ldr	r3, [pc, #136]	@ (8003e54 <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dd2:	4798      	blx	r3
    	TIM9->SR &= ~TIM_SR_CC1IF;  // Clear the Break interrupt flag
 8003dd4:	4b20      	ldr	r3, [pc, #128]	@ (8003e58 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	4a1f      	ldr	r2, [pc, #124]	@ (8003e58 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8003dda:	f023 0302 	bic.w	r3, r3, #2
 8003dde:	6113      	str	r3, [r2, #16]
    }

    if (__timer_9_config__ ->ISR_Routines.Capture_Compare_2_ISR){
 8003de0:	4b1c      	ldr	r3, [pc, #112]	@ (8003e54 <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d00a      	beq.n	8003e02 <TIM1_BRK_TIM9_IRQHandler+0x6a>
    	__timer_9_config__ ->ISR_Routines.Capture_Compare_2_ISR();
 8003dec:	4b19      	ldr	r3, [pc, #100]	@ (8003e54 <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003df4:	4798      	blx	r3
    	TIM9->SR &= ~TIM_SR_CC2IF;  // Clear the Break interrupt flag
 8003df6:	4b18      	ldr	r3, [pc, #96]	@ (8003e58 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	4a17      	ldr	r2, [pc, #92]	@ (8003e58 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8003dfc:	f023 0304 	bic.w	r3, r3, #4
 8003e00:	6113      	str	r3, [r2, #16]
    }

    if (__timer_9_config__ ->ISR_Routines.Update_ISR){
 8003e02:	4b14      	ldr	r3, [pc, #80]	@ (8003e54 <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d00a      	beq.n	8003e24 <TIM1_BRK_TIM9_IRQHandler+0x8c>
    	__timer_9_config__ ->ISR_Routines.Update_ISR();
 8003e0e:	4b11      	ldr	r3, [pc, #68]	@ (8003e54 <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e16:	4798      	blx	r3
    	TIM9->SR &= ~TIM_SR_UIF;  // Clear the Break interrupt flag
 8003e18:	4b0f      	ldr	r3, [pc, #60]	@ (8003e58 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	4a0e      	ldr	r2, [pc, #56]	@ (8003e58 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8003e1e:	f023 0301 	bic.w	r3, r3, #1
 8003e22:	6113      	str	r3, [r2, #16]
    }

    if (__timer_9_config__ ->ISR_Routines.Trigger_ISR){
 8003e24:	4b0b      	ldr	r3, [pc, #44]	@ (8003e54 <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d00a      	beq.n	8003e46 <TIM1_BRK_TIM9_IRQHandler+0xae>
    	__timer_9_config__ ->ISR_Routines.Trigger_ISR();
 8003e30:	4b08      	ldr	r3, [pc, #32]	@ (8003e54 <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003e38:	4798      	blx	r3
    	TIM9->SR &= ~TIM_SR_TIF;  // Clear the Break interrupt flag
 8003e3a:	4b07      	ldr	r3, [pc, #28]	@ (8003e58 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8003e3c:	691b      	ldr	r3, [r3, #16]
 8003e3e:	4a06      	ldr	r2, [pc, #24]	@ (8003e58 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8003e40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e44:	6113      	str	r3, [r2, #16]
    }

}
 8003e46:	bf00      	nop
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	200002bc 	.word	0x200002bc
 8003e50:	40010000 	.word	0x40010000
 8003e54:	200002dc 	.word	0x200002dc
 8003e58:	40014000 	.word	0x40014000

08003e5c <TIM1_UP_TIM10_IRQHandler>:

void TIM1_UP_TIM10_IRQHandler(void) {
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	af00      	add	r7, sp, #0
    if (__timer_1_config__ ->ISR_Routines.Update_ISR) {
 8003e60:	4b1a      	ldr	r3, [pc, #104]	@ (8003ecc <TIM1_UP_TIM10_IRQHandler+0x70>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d00a      	beq.n	8003e82 <TIM1_UP_TIM10_IRQHandler+0x26>
    	__timer_1_config__ ->ISR_Routines.Update_ISR();
 8003e6c:	4b17      	ldr	r3, [pc, #92]	@ (8003ecc <TIM1_UP_TIM10_IRQHandler+0x70>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e74:	4798      	blx	r3
    	TIM1->SR &= ~TIM_SR_UIF;  // Clear the Update interrupt flag
 8003e76:	4b16      	ldr	r3, [pc, #88]	@ (8003ed0 <TIM1_UP_TIM10_IRQHandler+0x74>)
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	4a15      	ldr	r2, [pc, #84]	@ (8003ed0 <TIM1_UP_TIM10_IRQHandler+0x74>)
 8003e7c:	f023 0301 	bic.w	r3, r3, #1
 8003e80:	6113      	str	r3, [r2, #16]
    }

    if (__timer_10_config__ ->ISR_Routines.Update_ISR) {
 8003e82:	4b14      	ldr	r3, [pc, #80]	@ (8003ed4 <TIM1_UP_TIM10_IRQHandler+0x78>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00a      	beq.n	8003ea4 <TIM1_UP_TIM10_IRQHandler+0x48>
    	__timer_10_config__ ->ISR_Routines.Update_ISR();
 8003e8e:	4b11      	ldr	r3, [pc, #68]	@ (8003ed4 <TIM1_UP_TIM10_IRQHandler+0x78>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e96:	4798      	blx	r3
    	TIM10->SR &= ~TIM_SR_UIF;  // Clear the Update interrupt flag
 8003e98:	4b0f      	ldr	r3, [pc, #60]	@ (8003ed8 <TIM1_UP_TIM10_IRQHandler+0x7c>)
 8003e9a:	691b      	ldr	r3, [r3, #16]
 8003e9c:	4a0e      	ldr	r2, [pc, #56]	@ (8003ed8 <TIM1_UP_TIM10_IRQHandler+0x7c>)
 8003e9e:	f023 0301 	bic.w	r3, r3, #1
 8003ea2:	6113      	str	r3, [r2, #16]
    }

    if (__timer_10_config__ ->ISR_Routines.Capture_Compare_1_ISR) {
 8003ea4:	4b0b      	ldr	r3, [pc, #44]	@ (8003ed4 <TIM1_UP_TIM10_IRQHandler+0x78>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00a      	beq.n	8003ec6 <TIM1_UP_TIM10_IRQHandler+0x6a>
    	__timer_10_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 8003eb0:	4b08      	ldr	r3, [pc, #32]	@ (8003ed4 <TIM1_UP_TIM10_IRQHandler+0x78>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eb8:	4798      	blx	r3
    	TIM10->SR &= ~TIM_SR_CC1IF;  // Clear the Update interrupt flag
 8003eba:	4b07      	ldr	r3, [pc, #28]	@ (8003ed8 <TIM1_UP_TIM10_IRQHandler+0x7c>)
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	4a06      	ldr	r2, [pc, #24]	@ (8003ed8 <TIM1_UP_TIM10_IRQHandler+0x7c>)
 8003ec0:	f023 0302 	bic.w	r3, r3, #2
 8003ec4:	6113      	str	r3, [r2, #16]
    }

}
 8003ec6:	bf00      	nop
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	200002bc 	.word	0x200002bc
 8003ed0:	40010000 	.word	0x40010000
 8003ed4:	200002e0 	.word	0x200002e0
 8003ed8:	40014400 	.word	0x40014400

08003edc <TIM1_TRG_COM_TIM11_IRQHandler>:

void TIM1_TRG_COM_TIM11_IRQHandler(void) {
 8003edc:	b580      	push	{r7, lr}
 8003ede:	af00      	add	r7, sp, #0
    if (__timer_1_config__ ->ISR_Routines.Trigger_ISR) {
 8003ee0:	4b22      	ldr	r3, [pc, #136]	@ (8003f6c <TIM1_TRG_COM_TIM11_IRQHandler+0x90>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d00a      	beq.n	8003f02 <TIM1_TRG_COM_TIM11_IRQHandler+0x26>
    	__timer_1_config__ ->ISR_Routines.Trigger_ISR();
 8003eec:	4b1f      	ldr	r3, [pc, #124]	@ (8003f6c <TIM1_TRG_COM_TIM11_IRQHandler+0x90>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003ef4:	4798      	blx	r3

    	TIM1->SR &= ~TIM_SR_TIF;  // Clear the Trigger interrupt flag
 8003ef6:	4b1e      	ldr	r3, [pc, #120]	@ (8003f70 <TIM1_TRG_COM_TIM11_IRQHandler+0x94>)
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	4a1d      	ldr	r2, [pc, #116]	@ (8003f70 <TIM1_TRG_COM_TIM11_IRQHandler+0x94>)
 8003efc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f00:	6113      	str	r3, [r2, #16]
    }

    if (__timer_1_config__ ->ISR_Routines.Commutation_ISR) {
 8003f02:	4b1a      	ldr	r3, [pc, #104]	@ (8003f6c <TIM1_TRG_COM_TIM11_IRQHandler+0x90>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00a      	beq.n	8003f24 <TIM1_TRG_COM_TIM11_IRQHandler+0x48>
    	__timer_1_config__ ->ISR_Routines.Commutation_ISR();
 8003f0e:	4b17      	ldr	r3, [pc, #92]	@ (8003f6c <TIM1_TRG_COM_TIM11_IRQHandler+0x90>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003f16:	4798      	blx	r3

    	TIM1->SR &= ~TIM_SR_COMIF;  // Clear the Trigger interrupt flag
 8003f18:	4b15      	ldr	r3, [pc, #84]	@ (8003f70 <TIM1_TRG_COM_TIM11_IRQHandler+0x94>)
 8003f1a:	691b      	ldr	r3, [r3, #16]
 8003f1c:	4a14      	ldr	r2, [pc, #80]	@ (8003f70 <TIM1_TRG_COM_TIM11_IRQHandler+0x94>)
 8003f1e:	f023 0320 	bic.w	r3, r3, #32
 8003f22:	6113      	str	r3, [r2, #16]
    }

    if (__timer_11_config__ ->ISR_Routines.Update_ISR) {
 8003f24:	4b13      	ldr	r3, [pc, #76]	@ (8003f74 <TIM1_TRG_COM_TIM11_IRQHandler+0x98>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d00a      	beq.n	8003f46 <TIM1_TRG_COM_TIM11_IRQHandler+0x6a>
    	__timer_11_config__ ->ISR_Routines.Update_ISR();
 8003f30:	4b10      	ldr	r3, [pc, #64]	@ (8003f74 <TIM1_TRG_COM_TIM11_IRQHandler+0x98>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f38:	4798      	blx	r3
    	TIM11->SR &= ~TIM_SR_UIF;  // Clear the Update interrupt flag
 8003f3a:	4b0f      	ldr	r3, [pc, #60]	@ (8003f78 <TIM1_TRG_COM_TIM11_IRQHandler+0x9c>)
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	4a0e      	ldr	r2, [pc, #56]	@ (8003f78 <TIM1_TRG_COM_TIM11_IRQHandler+0x9c>)
 8003f40:	f023 0301 	bic.w	r3, r3, #1
 8003f44:	6113      	str	r3, [r2, #16]
    }

    if (__timer_11_config__ ->ISR_Routines.Capture_Compare_1_ISR) {
 8003f46:	4b0b      	ldr	r3, [pc, #44]	@ (8003f74 <TIM1_TRG_COM_TIM11_IRQHandler+0x98>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00a      	beq.n	8003f68 <TIM1_TRG_COM_TIM11_IRQHandler+0x8c>
    	__timer_11_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 8003f52:	4b08      	ldr	r3, [pc, #32]	@ (8003f74 <TIM1_TRG_COM_TIM11_IRQHandler+0x98>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f5a:	4798      	blx	r3
    	TIM11->SR &= ~TIM_SR_CC1IF;  // Clear the Update interrupt flag
 8003f5c:	4b06      	ldr	r3, [pc, #24]	@ (8003f78 <TIM1_TRG_COM_TIM11_IRQHandler+0x9c>)
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	4a05      	ldr	r2, [pc, #20]	@ (8003f78 <TIM1_TRG_COM_TIM11_IRQHandler+0x9c>)
 8003f62:	f023 0302 	bic.w	r3, r3, #2
 8003f66:	6113      	str	r3, [r2, #16]
    }

}
 8003f68:	bf00      	nop
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	200002bc 	.word	0x200002bc
 8003f70:	40010000 	.word	0x40010000
 8003f74:	200002e4 	.word	0x200002e4
 8003f78:	40014800 	.word	0x40014800

08003f7c <TIM1_CC_IRQHandler>:

void TIM1_CC_IRQHandler(void) {
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	af00      	add	r7, sp, #0
    if (__timer_1_config__ ->ISR_Routines.Capture_Compare_1_ISR) {
 8003f80:	4b22      	ldr	r3, [pc, #136]	@ (800400c <TIM1_CC_IRQHandler+0x90>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00a      	beq.n	8003fa2 <TIM1_CC_IRQHandler+0x26>
    	__timer_1_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 8003f8c:	4b1f      	ldr	r3, [pc, #124]	@ (800400c <TIM1_CC_IRQHandler+0x90>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f94:	4798      	blx	r3

    	TIM1->SR &= ~TIM_SR_CC1IF;  // Clear the Capture Compare interrupt flag
 8003f96:	4b1e      	ldr	r3, [pc, #120]	@ (8004010 <TIM1_CC_IRQHandler+0x94>)
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	4a1d      	ldr	r2, [pc, #116]	@ (8004010 <TIM1_CC_IRQHandler+0x94>)
 8003f9c:	f023 0302 	bic.w	r3, r3, #2
 8003fa0:	6113      	str	r3, [r2, #16]
    }

    if (__timer_1_config__ ->ISR_Routines.Capture_Compare_2_ISR) {
 8003fa2:	4b1a      	ldr	r3, [pc, #104]	@ (800400c <TIM1_CC_IRQHandler+0x90>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00a      	beq.n	8003fc4 <TIM1_CC_IRQHandler+0x48>
    	__timer_1_config__ ->ISR_Routines.Capture_Compare_2_ISR();
 8003fae:	4b17      	ldr	r3, [pc, #92]	@ (800400c <TIM1_CC_IRQHandler+0x90>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fb6:	4798      	blx	r3

    	TIM1->SR &= ~TIM_SR_CC2IF;  // Clear the Capture Compare interrupt flag
 8003fb8:	4b15      	ldr	r3, [pc, #84]	@ (8004010 <TIM1_CC_IRQHandler+0x94>)
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	4a14      	ldr	r2, [pc, #80]	@ (8004010 <TIM1_CC_IRQHandler+0x94>)
 8003fbe:	f023 0304 	bic.w	r3, r3, #4
 8003fc2:	6113      	str	r3, [r2, #16]
    }

    if (__timer_1_config__ ->ISR_Routines.Capture_Compare_3_ISR) {
 8003fc4:	4b11      	ldr	r3, [pc, #68]	@ (800400c <TIM1_CC_IRQHandler+0x90>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d00a      	beq.n	8003fe6 <TIM1_CC_IRQHandler+0x6a>
    	__timer_1_config__ ->ISR_Routines.Capture_Compare_3_ISR();
 8003fd0:	4b0e      	ldr	r3, [pc, #56]	@ (800400c <TIM1_CC_IRQHandler+0x90>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003fd8:	4798      	blx	r3

    	TIM1->SR &= ~TIM_SR_CC3IF;  // Clear the Capture Compare interrupt flag
 8003fda:	4b0d      	ldr	r3, [pc, #52]	@ (8004010 <TIM1_CC_IRQHandler+0x94>)
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	4a0c      	ldr	r2, [pc, #48]	@ (8004010 <TIM1_CC_IRQHandler+0x94>)
 8003fe0:	f023 0308 	bic.w	r3, r3, #8
 8003fe4:	6113      	str	r3, [r2, #16]
    }

    if (__timer_1_config__ ->ISR_Routines.Capture_Compare_4_ISR) {
 8003fe6:	4b09      	ldr	r3, [pc, #36]	@ (800400c <TIM1_CC_IRQHandler+0x90>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00a      	beq.n	8004008 <TIM1_CC_IRQHandler+0x8c>
    	__timer_1_config__ ->ISR_Routines.Capture_Compare_4_ISR();
 8003ff2:	4b06      	ldr	r3, [pc, #24]	@ (800400c <TIM1_CC_IRQHandler+0x90>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003ffa:	4798      	blx	r3

    	TIM1->SR &= ~TIM_SR_CC4IF;  // Clear the Capture Compare interrupt flag
 8003ffc:	4b04      	ldr	r3, [pc, #16]	@ (8004010 <TIM1_CC_IRQHandler+0x94>)
 8003ffe:	691b      	ldr	r3, [r3, #16]
 8004000:	4a03      	ldr	r2, [pc, #12]	@ (8004010 <TIM1_CC_IRQHandler+0x94>)
 8004002:	f023 0310 	bic.w	r3, r3, #16
 8004006:	6113      	str	r3, [r2, #16]
    }
}
 8004008:	bf00      	nop
 800400a:	bd80      	pop	{r7, pc}
 800400c:	200002bc 	.word	0x200002bc
 8004010:	40010000 	.word	0x40010000

08004014 <TIM2_IRQHandler>:


void TIM2_IRQHandler(void)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	af00      	add	r7, sp, #0
    if (__timer_2_config__ ->ISR_Routines.Capture_Compare_1_ISR) {
 8004018:	4b39      	ldr	r3, [pc, #228]	@ (8004100 <TIM2_IRQHandler+0xec>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004020:	2b00      	cmp	r3, #0
 8004022:	d00c      	beq.n	800403e <TIM2_IRQHandler+0x2a>
    	__timer_2_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 8004024:	4b36      	ldr	r3, [pc, #216]	@ (8004100 <TIM2_IRQHandler+0xec>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800402c:	4798      	blx	r3

    	TIM2->SR &= ~TIM_SR_CC1IF;  // Clear the Capture Compare interrupt flag
 800402e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004032:	691b      	ldr	r3, [r3, #16]
 8004034:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004038:	f023 0302 	bic.w	r3, r3, #2
 800403c:	6113      	str	r3, [r2, #16]
    }
    if (__timer_2_config__ ->ISR_Routines.Capture_Compare_2_ISR) {
 800403e:	4b30      	ldr	r3, [pc, #192]	@ (8004100 <TIM2_IRQHandler+0xec>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00c      	beq.n	8004064 <TIM2_IRQHandler+0x50>
    	__timer_2_config__ ->ISR_Routines.Capture_Compare_2_ISR();
 800404a:	4b2d      	ldr	r3, [pc, #180]	@ (8004100 <TIM2_IRQHandler+0xec>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004052:	4798      	blx	r3

    	TIM2->SR &= ~TIM_SR_CC2IF;  // Clear the Capture Compare interrupt flag
 8004054:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800405e:	f023 0304 	bic.w	r3, r3, #4
 8004062:	6113      	str	r3, [r2, #16]
    }
    if (__timer_2_config__ ->ISR_Routines.Capture_Compare_3_ISR) {
 8004064:	4b26      	ldr	r3, [pc, #152]	@ (8004100 <TIM2_IRQHandler+0xec>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800406c:	2b00      	cmp	r3, #0
 800406e:	d00c      	beq.n	800408a <TIM2_IRQHandler+0x76>
    	__timer_2_config__ ->ISR_Routines.Capture_Compare_3_ISR();
 8004070:	4b23      	ldr	r3, [pc, #140]	@ (8004100 <TIM2_IRQHandler+0xec>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004078:	4798      	blx	r3

    	TIM2->SR &= ~TIM_SR_CC3IF;  // Clear the Capture Compare interrupt flag
 800407a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800407e:	691b      	ldr	r3, [r3, #16]
 8004080:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004084:	f023 0308 	bic.w	r3, r3, #8
 8004088:	6113      	str	r3, [r2, #16]
    }
    if (__timer_2_config__ ->ISR_Routines.Capture_Compare_4_ISR) {
 800408a:	4b1d      	ldr	r3, [pc, #116]	@ (8004100 <TIM2_IRQHandler+0xec>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00c      	beq.n	80040b0 <TIM2_IRQHandler+0x9c>
    	__timer_2_config__ ->ISR_Routines.Capture_Compare_4_ISR();
 8004096:	4b1a      	ldr	r3, [pc, #104]	@ (8004100 <TIM2_IRQHandler+0xec>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800409e:	4798      	blx	r3

    	TIM2->SR &= ~TIM_SR_CC4IF;  // Clear the Capture Compare interrupt flag
 80040a0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80040aa:	f023 0310 	bic.w	r3, r3, #16
 80040ae:	6113      	str	r3, [r2, #16]
    }
    if (__timer_2_config__ ->ISR_Routines.Update_ISR) {
 80040b0:	4b13      	ldr	r3, [pc, #76]	@ (8004100 <TIM2_IRQHandler+0xec>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d00c      	beq.n	80040d6 <TIM2_IRQHandler+0xc2>
    	__timer_2_config__ ->ISR_Routines.Update_ISR();
 80040bc:	4b10      	ldr	r3, [pc, #64]	@ (8004100 <TIM2_IRQHandler+0xec>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80040c4:	4798      	blx	r3

    	TIM2->SR &= ~TIM_SR_UIF;  // Clear the Capture Compare interrupt flag
 80040c6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80040ca:	691b      	ldr	r3, [r3, #16]
 80040cc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80040d0:	f023 0301 	bic.w	r3, r3, #1
 80040d4:	6113      	str	r3, [r2, #16]
    }
    if (__timer_2_config__ ->ISR_Routines.Trigger_ISR) {
 80040d6:	4b0a      	ldr	r3, [pc, #40]	@ (8004100 <TIM2_IRQHandler+0xec>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00c      	beq.n	80040fc <TIM2_IRQHandler+0xe8>
    	__timer_2_config__ ->ISR_Routines.Trigger_ISR();
 80040e2:	4b07      	ldr	r3, [pc, #28]	@ (8004100 <TIM2_IRQHandler+0xec>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80040ea:	4798      	blx	r3

    	TIM2->SR &= ~TIM_SR_TIF;  // Clear the Capture Compare interrupt flag
 80040ec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80040f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040fa:	6113      	str	r3, [r2, #16]
    }
}
 80040fc:	bf00      	nop
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	200002c0 	.word	0x200002c0

08004104 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	af00      	add	r7, sp, #0
    if (__timer_3_config__ ->ISR_Routines.Capture_Compare_1_ISR) {
 8004108:	4b33      	ldr	r3, [pc, #204]	@ (80041d8 <TIM3_IRQHandler+0xd4>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004110:	2b00      	cmp	r3, #0
 8004112:	d00a      	beq.n	800412a <TIM3_IRQHandler+0x26>
    	__timer_3_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 8004114:	4b30      	ldr	r3, [pc, #192]	@ (80041d8 <TIM3_IRQHandler+0xd4>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800411c:	4798      	blx	r3

    	TIM3->SR &= ~TIM_SR_CC1IF;  // Clear the Capture Compare interrupt flag
 800411e:	4b2f      	ldr	r3, [pc, #188]	@ (80041dc <TIM3_IRQHandler+0xd8>)
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	4a2e      	ldr	r2, [pc, #184]	@ (80041dc <TIM3_IRQHandler+0xd8>)
 8004124:	f023 0302 	bic.w	r3, r3, #2
 8004128:	6113      	str	r3, [r2, #16]
    }
    if (__timer_3_config__ ->ISR_Routines.Capture_Compare_2_ISR) {
 800412a:	4b2b      	ldr	r3, [pc, #172]	@ (80041d8 <TIM3_IRQHandler+0xd4>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00a      	beq.n	800414c <TIM3_IRQHandler+0x48>
    	__timer_3_config__ ->ISR_Routines.Capture_Compare_2_ISR();
 8004136:	4b28      	ldr	r3, [pc, #160]	@ (80041d8 <TIM3_IRQHandler+0xd4>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800413e:	4798      	blx	r3

    	TIM3->SR &= ~TIM_SR_CC2IF;  // Clear the Capture Compare interrupt flag
 8004140:	4b26      	ldr	r3, [pc, #152]	@ (80041dc <TIM3_IRQHandler+0xd8>)
 8004142:	691b      	ldr	r3, [r3, #16]
 8004144:	4a25      	ldr	r2, [pc, #148]	@ (80041dc <TIM3_IRQHandler+0xd8>)
 8004146:	f023 0304 	bic.w	r3, r3, #4
 800414a:	6113      	str	r3, [r2, #16]
    }
    if (__timer_3_config__ ->ISR_Routines.Capture_Compare_3_ISR) {
 800414c:	4b22      	ldr	r3, [pc, #136]	@ (80041d8 <TIM3_IRQHandler+0xd4>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004154:	2b00      	cmp	r3, #0
 8004156:	d00a      	beq.n	800416e <TIM3_IRQHandler+0x6a>
    	__timer_3_config__ ->ISR_Routines.Capture_Compare_3_ISR();
 8004158:	4b1f      	ldr	r3, [pc, #124]	@ (80041d8 <TIM3_IRQHandler+0xd4>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004160:	4798      	blx	r3

    	TIM3->SR &= ~TIM_SR_CC3IF;  // Clear the Capture Compare interrupt flag
 8004162:	4b1e      	ldr	r3, [pc, #120]	@ (80041dc <TIM3_IRQHandler+0xd8>)
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	4a1d      	ldr	r2, [pc, #116]	@ (80041dc <TIM3_IRQHandler+0xd8>)
 8004168:	f023 0308 	bic.w	r3, r3, #8
 800416c:	6113      	str	r3, [r2, #16]
    }
    if (__timer_3_config__ ->ISR_Routines.Capture_Compare_4_ISR) {
 800416e:	4b1a      	ldr	r3, [pc, #104]	@ (80041d8 <TIM3_IRQHandler+0xd4>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00a      	beq.n	8004190 <TIM3_IRQHandler+0x8c>
    	__timer_3_config__ ->ISR_Routines.Capture_Compare_4_ISR();
 800417a:	4b17      	ldr	r3, [pc, #92]	@ (80041d8 <TIM3_IRQHandler+0xd4>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004182:	4798      	blx	r3

    	TIM3->SR &= ~TIM_SR_CC4IF;  // Clear the Capture Compare interrupt flag
 8004184:	4b15      	ldr	r3, [pc, #84]	@ (80041dc <TIM3_IRQHandler+0xd8>)
 8004186:	691b      	ldr	r3, [r3, #16]
 8004188:	4a14      	ldr	r2, [pc, #80]	@ (80041dc <TIM3_IRQHandler+0xd8>)
 800418a:	f023 0310 	bic.w	r3, r3, #16
 800418e:	6113      	str	r3, [r2, #16]
    }
    if (__timer_3_config__ ->ISR_Routines.Update_ISR) {
 8004190:	4b11      	ldr	r3, [pc, #68]	@ (80041d8 <TIM3_IRQHandler+0xd4>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004198:	2b00      	cmp	r3, #0
 800419a:	d00a      	beq.n	80041b2 <TIM3_IRQHandler+0xae>
    	__timer_3_config__ ->ISR_Routines.Update_ISR();
 800419c:	4b0e      	ldr	r3, [pc, #56]	@ (80041d8 <TIM3_IRQHandler+0xd4>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80041a4:	4798      	blx	r3

    	TIM3->SR &= ~TIM_SR_UIF;  // Clear the Capture Compare interrupt flag
 80041a6:	4b0d      	ldr	r3, [pc, #52]	@ (80041dc <TIM3_IRQHandler+0xd8>)
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	4a0c      	ldr	r2, [pc, #48]	@ (80041dc <TIM3_IRQHandler+0xd8>)
 80041ac:	f023 0301 	bic.w	r3, r3, #1
 80041b0:	6113      	str	r3, [r2, #16]
    }
    if (__timer_3_config__ ->ISR_Routines.Trigger_ISR) {
 80041b2:	4b09      	ldr	r3, [pc, #36]	@ (80041d8 <TIM3_IRQHandler+0xd4>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00a      	beq.n	80041d4 <TIM3_IRQHandler+0xd0>
    	__timer_3_config__ ->ISR_Routines.Trigger_ISR();
 80041be:	4b06      	ldr	r3, [pc, #24]	@ (80041d8 <TIM3_IRQHandler+0xd4>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80041c6:	4798      	blx	r3

    	TIM3->SR &= ~TIM_SR_TIF;  // Clear the Capture Compare interrupt flag
 80041c8:	4b04      	ldr	r3, [pc, #16]	@ (80041dc <TIM3_IRQHandler+0xd8>)
 80041ca:	691b      	ldr	r3, [r3, #16]
 80041cc:	4a03      	ldr	r2, [pc, #12]	@ (80041dc <TIM3_IRQHandler+0xd8>)
 80041ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041d2:	6113      	str	r3, [r2, #16]
    }
}
 80041d4:	bf00      	nop
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	200002c4 	.word	0x200002c4
 80041dc:	40000400 	.word	0x40000400

080041e0 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	af00      	add	r7, sp, #0
    if (__timer_4_config__ ->ISR_Routines.Capture_Compare_1_ISR) {
 80041e4:	4b33      	ldr	r3, [pc, #204]	@ (80042b4 <TIM4_IRQHandler+0xd4>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d00a      	beq.n	8004206 <TIM4_IRQHandler+0x26>
    	__timer_4_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 80041f0:	4b30      	ldr	r3, [pc, #192]	@ (80042b4 <TIM4_IRQHandler+0xd4>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041f8:	4798      	blx	r3

    	TIM4->SR &= ~TIM_SR_CC1IF;  // Clear the Capture Compare interrupt flag
 80041fa:	4b2f      	ldr	r3, [pc, #188]	@ (80042b8 <TIM4_IRQHandler+0xd8>)
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	4a2e      	ldr	r2, [pc, #184]	@ (80042b8 <TIM4_IRQHandler+0xd8>)
 8004200:	f023 0302 	bic.w	r3, r3, #2
 8004204:	6113      	str	r3, [r2, #16]
    }
    if (__timer_4_config__ ->ISR_Routines.Capture_Compare_2_ISR) {
 8004206:	4b2b      	ldr	r3, [pc, #172]	@ (80042b4 <TIM4_IRQHandler+0xd4>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800420e:	2b00      	cmp	r3, #0
 8004210:	d00a      	beq.n	8004228 <TIM4_IRQHandler+0x48>
    	__timer_4_config__ ->ISR_Routines.Capture_Compare_2_ISR();
 8004212:	4b28      	ldr	r3, [pc, #160]	@ (80042b4 <TIM4_IRQHandler+0xd4>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800421a:	4798      	blx	r3

    	TIM4->SR &= ~TIM_SR_CC2IF;  // Clear the Capture Compare interrupt flag
 800421c:	4b26      	ldr	r3, [pc, #152]	@ (80042b8 <TIM4_IRQHandler+0xd8>)
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	4a25      	ldr	r2, [pc, #148]	@ (80042b8 <TIM4_IRQHandler+0xd8>)
 8004222:	f023 0304 	bic.w	r3, r3, #4
 8004226:	6113      	str	r3, [r2, #16]
    }
    if (__timer_4_config__ ->ISR_Routines.Capture_Compare_3_ISR) {
 8004228:	4b22      	ldr	r3, [pc, #136]	@ (80042b4 <TIM4_IRQHandler+0xd4>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004230:	2b00      	cmp	r3, #0
 8004232:	d00a      	beq.n	800424a <TIM4_IRQHandler+0x6a>
    	__timer_4_config__ ->ISR_Routines.Capture_Compare_3_ISR();
 8004234:	4b1f      	ldr	r3, [pc, #124]	@ (80042b4 <TIM4_IRQHandler+0xd4>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800423c:	4798      	blx	r3

    	TIM4->SR &= ~TIM_SR_CC3IF;  // Clear the Capture Compare interrupt flag
 800423e:	4b1e      	ldr	r3, [pc, #120]	@ (80042b8 <TIM4_IRQHandler+0xd8>)
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	4a1d      	ldr	r2, [pc, #116]	@ (80042b8 <TIM4_IRQHandler+0xd8>)
 8004244:	f023 0308 	bic.w	r3, r3, #8
 8004248:	6113      	str	r3, [r2, #16]
    }
    if (__timer_4_config__ ->ISR_Routines.Capture_Compare_4_ISR) {
 800424a:	4b1a      	ldr	r3, [pc, #104]	@ (80042b4 <TIM4_IRQHandler+0xd4>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00a      	beq.n	800426c <TIM4_IRQHandler+0x8c>
    	__timer_4_config__ ->ISR_Routines.Capture_Compare_4_ISR();
 8004256:	4b17      	ldr	r3, [pc, #92]	@ (80042b4 <TIM4_IRQHandler+0xd4>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800425e:	4798      	blx	r3

    	TIM4->SR &= ~TIM_SR_CC4IF;  // Clear the Capture Compare interrupt flag
 8004260:	4b15      	ldr	r3, [pc, #84]	@ (80042b8 <TIM4_IRQHandler+0xd8>)
 8004262:	691b      	ldr	r3, [r3, #16]
 8004264:	4a14      	ldr	r2, [pc, #80]	@ (80042b8 <TIM4_IRQHandler+0xd8>)
 8004266:	f023 0310 	bic.w	r3, r3, #16
 800426a:	6113      	str	r3, [r2, #16]
    }
    if (__timer_4_config__ ->ISR_Routines.Update_ISR) {
 800426c:	4b11      	ldr	r3, [pc, #68]	@ (80042b4 <TIM4_IRQHandler+0xd4>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004274:	2b00      	cmp	r3, #0
 8004276:	d00a      	beq.n	800428e <TIM4_IRQHandler+0xae>
    	__timer_4_config__ ->ISR_Routines.Update_ISR();
 8004278:	4b0e      	ldr	r3, [pc, #56]	@ (80042b4 <TIM4_IRQHandler+0xd4>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004280:	4798      	blx	r3

    	TIM4->SR &= ~TIM_SR_UIF;  // Clear the Capture Compare interrupt flag
 8004282:	4b0d      	ldr	r3, [pc, #52]	@ (80042b8 <TIM4_IRQHandler+0xd8>)
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	4a0c      	ldr	r2, [pc, #48]	@ (80042b8 <TIM4_IRQHandler+0xd8>)
 8004288:	f023 0301 	bic.w	r3, r3, #1
 800428c:	6113      	str	r3, [r2, #16]
    }
    if (__timer_4_config__ ->ISR_Routines.Trigger_ISR) {
 800428e:	4b09      	ldr	r3, [pc, #36]	@ (80042b4 <TIM4_IRQHandler+0xd4>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004296:	2b00      	cmp	r3, #0
 8004298:	d00a      	beq.n	80042b0 <TIM4_IRQHandler+0xd0>
    	__timer_4_config__ ->ISR_Routines.Trigger_ISR();
 800429a:	4b06      	ldr	r3, [pc, #24]	@ (80042b4 <TIM4_IRQHandler+0xd4>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80042a2:	4798      	blx	r3

    	TIM4->SR &= ~TIM_SR_TIF;  // Clear the Capture Compare interrupt flag
 80042a4:	4b04      	ldr	r3, [pc, #16]	@ (80042b8 <TIM4_IRQHandler+0xd8>)
 80042a6:	691b      	ldr	r3, [r3, #16]
 80042a8:	4a03      	ldr	r2, [pc, #12]	@ (80042b8 <TIM4_IRQHandler+0xd8>)
 80042aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042ae:	6113      	str	r3, [r2, #16]
    }
}
 80042b0:	bf00      	nop
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	200002c8 	.word	0x200002c8
 80042b8:	40000800 	.word	0x40000800

080042bc <TIM5_IRQHandler>:

void TIM5_IRQHandler(void)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	af00      	add	r7, sp, #0
    if (__timer_5_config__ ->ISR_Routines.Capture_Compare_1_ISR) {
 80042c0:	4b33      	ldr	r3, [pc, #204]	@ (8004390 <TIM5_IRQHandler+0xd4>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00a      	beq.n	80042e2 <TIM5_IRQHandler+0x26>
    	__timer_5_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 80042cc:	4b30      	ldr	r3, [pc, #192]	@ (8004390 <TIM5_IRQHandler+0xd4>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042d4:	4798      	blx	r3

    	TIM5->SR &= ~TIM_SR_CC1IF;  // Clear the Capture Compare interrupt flag
 80042d6:	4b2f      	ldr	r3, [pc, #188]	@ (8004394 <TIM5_IRQHandler+0xd8>)
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	4a2e      	ldr	r2, [pc, #184]	@ (8004394 <TIM5_IRQHandler+0xd8>)
 80042dc:	f023 0302 	bic.w	r3, r3, #2
 80042e0:	6113      	str	r3, [r2, #16]
    }
    if (__timer_5_config__ ->ISR_Routines.Capture_Compare_2_ISR) {
 80042e2:	4b2b      	ldr	r3, [pc, #172]	@ (8004390 <TIM5_IRQHandler+0xd4>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00a      	beq.n	8004304 <TIM5_IRQHandler+0x48>
    	__timer_5_config__ ->ISR_Routines.Capture_Compare_2_ISR();
 80042ee:	4b28      	ldr	r3, [pc, #160]	@ (8004390 <TIM5_IRQHandler+0xd4>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042f6:	4798      	blx	r3

    	TIM5->SR &= ~TIM_SR_CC2IF;  // Clear the Capture Compare interrupt flag
 80042f8:	4b26      	ldr	r3, [pc, #152]	@ (8004394 <TIM5_IRQHandler+0xd8>)
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	4a25      	ldr	r2, [pc, #148]	@ (8004394 <TIM5_IRQHandler+0xd8>)
 80042fe:	f023 0304 	bic.w	r3, r3, #4
 8004302:	6113      	str	r3, [r2, #16]
    }
    if (__timer_5_config__ ->ISR_Routines.Capture_Compare_3_ISR) {
 8004304:	4b22      	ldr	r3, [pc, #136]	@ (8004390 <TIM5_IRQHandler+0xd4>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00a      	beq.n	8004326 <TIM5_IRQHandler+0x6a>
    	__timer_5_config__ ->ISR_Routines.Capture_Compare_3_ISR();
 8004310:	4b1f      	ldr	r3, [pc, #124]	@ (8004390 <TIM5_IRQHandler+0xd4>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004318:	4798      	blx	r3

    	TIM5->SR &= ~TIM_SR_CC3IF;  // Clear the Capture Compare interrupt flag
 800431a:	4b1e      	ldr	r3, [pc, #120]	@ (8004394 <TIM5_IRQHandler+0xd8>)
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	4a1d      	ldr	r2, [pc, #116]	@ (8004394 <TIM5_IRQHandler+0xd8>)
 8004320:	f023 0308 	bic.w	r3, r3, #8
 8004324:	6113      	str	r3, [r2, #16]
    }
    if (__timer_5_config__ ->ISR_Routines.Capture_Compare_4_ISR) {
 8004326:	4b1a      	ldr	r3, [pc, #104]	@ (8004390 <TIM5_IRQHandler+0xd4>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00a      	beq.n	8004348 <TIM5_IRQHandler+0x8c>
    	__timer_5_config__ ->ISR_Routines.Capture_Compare_4_ISR();
 8004332:	4b17      	ldr	r3, [pc, #92]	@ (8004390 <TIM5_IRQHandler+0xd4>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800433a:	4798      	blx	r3

    	TIM5->SR &= ~TIM_SR_CC4IF;  // Clear the Capture Compare interrupt flag
 800433c:	4b15      	ldr	r3, [pc, #84]	@ (8004394 <TIM5_IRQHandler+0xd8>)
 800433e:	691b      	ldr	r3, [r3, #16]
 8004340:	4a14      	ldr	r2, [pc, #80]	@ (8004394 <TIM5_IRQHandler+0xd8>)
 8004342:	f023 0310 	bic.w	r3, r3, #16
 8004346:	6113      	str	r3, [r2, #16]
    }
    if (__timer_5_config__ ->ISR_Routines.Update_ISR) {
 8004348:	4b11      	ldr	r3, [pc, #68]	@ (8004390 <TIM5_IRQHandler+0xd4>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00a      	beq.n	800436a <TIM5_IRQHandler+0xae>
    	__timer_5_config__ ->ISR_Routines.Update_ISR();
 8004354:	4b0e      	ldr	r3, [pc, #56]	@ (8004390 <TIM5_IRQHandler+0xd4>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800435c:	4798      	blx	r3

    	TIM5->SR &= ~TIM_SR_UIF;  // Clear the Capture Compare interrupt flag
 800435e:	4b0d      	ldr	r3, [pc, #52]	@ (8004394 <TIM5_IRQHandler+0xd8>)
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	4a0c      	ldr	r2, [pc, #48]	@ (8004394 <TIM5_IRQHandler+0xd8>)
 8004364:	f023 0301 	bic.w	r3, r3, #1
 8004368:	6113      	str	r3, [r2, #16]
    }
    if (__timer_5_config__ ->ISR_Routines.Trigger_ISR) {
 800436a:	4b09      	ldr	r3, [pc, #36]	@ (8004390 <TIM5_IRQHandler+0xd4>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00a      	beq.n	800438c <TIM5_IRQHandler+0xd0>
    	__timer_5_config__ ->ISR_Routines.Trigger_ISR();
 8004376:	4b06      	ldr	r3, [pc, #24]	@ (8004390 <TIM5_IRQHandler+0xd4>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800437e:	4798      	blx	r3

    	TIM5->SR &= ~TIM_SR_TIF;  // Clear the Capture Compare interrupt flag
 8004380:	4b04      	ldr	r3, [pc, #16]	@ (8004394 <TIM5_IRQHandler+0xd8>)
 8004382:	691b      	ldr	r3, [r3, #16]
 8004384:	4a03      	ldr	r2, [pc, #12]	@ (8004394 <TIM5_IRQHandler+0xd8>)
 8004386:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800438a:	6113      	str	r3, [r2, #16]
    }
}
 800438c:	bf00      	nop
 800438e:	bd80      	pop	{r7, pc}
 8004390:	200002cc 	.word	0x200002cc
 8004394:	40000c00 	.word	0x40000c00

08004398 <TIM6_DAC_IRQHandler>:

void TIM6_DAC_IRQHandler(void)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	af00      	add	r7, sp, #0
    if (__timer_6_config__->ISR_Routines.Update_ISR) {
 800439c:	4b09      	ldr	r3, [pc, #36]	@ (80043c4 <TIM6_DAC_IRQHandler+0x2c>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d00a      	beq.n	80043be <TIM6_DAC_IRQHandler+0x26>
    	__timer_6_config__->ISR_Routines.Update_ISR();
 80043a8:	4b06      	ldr	r3, [pc, #24]	@ (80043c4 <TIM6_DAC_IRQHandler+0x2c>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80043b0:	4798      	blx	r3
    	  TIM6->SR &= ~TIM_SR_UIF;  // Clear the Capture Compare interrupt flag
 80043b2:	4b05      	ldr	r3, [pc, #20]	@ (80043c8 <TIM6_DAC_IRQHandler+0x30>)
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	4a04      	ldr	r2, [pc, #16]	@ (80043c8 <TIM6_DAC_IRQHandler+0x30>)
 80043b8:	f023 0301 	bic.w	r3, r3, #1
 80043bc:	6113      	str	r3, [r2, #16]

    }

}
 80043be:	bf00      	nop
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	200002d0 	.word	0x200002d0
 80043c8:	40001000 	.word	0x40001000

080043cc <TIM7_IRQHandler>:

void TIM7_IRQHandler(void)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	af00      	add	r7, sp, #0
    if (__timer_7_config__->ISR_Routines.Update_ISR) {
 80043d0:	4b09      	ldr	r3, [pc, #36]	@ (80043f8 <TIM7_IRQHandler+0x2c>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d00a      	beq.n	80043f2 <TIM7_IRQHandler+0x26>
    	__timer_7_config__->ISR_Routines.Update_ISR();
 80043dc:	4b06      	ldr	r3, [pc, #24]	@ (80043f8 <TIM7_IRQHandler+0x2c>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80043e4:	4798      	blx	r3

    	TIM7->SR &= ~TIM_SR_UIF;  // Clear the Capture Compare interrupt flag
 80043e6:	4b05      	ldr	r3, [pc, #20]	@ (80043fc <TIM7_IRQHandler+0x30>)
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	4a04      	ldr	r2, [pc, #16]	@ (80043fc <TIM7_IRQHandler+0x30>)
 80043ec:	f023 0301 	bic.w	r3, r3, #1
 80043f0:	6113      	str	r3, [r2, #16]
    }
}
 80043f2:	bf00      	nop
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	200002d4 	.word	0x200002d4
 80043fc:	40001400 	.word	0x40001400

08004400 <TIM8_BRK_TIM12_IRQHandler>:
//		(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_4))
//{
//	NVIC_EnableIRQ(TIM8_CC_IRQn);
//}

void TIM8_BRK_TIM12_IRQHandler(void) {
 8004400:	b580      	push	{r7, lr}
 8004402:	af00      	add	r7, sp, #0
    if (__timer_8_config__ ->ISR_Routines.Break_ISR) {
 8004404:	4b2b      	ldr	r3, [pc, #172]	@ (80044b4 <TIM8_BRK_TIM12_IRQHandler+0xb4>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800440c:	2b00      	cmp	r3, #0
 800440e:	d00a      	beq.n	8004426 <TIM8_BRK_TIM12_IRQHandler+0x26>
    	__timer_8_config__ ->ISR_Routines.Break_ISR();
 8004410:	4b28      	ldr	r3, [pc, #160]	@ (80044b4 <TIM8_BRK_TIM12_IRQHandler+0xb4>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004418:	4798      	blx	r3
    	TIM1->SR &= ~TIM_SR_BIF;  // Clear the Break interrupt flag
 800441a:	4b27      	ldr	r3, [pc, #156]	@ (80044b8 <TIM8_BRK_TIM12_IRQHandler+0xb8>)
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	4a26      	ldr	r2, [pc, #152]	@ (80044b8 <TIM8_BRK_TIM12_IRQHandler+0xb8>)
 8004420:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004424:	6113      	str	r3, [r2, #16]
    }

    if (__timer_12_config__ ->ISR_Routines.Capture_Compare_1_ISR){
 8004426:	4b25      	ldr	r3, [pc, #148]	@ (80044bc <TIM8_BRK_TIM12_IRQHandler+0xbc>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00a      	beq.n	8004448 <TIM8_BRK_TIM12_IRQHandler+0x48>
    	__timer_12_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 8004432:	4b22      	ldr	r3, [pc, #136]	@ (80044bc <TIM8_BRK_TIM12_IRQHandler+0xbc>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800443a:	4798      	blx	r3
    	TIM9->SR &= ~TIM_SR_CC1IF;  // Clear the Break interrupt flag
 800443c:	4b20      	ldr	r3, [pc, #128]	@ (80044c0 <TIM8_BRK_TIM12_IRQHandler+0xc0>)
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	4a1f      	ldr	r2, [pc, #124]	@ (80044c0 <TIM8_BRK_TIM12_IRQHandler+0xc0>)
 8004442:	f023 0302 	bic.w	r3, r3, #2
 8004446:	6113      	str	r3, [r2, #16]
    }

    if (__timer_12_config__ ->ISR_Routines.Capture_Compare_2_ISR){
 8004448:	4b1c      	ldr	r3, [pc, #112]	@ (80044bc <TIM8_BRK_TIM12_IRQHandler+0xbc>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004450:	2b00      	cmp	r3, #0
 8004452:	d00a      	beq.n	800446a <TIM8_BRK_TIM12_IRQHandler+0x6a>
    	__timer_12_config__ ->ISR_Routines.Capture_Compare_2_ISR();
 8004454:	4b19      	ldr	r3, [pc, #100]	@ (80044bc <TIM8_BRK_TIM12_IRQHandler+0xbc>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800445c:	4798      	blx	r3
    	TIM9->SR &= ~TIM_SR_CC2IF;  // Clear the Break interrupt flag
 800445e:	4b18      	ldr	r3, [pc, #96]	@ (80044c0 <TIM8_BRK_TIM12_IRQHandler+0xc0>)
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	4a17      	ldr	r2, [pc, #92]	@ (80044c0 <TIM8_BRK_TIM12_IRQHandler+0xc0>)
 8004464:	f023 0304 	bic.w	r3, r3, #4
 8004468:	6113      	str	r3, [r2, #16]
    }

    if (__timer_12_config__ ->ISR_Routines.Update_ISR){
 800446a:	4b14      	ldr	r3, [pc, #80]	@ (80044bc <TIM8_BRK_TIM12_IRQHandler+0xbc>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00a      	beq.n	800448c <TIM8_BRK_TIM12_IRQHandler+0x8c>
    	__timer_12_config__ ->ISR_Routines.Update_ISR();
 8004476:	4b11      	ldr	r3, [pc, #68]	@ (80044bc <TIM8_BRK_TIM12_IRQHandler+0xbc>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800447e:	4798      	blx	r3
    	TIM9->SR &= ~TIM_SR_UIF;  // Clear the Break interrupt flag
 8004480:	4b0f      	ldr	r3, [pc, #60]	@ (80044c0 <TIM8_BRK_TIM12_IRQHandler+0xc0>)
 8004482:	691b      	ldr	r3, [r3, #16]
 8004484:	4a0e      	ldr	r2, [pc, #56]	@ (80044c0 <TIM8_BRK_TIM12_IRQHandler+0xc0>)
 8004486:	f023 0301 	bic.w	r3, r3, #1
 800448a:	6113      	str	r3, [r2, #16]
    }

    if (__timer_12_config__ ->ISR_Routines.Trigger_ISR){
 800448c:	4b0b      	ldr	r3, [pc, #44]	@ (80044bc <TIM8_BRK_TIM12_IRQHandler+0xbc>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004494:	2b00      	cmp	r3, #0
 8004496:	d00a      	beq.n	80044ae <TIM8_BRK_TIM12_IRQHandler+0xae>
    	__timer_12_config__ ->ISR_Routines.Trigger_ISR();
 8004498:	4b08      	ldr	r3, [pc, #32]	@ (80044bc <TIM8_BRK_TIM12_IRQHandler+0xbc>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80044a0:	4798      	blx	r3
    	TIM9->SR &= ~TIM_SR_TIF;  // Clear the Break interrupt flag
 80044a2:	4b07      	ldr	r3, [pc, #28]	@ (80044c0 <TIM8_BRK_TIM12_IRQHandler+0xc0>)
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	4a06      	ldr	r2, [pc, #24]	@ (80044c0 <TIM8_BRK_TIM12_IRQHandler+0xc0>)
 80044a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044ac:	6113      	str	r3, [r2, #16]
    }

}
 80044ae:	bf00      	nop
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	200002d8 	.word	0x200002d8
 80044b8:	40010000 	.word	0x40010000
 80044bc:	200002e8 	.word	0x200002e8
 80044c0:	40014000 	.word	0x40014000

080044c4 <TIM8_UP_TIM13_IRQHandler>:

void TIM8_UP_TIM13_IRQHandler(void) {
 80044c4:	b580      	push	{r7, lr}
 80044c6:	af00      	add	r7, sp, #0
    if (__timer_1_config__ ->ISR_Routines.Update_ISR) {
 80044c8:	4b1a      	ldr	r3, [pc, #104]	@ (8004534 <TIM8_UP_TIM13_IRQHandler+0x70>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d00a      	beq.n	80044ea <TIM8_UP_TIM13_IRQHandler+0x26>
    	__timer_1_config__ ->ISR_Routines.Update_ISR();
 80044d4:	4b17      	ldr	r3, [pc, #92]	@ (8004534 <TIM8_UP_TIM13_IRQHandler+0x70>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80044dc:	4798      	blx	r3
    	TIM1->SR &= ~TIM_SR_UIF;  // Clear the Update interrupt flag
 80044de:	4b16      	ldr	r3, [pc, #88]	@ (8004538 <TIM8_UP_TIM13_IRQHandler+0x74>)
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	4a15      	ldr	r2, [pc, #84]	@ (8004538 <TIM8_UP_TIM13_IRQHandler+0x74>)
 80044e4:	f023 0301 	bic.w	r3, r3, #1
 80044e8:	6113      	str	r3, [r2, #16]
    }

    if (__timer_13_config__ ->ISR_Routines.Update_ISR) {
 80044ea:	4b14      	ldr	r3, [pc, #80]	@ (800453c <TIM8_UP_TIM13_IRQHandler+0x78>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00a      	beq.n	800450c <TIM8_UP_TIM13_IRQHandler+0x48>
    	__timer_13_config__ ->ISR_Routines.Update_ISR();
 80044f6:	4b11      	ldr	r3, [pc, #68]	@ (800453c <TIM8_UP_TIM13_IRQHandler+0x78>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80044fe:	4798      	blx	r3
    	TIM13->SR &= ~TIM_SR_UIF;  // Clear the Update interrupt flag
 8004500:	4b0f      	ldr	r3, [pc, #60]	@ (8004540 <TIM8_UP_TIM13_IRQHandler+0x7c>)
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	4a0e      	ldr	r2, [pc, #56]	@ (8004540 <TIM8_UP_TIM13_IRQHandler+0x7c>)
 8004506:	f023 0301 	bic.w	r3, r3, #1
 800450a:	6113      	str	r3, [r2, #16]
    }

    if (__timer_13_config__ ->ISR_Routines.Capture_Compare_1_ISR) {
 800450c:	4b0b      	ldr	r3, [pc, #44]	@ (800453c <TIM8_UP_TIM13_IRQHandler+0x78>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004514:	2b00      	cmp	r3, #0
 8004516:	d00a      	beq.n	800452e <TIM8_UP_TIM13_IRQHandler+0x6a>
    	__timer_13_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 8004518:	4b08      	ldr	r3, [pc, #32]	@ (800453c <TIM8_UP_TIM13_IRQHandler+0x78>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004520:	4798      	blx	r3
    	TIM13->SR &= ~TIM_SR_CC1IF;  // Clear the Update interrupt flag
 8004522:	4b07      	ldr	r3, [pc, #28]	@ (8004540 <TIM8_UP_TIM13_IRQHandler+0x7c>)
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	4a06      	ldr	r2, [pc, #24]	@ (8004540 <TIM8_UP_TIM13_IRQHandler+0x7c>)
 8004528:	f023 0302 	bic.w	r3, r3, #2
 800452c:	6113      	str	r3, [r2, #16]
    }

}
 800452e:	bf00      	nop
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	200002bc 	.word	0x200002bc
 8004538:	40010000 	.word	0x40010000
 800453c:	200002ec 	.word	0x200002ec
 8004540:	40001c00 	.word	0x40001c00

08004544 <TIM8_TRG_COM_TIM14_IRQHandler>:

void TIM8_TRG_COM_TIM14_IRQHandler(void) {
 8004544:	b580      	push	{r7, lr}
 8004546:	af00      	add	r7, sp, #0
    if (__timer_8_config__ ->ISR_Routines.Trigger_ISR) {
 8004548:	4b22      	ldr	r3, [pc, #136]	@ (80045d4 <TIM8_TRG_COM_TIM14_IRQHandler+0x90>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004550:	2b00      	cmp	r3, #0
 8004552:	d00a      	beq.n	800456a <TIM8_TRG_COM_TIM14_IRQHandler+0x26>
    	__timer_8_config__ ->ISR_Routines.Trigger_ISR();
 8004554:	4b1f      	ldr	r3, [pc, #124]	@ (80045d4 <TIM8_TRG_COM_TIM14_IRQHandler+0x90>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800455c:	4798      	blx	r3

    	TIM8->SR &= ~TIM_SR_TIF;  // Clear the Trigger interrupt flag
 800455e:	4b1e      	ldr	r3, [pc, #120]	@ (80045d8 <TIM8_TRG_COM_TIM14_IRQHandler+0x94>)
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	4a1d      	ldr	r2, [pc, #116]	@ (80045d8 <TIM8_TRG_COM_TIM14_IRQHandler+0x94>)
 8004564:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004568:	6113      	str	r3, [r2, #16]
    }

    if (__timer_8_config__ ->ISR_Routines.Commutation_ISR) {
 800456a:	4b1a      	ldr	r3, [pc, #104]	@ (80045d4 <TIM8_TRG_COM_TIM14_IRQHandler+0x90>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00a      	beq.n	800458c <TIM8_TRG_COM_TIM14_IRQHandler+0x48>
    	__timer_8_config__ ->ISR_Routines.Commutation_ISR();
 8004576:	4b17      	ldr	r3, [pc, #92]	@ (80045d4 <TIM8_TRG_COM_TIM14_IRQHandler+0x90>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800457e:	4798      	blx	r3

    	TIM8->SR &= ~TIM_SR_COMIF;  // Clear the Trigger interrupt flag
 8004580:	4b15      	ldr	r3, [pc, #84]	@ (80045d8 <TIM8_TRG_COM_TIM14_IRQHandler+0x94>)
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	4a14      	ldr	r2, [pc, #80]	@ (80045d8 <TIM8_TRG_COM_TIM14_IRQHandler+0x94>)
 8004586:	f023 0320 	bic.w	r3, r3, #32
 800458a:	6113      	str	r3, [r2, #16]
    }

    if (__timer_14_config__ ->ISR_Routines.Update_ISR) {
 800458c:	4b13      	ldr	r3, [pc, #76]	@ (80045dc <TIM8_TRG_COM_TIM14_IRQHandler+0x98>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004594:	2b00      	cmp	r3, #0
 8004596:	d00a      	beq.n	80045ae <TIM8_TRG_COM_TIM14_IRQHandler+0x6a>
    	__timer_14_config__ ->ISR_Routines.Update_ISR();
 8004598:	4b10      	ldr	r3, [pc, #64]	@ (80045dc <TIM8_TRG_COM_TIM14_IRQHandler+0x98>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80045a0:	4798      	blx	r3
    	TIM14->SR &= ~TIM_SR_UIF;  // Clear the Update interrupt flag
 80045a2:	4b0f      	ldr	r3, [pc, #60]	@ (80045e0 <TIM8_TRG_COM_TIM14_IRQHandler+0x9c>)
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	4a0e      	ldr	r2, [pc, #56]	@ (80045e0 <TIM8_TRG_COM_TIM14_IRQHandler+0x9c>)
 80045a8:	f023 0301 	bic.w	r3, r3, #1
 80045ac:	6113      	str	r3, [r2, #16]
    }

    if (__timer_14_config__ ->ISR_Routines.Capture_Compare_1_ISR) {
 80045ae:	4b0b      	ldr	r3, [pc, #44]	@ (80045dc <TIM8_TRG_COM_TIM14_IRQHandler+0x98>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00a      	beq.n	80045d0 <TIM8_TRG_COM_TIM14_IRQHandler+0x8c>
    	__timer_14_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 80045ba:	4b08      	ldr	r3, [pc, #32]	@ (80045dc <TIM8_TRG_COM_TIM14_IRQHandler+0x98>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045c2:	4798      	blx	r3
    	TIM14->SR &= ~TIM_SR_CC1IF;  // Clear the Update interrupt flag
 80045c4:	4b06      	ldr	r3, [pc, #24]	@ (80045e0 <TIM8_TRG_COM_TIM14_IRQHandler+0x9c>)
 80045c6:	691b      	ldr	r3, [r3, #16]
 80045c8:	4a05      	ldr	r2, [pc, #20]	@ (80045e0 <TIM8_TRG_COM_TIM14_IRQHandler+0x9c>)
 80045ca:	f023 0302 	bic.w	r3, r3, #2
 80045ce:	6113      	str	r3, [r2, #16]
    }

}
 80045d0:	bf00      	nop
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	200002d8 	.word	0x200002d8
 80045d8:	40010400 	.word	0x40010400
 80045dc:	200002f0 	.word	0x200002f0
 80045e0:	40002000 	.word	0x40002000

080045e4 <TIM8_CC_IRQHandler>:

void TIM8_CC_IRQHandler(void) {
 80045e4:	b580      	push	{r7, lr}
 80045e6:	af00      	add	r7, sp, #0
    if (__timer_8_config__ ->ISR_Routines.Capture_Compare_1_ISR) {
 80045e8:	4b22      	ldr	r3, [pc, #136]	@ (8004674 <TIM8_CC_IRQHandler+0x90>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d00a      	beq.n	800460a <TIM8_CC_IRQHandler+0x26>
    	__timer_8_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 80045f4:	4b1f      	ldr	r3, [pc, #124]	@ (8004674 <TIM8_CC_IRQHandler+0x90>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045fc:	4798      	blx	r3

    	TIM8->SR &= ~TIM_SR_CC1IF;  // Clear the Capture Compare interrupt flag
 80045fe:	4b1e      	ldr	r3, [pc, #120]	@ (8004678 <TIM8_CC_IRQHandler+0x94>)
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	4a1d      	ldr	r2, [pc, #116]	@ (8004678 <TIM8_CC_IRQHandler+0x94>)
 8004604:	f023 0302 	bic.w	r3, r3, #2
 8004608:	6113      	str	r3, [r2, #16]
    }

    if (__timer_8_config__ ->ISR_Routines.Capture_Compare_2_ISR) {
 800460a:	4b1a      	ldr	r3, [pc, #104]	@ (8004674 <TIM8_CC_IRQHandler+0x90>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00a      	beq.n	800462c <TIM8_CC_IRQHandler+0x48>
    	__timer_8_config__ ->ISR_Routines.Capture_Compare_2_ISR();
 8004616:	4b17      	ldr	r3, [pc, #92]	@ (8004674 <TIM8_CC_IRQHandler+0x90>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800461e:	4798      	blx	r3

    	TIM8->SR &= ~TIM_SR_CC2IF;  // Clear the Capture Compare interrupt flag
 8004620:	4b15      	ldr	r3, [pc, #84]	@ (8004678 <TIM8_CC_IRQHandler+0x94>)
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	4a14      	ldr	r2, [pc, #80]	@ (8004678 <TIM8_CC_IRQHandler+0x94>)
 8004626:	f023 0304 	bic.w	r3, r3, #4
 800462a:	6113      	str	r3, [r2, #16]
    }

    if (__timer_8_config__ ->ISR_Routines.Capture_Compare_3_ISR) {
 800462c:	4b11      	ldr	r3, [pc, #68]	@ (8004674 <TIM8_CC_IRQHandler+0x90>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00a      	beq.n	800464e <TIM8_CC_IRQHandler+0x6a>
    	__timer_8_config__ ->ISR_Routines.Capture_Compare_3_ISR();
 8004638:	4b0e      	ldr	r3, [pc, #56]	@ (8004674 <TIM8_CC_IRQHandler+0x90>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004640:	4798      	blx	r3

    	TIM8->SR &= ~TIM_SR_CC3IF;  // Clear the Capture Compare interrupt flag
 8004642:	4b0d      	ldr	r3, [pc, #52]	@ (8004678 <TIM8_CC_IRQHandler+0x94>)
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	4a0c      	ldr	r2, [pc, #48]	@ (8004678 <TIM8_CC_IRQHandler+0x94>)
 8004648:	f023 0308 	bic.w	r3, r3, #8
 800464c:	6113      	str	r3, [r2, #16]
    }

    if (__timer_8_config__ ->ISR_Routines.Capture_Compare_4_ISR) {
 800464e:	4b09      	ldr	r3, [pc, #36]	@ (8004674 <TIM8_CC_IRQHandler+0x90>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00a      	beq.n	8004670 <TIM8_CC_IRQHandler+0x8c>
    	__timer_8_config__ ->ISR_Routines.Capture_Compare_4_ISR();
 800465a:	4b06      	ldr	r3, [pc, #24]	@ (8004674 <TIM8_CC_IRQHandler+0x90>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004662:	4798      	blx	r3

    	TIM8->SR &= ~TIM_SR_CC4IF;  // Clear the Capture Compare interrupt flag
 8004664:	4b04      	ldr	r3, [pc, #16]	@ (8004678 <TIM8_CC_IRQHandler+0x94>)
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	4a03      	ldr	r2, [pc, #12]	@ (8004678 <TIM8_CC_IRQHandler+0x94>)
 800466a:	f023 0310 	bic.w	r3, r3, #16
 800466e:	6113      	str	r3, [r2, #16]
    }
}
 8004670:	bf00      	nop
 8004672:	bd80      	pop	{r7, pc}
 8004674:	200002d8 	.word	0x200002d8
 8004678:	40010400 	.word	0x40010400

0800467c <UART4_IRQHandler>:




void UART4_IRQHandler(void)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	af00      	add	r7, sp, #0
	USART_SR = UART4 -> SR;
 8004680:	4b57      	ldr	r3, [pc, #348]	@ (80047e0 <UART4_IRQHandler+0x164>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	b29a      	uxth	r2, r3
 8004686:	4b57      	ldr	r3, [pc, #348]	@ (80047e4 <UART4_IRQHandler+0x168>)
 8004688:	801a      	strh	r2, [r3, #0]
	if(USART_SR & USART_SR_CTS)
 800468a:	4b56      	ldr	r3, [pc, #344]	@ (80047e4 <UART4_IRQHandler+0x168>)
 800468c:	881b      	ldrh	r3, [r3, #0]
 800468e:	b29b      	uxth	r3, r3
 8004690:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004694:	2b00      	cmp	r3, #0
 8004696:	d010      	beq.n	80046ba <UART4_IRQHandler+0x3e>
	{
	    if (__usart_4_config__ ->ISR_Routines.CTS_ISR) {
 8004698:	4b53      	ldr	r3, [pc, #332]	@ (80047e8 <UART4_IRQHandler+0x16c>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00a      	beq.n	80046ba <UART4_IRQHandler+0x3e>
	    	__usart_4_config__ ->ISR_Routines.CTS_ISR();
 80046a4:	4b50      	ldr	r3, [pc, #320]	@ (80047e8 <UART4_IRQHandler+0x16c>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80046ac:	4798      	blx	r3
	    	UART4->SR &= ~USART_SR_CTS;  // Clear the Break interrupt flag
 80046ae:	4b4c      	ldr	r3, [pc, #304]	@ (80047e0 <UART4_IRQHandler+0x164>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a4b      	ldr	r2, [pc, #300]	@ (80047e0 <UART4_IRQHandler+0x164>)
 80046b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80046b8:	6013      	str	r3, [r2, #0]
	    }
	}

	if(USART_SR & USART_SR_LBD)
 80046ba:	4b4a      	ldr	r3, [pc, #296]	@ (80047e4 <UART4_IRQHandler+0x168>)
 80046bc:	881b      	ldrh	r3, [r3, #0]
 80046be:	b29b      	uxth	r3, r3
 80046c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d010      	beq.n	80046ea <UART4_IRQHandler+0x6e>
	{
	    if (__usart_4_config__ ->ISR_Routines.LIN_Break_Detection_ISR) {
 80046c8:	4b47      	ldr	r3, [pc, #284]	@ (80047e8 <UART4_IRQHandler+0x16c>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d00a      	beq.n	80046ea <UART4_IRQHandler+0x6e>
	    	__usart_4_config__ ->ISR_Routines.LIN_Break_Detection_ISR();
 80046d4:	4b44      	ldr	r3, [pc, #272]	@ (80047e8 <UART4_IRQHandler+0x16c>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80046dc:	4798      	blx	r3
	    	UART4->SR &= ~USART_SR_LBD;  // Clear the Break interrupt flag
 80046de:	4b40      	ldr	r3, [pc, #256]	@ (80047e0 <UART4_IRQHandler+0x164>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a3f      	ldr	r2, [pc, #252]	@ (80047e0 <UART4_IRQHandler+0x164>)
 80046e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80046e8:	6013      	str	r3, [r2, #0]
	    }
	}

	if(USART_SR & USART_SR_TXE)
 80046ea:	4b3e      	ldr	r3, [pc, #248]	@ (80047e4 <UART4_IRQHandler+0x168>)
 80046ec:	881b      	ldrh	r3, [r3, #0]
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d010      	beq.n	800471a <UART4_IRQHandler+0x9e>
	{
	    if (__usart_4_config__ ->ISR_Routines.Transmit_Empty_ISR) {
 80046f8:	4b3b      	ldr	r3, [pc, #236]	@ (80047e8 <UART4_IRQHandler+0x16c>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004700:	2b00      	cmp	r3, #0
 8004702:	d00a      	beq.n	800471a <UART4_IRQHandler+0x9e>
	    	__usart_4_config__ ->ISR_Routines.Transmit_Empty_ISR();
 8004704:	4b38      	ldr	r3, [pc, #224]	@ (80047e8 <UART4_IRQHandler+0x16c>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800470c:	4798      	blx	r3
	    	UART4->SR &= ~USART_SR_TXE;  // Clear the Break interrupt flag
 800470e:	4b34      	ldr	r3, [pc, #208]	@ (80047e0 <UART4_IRQHandler+0x164>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a33      	ldr	r2, [pc, #204]	@ (80047e0 <UART4_IRQHandler+0x164>)
 8004714:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004718:	6013      	str	r3, [r2, #0]
	    }
	}


	if(USART_SR & USART_SR_TC)
 800471a:	4b32      	ldr	r3, [pc, #200]	@ (80047e4 <UART4_IRQHandler+0x168>)
 800471c:	881b      	ldrh	r3, [r3, #0]
 800471e:	b29b      	uxth	r3, r3
 8004720:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004724:	2b00      	cmp	r3, #0
 8004726:	d010      	beq.n	800474a <UART4_IRQHandler+0xce>
	{
	    if (__usart_4_config__ ->ISR_Routines.Transmission_Complete_ISR) {
 8004728:	4b2f      	ldr	r3, [pc, #188]	@ (80047e8 <UART4_IRQHandler+0x16c>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8004730:	2b00      	cmp	r3, #0
 8004732:	d00a      	beq.n	800474a <UART4_IRQHandler+0xce>
	    	__usart_4_config__ ->ISR_Routines.Transmission_Complete_ISR();
 8004734:	4b2c      	ldr	r3, [pc, #176]	@ (80047e8 <UART4_IRQHandler+0x16c>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800473c:	4798      	blx	r3
	    	UART4->SR &= ~USART_SR_TC;  // Clear the Break interrupt flag
 800473e:	4b28      	ldr	r3, [pc, #160]	@ (80047e0 <UART4_IRQHandler+0x164>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a27      	ldr	r2, [pc, #156]	@ (80047e0 <UART4_IRQHandler+0x164>)
 8004744:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004748:	6013      	str	r3, [r2, #0]
	    }
	}

	if(USART_SR & USART_SR_RXNE)
 800474a:	4b26      	ldr	r3, [pc, #152]	@ (80047e4 <UART4_IRQHandler+0x168>)
 800474c:	881b      	ldrh	r3, [r3, #0]
 800474e:	b29b      	uxth	r3, r3
 8004750:	f003 0320 	and.w	r3, r3, #32
 8004754:	2b00      	cmp	r3, #0
 8004756:	d010      	beq.n	800477a <UART4_IRQHandler+0xfe>
	{
	    if (__usart_4_config__ ->ISR_Routines.Receiver_Empty_ISR) {
 8004758:	4b23      	ldr	r3, [pc, #140]	@ (80047e8 <UART4_IRQHandler+0x16c>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d00a      	beq.n	800477a <UART4_IRQHandler+0xfe>
	    	__usart_4_config__ ->ISR_Routines.Receiver_Empty_ISR();
 8004764:	4b20      	ldr	r3, [pc, #128]	@ (80047e8 <UART4_IRQHandler+0x16c>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800476c:	4798      	blx	r3
	    	UART4->SR &= ~USART_SR_RXNE;  // Clear the Break interrupt flag
 800476e:	4b1c      	ldr	r3, [pc, #112]	@ (80047e0 <UART4_IRQHandler+0x164>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a1b      	ldr	r2, [pc, #108]	@ (80047e0 <UART4_IRQHandler+0x164>)
 8004774:	f023 0320 	bic.w	r3, r3, #32
 8004778:	6013      	str	r3, [r2, #0]
	    }
	}


	if(USART_SR & USART_SR_IDLE)
 800477a:	4b1a      	ldr	r3, [pc, #104]	@ (80047e4 <UART4_IRQHandler+0x168>)
 800477c:	881b      	ldrh	r3, [r3, #0]
 800477e:	b29b      	uxth	r3, r3
 8004780:	f003 0310 	and.w	r3, r3, #16
 8004784:	2b00      	cmp	r3, #0
 8004786:	d010      	beq.n	80047aa <UART4_IRQHandler+0x12e>
	{
	    if (__usart_4_config__ ->ISR_Routines.Idle_Line_ISR) {
 8004788:	4b17      	ldr	r3, [pc, #92]	@ (80047e8 <UART4_IRQHandler+0x16c>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004790:	2b00      	cmp	r3, #0
 8004792:	d00a      	beq.n	80047aa <UART4_IRQHandler+0x12e>
	    	__usart_4_config__ ->ISR_Routines.Idle_Line_ISR();
 8004794:	4b14      	ldr	r3, [pc, #80]	@ (80047e8 <UART4_IRQHandler+0x16c>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800479c:	4798      	blx	r3
	    	UART4->SR &= ~USART_SR_IDLE;  // Clear the Break interrupt flag
 800479e:	4b10      	ldr	r3, [pc, #64]	@ (80047e0 <UART4_IRQHandler+0x164>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a0f      	ldr	r2, [pc, #60]	@ (80047e0 <UART4_IRQHandler+0x164>)
 80047a4:	f023 0310 	bic.w	r3, r3, #16
 80047a8:	6013      	str	r3, [r2, #0]
	    }
	}

	if(USART_SR & USART_SR_PE)
 80047aa:	4b0e      	ldr	r3, [pc, #56]	@ (80047e4 <UART4_IRQHandler+0x168>)
 80047ac:	881b      	ldrh	r3, [r3, #0]
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	f003 0301 	and.w	r3, r3, #1
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d010      	beq.n	80047da <UART4_IRQHandler+0x15e>
	{
	    if (__usart_4_config__ ->ISR_Routines.Parity_ISR) {
 80047b8:	4b0b      	ldr	r3, [pc, #44]	@ (80047e8 <UART4_IRQHandler+0x16c>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d00a      	beq.n	80047da <UART4_IRQHandler+0x15e>
	    	__usart_4_config__ ->ISR_Routines.Parity_ISR();
 80047c4:	4b08      	ldr	r3, [pc, #32]	@ (80047e8 <UART4_IRQHandler+0x16c>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80047cc:	4798      	blx	r3
	    	UART4->SR &= ~USART_SR_PE;  // Clear the Break interrupt flag
 80047ce:	4b04      	ldr	r3, [pc, #16]	@ (80047e0 <UART4_IRQHandler+0x164>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a03      	ldr	r2, [pc, #12]	@ (80047e0 <UART4_IRQHandler+0x164>)
 80047d4:	f023 0301 	bic.w	r3, r3, #1
 80047d8:	6013      	str	r3, [r2, #0]
	    }
	}

}
 80047da:	bf00      	nop
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	40004c00 	.word	0x40004c00
 80047e4:	200002fc 	.word	0x200002fc
 80047e8:	200002f8 	.word	0x200002f8

080047ec <USART1_IRQHandler>:


void USART1_IRQHandler(void)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	af00      	add	r7, sp, #0
	USART_SR = USART1 -> SR;
 80047f0:	4b57      	ldr	r3, [pc, #348]	@ (8004950 <USART1_IRQHandler+0x164>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	b29a      	uxth	r2, r3
 80047f6:	4b57      	ldr	r3, [pc, #348]	@ (8004954 <USART1_IRQHandler+0x168>)
 80047f8:	801a      	strh	r2, [r3, #0]
	if(USART_SR & USART_SR_CTS)
 80047fa:	4b56      	ldr	r3, [pc, #344]	@ (8004954 <USART1_IRQHandler+0x168>)
 80047fc:	881b      	ldrh	r3, [r3, #0]
 80047fe:	b29b      	uxth	r3, r3
 8004800:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004804:	2b00      	cmp	r3, #0
 8004806:	d010      	beq.n	800482a <USART1_IRQHandler+0x3e>
	{
	    if (__usart_1_config__ ->ISR_Routines.CTS_ISR) {
 8004808:	4b53      	ldr	r3, [pc, #332]	@ (8004958 <USART1_IRQHandler+0x16c>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004810:	2b00      	cmp	r3, #0
 8004812:	d00a      	beq.n	800482a <USART1_IRQHandler+0x3e>
	    	__usart_1_config__ ->ISR_Routines.CTS_ISR();
 8004814:	4b50      	ldr	r3, [pc, #320]	@ (8004958 <USART1_IRQHandler+0x16c>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800481c:	4798      	blx	r3
	    	USART1->SR &= ~USART_SR_CTS;  // Clear the Break interrupt flag
 800481e:	4b4c      	ldr	r3, [pc, #304]	@ (8004950 <USART1_IRQHandler+0x164>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a4b      	ldr	r2, [pc, #300]	@ (8004950 <USART1_IRQHandler+0x164>)
 8004824:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004828:	6013      	str	r3, [r2, #0]
	    }
	}

	if(USART_SR & USART_SR_LBD)
 800482a:	4b4a      	ldr	r3, [pc, #296]	@ (8004954 <USART1_IRQHandler+0x168>)
 800482c:	881b      	ldrh	r3, [r3, #0]
 800482e:	b29b      	uxth	r3, r3
 8004830:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004834:	2b00      	cmp	r3, #0
 8004836:	d010      	beq.n	800485a <USART1_IRQHandler+0x6e>
	{
	    if (__usart_1_config__ ->ISR_Routines.LIN_Break_Detection_ISR) {
 8004838:	4b47      	ldr	r3, [pc, #284]	@ (8004958 <USART1_IRQHandler+0x16c>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d00a      	beq.n	800485a <USART1_IRQHandler+0x6e>
	    	__usart_1_config__ ->ISR_Routines.LIN_Break_Detection_ISR();
 8004844:	4b44      	ldr	r3, [pc, #272]	@ (8004958 <USART1_IRQHandler+0x16c>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800484c:	4798      	blx	r3
	    	USART1->SR &= ~USART_SR_LBD;  // Clear the Break interrupt flag
 800484e:	4b40      	ldr	r3, [pc, #256]	@ (8004950 <USART1_IRQHandler+0x164>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a3f      	ldr	r2, [pc, #252]	@ (8004950 <USART1_IRQHandler+0x164>)
 8004854:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004858:	6013      	str	r3, [r2, #0]
	    }
	}

	if(USART_SR & USART_SR_TXE)
 800485a:	4b3e      	ldr	r3, [pc, #248]	@ (8004954 <USART1_IRQHandler+0x168>)
 800485c:	881b      	ldrh	r3, [r3, #0]
 800485e:	b29b      	uxth	r3, r3
 8004860:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004864:	2b00      	cmp	r3, #0
 8004866:	d010      	beq.n	800488a <USART1_IRQHandler+0x9e>
	{
	    if (__usart_1_config__ ->ISR_Routines.Transmit_Empty_ISR) {
 8004868:	4b3b      	ldr	r3, [pc, #236]	@ (8004958 <USART1_IRQHandler+0x16c>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004870:	2b00      	cmp	r3, #0
 8004872:	d00a      	beq.n	800488a <USART1_IRQHandler+0x9e>
	    	__usart_1_config__ ->ISR_Routines.Transmit_Empty_ISR();
 8004874:	4b38      	ldr	r3, [pc, #224]	@ (8004958 <USART1_IRQHandler+0x16c>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800487c:	4798      	blx	r3
	    	USART1->SR &= ~USART_SR_TXE;  // Clear the Break interrupt flag
 800487e:	4b34      	ldr	r3, [pc, #208]	@ (8004950 <USART1_IRQHandler+0x164>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a33      	ldr	r2, [pc, #204]	@ (8004950 <USART1_IRQHandler+0x164>)
 8004884:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004888:	6013      	str	r3, [r2, #0]
	    }
	}


	if(USART_SR & USART_SR_TC)
 800488a:	4b32      	ldr	r3, [pc, #200]	@ (8004954 <USART1_IRQHandler+0x168>)
 800488c:	881b      	ldrh	r3, [r3, #0]
 800488e:	b29b      	uxth	r3, r3
 8004890:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004894:	2b00      	cmp	r3, #0
 8004896:	d010      	beq.n	80048ba <USART1_IRQHandler+0xce>
	{
	    if (__usart_1_config__ ->ISR_Routines.Transmission_Complete_ISR) {
 8004898:	4b2f      	ldr	r3, [pc, #188]	@ (8004958 <USART1_IRQHandler+0x16c>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00a      	beq.n	80048ba <USART1_IRQHandler+0xce>
	    	__usart_1_config__ ->ISR_Routines.Transmission_Complete_ISR();
 80048a4:	4b2c      	ldr	r3, [pc, #176]	@ (8004958 <USART1_IRQHandler+0x16c>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80048ac:	4798      	blx	r3
	    	USART1->SR &= ~USART_SR_TC;  // Clear the Break interrupt flag
 80048ae:	4b28      	ldr	r3, [pc, #160]	@ (8004950 <USART1_IRQHandler+0x164>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a27      	ldr	r2, [pc, #156]	@ (8004950 <USART1_IRQHandler+0x164>)
 80048b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048b8:	6013      	str	r3, [r2, #0]
	    }
	}

	if(USART_SR & USART_SR_RXNE)
 80048ba:	4b26      	ldr	r3, [pc, #152]	@ (8004954 <USART1_IRQHandler+0x168>)
 80048bc:	881b      	ldrh	r3, [r3, #0]
 80048be:	b29b      	uxth	r3, r3
 80048c0:	f003 0320 	and.w	r3, r3, #32
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d010      	beq.n	80048ea <USART1_IRQHandler+0xfe>
	{
	    if (__usart_1_config__ ->ISR_Routines.Receiver_Empty_ISR) {
 80048c8:	4b23      	ldr	r3, [pc, #140]	@ (8004958 <USART1_IRQHandler+0x16c>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d00a      	beq.n	80048ea <USART1_IRQHandler+0xfe>
	    	__usart_1_config__ ->ISR_Routines.Receiver_Empty_ISR();
 80048d4:	4b20      	ldr	r3, [pc, #128]	@ (8004958 <USART1_IRQHandler+0x16c>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80048dc:	4798      	blx	r3
	    	USART1->SR &= ~USART_SR_RXNE;  // Clear the Break interrupt flag
 80048de:	4b1c      	ldr	r3, [pc, #112]	@ (8004950 <USART1_IRQHandler+0x164>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a1b      	ldr	r2, [pc, #108]	@ (8004950 <USART1_IRQHandler+0x164>)
 80048e4:	f023 0320 	bic.w	r3, r3, #32
 80048e8:	6013      	str	r3, [r2, #0]
	    }
	}


	if(USART_SR & USART_SR_IDLE)
 80048ea:	4b1a      	ldr	r3, [pc, #104]	@ (8004954 <USART1_IRQHandler+0x168>)
 80048ec:	881b      	ldrh	r3, [r3, #0]
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	f003 0310 	and.w	r3, r3, #16
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d010      	beq.n	800491a <USART1_IRQHandler+0x12e>
	{
	    if (__usart_1_config__ ->ISR_Routines.Idle_Line_ISR) {
 80048f8:	4b17      	ldr	r3, [pc, #92]	@ (8004958 <USART1_IRQHandler+0x16c>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004900:	2b00      	cmp	r3, #0
 8004902:	d00a      	beq.n	800491a <USART1_IRQHandler+0x12e>
	    	__usart_1_config__ ->ISR_Routines.Idle_Line_ISR();
 8004904:	4b14      	ldr	r3, [pc, #80]	@ (8004958 <USART1_IRQHandler+0x16c>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800490c:	4798      	blx	r3
	    	USART1->SR &= ~USART_SR_IDLE;  // Clear the Break interrupt flag
 800490e:	4b10      	ldr	r3, [pc, #64]	@ (8004950 <USART1_IRQHandler+0x164>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a0f      	ldr	r2, [pc, #60]	@ (8004950 <USART1_IRQHandler+0x164>)
 8004914:	f023 0310 	bic.w	r3, r3, #16
 8004918:	6013      	str	r3, [r2, #0]
	    }
	}

	if(USART_SR & USART_SR_PE)
 800491a:	4b0e      	ldr	r3, [pc, #56]	@ (8004954 <USART1_IRQHandler+0x168>)
 800491c:	881b      	ldrh	r3, [r3, #0]
 800491e:	b29b      	uxth	r3, r3
 8004920:	f003 0301 	and.w	r3, r3, #1
 8004924:	2b00      	cmp	r3, #0
 8004926:	d010      	beq.n	800494a <USART1_IRQHandler+0x15e>
	{
	    if (__usart_1_config__ ->ISR_Routines.Parity_ISR) {
 8004928:	4b0b      	ldr	r3, [pc, #44]	@ (8004958 <USART1_IRQHandler+0x16c>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004930:	2b00      	cmp	r3, #0
 8004932:	d00a      	beq.n	800494a <USART1_IRQHandler+0x15e>
	    	__usart_1_config__ ->ISR_Routines.Parity_ISR();
 8004934:	4b08      	ldr	r3, [pc, #32]	@ (8004958 <USART1_IRQHandler+0x16c>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800493c:	4798      	blx	r3
	    	USART1->SR &= ~USART_SR_PE;  // Clear the Break interrupt flag
 800493e:	4b04      	ldr	r3, [pc, #16]	@ (8004950 <USART1_IRQHandler+0x164>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a03      	ldr	r2, [pc, #12]	@ (8004950 <USART1_IRQHandler+0x164>)
 8004944:	f023 0301 	bic.w	r3, r3, #1
 8004948:	6013      	str	r3, [r2, #0]
	    }
	}

}
 800494a:	bf00      	nop
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	40011000 	.word	0x40011000
 8004954:	200002fc 	.word	0x200002fc
 8004958:	200002f4 	.word	0x200002f4

0800495c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	4603      	mov	r3, r0
 8004964:	6039      	str	r1, [r7, #0]
 8004966:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800496c:	2b00      	cmp	r3, #0
 800496e:	db0a      	blt.n	8004986 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	b2da      	uxtb	r2, r3
 8004974:	490c      	ldr	r1, [pc, #48]	@ (80049a8 <__NVIC_SetPriority+0x4c>)
 8004976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800497a:	0112      	lsls	r2, r2, #4
 800497c:	b2d2      	uxtb	r2, r2
 800497e:	440b      	add	r3, r1
 8004980:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004984:	e00a      	b.n	800499c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	b2da      	uxtb	r2, r3
 800498a:	4908      	ldr	r1, [pc, #32]	@ (80049ac <__NVIC_SetPriority+0x50>)
 800498c:	79fb      	ldrb	r3, [r7, #7]
 800498e:	f003 030f 	and.w	r3, r3, #15
 8004992:	3b04      	subs	r3, #4
 8004994:	0112      	lsls	r2, r2, #4
 8004996:	b2d2      	uxtb	r2, r2
 8004998:	440b      	add	r3, r1
 800499a:	761a      	strb	r2, [r3, #24]
}
 800499c:	bf00      	nop
 800499e:	370c      	adds	r7, #12
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr
 80049a8:	e000e100 	.word	0xe000e100
 80049ac:	e000ed00 	.word	0xe000ed00

080049b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	3b01      	subs	r3, #1
 80049bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80049c0:	d301      	bcc.n	80049c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80049c2:	2301      	movs	r3, #1
 80049c4:	e00f      	b.n	80049e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80049c6:	4a0a      	ldr	r2, [pc, #40]	@ (80049f0 <SysTick_Config+0x40>)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	3b01      	subs	r3, #1
 80049cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80049ce:	210f      	movs	r1, #15
 80049d0:	f04f 30ff 	mov.w	r0, #4294967295
 80049d4:	f7ff ffc2 	bl	800495c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80049d8:	4b05      	ldr	r3, [pc, #20]	@ (80049f0 <SysTick_Config+0x40>)
 80049da:	2200      	movs	r2, #0
 80049dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80049de:	4b04      	ldr	r3, [pc, #16]	@ (80049f0 <SysTick_Config+0x40>)
 80049e0:	2207      	movs	r2, #7
 80049e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3708      	adds	r7, #8
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	e000e010 	.word	0xe000e010

080049f4 <MCU_Clock_Setup>:
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b082      	sub	sp, #8
 80049f8:	af00      	add	r7, sp, #0
	SystemInit();
 80049fa:	f000 f991 	bl	8004d20 <SystemInit>
	uint8_t pll_m = 8;
 80049fe:	2308      	movs	r3, #8
 8004a00:	71fb      	strb	r3, [r7, #7]
	uint16_t pll_n = 336; //192
 8004a02:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8004a06:	80bb      	strh	r3, [r7, #4]
	uint8_t pll_p = 0;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	70fb      	strb	r3, [r7, #3]
	uint8_t pll_q = 7;
 8004a0c:	2307      	movs	r3, #7
 8004a0e:	70bb      	strb	r3, [r7, #2]
	RCC->PLLCFGR = 0x00000000;
 8004a10:	4b3c      	ldr	r3, [pc, #240]	@ (8004b04 <MCU_Clock_Setup+0x110>)
 8004a12:	2200      	movs	r2, #0
 8004a14:	605a      	str	r2, [r3, #4]
	RCC -> CR |= RCC_CR_HSEON;
 8004a16:	4b3b      	ldr	r3, [pc, #236]	@ (8004b04 <MCU_Clock_Setup+0x110>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a3a      	ldr	r2, [pc, #232]	@ (8004b04 <MCU_Clock_Setup+0x110>)
 8004a1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a20:	6013      	str	r3, [r2, #0]
	while(!(RCC -> CR & RCC_CR_HSERDY)){}
 8004a22:	bf00      	nop
 8004a24:	4b37      	ldr	r3, [pc, #220]	@ (8004b04 <MCU_Clock_Setup+0x110>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d0f9      	beq.n	8004a24 <MCU_Clock_Setup+0x30>
	RCC -> APB1ENR |= RCC_APB1ENR_PWREN;
 8004a30:	4b34      	ldr	r3, [pc, #208]	@ (8004b04 <MCU_Clock_Setup+0x110>)
 8004a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a34:	4a33      	ldr	r2, [pc, #204]	@ (8004b04 <MCU_Clock_Setup+0x110>)
 8004a36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a3a:	6413      	str	r3, [r2, #64]	@ 0x40
	PWR ->CR |= PWR_CR_VOS;
 8004a3c:	4b32      	ldr	r3, [pc, #200]	@ (8004b08 <MCU_Clock_Setup+0x114>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a31      	ldr	r2, [pc, #196]	@ (8004b08 <MCU_Clock_Setup+0x114>)
 8004a42:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004a46:	6013      	str	r3, [r2, #0]
	FLASH -> ACR |= FLASH_ACR_ICEN | FLASH_ACR_PRFTEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS;
 8004a48:	4b30      	ldr	r3, [pc, #192]	@ (8004b0c <MCU_Clock_Setup+0x118>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a2f      	ldr	r2, [pc, #188]	@ (8004b0c <MCU_Clock_Setup+0x118>)
 8004a4e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004a52:	f043 0305 	orr.w	r3, r3, #5
 8004a56:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR |= (pll_q << 24) | (pll_p << 16) | (pll_n << 6) | (pll_m << 0);
 8004a58:	4b2a      	ldr	r3, [pc, #168]	@ (8004b04 <MCU_Clock_Setup+0x110>)
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	78ba      	ldrb	r2, [r7, #2]
 8004a5e:	0611      	lsls	r1, r2, #24
 8004a60:	78fa      	ldrb	r2, [r7, #3]
 8004a62:	0412      	lsls	r2, r2, #16
 8004a64:	4311      	orrs	r1, r2
 8004a66:	88ba      	ldrh	r2, [r7, #4]
 8004a68:	0192      	lsls	r2, r2, #6
 8004a6a:	4311      	orrs	r1, r2
 8004a6c:	79fa      	ldrb	r2, [r7, #7]
 8004a6e:	430a      	orrs	r2, r1
 8004a70:	4611      	mov	r1, r2
 8004a72:	4a24      	ldr	r2, [pc, #144]	@ (8004b04 <MCU_Clock_Setup+0x110>)
 8004a74:	430b      	orrs	r3, r1
 8004a76:	6053      	str	r3, [r2, #4]
	RCC ->PLLCFGR |= 1 << 22;
 8004a78:	4b22      	ldr	r3, [pc, #136]	@ (8004b04 <MCU_Clock_Setup+0x110>)
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	4a21      	ldr	r2, [pc, #132]	@ (8004b04 <MCU_Clock_Setup+0x110>)
 8004a7e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004a82:	6053      	str	r3, [r2, #4]
	RCC -> CFGR |= RCC_CFGR_HPRE_DIV1;
 8004a84:	4b1f      	ldr	r3, [pc, #124]	@ (8004b04 <MCU_Clock_Setup+0x110>)
 8004a86:	4a1f      	ldr	r2, [pc, #124]	@ (8004b04 <MCU_Clock_Setup+0x110>)
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE1_DIV4;
 8004a8c:	4b1d      	ldr	r3, [pc, #116]	@ (8004b04 <MCU_Clock_Setup+0x110>)
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	4a1c      	ldr	r2, [pc, #112]	@ (8004b04 <MCU_Clock_Setup+0x110>)
 8004a92:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 8004a96:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE2_DIV2;
 8004a98:	4b1a      	ldr	r3, [pc, #104]	@ (8004b04 <MCU_Clock_Setup+0x110>)
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	4a19      	ldr	r2, [pc, #100]	@ (8004b04 <MCU_Clock_Setup+0x110>)
 8004a9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004aa2:	6093      	str	r3, [r2, #8]
	RCC -> CR |= RCC_CR_PLLON;
 8004aa4:	4b17      	ldr	r3, [pc, #92]	@ (8004b04 <MCU_Clock_Setup+0x110>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a16      	ldr	r2, [pc, #88]	@ (8004b04 <MCU_Clock_Setup+0x110>)
 8004aaa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004aae:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY)){}
 8004ab0:	bf00      	nop
 8004ab2:	4b14      	ldr	r3, [pc, #80]	@ (8004b04 <MCU_Clock_Setup+0x110>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d0f9      	beq.n	8004ab2 <MCU_Clock_Setup+0xbe>
	RCC -> CFGR |= RCC_CFGR_SW_PLL;
 8004abe:	4b11      	ldr	r3, [pc, #68]	@ (8004b04 <MCU_Clock_Setup+0x110>)
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	4a10      	ldr	r2, [pc, #64]	@ (8004b04 <MCU_Clock_Setup+0x110>)
 8004ac4:	f043 0302 	orr.w	r3, r3, #2
 8004ac8:	6093      	str	r3, [r2, #8]
	while((RCC -> CFGR & RCC_CFGR_SWS_PLL) != RCC_CFGR_SWS_PLL);
 8004aca:	bf00      	nop
 8004acc:	4b0d      	ldr	r3, [pc, #52]	@ (8004b04 <MCU_Clock_Setup+0x110>)
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	f003 0308 	and.w	r3, r3, #8
 8004ad4:	2b08      	cmp	r3, #8
 8004ad6:	d1f9      	bne.n	8004acc <MCU_Clock_Setup+0xd8>
	SystemCoreClockUpdate();
 8004ad8:	f000 f934 	bl	8004d44 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock/168);
 8004adc:	4b0c      	ldr	r3, [pc, #48]	@ (8004b10 <MCU_Clock_Setup+0x11c>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	08db      	lsrs	r3, r3, #3
 8004ae2:	4a0c      	ldr	r2, [pc, #48]	@ (8004b14 <MCU_Clock_Setup+0x120>)
 8004ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ae8:	085b      	lsrs	r3, r3, #1
 8004aea:	4618      	mov	r0, r3
 8004aec:	f7ff ff60 	bl	80049b0 <SysTick_Config>
	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8004af0:	4b04      	ldr	r3, [pc, #16]	@ (8004b04 <MCU_Clock_Setup+0x110>)
 8004af2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004af4:	4a03      	ldr	r2, [pc, #12]	@ (8004b04 <MCU_Clock_Setup+0x110>)
 8004af6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004afa:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8004afc:	bf00      	nop
 8004afe:	3708      	adds	r7, #8
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	40023800 	.word	0x40023800
 8004b08:	40007000 	.word	0x40007000
 8004b0c:	40023c00 	.word	0x40023c00
 8004b10:	20000000 	.word	0x20000000
 8004b14:	18618619 	.word	0x18618619

08004b18 <Delay_Config>:
{
 8004b18:	b480      	push	{r7}
 8004b1a:	af00      	add	r7, sp, #0
	SysTick->CTRL = 0;
 8004b1c:	4b09      	ldr	r3, [pc, #36]	@ (8004b44 <Delay_Config+0x2c>)
 8004b1e:	2200      	movs	r2, #0
 8004b20:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0x00FFFFFF;
 8004b22:	4b08      	ldr	r3, [pc, #32]	@ (8004b44 <Delay_Config+0x2c>)
 8004b24:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8004b28:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8004b2a:	4b06      	ldr	r3, [pc, #24]	@ (8004b44 <Delay_Config+0x2c>)
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5;
 8004b30:	4b04      	ldr	r3, [pc, #16]	@ (8004b44 <Delay_Config+0x2c>)
 8004b32:	2205      	movs	r2, #5
 8004b34:	601a      	str	r2, [r3, #0]
	return (0UL);                                                     /* Function successful */
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	e000e010 	.word	0xe000e010

08004b48 <Delay_ms>:
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	ed87 0a01 	vstr	s0, [r7, #4]
	unsigned long x =0x29040 * (ms);
 8004b52:	edd7 7a01 	vldr	s15, [r7, #4]
 8004b56:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8004b9c <Delay_ms+0x54>
 8004b5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b62:	ee17 3a90 	vmov	r3, s15
 8004b66:	60fb      	str	r3, [r7, #12]
	SysTick->LOAD =  x ;
 8004b68:	4a0d      	ldr	r2, [pc, #52]	@ (8004ba0 <Delay_ms+0x58>)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0;
 8004b6e:	4b0c      	ldr	r3, [pc, #48]	@ (8004ba0 <Delay_ms+0x58>)
 8004b70:	2200      	movs	r2, #0
 8004b72:	609a      	str	r2, [r3, #8]
	SysTick->CTRL |= 1;
 8004b74:	4b0a      	ldr	r3, [pc, #40]	@ (8004ba0 <Delay_ms+0x58>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a09      	ldr	r2, [pc, #36]	@ (8004ba0 <Delay_ms+0x58>)
 8004b7a:	f043 0301 	orr.w	r3, r3, #1
 8004b7e:	6013      	str	r3, [r2, #0]
	while((SysTick->CTRL & 0x00010000) == 0);
 8004b80:	bf00      	nop
 8004b82:	4b07      	ldr	r3, [pc, #28]	@ (8004ba0 <Delay_ms+0x58>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d0f9      	beq.n	8004b82 <Delay_ms+0x3a>
	return (0UL);                                                     /* Function successful */
 8004b8e:	2300      	movs	r3, #0
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3714      	adds	r7, #20
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr
 8004b9c:	48241000 	.word	0x48241000
 8004ba0:	e000e010 	.word	0xe000e010

08004ba4 <Delay_s>:


__STATIC_INLINE uint32_t Delay_s(unsigned long s)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b082      	sub	sp, #8
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
	s = s * 1000;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004bb2:	fb02 f303 	mul.w	r3, r2, r3
 8004bb6:	607b      	str	r3, [r7, #4]
	for (; s>0; s--)
 8004bb8:	e006      	b.n	8004bc8 <Delay_s+0x24>
	{
		Delay_ms(1);
 8004bba:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8004bbe:	f7ff ffc3 	bl	8004b48 <Delay_ms>
	for (; s>0; s--)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	3b01      	subs	r3, #1
 8004bc6:	607b      	str	r3, [r7, #4]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1f5      	bne.n	8004bba <Delay_s+0x16>
	}
	return (0UL);
 8004bce:	2300      	movs	r3, #0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3708      	adds	r7, #8
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <main>:
W25Qxx_Config Chip;
GC9A01_Config Display;


int main(void)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af04      	add	r7, sp, #16
	MCU_Clock_Setup();
 8004bde:	f7ff ff09 	bl	80049f4 <MCU_Clock_Setup>
	Delay_Config();
 8004be2:	f7ff ff99 	bl	8004b18 <Delay_Config>

	Delay_s(1);
 8004be6:	2001      	movs	r0, #1
 8004be8:	f7ff ffdc 	bl	8004ba4 <Delay_s>


	Global_SPI.clock_pin      = SPI_Configurations.Pin._SPI1_.CLK1.PA5;
 8004bec:	220f      	movs	r2, #15
 8004bee:	4b48      	ldr	r3, [pc, #288]	@ (8004d10 <main+0x138>)
 8004bf0:	711a      	strb	r2, [r3, #4]
	Global_SPI.miso_pin       = SPI_Configurations.Pin._SPI1_.MISO1.PA6;
 8004bf2:	2210      	movs	r2, #16
 8004bf4:	4b46      	ldr	r3, [pc, #280]	@ (8004d10 <main+0x138>)
 8004bf6:	719a      	strb	r2, [r3, #6]
	Global_SPI.mosi_pin       = SPI_Configurations.Pin._SPI1_.MOSI1.PA7;
 8004bf8:	2211      	movs	r2, #17
 8004bfa:	4b45      	ldr	r3, [pc, #276]	@ (8004d10 <main+0x138>)
 8004bfc:	715a      	strb	r2, [r3, #5]
	Global_SPI.Port           = SPI1;
 8004bfe:	4b44      	ldr	r3, [pc, #272]	@ (8004d10 <main+0x138>)
 8004c00:	4a44      	ldr	r2, [pc, #272]	@ (8004d14 <main+0x13c>)
 8004c02:	601a      	str	r2, [r3, #0]
	Global_SPI.clock_phase    = SPI_Configurations.Clock_Phase.High_1;
 8004c04:	2316      	movs	r3, #22
 8004c06:	461a      	mov	r2, r3
 8004c08:	4b41      	ldr	r3, [pc, #260]	@ (8004d10 <main+0x138>)
 8004c0a:	82da      	strh	r2, [r3, #22]
	Global_SPI.clock_polarity = SPI_Configurations.Clock_Polarity.High_1;
 8004c0c:	2320      	movs	r3, #32
 8004c0e:	461a      	mov	r2, r3
 8004c10:	4b3f      	ldr	r3, [pc, #252]	@ (8004d10 <main+0x138>)
 8004c12:	829a      	strh	r2, [r3, #20]
	Global_SPI.type           = SPI_Configurations.Type.Master;
 8004c14:	2332      	movs	r3, #50	@ 0x32
 8004c16:	461a      	mov	r2, r3
 8004c18:	4b3d      	ldr	r3, [pc, #244]	@ (8004d10 <main+0x138>)
 8004c1a:	825a      	strh	r2, [r3, #18]
	Global_SPI.prescaler      = SPI_Configurations.Prescaler.CLK_div_2;
 8004c1c:	2328      	movs	r3, #40	@ 0x28
 8004c1e:	461a      	mov	r2, r3
 8004c20:	4b3b      	ldr	r3, [pc, #236]	@ (8004d10 <main+0x138>)
 8004c22:	821a      	strh	r2, [r3, #16]
	Global_SPI.mode           = SPI_Configurations.Mode.Full_Duplex_Master;
 8004c24:	230b      	movs	r3, #11
 8004c26:	461a      	mov	r2, r3
 8004c28:	4b39      	ldr	r3, [pc, #228]	@ (8004d10 <main+0x138>)
 8004c2a:	811a      	strh	r2, [r3, #8]
	Global_SPI.frame_format   = SPI_Configurations.Frame_Format.MSB_First;
 8004c2c:	2317      	movs	r3, #23
 8004c2e:	461a      	mov	r2, r3
 8004c30:	4b37      	ldr	r3, [pc, #220]	@ (8004d10 <main+0x138>)
 8004c32:	81da      	strh	r2, [r3, #14]
	Global_SPI.dma            = SPI_Configurations.DMA_Type.TX_DMA_Enable | SPI_Configurations.DMA_Type.RX_DMA_Enable;
 8004c34:	2202      	movs	r2, #2
 8004c36:	2308      	movs	r3, #8
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	4b34      	ldr	r3, [pc, #208]	@ (8004d10 <main+0x138>)
 8004c40:	835a      	strh	r2, [r3, #26]
	Global_SPI.data_format    = SPI_Configurations.Data_Format.Bit8;
 8004c42:	230b      	movs	r3, #11
 8004c44:	461a      	mov	r2, r3
 8004c46:	4b32      	ldr	r3, [pc, #200]	@ (8004d10 <main+0x138>)
 8004c48:	819a      	strh	r2, [r3, #12]
	Global_SPI.crc            = SPI_Configurations.CRC_Enable.Disable;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	4b30      	ldr	r3, [pc, #192]	@ (8004d10 <main+0x138>)
 8004c50:	815a      	strh	r2, [r3, #10]
	Global_SPI.interrupt      = SPI_Configurations.Interrupts.Disable;
 8004c52:	2346      	movs	r3, #70	@ 0x46
 8004c54:	461a      	mov	r2, r3
 8004c56:	4b2e      	ldr	r3, [pc, #184]	@ (8004d10 <main+0x138>)
 8004c58:	831a      	strh	r2, [r3, #24]



	Display.SPI_Port = &Global_SPI;
 8004c5a:	4b2f      	ldr	r3, [pc, #188]	@ (8004d18 <main+0x140>)
 8004c5c:	4a2c      	ldr	r2, [pc, #176]	@ (8004d10 <main+0x138>)
 8004c5e:	601a      	str	r2, [r3, #0]
	Display.dc_pin = 2;
 8004c60:	4b2d      	ldr	r3, [pc, #180]	@ (8004d18 <main+0x140>)
 8004c62:	2202      	movs	r2, #2
 8004c64:	821a      	strh	r2, [r3, #16]
	Display.dc_port = GPIOA;
 8004c66:	4b2c      	ldr	r3, [pc, #176]	@ (8004d18 <main+0x140>)
 8004c68:	4a2c      	ldr	r2, [pc, #176]	@ (8004d1c <main+0x144>)
 8004c6a:	60da      	str	r2, [r3, #12]
	Display.rst_pin = 0;
 8004c6c:	4b2a      	ldr	r3, [pc, #168]	@ (8004d18 <main+0x140>)
 8004c6e:	2200      	movs	r2, #0
 8004c70:	831a      	strh	r2, [r3, #24]
	Display.rst_port = GPIOA;
 8004c72:	4b29      	ldr	r3, [pc, #164]	@ (8004d18 <main+0x140>)
 8004c74:	4a29      	ldr	r2, [pc, #164]	@ (8004d1c <main+0x144>)
 8004c76:	615a      	str	r2, [r3, #20]
	Display.cs_pin = 1;
 8004c78:	4b27      	ldr	r3, [pc, #156]	@ (8004d18 <main+0x140>)
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	811a      	strh	r2, [r3, #8]
	Display.cs_port = GPIOA;
 8004c7e:	4b26      	ldr	r3, [pc, #152]	@ (8004d18 <main+0x140>)
 8004c80:	4a26      	ldr	r2, [pc, #152]	@ (8004d1c <main+0x144>)
 8004c82:	605a      	str	r2, [r3, #4]


	GC9A01_Init(&Display);
 8004c84:	4824      	ldr	r0, [pc, #144]	@ (8004d18 <main+0x140>)
 8004c86:	f7fb fc39 	bl	80004fc <GC9A01_Init>

	GC9A01_Fill(&Display, 0x0000);
 8004c8a:	2100      	movs	r1, #0
 8004c8c:	4822      	ldr	r0, [pc, #136]	@ (8004d18 <main+0x140>)
 8004c8e:	f7fc f80b 	bl	8000ca8 <GC9A01_Fill>

//	GC9A01_DrawCircleStroke(&Display, 120, 120, 120, 5, 0xf382);

	GC9A01_DrawArcStroke(&Display, 120, 120, 120,
 8004c92:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004c96:	9303      	str	r3, [sp, #12]
 8004c98:	230a      	movs	r3, #10
 8004c9a:	9302      	str	r3, [sp, #8]
 8004c9c:	233c      	movs	r3, #60	@ 0x3c
 8004c9e:	9301      	str	r3, [sp, #4]
 8004ca0:	2378      	movs	r3, #120	@ 0x78
 8004ca2:	9300      	str	r3, [sp, #0]
 8004ca4:	2378      	movs	r3, #120	@ 0x78
 8004ca6:	2278      	movs	r2, #120	@ 0x78
 8004ca8:	2178      	movs	r1, #120	@ 0x78
 8004caa:	481b      	ldr	r0, [pc, #108]	@ (8004d18 <main+0x140>)
 8004cac:	f7fc f816 	bl	8000cdc <GC9A01_DrawArcStroke>
	                     120, 60, 10, 0xffff);

	GC9A01_DrawArcStroke(&Display, 80, 80, 30,
 8004cb0:	f44f 637e 	mov.w	r3, #4064	@ 0xfe0
 8004cb4:	9303      	str	r3, [sp, #12]
 8004cb6:	230a      	movs	r3, #10
 8004cb8:	9302      	str	r3, [sp, #8]
 8004cba:	2350      	movs	r3, #80	@ 0x50
 8004cbc:	9301      	str	r3, [sp, #4]
 8004cbe:	236e      	movs	r3, #110	@ 0x6e
 8004cc0:	9300      	str	r3, [sp, #0]
 8004cc2:	231e      	movs	r3, #30
 8004cc4:	2250      	movs	r2, #80	@ 0x50
 8004cc6:	2150      	movs	r1, #80	@ 0x50
 8004cc8:	4813      	ldr	r0, [pc, #76]	@ (8004d18 <main+0x140>)
 8004cca:	f7fc f807 	bl	8000cdc <GC9A01_DrawArcStroke>
	                     110, 80, 10, 0x0fe0);

	GC9A01_DrawArcStroke(&Display, 160, 80, 30,
 8004cce:	f44f 637e 	mov.w	r3, #4064	@ 0xfe0
 8004cd2:	9303      	str	r3, [sp, #12]
 8004cd4:	230a      	movs	r3, #10
 8004cd6:	9302      	str	r3, [sp, #8]
 8004cd8:	23f0      	movs	r3, #240	@ 0xf0
 8004cda:	9301      	str	r3, [sp, #4]
 8004cdc:	2300      	movs	r3, #0
 8004cde:	9300      	str	r3, [sp, #0]
 8004ce0:	231e      	movs	r3, #30
 8004ce2:	2250      	movs	r2, #80	@ 0x50
 8004ce4:	21a0      	movs	r1, #160	@ 0xa0
 8004ce6:	480c      	ldr	r0, [pc, #48]	@ (8004d18 <main+0x140>)
 8004ce8:	f7fb fff8 	bl	8000cdc <GC9A01_DrawArcStroke>
	                     0, 240, 10, 0x0fe0);

	GC9A01_DrawArcStroke(&Display, 120, 155, 40,
 8004cec:	f44f 637e 	mov.w	r3, #4064	@ 0xfe0
 8004cf0:	9303      	str	r3, [sp, #12]
 8004cf2:	230a      	movs	r3, #10
 8004cf4:	9302      	str	r3, [sp, #8]
 8004cf6:	23f0      	movs	r3, #240	@ 0xf0
 8004cf8:	9301      	str	r3, [sp, #4]
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	9300      	str	r3, [sp, #0]
 8004cfe:	2328      	movs	r3, #40	@ 0x28
 8004d00:	229b      	movs	r2, #155	@ 0x9b
 8004d02:	2178      	movs	r1, #120	@ 0x78
 8004d04:	4804      	ldr	r0, [pc, #16]	@ (8004d18 <main+0x140>)
 8004d06:	f7fb ffe9 	bl	8000cdc <GC9A01_DrawArcStroke>
	                     0, 240, 10, 0x0fe0);

	for(;;)
 8004d0a:	bf00      	nop
 8004d0c:	e7fd      	b.n	8004d0a <main+0x132>
 8004d0e:	bf00      	nop
 8004d10:	20000300 	.word	0x20000300
 8004d14:	40013000 	.word	0x40013000
 8004d18:	2000031c 	.word	0x2000031c
 8004d1c:	40020000 	.word	0x40020000

08004d20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004d20:	b480      	push	{r7}
 8004d22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004d24:	4b06      	ldr	r3, [pc, #24]	@ (8004d40 <SystemInit+0x20>)
 8004d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d2a:	4a05      	ldr	r2, [pc, #20]	@ (8004d40 <SystemInit+0x20>)
 8004d2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004d30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004d34:	bf00      	nop
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop
 8004d40:	e000ed00 	.word	0xe000ed00

08004d44 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b087      	sub	sp, #28
 8004d48:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	613b      	str	r3, [r7, #16]
 8004d4e:	2300      	movs	r3, #0
 8004d50:	617b      	str	r3, [r7, #20]
 8004d52:	2302      	movs	r3, #2
 8004d54:	60fb      	str	r3, [r7, #12]
 8004d56:	2300      	movs	r3, #0
 8004d58:	60bb      	str	r3, [r7, #8]
 8004d5a:	2302      	movs	r3, #2
 8004d5c:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8004d5e:	4b34      	ldr	r3, [pc, #208]	@ (8004e30 <SystemCoreClockUpdate+0xec>)
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f003 030c 	and.w	r3, r3, #12
 8004d66:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	2b08      	cmp	r3, #8
 8004d6c:	d011      	beq.n	8004d92 <SystemCoreClockUpdate+0x4e>
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	2b08      	cmp	r3, #8
 8004d72:	d844      	bhi.n	8004dfe <SystemCoreClockUpdate+0xba>
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d003      	beq.n	8004d82 <SystemCoreClockUpdate+0x3e>
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	2b04      	cmp	r3, #4
 8004d7e:	d004      	beq.n	8004d8a <SystemCoreClockUpdate+0x46>
 8004d80:	e03d      	b.n	8004dfe <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8004d82:	4b2c      	ldr	r3, [pc, #176]	@ (8004e34 <SystemCoreClockUpdate+0xf0>)
 8004d84:	4a2c      	ldr	r2, [pc, #176]	@ (8004e38 <SystemCoreClockUpdate+0xf4>)
 8004d86:	601a      	str	r2, [r3, #0]
      break;
 8004d88:	e03d      	b.n	8004e06 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8004d8a:	4b2a      	ldr	r3, [pc, #168]	@ (8004e34 <SystemCoreClockUpdate+0xf0>)
 8004d8c:	4a2b      	ldr	r2, [pc, #172]	@ (8004e3c <SystemCoreClockUpdate+0xf8>)
 8004d8e:	601a      	str	r2, [r3, #0]
      break;
 8004d90:	e039      	b.n	8004e06 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8004d92:	4b27      	ldr	r3, [pc, #156]	@ (8004e30 <SystemCoreClockUpdate+0xec>)
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	0d9b      	lsrs	r3, r3, #22
 8004d98:	f003 0301 	and.w	r3, r3, #1
 8004d9c:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d9e:	4b24      	ldr	r3, [pc, #144]	@ (8004e30 <SystemCoreClockUpdate+0xec>)
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004da6:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00c      	beq.n	8004dc8 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8004dae:	4a23      	ldr	r2, [pc, #140]	@ (8004e3c <SystemCoreClockUpdate+0xf8>)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db6:	4a1e      	ldr	r2, [pc, #120]	@ (8004e30 <SystemCoreClockUpdate+0xec>)
 8004db8:	6852      	ldr	r2, [r2, #4]
 8004dba:	0992      	lsrs	r2, r2, #6
 8004dbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004dc0:	fb02 f303 	mul.w	r3, r2, r3
 8004dc4:	617b      	str	r3, [r7, #20]
 8004dc6:	e00b      	b.n	8004de0 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8004dc8:	4a1b      	ldr	r2, [pc, #108]	@ (8004e38 <SystemCoreClockUpdate+0xf4>)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dd0:	4a17      	ldr	r2, [pc, #92]	@ (8004e30 <SystemCoreClockUpdate+0xec>)
 8004dd2:	6852      	ldr	r2, [r2, #4]
 8004dd4:	0992      	lsrs	r2, r2, #6
 8004dd6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004dda:	fb02 f303 	mul.w	r3, r2, r3
 8004dde:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8004de0:	4b13      	ldr	r3, [pc, #76]	@ (8004e30 <SystemCoreClockUpdate+0xec>)
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	0c1b      	lsrs	r3, r3, #16
 8004de6:	f003 0303 	and.w	r3, r3, #3
 8004dea:	3301      	adds	r3, #1
 8004dec:	005b      	lsls	r3, r3, #1
 8004dee:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8004df0:	697a      	ldr	r2, [r7, #20]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004df8:	4a0e      	ldr	r2, [pc, #56]	@ (8004e34 <SystemCoreClockUpdate+0xf0>)
 8004dfa:	6013      	str	r3, [r2, #0]
      break;
 8004dfc:	e003      	b.n	8004e06 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8004dfe:	4b0d      	ldr	r3, [pc, #52]	@ (8004e34 <SystemCoreClockUpdate+0xf0>)
 8004e00:	4a0d      	ldr	r2, [pc, #52]	@ (8004e38 <SystemCoreClockUpdate+0xf4>)
 8004e02:	601a      	str	r2, [r3, #0]
      break;
 8004e04:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8004e06:	4b0a      	ldr	r3, [pc, #40]	@ (8004e30 <SystemCoreClockUpdate+0xec>)
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	091b      	lsrs	r3, r3, #4
 8004e0c:	f003 030f 	and.w	r3, r3, #15
 8004e10:	4a0b      	ldr	r2, [pc, #44]	@ (8004e40 <SystemCoreClockUpdate+0xfc>)
 8004e12:	5cd3      	ldrb	r3, [r2, r3]
 8004e14:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8004e16:	4b07      	ldr	r3, [pc, #28]	@ (8004e34 <SystemCoreClockUpdate+0xf0>)
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8004e20:	4a04      	ldr	r2, [pc, #16]	@ (8004e34 <SystemCoreClockUpdate+0xf0>)
 8004e22:	6013      	str	r3, [r2, #0]
}
 8004e24:	bf00      	nop
 8004e26:	371c      	adds	r7, #28
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr
 8004e30:	40023800 	.word	0x40023800
 8004e34:	20000000 	.word	0x20000000
 8004e38:	00f42400 	.word	0x00f42400
 8004e3c:	017d7840 	.word	0x017d7840
 8004e40:	08005df8 	.word	0x08005df8

08004e44 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004e44:	480d      	ldr	r0, [pc, #52]	@ (8004e7c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004e46:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004e48:	f7ff ff6a 	bl	8004d20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004e4c:	480c      	ldr	r0, [pc, #48]	@ (8004e80 <LoopForever+0x6>)
  ldr r1, =_edata
 8004e4e:	490d      	ldr	r1, [pc, #52]	@ (8004e84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004e50:	4a0d      	ldr	r2, [pc, #52]	@ (8004e88 <LoopForever+0xe>)
  movs r3, #0
 8004e52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004e54:	e002      	b.n	8004e5c <LoopCopyDataInit>

08004e56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004e56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004e58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004e5a:	3304      	adds	r3, #4

08004e5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004e5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004e5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004e60:	d3f9      	bcc.n	8004e56 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004e62:	4a0a      	ldr	r2, [pc, #40]	@ (8004e8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004e64:	4c0a      	ldr	r4, [pc, #40]	@ (8004e90 <LoopForever+0x16>)
  movs r3, #0
 8004e66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004e68:	e001      	b.n	8004e6e <LoopFillZerobss>

08004e6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004e6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004e6c:	3204      	adds	r2, #4

08004e6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004e6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004e70:	d3fb      	bcc.n	8004e6a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004e72:	f000 f811 	bl	8004e98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004e76:	f7ff feaf 	bl	8004bd8 <main>

08004e7a <LoopForever>:

LoopForever:
  b LoopForever
 8004e7a:	e7fe      	b.n	8004e7a <LoopForever>
  ldr   r0, =_estack
 8004e7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004e80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004e84:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8004e88:	080061e0 	.word	0x080061e0
  ldr r2, =_sbss
 8004e8c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8004e90:	2000033c 	.word	0x2000033c

08004e94 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004e94:	e7fe      	b.n	8004e94 <ADC_IRQHandler>
	...

08004e98 <__libc_init_array>:
 8004e98:	b570      	push	{r4, r5, r6, lr}
 8004e9a:	4d0d      	ldr	r5, [pc, #52]	@ (8004ed0 <__libc_init_array+0x38>)
 8004e9c:	4c0d      	ldr	r4, [pc, #52]	@ (8004ed4 <__libc_init_array+0x3c>)
 8004e9e:	1b64      	subs	r4, r4, r5
 8004ea0:	10a4      	asrs	r4, r4, #2
 8004ea2:	2600      	movs	r6, #0
 8004ea4:	42a6      	cmp	r6, r4
 8004ea6:	d109      	bne.n	8004ebc <__libc_init_array+0x24>
 8004ea8:	4d0b      	ldr	r5, [pc, #44]	@ (8004ed8 <__libc_init_array+0x40>)
 8004eaa:	4c0c      	ldr	r4, [pc, #48]	@ (8004edc <__libc_init_array+0x44>)
 8004eac:	f000 fd96 	bl	80059dc <_init>
 8004eb0:	1b64      	subs	r4, r4, r5
 8004eb2:	10a4      	asrs	r4, r4, #2
 8004eb4:	2600      	movs	r6, #0
 8004eb6:	42a6      	cmp	r6, r4
 8004eb8:	d105      	bne.n	8004ec6 <__libc_init_array+0x2e>
 8004eba:	bd70      	pop	{r4, r5, r6, pc}
 8004ebc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ec0:	4798      	blx	r3
 8004ec2:	3601      	adds	r6, #1
 8004ec4:	e7ee      	b.n	8004ea4 <__libc_init_array+0xc>
 8004ec6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004eca:	4798      	blx	r3
 8004ecc:	3601      	adds	r6, #1
 8004ece:	e7f2      	b.n	8004eb6 <__libc_init_array+0x1e>
 8004ed0:	080061d8 	.word	0x080061d8
 8004ed4:	080061d8 	.word	0x080061d8
 8004ed8:	080061d8 	.word	0x080061d8
 8004edc:	080061dc 	.word	0x080061dc

08004ee0 <cosf>:
 8004ee0:	ee10 3a10 	vmov	r3, s0
 8004ee4:	b507      	push	{r0, r1, r2, lr}
 8004ee6:	4a1e      	ldr	r2, [pc, #120]	@ (8004f60 <cosf+0x80>)
 8004ee8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d806      	bhi.n	8004efe <cosf+0x1e>
 8004ef0:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8004f64 <cosf+0x84>
 8004ef4:	b003      	add	sp, #12
 8004ef6:	f85d eb04 	ldr.w	lr, [sp], #4
 8004efa:	f000 b883 	b.w	8005004 <__kernel_cosf>
 8004efe:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8004f02:	d304      	bcc.n	8004f0e <cosf+0x2e>
 8004f04:	ee30 0a40 	vsub.f32	s0, s0, s0
 8004f08:	b003      	add	sp, #12
 8004f0a:	f85d fb04 	ldr.w	pc, [sp], #4
 8004f0e:	4668      	mov	r0, sp
 8004f10:	f000 f918 	bl	8005144 <__ieee754_rem_pio2f>
 8004f14:	f000 0003 	and.w	r0, r0, #3
 8004f18:	2801      	cmp	r0, #1
 8004f1a:	d009      	beq.n	8004f30 <cosf+0x50>
 8004f1c:	2802      	cmp	r0, #2
 8004f1e:	d010      	beq.n	8004f42 <cosf+0x62>
 8004f20:	b9b0      	cbnz	r0, 8004f50 <cosf+0x70>
 8004f22:	eddd 0a01 	vldr	s1, [sp, #4]
 8004f26:	ed9d 0a00 	vldr	s0, [sp]
 8004f2a:	f000 f86b 	bl	8005004 <__kernel_cosf>
 8004f2e:	e7eb      	b.n	8004f08 <cosf+0x28>
 8004f30:	eddd 0a01 	vldr	s1, [sp, #4]
 8004f34:	ed9d 0a00 	vldr	s0, [sp]
 8004f38:	f000 f8bc 	bl	80050b4 <__kernel_sinf>
 8004f3c:	eeb1 0a40 	vneg.f32	s0, s0
 8004f40:	e7e2      	b.n	8004f08 <cosf+0x28>
 8004f42:	eddd 0a01 	vldr	s1, [sp, #4]
 8004f46:	ed9d 0a00 	vldr	s0, [sp]
 8004f4a:	f000 f85b 	bl	8005004 <__kernel_cosf>
 8004f4e:	e7f5      	b.n	8004f3c <cosf+0x5c>
 8004f50:	eddd 0a01 	vldr	s1, [sp, #4]
 8004f54:	ed9d 0a00 	vldr	s0, [sp]
 8004f58:	2001      	movs	r0, #1
 8004f5a:	f000 f8ab 	bl	80050b4 <__kernel_sinf>
 8004f5e:	e7d3      	b.n	8004f08 <cosf+0x28>
 8004f60:	3f490fd8 	.word	0x3f490fd8
 8004f64:	00000000 	.word	0x00000000

08004f68 <fabsf>:
 8004f68:	ee10 3a10 	vmov	r3, s0
 8004f6c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004f70:	ee00 3a10 	vmov	s0, r3
 8004f74:	4770      	bx	lr
	...

08004f78 <sinf>:
 8004f78:	ee10 3a10 	vmov	r3, s0
 8004f7c:	b507      	push	{r0, r1, r2, lr}
 8004f7e:	4a1f      	ldr	r2, [pc, #124]	@ (8004ffc <sinf+0x84>)
 8004f80:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d807      	bhi.n	8004f98 <sinf+0x20>
 8004f88:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8005000 <sinf+0x88>
 8004f8c:	2000      	movs	r0, #0
 8004f8e:	b003      	add	sp, #12
 8004f90:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f94:	f000 b88e 	b.w	80050b4 <__kernel_sinf>
 8004f98:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8004f9c:	d304      	bcc.n	8004fa8 <sinf+0x30>
 8004f9e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8004fa2:	b003      	add	sp, #12
 8004fa4:	f85d fb04 	ldr.w	pc, [sp], #4
 8004fa8:	4668      	mov	r0, sp
 8004faa:	f000 f8cb 	bl	8005144 <__ieee754_rem_pio2f>
 8004fae:	f000 0003 	and.w	r0, r0, #3
 8004fb2:	2801      	cmp	r0, #1
 8004fb4:	d00a      	beq.n	8004fcc <sinf+0x54>
 8004fb6:	2802      	cmp	r0, #2
 8004fb8:	d00f      	beq.n	8004fda <sinf+0x62>
 8004fba:	b9c0      	cbnz	r0, 8004fee <sinf+0x76>
 8004fbc:	eddd 0a01 	vldr	s1, [sp, #4]
 8004fc0:	ed9d 0a00 	vldr	s0, [sp]
 8004fc4:	2001      	movs	r0, #1
 8004fc6:	f000 f875 	bl	80050b4 <__kernel_sinf>
 8004fca:	e7ea      	b.n	8004fa2 <sinf+0x2a>
 8004fcc:	eddd 0a01 	vldr	s1, [sp, #4]
 8004fd0:	ed9d 0a00 	vldr	s0, [sp]
 8004fd4:	f000 f816 	bl	8005004 <__kernel_cosf>
 8004fd8:	e7e3      	b.n	8004fa2 <sinf+0x2a>
 8004fda:	eddd 0a01 	vldr	s1, [sp, #4]
 8004fde:	ed9d 0a00 	vldr	s0, [sp]
 8004fe2:	2001      	movs	r0, #1
 8004fe4:	f000 f866 	bl	80050b4 <__kernel_sinf>
 8004fe8:	eeb1 0a40 	vneg.f32	s0, s0
 8004fec:	e7d9      	b.n	8004fa2 <sinf+0x2a>
 8004fee:	eddd 0a01 	vldr	s1, [sp, #4]
 8004ff2:	ed9d 0a00 	vldr	s0, [sp]
 8004ff6:	f000 f805 	bl	8005004 <__kernel_cosf>
 8004ffa:	e7f5      	b.n	8004fe8 <sinf+0x70>
 8004ffc:	3f490fd8 	.word	0x3f490fd8
 8005000:	00000000 	.word	0x00000000

08005004 <__kernel_cosf>:
 8005004:	ee10 3a10 	vmov	r3, s0
 8005008:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800500c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8005010:	eef0 6a40 	vmov.f32	s13, s0
 8005014:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8005018:	d204      	bcs.n	8005024 <__kernel_cosf+0x20>
 800501a:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800501e:	ee17 2a90 	vmov	r2, s15
 8005022:	b342      	cbz	r2, 8005076 <__kernel_cosf+0x72>
 8005024:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8005028:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8005094 <__kernel_cosf+0x90>
 800502c:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8005098 <__kernel_cosf+0x94>
 8005030:	4a1a      	ldr	r2, [pc, #104]	@ (800509c <__kernel_cosf+0x98>)
 8005032:	eea7 6a27 	vfma.f32	s12, s14, s15
 8005036:	4293      	cmp	r3, r2
 8005038:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80050a0 <__kernel_cosf+0x9c>
 800503c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005040:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 80050a4 <__kernel_cosf+0xa0>
 8005044:	eea7 6a87 	vfma.f32	s12, s15, s14
 8005048:	eddf 7a17 	vldr	s15, [pc, #92]	@ 80050a8 <__kernel_cosf+0xa4>
 800504c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005050:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 80050ac <__kernel_cosf+0xa8>
 8005054:	eea7 6a87 	vfma.f32	s12, s15, s14
 8005058:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800505c:	ee26 6a07 	vmul.f32	s12, s12, s14
 8005060:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8005064:	eee7 0a06 	vfma.f32	s1, s14, s12
 8005068:	ee67 7a27 	vmul.f32	s15, s14, s15
 800506c:	d804      	bhi.n	8005078 <__kernel_cosf+0x74>
 800506e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8005072:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005076:	4770      	bx	lr
 8005078:	4a0d      	ldr	r2, [pc, #52]	@ (80050b0 <__kernel_cosf+0xac>)
 800507a:	4293      	cmp	r3, r2
 800507c:	bf9a      	itte	ls
 800507e:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8005082:	ee07 3a10 	vmovls	s14, r3
 8005086:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800508a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800508e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005092:	e7ec      	b.n	800506e <__kernel_cosf+0x6a>
 8005094:	ad47d74e 	.word	0xad47d74e
 8005098:	310f74f6 	.word	0x310f74f6
 800509c:	3e999999 	.word	0x3e999999
 80050a0:	b493f27c 	.word	0xb493f27c
 80050a4:	37d00d01 	.word	0x37d00d01
 80050a8:	bab60b61 	.word	0xbab60b61
 80050ac:	3d2aaaab 	.word	0x3d2aaaab
 80050b0:	3f480000 	.word	0x3f480000

080050b4 <__kernel_sinf>:
 80050b4:	ee10 3a10 	vmov	r3, s0
 80050b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80050bc:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80050c0:	d204      	bcs.n	80050cc <__kernel_sinf+0x18>
 80050c2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80050c6:	ee17 3a90 	vmov	r3, s15
 80050ca:	b35b      	cbz	r3, 8005124 <__kernel_sinf+0x70>
 80050cc:	ee20 7a00 	vmul.f32	s14, s0, s0
 80050d0:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8005128 <__kernel_sinf+0x74>
 80050d4:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800512c <__kernel_sinf+0x78>
 80050d8:	eea7 6a27 	vfma.f32	s12, s14, s15
 80050dc:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8005130 <__kernel_sinf+0x7c>
 80050e0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80050e4:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8005134 <__kernel_sinf+0x80>
 80050e8:	eea7 6a87 	vfma.f32	s12, s15, s14
 80050ec:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8005138 <__kernel_sinf+0x84>
 80050f0:	ee60 6a07 	vmul.f32	s13, s0, s14
 80050f4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80050f8:	b930      	cbnz	r0, 8005108 <__kernel_sinf+0x54>
 80050fa:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800513c <__kernel_sinf+0x88>
 80050fe:	eea7 6a27 	vfma.f32	s12, s14, s15
 8005102:	eea6 0a26 	vfma.f32	s0, s12, s13
 8005106:	4770      	bx	lr
 8005108:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800510c:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8005110:	eee0 7a86 	vfma.f32	s15, s1, s12
 8005114:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8005118:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8005140 <__kernel_sinf+0x8c>
 800511c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8005120:	ee30 0a60 	vsub.f32	s0, s0, s1
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	2f2ec9d3 	.word	0x2f2ec9d3
 800512c:	b2d72f34 	.word	0xb2d72f34
 8005130:	3638ef1b 	.word	0x3638ef1b
 8005134:	b9500d01 	.word	0xb9500d01
 8005138:	3c088889 	.word	0x3c088889
 800513c:	be2aaaab 	.word	0xbe2aaaab
 8005140:	3e2aaaab 	.word	0x3e2aaaab

08005144 <__ieee754_rem_pio2f>:
 8005144:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005146:	ee10 6a10 	vmov	r6, s0
 800514a:	4b88      	ldr	r3, [pc, #544]	@ (800536c <__ieee754_rem_pio2f+0x228>)
 800514c:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8005150:	429d      	cmp	r5, r3
 8005152:	b087      	sub	sp, #28
 8005154:	4604      	mov	r4, r0
 8005156:	d805      	bhi.n	8005164 <__ieee754_rem_pio2f+0x20>
 8005158:	2300      	movs	r3, #0
 800515a:	ed80 0a00 	vstr	s0, [r0]
 800515e:	6043      	str	r3, [r0, #4]
 8005160:	2000      	movs	r0, #0
 8005162:	e022      	b.n	80051aa <__ieee754_rem_pio2f+0x66>
 8005164:	4b82      	ldr	r3, [pc, #520]	@ (8005370 <__ieee754_rem_pio2f+0x22c>)
 8005166:	429d      	cmp	r5, r3
 8005168:	d83a      	bhi.n	80051e0 <__ieee754_rem_pio2f+0x9c>
 800516a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800516e:	2e00      	cmp	r6, #0
 8005170:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8005374 <__ieee754_rem_pio2f+0x230>
 8005174:	4a80      	ldr	r2, [pc, #512]	@ (8005378 <__ieee754_rem_pio2f+0x234>)
 8005176:	f023 030f 	bic.w	r3, r3, #15
 800517a:	dd18      	ble.n	80051ae <__ieee754_rem_pio2f+0x6a>
 800517c:	4293      	cmp	r3, r2
 800517e:	ee70 7a47 	vsub.f32	s15, s0, s14
 8005182:	bf09      	itett	eq
 8005184:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800537c <__ieee754_rem_pio2f+0x238>
 8005188:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8005380 <__ieee754_rem_pio2f+0x23c>
 800518c:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8005384 <__ieee754_rem_pio2f+0x240>
 8005190:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8005194:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8005198:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800519c:	ed80 7a00 	vstr	s14, [r0]
 80051a0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80051a4:	edc0 7a01 	vstr	s15, [r0, #4]
 80051a8:	2001      	movs	r0, #1
 80051aa:	b007      	add	sp, #28
 80051ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051ae:	4293      	cmp	r3, r2
 80051b0:	ee70 7a07 	vadd.f32	s15, s0, s14
 80051b4:	bf09      	itett	eq
 80051b6:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800537c <__ieee754_rem_pio2f+0x238>
 80051ba:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8005380 <__ieee754_rem_pio2f+0x23c>
 80051be:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8005384 <__ieee754_rem_pio2f+0x240>
 80051c2:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80051c6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80051ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80051ce:	ed80 7a00 	vstr	s14, [r0]
 80051d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051d6:	edc0 7a01 	vstr	s15, [r0, #4]
 80051da:	f04f 30ff 	mov.w	r0, #4294967295
 80051de:	e7e4      	b.n	80051aa <__ieee754_rem_pio2f+0x66>
 80051e0:	4b69      	ldr	r3, [pc, #420]	@ (8005388 <__ieee754_rem_pio2f+0x244>)
 80051e2:	429d      	cmp	r5, r3
 80051e4:	d873      	bhi.n	80052ce <__ieee754_rem_pio2f+0x18a>
 80051e6:	f7ff febf 	bl	8004f68 <fabsf>
 80051ea:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800538c <__ieee754_rem_pio2f+0x248>
 80051ee:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80051f2:	eee0 7a07 	vfma.f32	s15, s0, s14
 80051f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80051fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80051fe:	ee17 0a90 	vmov	r0, s15
 8005202:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8005374 <__ieee754_rem_pio2f+0x230>
 8005206:	eea7 0a67 	vfms.f32	s0, s14, s15
 800520a:	281f      	cmp	r0, #31
 800520c:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8005380 <__ieee754_rem_pio2f+0x23c>
 8005210:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005214:	eeb1 6a47 	vneg.f32	s12, s14
 8005218:	ee70 6a67 	vsub.f32	s13, s0, s15
 800521c:	ee16 1a90 	vmov	r1, s13
 8005220:	dc09      	bgt.n	8005236 <__ieee754_rem_pio2f+0xf2>
 8005222:	4a5b      	ldr	r2, [pc, #364]	@ (8005390 <__ieee754_rem_pio2f+0x24c>)
 8005224:	1e47      	subs	r7, r0, #1
 8005226:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800522a:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800522e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005232:	4293      	cmp	r3, r2
 8005234:	d107      	bne.n	8005246 <__ieee754_rem_pio2f+0x102>
 8005236:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800523a:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800523e:	2a08      	cmp	r2, #8
 8005240:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8005244:	dc14      	bgt.n	8005270 <__ieee754_rem_pio2f+0x12c>
 8005246:	6021      	str	r1, [r4, #0]
 8005248:	ed94 7a00 	vldr	s14, [r4]
 800524c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8005250:	2e00      	cmp	r6, #0
 8005252:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005256:	ed84 0a01 	vstr	s0, [r4, #4]
 800525a:	daa6      	bge.n	80051aa <__ieee754_rem_pio2f+0x66>
 800525c:	eeb1 7a47 	vneg.f32	s14, s14
 8005260:	eeb1 0a40 	vneg.f32	s0, s0
 8005264:	ed84 7a00 	vstr	s14, [r4]
 8005268:	ed84 0a01 	vstr	s0, [r4, #4]
 800526c:	4240      	negs	r0, r0
 800526e:	e79c      	b.n	80051aa <__ieee754_rem_pio2f+0x66>
 8005270:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800537c <__ieee754_rem_pio2f+0x238>
 8005274:	eef0 6a40 	vmov.f32	s13, s0
 8005278:	eee6 6a25 	vfma.f32	s13, s12, s11
 800527c:	ee70 7a66 	vsub.f32	s15, s0, s13
 8005280:	eee6 7a25 	vfma.f32	s15, s12, s11
 8005284:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005384 <__ieee754_rem_pio2f+0x240>
 8005288:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800528c:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8005290:	ee15 2a90 	vmov	r2, s11
 8005294:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8005298:	1a5b      	subs	r3, r3, r1
 800529a:	2b19      	cmp	r3, #25
 800529c:	dc04      	bgt.n	80052a8 <__ieee754_rem_pio2f+0x164>
 800529e:	edc4 5a00 	vstr	s11, [r4]
 80052a2:	eeb0 0a66 	vmov.f32	s0, s13
 80052a6:	e7cf      	b.n	8005248 <__ieee754_rem_pio2f+0x104>
 80052a8:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8005394 <__ieee754_rem_pio2f+0x250>
 80052ac:	eeb0 0a66 	vmov.f32	s0, s13
 80052b0:	eea6 0a25 	vfma.f32	s0, s12, s11
 80052b4:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80052b8:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8005398 <__ieee754_rem_pio2f+0x254>
 80052bc:	eee6 7a25 	vfma.f32	s15, s12, s11
 80052c0:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80052c4:	ee30 7a67 	vsub.f32	s14, s0, s15
 80052c8:	ed84 7a00 	vstr	s14, [r4]
 80052cc:	e7bc      	b.n	8005248 <__ieee754_rem_pio2f+0x104>
 80052ce:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 80052d2:	d306      	bcc.n	80052e2 <__ieee754_rem_pio2f+0x19e>
 80052d4:	ee70 7a40 	vsub.f32	s15, s0, s0
 80052d8:	edc0 7a01 	vstr	s15, [r0, #4]
 80052dc:	edc0 7a00 	vstr	s15, [r0]
 80052e0:	e73e      	b.n	8005160 <__ieee754_rem_pio2f+0x1c>
 80052e2:	15ea      	asrs	r2, r5, #23
 80052e4:	3a86      	subs	r2, #134	@ 0x86
 80052e6:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80052ea:	ee07 3a90 	vmov	s15, r3
 80052ee:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80052f2:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800539c <__ieee754_rem_pio2f+0x258>
 80052f6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80052fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80052fe:	ed8d 7a03 	vstr	s14, [sp, #12]
 8005302:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005306:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800530a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800530e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005312:	ed8d 7a04 	vstr	s14, [sp, #16]
 8005316:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800531a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800531e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005322:	edcd 7a05 	vstr	s15, [sp, #20]
 8005326:	d11e      	bne.n	8005366 <__ieee754_rem_pio2f+0x222>
 8005328:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800532c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005330:	bf0c      	ite	eq
 8005332:	2301      	moveq	r3, #1
 8005334:	2302      	movne	r3, #2
 8005336:	491a      	ldr	r1, [pc, #104]	@ (80053a0 <__ieee754_rem_pio2f+0x25c>)
 8005338:	9101      	str	r1, [sp, #4]
 800533a:	2102      	movs	r1, #2
 800533c:	9100      	str	r1, [sp, #0]
 800533e:	a803      	add	r0, sp, #12
 8005340:	4621      	mov	r1, r4
 8005342:	f000 f895 	bl	8005470 <__kernel_rem_pio2f>
 8005346:	2e00      	cmp	r6, #0
 8005348:	f6bf af2f 	bge.w	80051aa <__ieee754_rem_pio2f+0x66>
 800534c:	edd4 7a00 	vldr	s15, [r4]
 8005350:	eef1 7a67 	vneg.f32	s15, s15
 8005354:	edc4 7a00 	vstr	s15, [r4]
 8005358:	edd4 7a01 	vldr	s15, [r4, #4]
 800535c:	eef1 7a67 	vneg.f32	s15, s15
 8005360:	edc4 7a01 	vstr	s15, [r4, #4]
 8005364:	e782      	b.n	800526c <__ieee754_rem_pio2f+0x128>
 8005366:	2303      	movs	r3, #3
 8005368:	e7e5      	b.n	8005336 <__ieee754_rem_pio2f+0x1f2>
 800536a:	bf00      	nop
 800536c:	3f490fd8 	.word	0x3f490fd8
 8005370:	4016cbe3 	.word	0x4016cbe3
 8005374:	3fc90f80 	.word	0x3fc90f80
 8005378:	3fc90fd0 	.word	0x3fc90fd0
 800537c:	37354400 	.word	0x37354400
 8005380:	37354443 	.word	0x37354443
 8005384:	2e85a308 	.word	0x2e85a308
 8005388:	43490f80 	.word	0x43490f80
 800538c:	3f22f984 	.word	0x3f22f984
 8005390:	08005e08 	.word	0x08005e08
 8005394:	2e85a300 	.word	0x2e85a300
 8005398:	248d3132 	.word	0x248d3132
 800539c:	43800000 	.word	0x43800000
 80053a0:	08005e88 	.word	0x08005e88

080053a4 <scalbnf>:
 80053a4:	ee10 3a10 	vmov	r3, s0
 80053a8:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80053ac:	d02b      	beq.n	8005406 <scalbnf+0x62>
 80053ae:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80053b2:	d302      	bcc.n	80053ba <scalbnf+0x16>
 80053b4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80053b8:	4770      	bx	lr
 80053ba:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80053be:	d123      	bne.n	8005408 <scalbnf+0x64>
 80053c0:	4b24      	ldr	r3, [pc, #144]	@ (8005454 <scalbnf+0xb0>)
 80053c2:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8005458 <scalbnf+0xb4>
 80053c6:	4298      	cmp	r0, r3
 80053c8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80053cc:	db17      	blt.n	80053fe <scalbnf+0x5a>
 80053ce:	ee10 3a10 	vmov	r3, s0
 80053d2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80053d6:	3a19      	subs	r2, #25
 80053d8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80053dc:	4288      	cmp	r0, r1
 80053de:	dd15      	ble.n	800540c <scalbnf+0x68>
 80053e0:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800545c <scalbnf+0xb8>
 80053e4:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8005460 <scalbnf+0xbc>
 80053e8:	ee10 3a10 	vmov	r3, s0
 80053ec:	eeb0 7a67 	vmov.f32	s14, s15
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	bfb8      	it	lt
 80053f4:	eef0 7a66 	vmovlt.f32	s15, s13
 80053f8:	ee27 0a87 	vmul.f32	s0, s15, s14
 80053fc:	4770      	bx	lr
 80053fe:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8005464 <scalbnf+0xc0>
 8005402:	ee27 0a80 	vmul.f32	s0, s15, s0
 8005406:	4770      	bx	lr
 8005408:	0dd2      	lsrs	r2, r2, #23
 800540a:	e7e5      	b.n	80053d8 <scalbnf+0x34>
 800540c:	4410      	add	r0, r2
 800540e:	28fe      	cmp	r0, #254	@ 0xfe
 8005410:	dce6      	bgt.n	80053e0 <scalbnf+0x3c>
 8005412:	2800      	cmp	r0, #0
 8005414:	dd06      	ble.n	8005424 <scalbnf+0x80>
 8005416:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800541a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800541e:	ee00 3a10 	vmov	s0, r3
 8005422:	4770      	bx	lr
 8005424:	f110 0f16 	cmn.w	r0, #22
 8005428:	da09      	bge.n	800543e <scalbnf+0x9a>
 800542a:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8005464 <scalbnf+0xc0>
 800542e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8005468 <scalbnf+0xc4>
 8005432:	ee10 3a10 	vmov	r3, s0
 8005436:	eeb0 7a67 	vmov.f32	s14, s15
 800543a:	2b00      	cmp	r3, #0
 800543c:	e7d9      	b.n	80053f2 <scalbnf+0x4e>
 800543e:	3019      	adds	r0, #25
 8005440:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8005444:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8005448:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800546c <scalbnf+0xc8>
 800544c:	ee07 3a90 	vmov	s15, r3
 8005450:	e7d7      	b.n	8005402 <scalbnf+0x5e>
 8005452:	bf00      	nop
 8005454:	ffff3cb0 	.word	0xffff3cb0
 8005458:	4c000000 	.word	0x4c000000
 800545c:	7149f2ca 	.word	0x7149f2ca
 8005460:	f149f2ca 	.word	0xf149f2ca
 8005464:	0da24260 	.word	0x0da24260
 8005468:	8da24260 	.word	0x8da24260
 800546c:	33000000 	.word	0x33000000

08005470 <__kernel_rem_pio2f>:
 8005470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005474:	ed2d 8b04 	vpush	{d8-d9}
 8005478:	b0d9      	sub	sp, #356	@ 0x164
 800547a:	4690      	mov	r8, r2
 800547c:	9001      	str	r0, [sp, #4]
 800547e:	4ab9      	ldr	r2, [pc, #740]	@ (8005764 <__kernel_rem_pio2f+0x2f4>)
 8005480:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8005482:	f118 0f04 	cmn.w	r8, #4
 8005486:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800548a:	460f      	mov	r7, r1
 800548c:	f103 3bff 	add.w	fp, r3, #4294967295
 8005490:	db27      	blt.n	80054e2 <__kernel_rem_pio2f+0x72>
 8005492:	f1b8 0203 	subs.w	r2, r8, #3
 8005496:	bf48      	it	mi
 8005498:	f108 0204 	addmi.w	r2, r8, #4
 800549c:	10d2      	asrs	r2, r2, #3
 800549e:	1c55      	adds	r5, r2, #1
 80054a0:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80054a2:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8005774 <__kernel_rem_pio2f+0x304>
 80054a6:	00e8      	lsls	r0, r5, #3
 80054a8:	eba2 060b 	sub.w	r6, r2, fp
 80054ac:	9002      	str	r0, [sp, #8]
 80054ae:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 80054b2:	eb0a 0c0b 	add.w	ip, sl, fp
 80054b6:	ac1c      	add	r4, sp, #112	@ 0x70
 80054b8:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 80054bc:	2000      	movs	r0, #0
 80054be:	4560      	cmp	r0, ip
 80054c0:	dd11      	ble.n	80054e6 <__kernel_rem_pio2f+0x76>
 80054c2:	a91c      	add	r1, sp, #112	@ 0x70
 80054c4:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 80054c8:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 80054cc:	f04f 0c00 	mov.w	ip, #0
 80054d0:	45d4      	cmp	ip, sl
 80054d2:	dc27      	bgt.n	8005524 <__kernel_rem_pio2f+0xb4>
 80054d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80054d8:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 8005774 <__kernel_rem_pio2f+0x304>
 80054dc:	4606      	mov	r6, r0
 80054de:	2400      	movs	r4, #0
 80054e0:	e016      	b.n	8005510 <__kernel_rem_pio2f+0xa0>
 80054e2:	2200      	movs	r2, #0
 80054e4:	e7db      	b.n	800549e <__kernel_rem_pio2f+0x2e>
 80054e6:	42c6      	cmn	r6, r0
 80054e8:	bf5d      	ittte	pl
 80054ea:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 80054ee:	ee07 1a90 	vmovpl	s15, r1
 80054f2:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80054f6:	eef0 7a47 	vmovmi.f32	s15, s14
 80054fa:	ece4 7a01 	vstmia	r4!, {s15}
 80054fe:	3001      	adds	r0, #1
 8005500:	e7dd      	b.n	80054be <__kernel_rem_pio2f+0x4e>
 8005502:	ecfe 6a01 	vldmia	lr!, {s13}
 8005506:	ed96 7a00 	vldr	s14, [r6]
 800550a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800550e:	3401      	adds	r4, #1
 8005510:	455c      	cmp	r4, fp
 8005512:	f1a6 0604 	sub.w	r6, r6, #4
 8005516:	ddf4      	ble.n	8005502 <__kernel_rem_pio2f+0x92>
 8005518:	ece9 7a01 	vstmia	r9!, {s15}
 800551c:	f10c 0c01 	add.w	ip, ip, #1
 8005520:	3004      	adds	r0, #4
 8005522:	e7d5      	b.n	80054d0 <__kernel_rem_pio2f+0x60>
 8005524:	a908      	add	r1, sp, #32
 8005526:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800552a:	9104      	str	r1, [sp, #16]
 800552c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800552e:	eddf 8a90 	vldr	s17, [pc, #576]	@ 8005770 <__kernel_rem_pio2f+0x300>
 8005532:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 800576c <__kernel_rem_pio2f+0x2fc>
 8005536:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800553a:	9203      	str	r2, [sp, #12]
 800553c:	4654      	mov	r4, sl
 800553e:	00a2      	lsls	r2, r4, #2
 8005540:	9205      	str	r2, [sp, #20]
 8005542:	aa58      	add	r2, sp, #352	@ 0x160
 8005544:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8005548:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800554c:	a944      	add	r1, sp, #272	@ 0x110
 800554e:	aa08      	add	r2, sp, #32
 8005550:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8005554:	4694      	mov	ip, r2
 8005556:	4626      	mov	r6, r4
 8005558:	2e00      	cmp	r6, #0
 800555a:	f1a0 0004 	sub.w	r0, r0, #4
 800555e:	dc4c      	bgt.n	80055fa <__kernel_rem_pio2f+0x18a>
 8005560:	4628      	mov	r0, r5
 8005562:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005566:	f7ff ff1d 	bl	80053a4 <scalbnf>
 800556a:	eeb0 8a40 	vmov.f32	s16, s0
 800556e:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8005572:	ee28 0a00 	vmul.f32	s0, s16, s0
 8005576:	f000 f9ed 	bl	8005954 <floorf>
 800557a:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800557e:	eea0 8a67 	vfms.f32	s16, s0, s15
 8005582:	2d00      	cmp	r5, #0
 8005584:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005588:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800558c:	ee17 9a90 	vmov	r9, s15
 8005590:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005594:	ee38 8a67 	vsub.f32	s16, s16, s15
 8005598:	dd41      	ble.n	800561e <__kernel_rem_pio2f+0x1ae>
 800559a:	f104 3cff 	add.w	ip, r4, #4294967295
 800559e:	a908      	add	r1, sp, #32
 80055a0:	f1c5 0e08 	rsb	lr, r5, #8
 80055a4:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 80055a8:	fa46 f00e 	asr.w	r0, r6, lr
 80055ac:	4481      	add	r9, r0
 80055ae:	fa00 f00e 	lsl.w	r0, r0, lr
 80055b2:	1a36      	subs	r6, r6, r0
 80055b4:	f1c5 0007 	rsb	r0, r5, #7
 80055b8:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 80055bc:	4106      	asrs	r6, r0
 80055be:	2e00      	cmp	r6, #0
 80055c0:	dd3c      	ble.n	800563c <__kernel_rem_pio2f+0x1cc>
 80055c2:	f04f 0e00 	mov.w	lr, #0
 80055c6:	f109 0901 	add.w	r9, r9, #1
 80055ca:	4670      	mov	r0, lr
 80055cc:	4574      	cmp	r4, lr
 80055ce:	dc68      	bgt.n	80056a2 <__kernel_rem_pio2f+0x232>
 80055d0:	2d00      	cmp	r5, #0
 80055d2:	dd03      	ble.n	80055dc <__kernel_rem_pio2f+0x16c>
 80055d4:	2d01      	cmp	r5, #1
 80055d6:	d074      	beq.n	80056c2 <__kernel_rem_pio2f+0x252>
 80055d8:	2d02      	cmp	r5, #2
 80055da:	d07d      	beq.n	80056d8 <__kernel_rem_pio2f+0x268>
 80055dc:	2e02      	cmp	r6, #2
 80055de:	d12d      	bne.n	800563c <__kernel_rem_pio2f+0x1cc>
 80055e0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80055e4:	ee30 8a48 	vsub.f32	s16, s0, s16
 80055e8:	b340      	cbz	r0, 800563c <__kernel_rem_pio2f+0x1cc>
 80055ea:	4628      	mov	r0, r5
 80055ec:	9306      	str	r3, [sp, #24]
 80055ee:	f7ff fed9 	bl	80053a4 <scalbnf>
 80055f2:	9b06      	ldr	r3, [sp, #24]
 80055f4:	ee38 8a40 	vsub.f32	s16, s16, s0
 80055f8:	e020      	b.n	800563c <__kernel_rem_pio2f+0x1cc>
 80055fa:	ee60 7a28 	vmul.f32	s15, s0, s17
 80055fe:	3e01      	subs	r6, #1
 8005600:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005604:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005608:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800560c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005610:	ecac 0a01 	vstmia	ip!, {s0}
 8005614:	ed90 0a00 	vldr	s0, [r0]
 8005618:	ee37 0a80 	vadd.f32	s0, s15, s0
 800561c:	e79c      	b.n	8005558 <__kernel_rem_pio2f+0xe8>
 800561e:	d105      	bne.n	800562c <__kernel_rem_pio2f+0x1bc>
 8005620:	1e60      	subs	r0, r4, #1
 8005622:	a908      	add	r1, sp, #32
 8005624:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8005628:	11f6      	asrs	r6, r6, #7
 800562a:	e7c8      	b.n	80055be <__kernel_rem_pio2f+0x14e>
 800562c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8005630:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005638:	da31      	bge.n	800569e <__kernel_rem_pio2f+0x22e>
 800563a:	2600      	movs	r6, #0
 800563c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8005640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005644:	f040 8098 	bne.w	8005778 <__kernel_rem_pio2f+0x308>
 8005648:	1e60      	subs	r0, r4, #1
 800564a:	2200      	movs	r2, #0
 800564c:	4550      	cmp	r0, sl
 800564e:	da4b      	bge.n	80056e8 <__kernel_rem_pio2f+0x278>
 8005650:	2a00      	cmp	r2, #0
 8005652:	d065      	beq.n	8005720 <__kernel_rem_pio2f+0x2b0>
 8005654:	3c01      	subs	r4, #1
 8005656:	ab08      	add	r3, sp, #32
 8005658:	3d08      	subs	r5, #8
 800565a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d0f8      	beq.n	8005654 <__kernel_rem_pio2f+0x1e4>
 8005662:	4628      	mov	r0, r5
 8005664:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8005668:	f7ff fe9c 	bl	80053a4 <scalbnf>
 800566c:	1c63      	adds	r3, r4, #1
 800566e:	aa44      	add	r2, sp, #272	@ 0x110
 8005670:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8005770 <__kernel_rem_pio2f+0x300>
 8005674:	0099      	lsls	r1, r3, #2
 8005676:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800567a:	4623      	mov	r3, r4
 800567c:	2b00      	cmp	r3, #0
 800567e:	f280 80a9 	bge.w	80057d4 <__kernel_rem_pio2f+0x364>
 8005682:	4623      	mov	r3, r4
 8005684:	2b00      	cmp	r3, #0
 8005686:	f2c0 80c7 	blt.w	8005818 <__kernel_rem_pio2f+0x3a8>
 800568a:	aa44      	add	r2, sp, #272	@ 0x110
 800568c:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8005690:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8005768 <__kernel_rem_pio2f+0x2f8>
 8005694:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8005774 <__kernel_rem_pio2f+0x304>
 8005698:	2000      	movs	r0, #0
 800569a:	1ae2      	subs	r2, r4, r3
 800569c:	e0b1      	b.n	8005802 <__kernel_rem_pio2f+0x392>
 800569e:	2602      	movs	r6, #2
 80056a0:	e78f      	b.n	80055c2 <__kernel_rem_pio2f+0x152>
 80056a2:	f852 1b04 	ldr.w	r1, [r2], #4
 80056a6:	b948      	cbnz	r0, 80056bc <__kernel_rem_pio2f+0x24c>
 80056a8:	b121      	cbz	r1, 80056b4 <__kernel_rem_pio2f+0x244>
 80056aa:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 80056ae:	f842 1c04 	str.w	r1, [r2, #-4]
 80056b2:	2101      	movs	r1, #1
 80056b4:	f10e 0e01 	add.w	lr, lr, #1
 80056b8:	4608      	mov	r0, r1
 80056ba:	e787      	b.n	80055cc <__kernel_rem_pio2f+0x15c>
 80056bc:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 80056c0:	e7f5      	b.n	80056ae <__kernel_rem_pio2f+0x23e>
 80056c2:	f104 3cff 	add.w	ip, r4, #4294967295
 80056c6:	aa08      	add	r2, sp, #32
 80056c8:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80056cc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80056d0:	a908      	add	r1, sp, #32
 80056d2:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 80056d6:	e781      	b.n	80055dc <__kernel_rem_pio2f+0x16c>
 80056d8:	f104 3cff 	add.w	ip, r4, #4294967295
 80056dc:	aa08      	add	r2, sp, #32
 80056de:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80056e2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80056e6:	e7f3      	b.n	80056d0 <__kernel_rem_pio2f+0x260>
 80056e8:	a908      	add	r1, sp, #32
 80056ea:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80056ee:	3801      	subs	r0, #1
 80056f0:	430a      	orrs	r2, r1
 80056f2:	e7ab      	b.n	800564c <__kernel_rem_pio2f+0x1dc>
 80056f4:	3201      	adds	r2, #1
 80056f6:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 80056fa:	2e00      	cmp	r6, #0
 80056fc:	d0fa      	beq.n	80056f4 <__kernel_rem_pio2f+0x284>
 80056fe:	9905      	ldr	r1, [sp, #20]
 8005700:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8005704:	eb0d 0001 	add.w	r0, sp, r1
 8005708:	18e6      	adds	r6, r4, r3
 800570a:	a91c      	add	r1, sp, #112	@ 0x70
 800570c:	f104 0c01 	add.w	ip, r4, #1
 8005710:	384c      	subs	r0, #76	@ 0x4c
 8005712:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8005716:	4422      	add	r2, r4
 8005718:	4562      	cmp	r2, ip
 800571a:	da04      	bge.n	8005726 <__kernel_rem_pio2f+0x2b6>
 800571c:	4614      	mov	r4, r2
 800571e:	e70e      	b.n	800553e <__kernel_rem_pio2f+0xce>
 8005720:	9804      	ldr	r0, [sp, #16]
 8005722:	2201      	movs	r2, #1
 8005724:	e7e7      	b.n	80056f6 <__kernel_rem_pio2f+0x286>
 8005726:	9903      	ldr	r1, [sp, #12]
 8005728:	f8dd e004 	ldr.w	lr, [sp, #4]
 800572c:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8005730:	9105      	str	r1, [sp, #20]
 8005732:	ee07 1a90 	vmov	s15, r1
 8005736:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800573a:	2400      	movs	r4, #0
 800573c:	ece6 7a01 	vstmia	r6!, {s15}
 8005740:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8005774 <__kernel_rem_pio2f+0x304>
 8005744:	46b1      	mov	r9, r6
 8005746:	455c      	cmp	r4, fp
 8005748:	dd04      	ble.n	8005754 <__kernel_rem_pio2f+0x2e4>
 800574a:	ece0 7a01 	vstmia	r0!, {s15}
 800574e:	f10c 0c01 	add.w	ip, ip, #1
 8005752:	e7e1      	b.n	8005718 <__kernel_rem_pio2f+0x2a8>
 8005754:	ecfe 6a01 	vldmia	lr!, {s13}
 8005758:	ed39 7a01 	vldmdb	r9!, {s14}
 800575c:	3401      	adds	r4, #1
 800575e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005762:	e7f0      	b.n	8005746 <__kernel_rem_pio2f+0x2d6>
 8005764:	080061cc 	.word	0x080061cc
 8005768:	080061a0 	.word	0x080061a0
 800576c:	43800000 	.word	0x43800000
 8005770:	3b800000 	.word	0x3b800000
 8005774:	00000000 	.word	0x00000000
 8005778:	9b02      	ldr	r3, [sp, #8]
 800577a:	eeb0 0a48 	vmov.f32	s0, s16
 800577e:	eba3 0008 	sub.w	r0, r3, r8
 8005782:	f7ff fe0f 	bl	80053a4 <scalbnf>
 8005786:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800576c <__kernel_rem_pio2f+0x2fc>
 800578a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800578e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005792:	db19      	blt.n	80057c8 <__kernel_rem_pio2f+0x358>
 8005794:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8005770 <__kernel_rem_pio2f+0x300>
 8005798:	ee60 7a27 	vmul.f32	s15, s0, s15
 800579c:	aa08      	add	r2, sp, #32
 800579e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80057a2:	3508      	adds	r5, #8
 80057a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057a8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80057ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80057b0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80057b4:	ee10 3a10 	vmov	r3, s0
 80057b8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80057bc:	ee17 3a90 	vmov	r3, s15
 80057c0:	3401      	adds	r4, #1
 80057c2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80057c6:	e74c      	b.n	8005662 <__kernel_rem_pio2f+0x1f2>
 80057c8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80057cc:	aa08      	add	r2, sp, #32
 80057ce:	ee10 3a10 	vmov	r3, s0
 80057d2:	e7f6      	b.n	80057c2 <__kernel_rem_pio2f+0x352>
 80057d4:	a808      	add	r0, sp, #32
 80057d6:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80057da:	9001      	str	r0, [sp, #4]
 80057dc:	ee07 0a90 	vmov	s15, r0
 80057e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057e4:	3b01      	subs	r3, #1
 80057e6:	ee67 7a80 	vmul.f32	s15, s15, s0
 80057ea:	ee20 0a07 	vmul.f32	s0, s0, s14
 80057ee:	ed62 7a01 	vstmdb	r2!, {s15}
 80057f2:	e743      	b.n	800567c <__kernel_rem_pio2f+0x20c>
 80057f4:	ecfc 6a01 	vldmia	ip!, {s13}
 80057f8:	ecb5 7a01 	vldmia	r5!, {s14}
 80057fc:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005800:	3001      	adds	r0, #1
 8005802:	4550      	cmp	r0, sl
 8005804:	dc01      	bgt.n	800580a <__kernel_rem_pio2f+0x39a>
 8005806:	4282      	cmp	r2, r0
 8005808:	daf4      	bge.n	80057f4 <__kernel_rem_pio2f+0x384>
 800580a:	a858      	add	r0, sp, #352	@ 0x160
 800580c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005810:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8005814:	3b01      	subs	r3, #1
 8005816:	e735      	b.n	8005684 <__kernel_rem_pio2f+0x214>
 8005818:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800581a:	2b02      	cmp	r3, #2
 800581c:	dc09      	bgt.n	8005832 <__kernel_rem_pio2f+0x3c2>
 800581e:	2b00      	cmp	r3, #0
 8005820:	dc2b      	bgt.n	800587a <__kernel_rem_pio2f+0x40a>
 8005822:	d044      	beq.n	80058ae <__kernel_rem_pio2f+0x43e>
 8005824:	f009 0007 	and.w	r0, r9, #7
 8005828:	b059      	add	sp, #356	@ 0x164
 800582a:	ecbd 8b04 	vpop	{d8-d9}
 800582e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005832:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8005834:	2b03      	cmp	r3, #3
 8005836:	d1f5      	bne.n	8005824 <__kernel_rem_pio2f+0x3b4>
 8005838:	aa30      	add	r2, sp, #192	@ 0xc0
 800583a:	1f0b      	subs	r3, r1, #4
 800583c:	4413      	add	r3, r2
 800583e:	461a      	mov	r2, r3
 8005840:	4620      	mov	r0, r4
 8005842:	2800      	cmp	r0, #0
 8005844:	f1a2 0204 	sub.w	r2, r2, #4
 8005848:	dc52      	bgt.n	80058f0 <__kernel_rem_pio2f+0x480>
 800584a:	4622      	mov	r2, r4
 800584c:	2a01      	cmp	r2, #1
 800584e:	f1a3 0304 	sub.w	r3, r3, #4
 8005852:	dc5d      	bgt.n	8005910 <__kernel_rem_pio2f+0x4a0>
 8005854:	ab30      	add	r3, sp, #192	@ 0xc0
 8005856:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 8005774 <__kernel_rem_pio2f+0x304>
 800585a:	440b      	add	r3, r1
 800585c:	2c01      	cmp	r4, #1
 800585e:	dc67      	bgt.n	8005930 <__kernel_rem_pio2f+0x4c0>
 8005860:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8005864:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8005868:	2e00      	cmp	r6, #0
 800586a:	d167      	bne.n	800593c <__kernel_rem_pio2f+0x4cc>
 800586c:	edc7 6a00 	vstr	s13, [r7]
 8005870:	ed87 7a01 	vstr	s14, [r7, #4]
 8005874:	edc7 7a02 	vstr	s15, [r7, #8]
 8005878:	e7d4      	b.n	8005824 <__kernel_rem_pio2f+0x3b4>
 800587a:	ab30      	add	r3, sp, #192	@ 0xc0
 800587c:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 8005774 <__kernel_rem_pio2f+0x304>
 8005880:	440b      	add	r3, r1
 8005882:	4622      	mov	r2, r4
 8005884:	2a00      	cmp	r2, #0
 8005886:	da24      	bge.n	80058d2 <__kernel_rem_pio2f+0x462>
 8005888:	b34e      	cbz	r6, 80058de <__kernel_rem_pio2f+0x46e>
 800588a:	eef1 7a47 	vneg.f32	s15, s14
 800588e:	edc7 7a00 	vstr	s15, [r7]
 8005892:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8005896:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800589a:	aa31      	add	r2, sp, #196	@ 0xc4
 800589c:	2301      	movs	r3, #1
 800589e:	429c      	cmp	r4, r3
 80058a0:	da20      	bge.n	80058e4 <__kernel_rem_pio2f+0x474>
 80058a2:	b10e      	cbz	r6, 80058a8 <__kernel_rem_pio2f+0x438>
 80058a4:	eef1 7a67 	vneg.f32	s15, s15
 80058a8:	edc7 7a01 	vstr	s15, [r7, #4]
 80058ac:	e7ba      	b.n	8005824 <__kernel_rem_pio2f+0x3b4>
 80058ae:	ab30      	add	r3, sp, #192	@ 0xc0
 80058b0:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 8005774 <__kernel_rem_pio2f+0x304>
 80058b4:	440b      	add	r3, r1
 80058b6:	2c00      	cmp	r4, #0
 80058b8:	da05      	bge.n	80058c6 <__kernel_rem_pio2f+0x456>
 80058ba:	b10e      	cbz	r6, 80058c0 <__kernel_rem_pio2f+0x450>
 80058bc:	eef1 7a67 	vneg.f32	s15, s15
 80058c0:	edc7 7a00 	vstr	s15, [r7]
 80058c4:	e7ae      	b.n	8005824 <__kernel_rem_pio2f+0x3b4>
 80058c6:	ed33 7a01 	vldmdb	r3!, {s14}
 80058ca:	3c01      	subs	r4, #1
 80058cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80058d0:	e7f1      	b.n	80058b6 <__kernel_rem_pio2f+0x446>
 80058d2:	ed73 7a01 	vldmdb	r3!, {s15}
 80058d6:	3a01      	subs	r2, #1
 80058d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80058dc:	e7d2      	b.n	8005884 <__kernel_rem_pio2f+0x414>
 80058de:	eef0 7a47 	vmov.f32	s15, s14
 80058e2:	e7d4      	b.n	800588e <__kernel_rem_pio2f+0x41e>
 80058e4:	ecb2 7a01 	vldmia	r2!, {s14}
 80058e8:	3301      	adds	r3, #1
 80058ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80058ee:	e7d6      	b.n	800589e <__kernel_rem_pio2f+0x42e>
 80058f0:	edd2 7a00 	vldr	s15, [r2]
 80058f4:	edd2 6a01 	vldr	s13, [r2, #4]
 80058f8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80058fc:	3801      	subs	r0, #1
 80058fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005902:	ed82 7a00 	vstr	s14, [r2]
 8005906:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800590a:	edc2 7a01 	vstr	s15, [r2, #4]
 800590e:	e798      	b.n	8005842 <__kernel_rem_pio2f+0x3d2>
 8005910:	edd3 7a00 	vldr	s15, [r3]
 8005914:	edd3 6a01 	vldr	s13, [r3, #4]
 8005918:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800591c:	3a01      	subs	r2, #1
 800591e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005922:	ed83 7a00 	vstr	s14, [r3]
 8005926:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800592a:	edc3 7a01 	vstr	s15, [r3, #4]
 800592e:	e78d      	b.n	800584c <__kernel_rem_pio2f+0x3dc>
 8005930:	ed33 7a01 	vldmdb	r3!, {s14}
 8005934:	3c01      	subs	r4, #1
 8005936:	ee77 7a87 	vadd.f32	s15, s15, s14
 800593a:	e78f      	b.n	800585c <__kernel_rem_pio2f+0x3ec>
 800593c:	eef1 6a66 	vneg.f32	s13, s13
 8005940:	eeb1 7a47 	vneg.f32	s14, s14
 8005944:	edc7 6a00 	vstr	s13, [r7]
 8005948:	ed87 7a01 	vstr	s14, [r7, #4]
 800594c:	eef1 7a67 	vneg.f32	s15, s15
 8005950:	e790      	b.n	8005874 <__kernel_rem_pio2f+0x404>
 8005952:	bf00      	nop

08005954 <floorf>:
 8005954:	ee10 3a10 	vmov	r3, s0
 8005958:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800595c:	3a7f      	subs	r2, #127	@ 0x7f
 800595e:	2a16      	cmp	r2, #22
 8005960:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005964:	dc2b      	bgt.n	80059be <floorf+0x6a>
 8005966:	2a00      	cmp	r2, #0
 8005968:	da12      	bge.n	8005990 <floorf+0x3c>
 800596a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80059d0 <floorf+0x7c>
 800596e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005972:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800597a:	dd06      	ble.n	800598a <floorf+0x36>
 800597c:	2b00      	cmp	r3, #0
 800597e:	da24      	bge.n	80059ca <floorf+0x76>
 8005980:	2900      	cmp	r1, #0
 8005982:	4b14      	ldr	r3, [pc, #80]	@ (80059d4 <floorf+0x80>)
 8005984:	bf08      	it	eq
 8005986:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800598a:	ee00 3a10 	vmov	s0, r3
 800598e:	4770      	bx	lr
 8005990:	4911      	ldr	r1, [pc, #68]	@ (80059d8 <floorf+0x84>)
 8005992:	4111      	asrs	r1, r2
 8005994:	420b      	tst	r3, r1
 8005996:	d0fa      	beq.n	800598e <floorf+0x3a>
 8005998:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 80059d0 <floorf+0x7c>
 800599c:	ee30 0a27 	vadd.f32	s0, s0, s15
 80059a0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80059a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059a8:	ddef      	ble.n	800598a <floorf+0x36>
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	bfbe      	ittt	lt
 80059ae:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 80059b2:	fa40 f202 	asrlt.w	r2, r0, r2
 80059b6:	189b      	addlt	r3, r3, r2
 80059b8:	ea23 0301 	bic.w	r3, r3, r1
 80059bc:	e7e5      	b.n	800598a <floorf+0x36>
 80059be:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80059c2:	d3e4      	bcc.n	800598e <floorf+0x3a>
 80059c4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80059c8:	4770      	bx	lr
 80059ca:	2300      	movs	r3, #0
 80059cc:	e7dd      	b.n	800598a <floorf+0x36>
 80059ce:	bf00      	nop
 80059d0:	7149f2ca 	.word	0x7149f2ca
 80059d4:	bf800000 	.word	0xbf800000
 80059d8:	007fffff 	.word	0x007fffff

080059dc <_init>:
 80059dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059de:	bf00      	nop
 80059e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059e2:	bc08      	pop	{r3}
 80059e4:	469e      	mov	lr, r3
 80059e6:	4770      	bx	lr

080059e8 <_fini>:
 80059e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ea:	bf00      	nop
 80059ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ee:	bc08      	pop	{r3}
 80059f0:	469e      	mov	lr, r3
 80059f2:	4770      	bx	lr
