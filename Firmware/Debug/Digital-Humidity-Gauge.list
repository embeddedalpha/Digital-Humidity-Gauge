
Digital-Humidity-Gauge.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045a0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08004728  08004728  00005728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b54  08004b54  00006004  2**0
                  CONTENTS
  4 .ARM          00000000  08004b54  08004b54  00006004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b54  08004b54  00006004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b54  08004b54  00005b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004b58  08004b58  00005b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08004b5c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006004  2**0
                  CONTENTS
 10 .bss          00000320  20000004  20000004  00006004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000324  20000324  00006004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006004  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ba21  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000012e0  00000000  00000000  00011a55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000004d8  00000000  00000000  00012d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000003bd  00000000  00000000  00013210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000010b5  00000000  00000000  000135cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009dd5  00000000  00000000  00014682  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00090901  00000000  00000000  0001e457  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000aed58  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001280  00000000  00000000  000aed9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000056  00000000  00000000  000b001c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004710 	.word	0x08004710

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08004710 	.word	0x08004710

080001c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	db0b      	blt.n	80001f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001da:	79fb      	ldrb	r3, [r7, #7]
 80001dc:	f003 021f 	and.w	r2, r3, #31
 80001e0:	4907      	ldr	r1, [pc, #28]	@ (8000200 <__NVIC_EnableIRQ+0x38>)
 80001e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e6:	095b      	lsrs	r3, r3, #5
 80001e8:	2001      	movs	r0, #1
 80001ea:	fa00 f202 	lsl.w	r2, r0, r2
 80001ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80001f2:	bf00      	nop
 80001f4:	370c      	adds	r7, #12
 80001f6:	46bd      	mov	sp, r7
 80001f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	e000e100 	.word	0xe000e100

08000204 <DMA1_Stream0_IRQHandler>:
volatile uint32_t DMA_LISR = 0;
volatile uint32_t DMA_HISR = 0;


void DMA1_Stream0_IRQHandler(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
	DMA_LISR = DMA1 -> LISR;
 8000208:	4b4f      	ldr	r3, [pc, #316]	@ (8000348 <DMA1_Stream0_IRQHandler+0x144>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	4a4f      	ldr	r2, [pc, #316]	@ (800034c <DMA1_Stream0_IRQHandler+0x148>)
 800020e:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF0)
 8000210:	4b4e      	ldr	r3, [pc, #312]	@ (800034c <DMA1_Stream0_IRQHandler+0x148>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	f003 0301 	and.w	r3, r3, #1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d00e      	beq.n	800023a <DMA1_Stream0_IRQHandler+0x36>
	{
	    if (__DMA1_Stream0_Config__ -> ISR_Routines.FIFO_Error_ISR)
 800021c:	4b4c      	ldr	r3, [pc, #304]	@ (8000350 <DMA1_Stream0_IRQHandler+0x14c>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000222:	2b00      	cmp	r3, #0
 8000224:	d009      	beq.n	800023a <DMA1_Stream0_IRQHandler+0x36>
	    {
	    	__DMA1_Stream0_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8000226:	4b4a      	ldr	r3, [pc, #296]	@ (8000350 <DMA1_Stream0_IRQHandler+0x14c>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800022c:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CFEIF0;
 800022e:	4b46      	ldr	r3, [pc, #280]	@ (8000348 <DMA1_Stream0_IRQHandler+0x144>)
 8000230:	689b      	ldr	r3, [r3, #8]
 8000232:	4a45      	ldr	r2, [pc, #276]	@ (8000348 <DMA1_Stream0_IRQHandler+0x144>)
 8000234:	f043 0301 	orr.w	r3, r3, #1
 8000238:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_DMEIF0)
 800023a:	4b44      	ldr	r3, [pc, #272]	@ (800034c <DMA1_Stream0_IRQHandler+0x148>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	f003 0304 	and.w	r3, r3, #4
 8000242:	2b00      	cmp	r3, #0
 8000244:	d00e      	beq.n	8000264 <DMA1_Stream0_IRQHandler+0x60>
	{
	    if (__DMA1_Stream0_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8000246:	4b42      	ldr	r3, [pc, #264]	@ (8000350 <DMA1_Stream0_IRQHandler+0x14c>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800024c:	2b00      	cmp	r3, #0
 800024e:	d009      	beq.n	8000264 <DMA1_Stream0_IRQHandler+0x60>
	    {
	    	__DMA1_Stream0_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8000250:	4b3f      	ldr	r3, [pc, #252]	@ (8000350 <DMA1_Stream0_IRQHandler+0x14c>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000256:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF0;
 8000258:	4b3b      	ldr	r3, [pc, #236]	@ (8000348 <DMA1_Stream0_IRQHandler+0x144>)
 800025a:	689b      	ldr	r3, [r3, #8]
 800025c:	4a3a      	ldr	r2, [pc, #232]	@ (8000348 <DMA1_Stream0_IRQHandler+0x144>)
 800025e:	f043 0304 	orr.w	r3, r3, #4
 8000262:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_TEIF0)
 8000264:	4b39      	ldr	r3, [pc, #228]	@ (800034c <DMA1_Stream0_IRQHandler+0x148>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	f003 0308 	and.w	r3, r3, #8
 800026c:	2b00      	cmp	r3, #0
 800026e:	d00e      	beq.n	800028e <DMA1_Stream0_IRQHandler+0x8a>
	{
	    if (__DMA1_Stream0_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8000270:	4b37      	ldr	r3, [pc, #220]	@ (8000350 <DMA1_Stream0_IRQHandler+0x14c>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000276:	2b00      	cmp	r3, #0
 8000278:	d009      	beq.n	800028e <DMA1_Stream0_IRQHandler+0x8a>
	    {
	    	__DMA1_Stream0_Config__ ->ISR_Routines.Transfer_Error_ISR();
 800027a:	4b35      	ldr	r3, [pc, #212]	@ (8000350 <DMA1_Stream0_IRQHandler+0x14c>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000280:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CTEIF0;
 8000282:	4b31      	ldr	r3, [pc, #196]	@ (8000348 <DMA1_Stream0_IRQHandler+0x144>)
 8000284:	689b      	ldr	r3, [r3, #8]
 8000286:	4a30      	ldr	r2, [pc, #192]	@ (8000348 <DMA1_Stream0_IRQHandler+0x144>)
 8000288:	f043 0308 	orr.w	r3, r3, #8
 800028c:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_HTIF0)
 800028e:	4b2f      	ldr	r3, [pc, #188]	@ (800034c <DMA1_Stream0_IRQHandler+0x148>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	f003 0310 	and.w	r3, r3, #16
 8000296:	2b00      	cmp	r3, #0
 8000298:	d026      	beq.n	80002e8 <DMA1_Stream0_IRQHandler+0xe4>
	{
	    if (__DMA1_Stream0_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 800029a:	4b2d      	ldr	r3, [pc, #180]	@ (8000350 <DMA1_Stream0_IRQHandler+0x14c>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d021      	beq.n	80002e8 <DMA1_Stream0_IRQHandler+0xe4>
	    {
	    	__DMA1_Stream0_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80002a4:	4b2a      	ldr	r3, [pc, #168]	@ (8000350 <DMA1_Stream0_IRQHandler+0x14c>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80002aa:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CHTIF0;
 80002ac:	4b26      	ldr	r3, [pc, #152]	@ (8000348 <DMA1_Stream0_IRQHandler+0x144>)
 80002ae:	689b      	ldr	r3, [r3, #8]
 80002b0:	4a25      	ldr	r2, [pc, #148]	@ (8000348 <DMA1_Stream0_IRQHandler+0x144>)
 80002b2:	f043 0310 	orr.w	r3, r3, #16
 80002b6:	6093      	str	r3, [r2, #8]

	    	if(__DMA1_Stream0_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80002b8:	4b25      	ldr	r3, [pc, #148]	@ (8000350 <DMA1_Stream0_IRQHandler+0x14c>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80002be:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80002c2:	4293      	cmp	r3, r2
 80002c4:	d110      	bne.n	80002e8 <DMA1_Stream0_IRQHandler+0xe4>
	    	{
	    		if((__DMA1_Stream0_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80002c6:	4b22      	ldr	r3, [pc, #136]	@ (8000350 <DMA1_Stream0_IRQHandler+0x14c>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	685b      	ldr	r3, [r3, #4]
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d004      	beq.n	80002e0 <DMA1_Stream0_IRQHandler+0xdc>
	    		{
	    			__DMA1_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80002d6:	4b1e      	ldr	r3, [pc, #120]	@ (8000350 <DMA1_Stream0_IRQHandler+0x14c>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80002dc:	4798      	blx	r3
 80002de:	e003      	b.n	80002e8 <DMA1_Stream0_IRQHandler+0xe4>
	    		}
	    		else
	    		{
	    			__DMA1_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80002e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000350 <DMA1_Stream0_IRQHandler+0x14c>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80002e6:	4798      	blx	r3
	    		}
	    	}
	    }
	}

	if(DMA_LISR & DMA_LISR_TCIF0)
 80002e8:	4b18      	ldr	r3, [pc, #96]	@ (800034c <DMA1_Stream0_IRQHandler+0x148>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	f003 0320 	and.w	r3, r3, #32
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d026      	beq.n	8000342 <DMA1_Stream0_IRQHandler+0x13e>
	{
	    if (__DMA1_Stream0_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 80002f4:	4b16      	ldr	r3, [pc, #88]	@ (8000350 <DMA1_Stream0_IRQHandler+0x14c>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d021      	beq.n	8000342 <DMA1_Stream0_IRQHandler+0x13e>
	    {
	    	__DMA1_Stream0_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80002fe:	4b14      	ldr	r3, [pc, #80]	@ (8000350 <DMA1_Stream0_IRQHandler+0x14c>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000304:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CTCIF0;
 8000306:	4b10      	ldr	r3, [pc, #64]	@ (8000348 <DMA1_Stream0_IRQHandler+0x144>)
 8000308:	689b      	ldr	r3, [r3, #8]
 800030a:	4a0f      	ldr	r2, [pc, #60]	@ (8000348 <DMA1_Stream0_IRQHandler+0x144>)
 800030c:	f043 0320 	orr.w	r3, r3, #32
 8000310:	6093      	str	r3, [r2, #8]

	    	if(__DMA1_Stream0_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000312:	4b0f      	ldr	r3, [pc, #60]	@ (8000350 <DMA1_Stream0_IRQHandler+0x14c>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000318:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800031c:	4293      	cmp	r3, r2
 800031e:	d110      	bne.n	8000342 <DMA1_Stream0_IRQHandler+0x13e>
	    	{
	    		if((__DMA1_Stream0_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000320:	4b0b      	ldr	r3, [pc, #44]	@ (8000350 <DMA1_Stream0_IRQHandler+0x14c>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	685b      	ldr	r3, [r3, #4]
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800032c:	2b00      	cmp	r3, #0
 800032e:	d004      	beq.n	800033a <DMA1_Stream0_IRQHandler+0x136>
	    		{
	    			__DMA1_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000330:	4b07      	ldr	r3, [pc, #28]	@ (8000350 <DMA1_Stream0_IRQHandler+0x14c>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000336:	4798      	blx	r3
	    			__DMA1_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
	    		}
	    	}
	    }
	}
}
 8000338:	e003      	b.n	8000342 <DMA1_Stream0_IRQHandler+0x13e>
	    			__DMA1_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800033a:	4b05      	ldr	r3, [pc, #20]	@ (8000350 <DMA1_Stream0_IRQHandler+0x14c>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000340:	4798      	blx	r3
}
 8000342:	bf00      	nop
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	40026000 	.word	0x40026000
 800034c:	20000060 	.word	0x20000060
 8000350:	20000020 	.word	0x20000020

08000354 <DMA1_Stream1_IRQHandler>:

void DMA1_Stream1_IRQHandler(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
	DMA_LISR = DMA1 -> LISR;
 8000358:	4b4f      	ldr	r3, [pc, #316]	@ (8000498 <DMA1_Stream1_IRQHandler+0x144>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	4a4f      	ldr	r2, [pc, #316]	@ (800049c <DMA1_Stream1_IRQHandler+0x148>)
 800035e:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF1)
 8000360:	4b4e      	ldr	r3, [pc, #312]	@ (800049c <DMA1_Stream1_IRQHandler+0x148>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000368:	2b00      	cmp	r3, #0
 800036a:	d00e      	beq.n	800038a <DMA1_Stream1_IRQHandler+0x36>
	{
	    if (__DMA1_Stream1_Config__ -> ISR_Routines.FIFO_Error_ISR)
 800036c:	4b4c      	ldr	r3, [pc, #304]	@ (80004a0 <DMA1_Stream1_IRQHandler+0x14c>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000372:	2b00      	cmp	r3, #0
 8000374:	d009      	beq.n	800038a <DMA1_Stream1_IRQHandler+0x36>
	    {
	    	__DMA1_Stream1_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8000376:	4b4a      	ldr	r3, [pc, #296]	@ (80004a0 <DMA1_Stream1_IRQHandler+0x14c>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800037c:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CFEIF1;
 800037e:	4b46      	ldr	r3, [pc, #280]	@ (8000498 <DMA1_Stream1_IRQHandler+0x144>)
 8000380:	689b      	ldr	r3, [r3, #8]
 8000382:	4a45      	ldr	r2, [pc, #276]	@ (8000498 <DMA1_Stream1_IRQHandler+0x144>)
 8000384:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000388:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_DMEIF1)
 800038a:	4b44      	ldr	r3, [pc, #272]	@ (800049c <DMA1_Stream1_IRQHandler+0x148>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000392:	2b00      	cmp	r3, #0
 8000394:	d00e      	beq.n	80003b4 <DMA1_Stream1_IRQHandler+0x60>
	{
	    if (__DMA1_Stream1_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8000396:	4b42      	ldr	r3, [pc, #264]	@ (80004a0 <DMA1_Stream1_IRQHandler+0x14c>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800039c:	2b00      	cmp	r3, #0
 800039e:	d009      	beq.n	80003b4 <DMA1_Stream1_IRQHandler+0x60>
	    {
	    	__DMA1_Stream1_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 80003a0:	4b3f      	ldr	r3, [pc, #252]	@ (80004a0 <DMA1_Stream1_IRQHandler+0x14c>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003a6:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF1;
 80003a8:	4b3b      	ldr	r3, [pc, #236]	@ (8000498 <DMA1_Stream1_IRQHandler+0x144>)
 80003aa:	689b      	ldr	r3, [r3, #8]
 80003ac:	4a3a      	ldr	r2, [pc, #232]	@ (8000498 <DMA1_Stream1_IRQHandler+0x144>)
 80003ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80003b2:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_TEIF1)
 80003b4:	4b39      	ldr	r3, [pc, #228]	@ (800049c <DMA1_Stream1_IRQHandler+0x148>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d00e      	beq.n	80003de <DMA1_Stream1_IRQHandler+0x8a>
	{
	    if (__DMA1_Stream1_Config__ -> ISR_Routines.Transfer_Error_ISR)
 80003c0:	4b37      	ldr	r3, [pc, #220]	@ (80004a0 <DMA1_Stream1_IRQHandler+0x14c>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d009      	beq.n	80003de <DMA1_Stream1_IRQHandler+0x8a>
	    {
	    	__DMA1_Stream1_Config__ ->ISR_Routines.Transfer_Error_ISR();
 80003ca:	4b35      	ldr	r3, [pc, #212]	@ (80004a0 <DMA1_Stream1_IRQHandler+0x14c>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80003d0:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CTEIF1;
 80003d2:	4b31      	ldr	r3, [pc, #196]	@ (8000498 <DMA1_Stream1_IRQHandler+0x144>)
 80003d4:	689b      	ldr	r3, [r3, #8]
 80003d6:	4a30      	ldr	r2, [pc, #192]	@ (8000498 <DMA1_Stream1_IRQHandler+0x144>)
 80003d8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80003dc:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_HTIF1)
 80003de:	4b2f      	ldr	r3, [pc, #188]	@ (800049c <DMA1_Stream1_IRQHandler+0x148>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d026      	beq.n	8000438 <DMA1_Stream1_IRQHandler+0xe4>
	{
	    if (__DMA1_Stream1_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 80003ea:	4b2d      	ldr	r3, [pc, #180]	@ (80004a0 <DMA1_Stream1_IRQHandler+0x14c>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d021      	beq.n	8000438 <DMA1_Stream1_IRQHandler+0xe4>
	    {
	    	__DMA1_Stream1_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80003f4:	4b2a      	ldr	r3, [pc, #168]	@ (80004a0 <DMA1_Stream1_IRQHandler+0x14c>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80003fa:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CHTIF1;
 80003fc:	4b26      	ldr	r3, [pc, #152]	@ (8000498 <DMA1_Stream1_IRQHandler+0x144>)
 80003fe:	689b      	ldr	r3, [r3, #8]
 8000400:	4a25      	ldr	r2, [pc, #148]	@ (8000498 <DMA1_Stream1_IRQHandler+0x144>)
 8000402:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000406:	6093      	str	r3, [r2, #8]

	    	if(__DMA1_Stream1_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000408:	4b25      	ldr	r3, [pc, #148]	@ (80004a0 <DMA1_Stream1_IRQHandler+0x14c>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800040e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000412:	4293      	cmp	r3, r2
 8000414:	d110      	bne.n	8000438 <DMA1_Stream1_IRQHandler+0xe4>
	    	{
	    		if((__DMA1_Stream1_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000416:	4b22      	ldr	r3, [pc, #136]	@ (80004a0 <DMA1_Stream1_IRQHandler+0x14c>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	685b      	ldr	r3, [r3, #4]
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000422:	2b00      	cmp	r3, #0
 8000424:	d004      	beq.n	8000430 <DMA1_Stream1_IRQHandler+0xdc>
	    		{
	    			__DMA1_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000426:	4b1e      	ldr	r3, [pc, #120]	@ (80004a0 <DMA1_Stream1_IRQHandler+0x14c>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800042c:	4798      	blx	r3
 800042e:	e003      	b.n	8000438 <DMA1_Stream1_IRQHandler+0xe4>
	    		}
	    		else
	    		{
	    			__DMA1_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000430:	4b1b      	ldr	r3, [pc, #108]	@ (80004a0 <DMA1_Stream1_IRQHandler+0x14c>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000436:	4798      	blx	r3
	    		}
	    	}
	    }
	}

	if(DMA_LISR & DMA_LISR_TCIF1)
 8000438:	4b18      	ldr	r3, [pc, #96]	@ (800049c <DMA1_Stream1_IRQHandler+0x148>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000440:	2b00      	cmp	r3, #0
 8000442:	d026      	beq.n	8000492 <DMA1_Stream1_IRQHandler+0x13e>
	{
	    if (__DMA1_Stream1_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8000444:	4b16      	ldr	r3, [pc, #88]	@ (80004a0 <DMA1_Stream1_IRQHandler+0x14c>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800044a:	2b00      	cmp	r3, #0
 800044c:	d021      	beq.n	8000492 <DMA1_Stream1_IRQHandler+0x13e>
	    {
	    	__DMA1_Stream1_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 800044e:	4b14      	ldr	r3, [pc, #80]	@ (80004a0 <DMA1_Stream1_IRQHandler+0x14c>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000454:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CTCIF1;
 8000456:	4b10      	ldr	r3, [pc, #64]	@ (8000498 <DMA1_Stream1_IRQHandler+0x144>)
 8000458:	689b      	ldr	r3, [r3, #8]
 800045a:	4a0f      	ldr	r2, [pc, #60]	@ (8000498 <DMA1_Stream1_IRQHandler+0x144>)
 800045c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000460:	6093      	str	r3, [r2, #8]

	    	if(__DMA1_Stream1_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000462:	4b0f      	ldr	r3, [pc, #60]	@ (80004a0 <DMA1_Stream1_IRQHandler+0x14c>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000468:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800046c:	4293      	cmp	r3, r2
 800046e:	d110      	bne.n	8000492 <DMA1_Stream1_IRQHandler+0x13e>
	    	{
	    		if((__DMA1_Stream1_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000470:	4b0b      	ldr	r3, [pc, #44]	@ (80004a0 <DMA1_Stream1_IRQHandler+0x14c>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	685b      	ldr	r3, [r3, #4]
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800047c:	2b00      	cmp	r3, #0
 800047e:	d004      	beq.n	800048a <DMA1_Stream1_IRQHandler+0x136>
	    		{
	    			__DMA1_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000480:	4b07      	ldr	r3, [pc, #28]	@ (80004a0 <DMA1_Stream1_IRQHandler+0x14c>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000486:	4798      	blx	r3
	    			__DMA1_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
	    		}
	    	}
	    }
	}
}
 8000488:	e003      	b.n	8000492 <DMA1_Stream1_IRQHandler+0x13e>
	    			__DMA1_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800048a:	4b05      	ldr	r3, [pc, #20]	@ (80004a0 <DMA1_Stream1_IRQHandler+0x14c>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000490:	4798      	blx	r3
}
 8000492:	bf00      	nop
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	40026000 	.word	0x40026000
 800049c:	20000060 	.word	0x20000060
 80004a0:	20000024 	.word	0x20000024

080004a4 <DMA1_Stream2_IRQHandler>:


void DMA1_Stream2_IRQHandler(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0
	DMA_LISR = DMA1 -> LISR;
 80004a8:	4b4f      	ldr	r3, [pc, #316]	@ (80005e8 <DMA1_Stream2_IRQHandler+0x144>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	4a4f      	ldr	r2, [pc, #316]	@ (80005ec <DMA1_Stream2_IRQHandler+0x148>)
 80004ae:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF2)
 80004b0:	4b4e      	ldr	r3, [pc, #312]	@ (80005ec <DMA1_Stream2_IRQHandler+0x148>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d00e      	beq.n	80004da <DMA1_Stream2_IRQHandler+0x36>
	{
	    if (__DMA1_Stream2_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80004bc:	4b4c      	ldr	r3, [pc, #304]	@ (80005f0 <DMA1_Stream2_IRQHandler+0x14c>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d009      	beq.n	80004da <DMA1_Stream2_IRQHandler+0x36>
	    {
	    	__DMA1_Stream2_Config__ ->ISR_Routines.FIFO_Error_ISR();
 80004c6:	4b4a      	ldr	r3, [pc, #296]	@ (80005f0 <DMA1_Stream2_IRQHandler+0x14c>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80004cc:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CFEIF2;
 80004ce:	4b46      	ldr	r3, [pc, #280]	@ (80005e8 <DMA1_Stream2_IRQHandler+0x144>)
 80004d0:	689b      	ldr	r3, [r3, #8]
 80004d2:	4a45      	ldr	r2, [pc, #276]	@ (80005e8 <DMA1_Stream2_IRQHandler+0x144>)
 80004d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80004d8:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_DMEIF2)
 80004da:	4b44      	ldr	r3, [pc, #272]	@ (80005ec <DMA1_Stream2_IRQHandler+0x148>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d00e      	beq.n	8000504 <DMA1_Stream2_IRQHandler+0x60>
	{
	    if (__DMA1_Stream2_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 80004e6:	4b42      	ldr	r3, [pc, #264]	@ (80005f0 <DMA1_Stream2_IRQHandler+0x14c>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d009      	beq.n	8000504 <DMA1_Stream2_IRQHandler+0x60>
	    {
	    	__DMA1_Stream2_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 80004f0:	4b3f      	ldr	r3, [pc, #252]	@ (80005f0 <DMA1_Stream2_IRQHandler+0x14c>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80004f6:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF2;
 80004f8:	4b3b      	ldr	r3, [pc, #236]	@ (80005e8 <DMA1_Stream2_IRQHandler+0x144>)
 80004fa:	689b      	ldr	r3, [r3, #8]
 80004fc:	4a3a      	ldr	r2, [pc, #232]	@ (80005e8 <DMA1_Stream2_IRQHandler+0x144>)
 80004fe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000502:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_TEIF2)
 8000504:	4b39      	ldr	r3, [pc, #228]	@ (80005ec <DMA1_Stream2_IRQHandler+0x148>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800050c:	2b00      	cmp	r3, #0
 800050e:	d00e      	beq.n	800052e <DMA1_Stream2_IRQHandler+0x8a>
	{
	    if (__DMA1_Stream2_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8000510:	4b37      	ldr	r3, [pc, #220]	@ (80005f0 <DMA1_Stream2_IRQHandler+0x14c>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000516:	2b00      	cmp	r3, #0
 8000518:	d009      	beq.n	800052e <DMA1_Stream2_IRQHandler+0x8a>
	    {
	    	__DMA1_Stream2_Config__ ->ISR_Routines.Transfer_Error_ISR();
 800051a:	4b35      	ldr	r3, [pc, #212]	@ (80005f0 <DMA1_Stream2_IRQHandler+0x14c>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000520:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CTEIF2;
 8000522:	4b31      	ldr	r3, [pc, #196]	@ (80005e8 <DMA1_Stream2_IRQHandler+0x144>)
 8000524:	689b      	ldr	r3, [r3, #8]
 8000526:	4a30      	ldr	r2, [pc, #192]	@ (80005e8 <DMA1_Stream2_IRQHandler+0x144>)
 8000528:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800052c:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_HTIF2)
 800052e:	4b2f      	ldr	r3, [pc, #188]	@ (80005ec <DMA1_Stream2_IRQHandler+0x148>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000536:	2b00      	cmp	r3, #0
 8000538:	d026      	beq.n	8000588 <DMA1_Stream2_IRQHandler+0xe4>
	{
	    if (__DMA1_Stream2_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 800053a:	4b2d      	ldr	r3, [pc, #180]	@ (80005f0 <DMA1_Stream2_IRQHandler+0x14c>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000540:	2b00      	cmp	r3, #0
 8000542:	d021      	beq.n	8000588 <DMA1_Stream2_IRQHandler+0xe4>
	    {
	    	__DMA1_Stream2_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000544:	4b2a      	ldr	r3, [pc, #168]	@ (80005f0 <DMA1_Stream2_IRQHandler+0x14c>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800054a:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CHTIF2;
 800054c:	4b26      	ldr	r3, [pc, #152]	@ (80005e8 <DMA1_Stream2_IRQHandler+0x144>)
 800054e:	689b      	ldr	r3, [r3, #8]
 8000550:	4a25      	ldr	r2, [pc, #148]	@ (80005e8 <DMA1_Stream2_IRQHandler+0x144>)
 8000552:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000556:	6093      	str	r3, [r2, #8]

	    	if(__DMA1_Stream2_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000558:	4b25      	ldr	r3, [pc, #148]	@ (80005f0 <DMA1_Stream2_IRQHandler+0x14c>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800055e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000562:	4293      	cmp	r3, r2
 8000564:	d110      	bne.n	8000588 <DMA1_Stream2_IRQHandler+0xe4>
	    	{
	    		if((__DMA1_Stream2_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000566:	4b22      	ldr	r3, [pc, #136]	@ (80005f0 <DMA1_Stream2_IRQHandler+0x14c>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	685b      	ldr	r3, [r3, #4]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000572:	2b00      	cmp	r3, #0
 8000574:	d004      	beq.n	8000580 <DMA1_Stream2_IRQHandler+0xdc>
	    		{
	    			__DMA1_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000576:	4b1e      	ldr	r3, [pc, #120]	@ (80005f0 <DMA1_Stream2_IRQHandler+0x14c>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800057c:	4798      	blx	r3
 800057e:	e003      	b.n	8000588 <DMA1_Stream2_IRQHandler+0xe4>
	    		}
	    		else
	    		{
	    			__DMA1_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000580:	4b1b      	ldr	r3, [pc, #108]	@ (80005f0 <DMA1_Stream2_IRQHandler+0x14c>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000586:	4798      	blx	r3
	    		}
	    	}
	    }
	}

	if(DMA_LISR & DMA_LISR_TCIF2)
 8000588:	4b18      	ldr	r3, [pc, #96]	@ (80005ec <DMA1_Stream2_IRQHandler+0x148>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000590:	2b00      	cmp	r3, #0
 8000592:	d026      	beq.n	80005e2 <DMA1_Stream2_IRQHandler+0x13e>
	{
	    if (__DMA1_Stream2_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8000594:	4b16      	ldr	r3, [pc, #88]	@ (80005f0 <DMA1_Stream2_IRQHandler+0x14c>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800059a:	2b00      	cmp	r3, #0
 800059c:	d021      	beq.n	80005e2 <DMA1_Stream2_IRQHandler+0x13e>
	    {
	    	__DMA1_Stream2_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 800059e:	4b14      	ldr	r3, [pc, #80]	@ (80005f0 <DMA1_Stream2_IRQHandler+0x14c>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005a4:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CTCIF2;
 80005a6:	4b10      	ldr	r3, [pc, #64]	@ (80005e8 <DMA1_Stream2_IRQHandler+0x144>)
 80005a8:	689b      	ldr	r3, [r3, #8]
 80005aa:	4a0f      	ldr	r2, [pc, #60]	@ (80005e8 <DMA1_Stream2_IRQHandler+0x144>)
 80005ac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80005b0:	6093      	str	r3, [r2, #8]

	    	if(__DMA1_Stream2_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80005b2:	4b0f      	ldr	r3, [pc, #60]	@ (80005f0 <DMA1_Stream2_IRQHandler+0x14c>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80005b8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80005bc:	4293      	cmp	r3, r2
 80005be:	d110      	bne.n	80005e2 <DMA1_Stream2_IRQHandler+0x13e>
	    	{
	    		if((__DMA1_Stream2_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80005c0:	4b0b      	ldr	r3, [pc, #44]	@ (80005f0 <DMA1_Stream2_IRQHandler+0x14c>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	685b      	ldr	r3, [r3, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d004      	beq.n	80005da <DMA1_Stream2_IRQHandler+0x136>
	    		{
	    			__DMA1_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80005d0:	4b07      	ldr	r3, [pc, #28]	@ (80005f0 <DMA1_Stream2_IRQHandler+0x14c>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80005d6:	4798      	blx	r3
	    			__DMA1_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
	    		}
	    	}
	    }
	}
}
 80005d8:	e003      	b.n	80005e2 <DMA1_Stream2_IRQHandler+0x13e>
	    			__DMA1_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80005da:	4b05      	ldr	r3, [pc, #20]	@ (80005f0 <DMA1_Stream2_IRQHandler+0x14c>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80005e0:	4798      	blx	r3
}
 80005e2:	bf00      	nop
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40026000 	.word	0x40026000
 80005ec:	20000060 	.word	0x20000060
 80005f0:	20000028 	.word	0x20000028

080005f4 <DMA1_Stream3_IRQHandler>:

void DMA1_Stream3_IRQHandler(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
	DMA_LISR = DMA1 -> LISR;
 80005f8:	4b4f      	ldr	r3, [pc, #316]	@ (8000738 <DMA1_Stream3_IRQHandler+0x144>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a4f      	ldr	r2, [pc, #316]	@ (800073c <DMA1_Stream3_IRQHandler+0x148>)
 80005fe:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF3)
 8000600:	4b4e      	ldr	r3, [pc, #312]	@ (800073c <DMA1_Stream3_IRQHandler+0x148>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000608:	2b00      	cmp	r3, #0
 800060a:	d00e      	beq.n	800062a <DMA1_Stream3_IRQHandler+0x36>
	{
	    if (__DMA1_Stream3_Config__ -> ISR_Routines.FIFO_Error_ISR)
 800060c:	4b4c      	ldr	r3, [pc, #304]	@ (8000740 <DMA1_Stream3_IRQHandler+0x14c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000612:	2b00      	cmp	r3, #0
 8000614:	d009      	beq.n	800062a <DMA1_Stream3_IRQHandler+0x36>
	    {
	    	__DMA1_Stream3_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8000616:	4b4a      	ldr	r3, [pc, #296]	@ (8000740 <DMA1_Stream3_IRQHandler+0x14c>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800061c:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CFEIF3;
 800061e:	4b46      	ldr	r3, [pc, #280]	@ (8000738 <DMA1_Stream3_IRQHandler+0x144>)
 8000620:	689b      	ldr	r3, [r3, #8]
 8000622:	4a45      	ldr	r2, [pc, #276]	@ (8000738 <DMA1_Stream3_IRQHandler+0x144>)
 8000624:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000628:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_DMEIF3)
 800062a:	4b44      	ldr	r3, [pc, #272]	@ (800073c <DMA1_Stream3_IRQHandler+0x148>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000632:	2b00      	cmp	r3, #0
 8000634:	d00e      	beq.n	8000654 <DMA1_Stream3_IRQHandler+0x60>
	{
	    if (__DMA1_Stream3_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8000636:	4b42      	ldr	r3, [pc, #264]	@ (8000740 <DMA1_Stream3_IRQHandler+0x14c>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800063c:	2b00      	cmp	r3, #0
 800063e:	d009      	beq.n	8000654 <DMA1_Stream3_IRQHandler+0x60>
	    {
	    	__DMA1_Stream3_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8000640:	4b3f      	ldr	r3, [pc, #252]	@ (8000740 <DMA1_Stream3_IRQHandler+0x14c>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000646:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF3;
 8000648:	4b3b      	ldr	r3, [pc, #236]	@ (8000738 <DMA1_Stream3_IRQHandler+0x144>)
 800064a:	689b      	ldr	r3, [r3, #8]
 800064c:	4a3a      	ldr	r2, [pc, #232]	@ (8000738 <DMA1_Stream3_IRQHandler+0x144>)
 800064e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000652:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_TEIF3)
 8000654:	4b39      	ldr	r3, [pc, #228]	@ (800073c <DMA1_Stream3_IRQHandler+0x148>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800065c:	2b00      	cmp	r3, #0
 800065e:	d00e      	beq.n	800067e <DMA1_Stream3_IRQHandler+0x8a>
	{
	    if (__DMA1_Stream3_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8000660:	4b37      	ldr	r3, [pc, #220]	@ (8000740 <DMA1_Stream3_IRQHandler+0x14c>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000666:	2b00      	cmp	r3, #0
 8000668:	d009      	beq.n	800067e <DMA1_Stream3_IRQHandler+0x8a>
	    {
	    	__DMA1_Stream3_Config__ ->ISR_Routines.Transfer_Error_ISR();
 800066a:	4b35      	ldr	r3, [pc, #212]	@ (8000740 <DMA1_Stream3_IRQHandler+0x14c>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000670:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CTEIF3;
 8000672:	4b31      	ldr	r3, [pc, #196]	@ (8000738 <DMA1_Stream3_IRQHandler+0x144>)
 8000674:	689b      	ldr	r3, [r3, #8]
 8000676:	4a30      	ldr	r2, [pc, #192]	@ (8000738 <DMA1_Stream3_IRQHandler+0x144>)
 8000678:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800067c:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_HTIF3)
 800067e:	4b2f      	ldr	r3, [pc, #188]	@ (800073c <DMA1_Stream3_IRQHandler+0x148>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000686:	2b00      	cmp	r3, #0
 8000688:	d026      	beq.n	80006d8 <DMA1_Stream3_IRQHandler+0xe4>
	{
	    if (__DMA1_Stream3_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 800068a:	4b2d      	ldr	r3, [pc, #180]	@ (8000740 <DMA1_Stream3_IRQHandler+0x14c>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000690:	2b00      	cmp	r3, #0
 8000692:	d021      	beq.n	80006d8 <DMA1_Stream3_IRQHandler+0xe4>
	    {
	    	__DMA1_Stream3_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000694:	4b2a      	ldr	r3, [pc, #168]	@ (8000740 <DMA1_Stream3_IRQHandler+0x14c>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800069a:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CHTIF3;
 800069c:	4b26      	ldr	r3, [pc, #152]	@ (8000738 <DMA1_Stream3_IRQHandler+0x144>)
 800069e:	689b      	ldr	r3, [r3, #8]
 80006a0:	4a25      	ldr	r2, [pc, #148]	@ (8000738 <DMA1_Stream3_IRQHandler+0x144>)
 80006a2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80006a6:	6093      	str	r3, [r2, #8]

	    	if(__DMA1_Stream3_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80006a8:	4b25      	ldr	r3, [pc, #148]	@ (8000740 <DMA1_Stream3_IRQHandler+0x14c>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80006ae:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80006b2:	4293      	cmp	r3, r2
 80006b4:	d110      	bne.n	80006d8 <DMA1_Stream3_IRQHandler+0xe4>
	    	{
	    		if((__DMA1_Stream3_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80006b6:	4b22      	ldr	r3, [pc, #136]	@ (8000740 <DMA1_Stream3_IRQHandler+0x14c>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	685b      	ldr	r3, [r3, #4]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d004      	beq.n	80006d0 <DMA1_Stream3_IRQHandler+0xdc>
	    		{
	    			__DMA1_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80006c6:	4b1e      	ldr	r3, [pc, #120]	@ (8000740 <DMA1_Stream3_IRQHandler+0x14c>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80006cc:	4798      	blx	r3
 80006ce:	e003      	b.n	80006d8 <DMA1_Stream3_IRQHandler+0xe4>
	    		}
	    		else
	    		{
	    			__DMA1_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80006d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000740 <DMA1_Stream3_IRQHandler+0x14c>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80006d6:	4798      	blx	r3
	    		}
	    	}
	    }
	}

	if(DMA_LISR & DMA_LISR_TCIF3)
 80006d8:	4b18      	ldr	r3, [pc, #96]	@ (800073c <DMA1_Stream3_IRQHandler+0x148>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d026      	beq.n	8000732 <DMA1_Stream3_IRQHandler+0x13e>
	{
	    if (__DMA1_Stream3_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 80006e4:	4b16      	ldr	r3, [pc, #88]	@ (8000740 <DMA1_Stream3_IRQHandler+0x14c>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d021      	beq.n	8000732 <DMA1_Stream3_IRQHandler+0x13e>
	    {
	    	__DMA1_Stream3_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80006ee:	4b14      	ldr	r3, [pc, #80]	@ (8000740 <DMA1_Stream3_IRQHandler+0x14c>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80006f4:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CTCIF3;
 80006f6:	4b10      	ldr	r3, [pc, #64]	@ (8000738 <DMA1_Stream3_IRQHandler+0x144>)
 80006f8:	689b      	ldr	r3, [r3, #8]
 80006fa:	4a0f      	ldr	r2, [pc, #60]	@ (8000738 <DMA1_Stream3_IRQHandler+0x144>)
 80006fc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000700:	6093      	str	r3, [r2, #8]

	    	if(__DMA1_Stream3_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000702:	4b0f      	ldr	r3, [pc, #60]	@ (8000740 <DMA1_Stream3_IRQHandler+0x14c>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000708:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800070c:	4293      	cmp	r3, r2
 800070e:	d110      	bne.n	8000732 <DMA1_Stream3_IRQHandler+0x13e>
	    	{
	    		if((__DMA1_Stream3_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000710:	4b0b      	ldr	r3, [pc, #44]	@ (8000740 <DMA1_Stream3_IRQHandler+0x14c>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	685b      	ldr	r3, [r3, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800071c:	2b00      	cmp	r3, #0
 800071e:	d004      	beq.n	800072a <DMA1_Stream3_IRQHandler+0x136>
	    		{
	    			__DMA1_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000720:	4b07      	ldr	r3, [pc, #28]	@ (8000740 <DMA1_Stream3_IRQHandler+0x14c>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000726:	4798      	blx	r3
	    			__DMA1_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
	    		}
	    	}
	    }
	}
}
 8000728:	e003      	b.n	8000732 <DMA1_Stream3_IRQHandler+0x13e>
	    			__DMA1_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800072a:	4b05      	ldr	r3, [pc, #20]	@ (8000740 <DMA1_Stream3_IRQHandler+0x14c>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000730:	4798      	blx	r3
}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	40026000 	.word	0x40026000
 800073c:	20000060 	.word	0x20000060
 8000740:	2000002c 	.word	0x2000002c

08000744 <DMA1_Stream4_IRQHandler>:

void DMA1_Stream4_IRQHandler(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
	DMA_HISR = DMA1 -> HISR;
 8000748:	4b4f      	ldr	r3, [pc, #316]	@ (8000888 <DMA1_Stream4_IRQHandler+0x144>)
 800074a:	685b      	ldr	r3, [r3, #4]
 800074c:	4a4f      	ldr	r2, [pc, #316]	@ (800088c <DMA1_Stream4_IRQHandler+0x148>)
 800074e:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF4)
 8000750:	4b4e      	ldr	r3, [pc, #312]	@ (800088c <DMA1_Stream4_IRQHandler+0x148>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f003 0301 	and.w	r3, r3, #1
 8000758:	2b00      	cmp	r3, #0
 800075a:	d00e      	beq.n	800077a <DMA1_Stream4_IRQHandler+0x36>
	{
	    if (__DMA1_Stream4_Config__ -> ISR_Routines.FIFO_Error_ISR)
 800075c:	4b4c      	ldr	r3, [pc, #304]	@ (8000890 <DMA1_Stream4_IRQHandler+0x14c>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000762:	2b00      	cmp	r3, #0
 8000764:	d009      	beq.n	800077a <DMA1_Stream4_IRQHandler+0x36>
	    {
	    	__DMA1_Stream4_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8000766:	4b4a      	ldr	r3, [pc, #296]	@ (8000890 <DMA1_Stream4_IRQHandler+0x14c>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800076c:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_HIFCR_CFEIF5;
 800076e:	4b46      	ldr	r3, [pc, #280]	@ (8000888 <DMA1_Stream4_IRQHandler+0x144>)
 8000770:	689b      	ldr	r3, [r3, #8]
 8000772:	4a45      	ldr	r2, [pc, #276]	@ (8000888 <DMA1_Stream4_IRQHandler+0x144>)
 8000774:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000778:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_HISR & DMA_HISR_DMEIF4)
 800077a:	4b44      	ldr	r3, [pc, #272]	@ (800088c <DMA1_Stream4_IRQHandler+0x148>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	f003 0304 	and.w	r3, r3, #4
 8000782:	2b00      	cmp	r3, #0
 8000784:	d00e      	beq.n	80007a4 <DMA1_Stream4_IRQHandler+0x60>
	{
	    if (__DMA1_Stream4_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8000786:	4b42      	ldr	r3, [pc, #264]	@ (8000890 <DMA1_Stream4_IRQHandler+0x14c>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800078c:	2b00      	cmp	r3, #0
 800078e:	d009      	beq.n	80007a4 <DMA1_Stream4_IRQHandler+0x60>
	    {
	    	__DMA1_Stream4_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8000790:	4b3f      	ldr	r3, [pc, #252]	@ (8000890 <DMA1_Stream4_IRQHandler+0x14c>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000796:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF4;
 8000798:	4b3b      	ldr	r3, [pc, #236]	@ (8000888 <DMA1_Stream4_IRQHandler+0x144>)
 800079a:	68db      	ldr	r3, [r3, #12]
 800079c:	4a3a      	ldr	r2, [pc, #232]	@ (8000888 <DMA1_Stream4_IRQHandler+0x144>)
 800079e:	f043 0304 	orr.w	r3, r3, #4
 80007a2:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_TEIF4)
 80007a4:	4b39      	ldr	r3, [pc, #228]	@ (800088c <DMA1_Stream4_IRQHandler+0x148>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	f003 0308 	and.w	r3, r3, #8
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d00e      	beq.n	80007ce <DMA1_Stream4_IRQHandler+0x8a>
	{
	    if (__DMA1_Stream4_Config__ -> ISR_Routines.Transfer_Error_ISR)
 80007b0:	4b37      	ldr	r3, [pc, #220]	@ (8000890 <DMA1_Stream4_IRQHandler+0x14c>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d009      	beq.n	80007ce <DMA1_Stream4_IRQHandler+0x8a>
	    {
	    	__DMA1_Stream4_Config__ ->ISR_Routines.Transfer_Error_ISR();
 80007ba:	4b35      	ldr	r3, [pc, #212]	@ (8000890 <DMA1_Stream4_IRQHandler+0x14c>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007c0:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CTEIF4;
 80007c2:	4b31      	ldr	r3, [pc, #196]	@ (8000888 <DMA1_Stream4_IRQHandler+0x144>)
 80007c4:	68db      	ldr	r3, [r3, #12]
 80007c6:	4a30      	ldr	r2, [pc, #192]	@ (8000888 <DMA1_Stream4_IRQHandler+0x144>)
 80007c8:	f043 0308 	orr.w	r3, r3, #8
 80007cc:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_HTIF4)
 80007ce:	4b2f      	ldr	r3, [pc, #188]	@ (800088c <DMA1_Stream4_IRQHandler+0x148>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	f003 0310 	and.w	r3, r3, #16
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d026      	beq.n	8000828 <DMA1_Stream4_IRQHandler+0xe4>
	{
	    if (__DMA1_Stream4_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 80007da:	4b2d      	ldr	r3, [pc, #180]	@ (8000890 <DMA1_Stream4_IRQHandler+0x14c>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d021      	beq.n	8000828 <DMA1_Stream4_IRQHandler+0xe4>
	    {
	    	__DMA1_Stream4_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80007e4:	4b2a      	ldr	r3, [pc, #168]	@ (8000890 <DMA1_Stream4_IRQHandler+0x14c>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80007ea:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CHTIF4;
 80007ec:	4b26      	ldr	r3, [pc, #152]	@ (8000888 <DMA1_Stream4_IRQHandler+0x144>)
 80007ee:	68db      	ldr	r3, [r3, #12]
 80007f0:	4a25      	ldr	r2, [pc, #148]	@ (8000888 <DMA1_Stream4_IRQHandler+0x144>)
 80007f2:	f043 0310 	orr.w	r3, r3, #16
 80007f6:	60d3      	str	r3, [r2, #12]

	    	if(__DMA1_Stream4_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80007f8:	4b25      	ldr	r3, [pc, #148]	@ (8000890 <DMA1_Stream4_IRQHandler+0x14c>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80007fe:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000802:	4293      	cmp	r3, r2
 8000804:	d110      	bne.n	8000828 <DMA1_Stream4_IRQHandler+0xe4>
	    	{
	    		if((__DMA1_Stream4_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000806:	4b22      	ldr	r3, [pc, #136]	@ (8000890 <DMA1_Stream4_IRQHandler+0x14c>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	685b      	ldr	r3, [r3, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000812:	2b00      	cmp	r3, #0
 8000814:	d004      	beq.n	8000820 <DMA1_Stream4_IRQHandler+0xdc>
	    		{
	    			__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000816:	4b1e      	ldr	r3, [pc, #120]	@ (8000890 <DMA1_Stream4_IRQHandler+0x14c>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800081c:	4798      	blx	r3
 800081e:	e003      	b.n	8000828 <DMA1_Stream4_IRQHandler+0xe4>
	    		}
	    		else
	    		{
	    			__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000820:	4b1b      	ldr	r3, [pc, #108]	@ (8000890 <DMA1_Stream4_IRQHandler+0x14c>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000826:	4798      	blx	r3
	    		}
	    	}
	    }
	}

	if(DMA_HISR & DMA_HISR_TCIF4)
 8000828:	4b18      	ldr	r3, [pc, #96]	@ (800088c <DMA1_Stream4_IRQHandler+0x148>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f003 0320 	and.w	r3, r3, #32
 8000830:	2b00      	cmp	r3, #0
 8000832:	d026      	beq.n	8000882 <DMA1_Stream4_IRQHandler+0x13e>
	{
	    if (__DMA1_Stream4_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8000834:	4b16      	ldr	r3, [pc, #88]	@ (8000890 <DMA1_Stream4_IRQHandler+0x14c>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083a:	2b00      	cmp	r3, #0
 800083c:	d021      	beq.n	8000882 <DMA1_Stream4_IRQHandler+0x13e>
	    {
	    	__DMA1_Stream4_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 800083e:	4b14      	ldr	r3, [pc, #80]	@ (8000890 <DMA1_Stream4_IRQHandler+0x14c>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000844:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CTCIF4;
 8000846:	4b10      	ldr	r3, [pc, #64]	@ (8000888 <DMA1_Stream4_IRQHandler+0x144>)
 8000848:	68db      	ldr	r3, [r3, #12]
 800084a:	4a0f      	ldr	r2, [pc, #60]	@ (8000888 <DMA1_Stream4_IRQHandler+0x144>)
 800084c:	f043 0320 	orr.w	r3, r3, #32
 8000850:	60d3      	str	r3, [r2, #12]

	    	if(__DMA1_Stream4_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000852:	4b0f      	ldr	r3, [pc, #60]	@ (8000890 <DMA1_Stream4_IRQHandler+0x14c>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000858:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800085c:	4293      	cmp	r3, r2
 800085e:	d110      	bne.n	8000882 <DMA1_Stream4_IRQHandler+0x13e>
	    	{
	    		if((__DMA1_Stream4_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000860:	4b0b      	ldr	r3, [pc, #44]	@ (8000890 <DMA1_Stream4_IRQHandler+0x14c>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	685b      	ldr	r3, [r3, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800086c:	2b00      	cmp	r3, #0
 800086e:	d004      	beq.n	800087a <DMA1_Stream4_IRQHandler+0x136>
	    		{
	    			__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000870:	4b07      	ldr	r3, [pc, #28]	@ (8000890 <DMA1_Stream4_IRQHandler+0x14c>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000876:	4798      	blx	r3
	    			__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
	    		}
	    	}
	    }
	}
}
 8000878:	e003      	b.n	8000882 <DMA1_Stream4_IRQHandler+0x13e>
	    			__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800087a:	4b05      	ldr	r3, [pc, #20]	@ (8000890 <DMA1_Stream4_IRQHandler+0x14c>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000880:	4798      	blx	r3
}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40026000 	.word	0x40026000
 800088c:	20000064 	.word	0x20000064
 8000890:	20000030 	.word	0x20000030

08000894 <DMA1_Stream5_IRQHandler>:




void DMA1_Stream5_IRQHandler(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
	DMA_HISR = DMA1 -> HISR;
 8000898:	4b4f      	ldr	r3, [pc, #316]	@ (80009d8 <DMA1_Stream5_IRQHandler+0x144>)
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	4a4f      	ldr	r2, [pc, #316]	@ (80009dc <DMA1_Stream5_IRQHandler+0x148>)
 800089e:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF5)
 80008a0:	4b4e      	ldr	r3, [pc, #312]	@ (80009dc <DMA1_Stream5_IRQHandler+0x148>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d00e      	beq.n	80008ca <DMA1_Stream5_IRQHandler+0x36>
	{
	    if (__DMA1_Stream5_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80008ac:	4b4c      	ldr	r3, [pc, #304]	@ (80009e0 <DMA1_Stream5_IRQHandler+0x14c>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d009      	beq.n	80008ca <DMA1_Stream5_IRQHandler+0x36>
	    {
	    	__DMA1_Stream5_Config__ ->ISR_Routines.FIFO_Error_ISR();
 80008b6:	4b4a      	ldr	r3, [pc, #296]	@ (80009e0 <DMA1_Stream5_IRQHandler+0x14c>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80008bc:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CFEIF5;
 80008be:	4b46      	ldr	r3, [pc, #280]	@ (80009d8 <DMA1_Stream5_IRQHandler+0x144>)
 80008c0:	68db      	ldr	r3, [r3, #12]
 80008c2:	4a45      	ldr	r2, [pc, #276]	@ (80009d8 <DMA1_Stream5_IRQHandler+0x144>)
 80008c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008c8:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_DMEIF5)
 80008ca:	4b44      	ldr	r3, [pc, #272]	@ (80009dc <DMA1_Stream5_IRQHandler+0x148>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d00e      	beq.n	80008f4 <DMA1_Stream5_IRQHandler+0x60>
	{
	    if (__DMA1_Stream5_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 80008d6:	4b42      	ldr	r3, [pc, #264]	@ (80009e0 <DMA1_Stream5_IRQHandler+0x14c>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d009      	beq.n	80008f4 <DMA1_Stream5_IRQHandler+0x60>
	    {
	    	__DMA1_Stream5_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 80008e0:	4b3f      	ldr	r3, [pc, #252]	@ (80009e0 <DMA1_Stream5_IRQHandler+0x14c>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008e6:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF5;
 80008e8:	4b3b      	ldr	r3, [pc, #236]	@ (80009d8 <DMA1_Stream5_IRQHandler+0x144>)
 80008ea:	68db      	ldr	r3, [r3, #12]
 80008ec:	4a3a      	ldr	r2, [pc, #232]	@ (80009d8 <DMA1_Stream5_IRQHandler+0x144>)
 80008ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008f2:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_TEIF5)
 80008f4:	4b39      	ldr	r3, [pc, #228]	@ (80009dc <DMA1_Stream5_IRQHandler+0x148>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d00e      	beq.n	800091e <DMA1_Stream5_IRQHandler+0x8a>
	{
	    if (__DMA1_Stream5_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8000900:	4b37      	ldr	r3, [pc, #220]	@ (80009e0 <DMA1_Stream5_IRQHandler+0x14c>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000906:	2b00      	cmp	r3, #0
 8000908:	d009      	beq.n	800091e <DMA1_Stream5_IRQHandler+0x8a>
	    {
	    	__DMA1_Stream5_Config__ ->ISR_Routines.Transfer_Error_ISR();
 800090a:	4b35      	ldr	r3, [pc, #212]	@ (80009e0 <DMA1_Stream5_IRQHandler+0x14c>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000910:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CTEIF5;
 8000912:	4b31      	ldr	r3, [pc, #196]	@ (80009d8 <DMA1_Stream5_IRQHandler+0x144>)
 8000914:	68db      	ldr	r3, [r3, #12]
 8000916:	4a30      	ldr	r2, [pc, #192]	@ (80009d8 <DMA1_Stream5_IRQHandler+0x144>)
 8000918:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800091c:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_HTIF5)
 800091e:	4b2f      	ldr	r3, [pc, #188]	@ (80009dc <DMA1_Stream5_IRQHandler+0x148>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000926:	2b00      	cmp	r3, #0
 8000928:	d026      	beq.n	8000978 <DMA1_Stream5_IRQHandler+0xe4>
	{
	    if (__DMA1_Stream5_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 800092a:	4b2d      	ldr	r3, [pc, #180]	@ (80009e0 <DMA1_Stream5_IRQHandler+0x14c>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000930:	2b00      	cmp	r3, #0
 8000932:	d021      	beq.n	8000978 <DMA1_Stream5_IRQHandler+0xe4>
	    {
	    	__DMA1_Stream5_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000934:	4b2a      	ldr	r3, [pc, #168]	@ (80009e0 <DMA1_Stream5_IRQHandler+0x14c>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800093a:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CHTIF5;
 800093c:	4b26      	ldr	r3, [pc, #152]	@ (80009d8 <DMA1_Stream5_IRQHandler+0x144>)
 800093e:	68db      	ldr	r3, [r3, #12]
 8000940:	4a25      	ldr	r2, [pc, #148]	@ (80009d8 <DMA1_Stream5_IRQHandler+0x144>)
 8000942:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000946:	60d3      	str	r3, [r2, #12]

	    	if(__DMA1_Stream5_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000948:	4b25      	ldr	r3, [pc, #148]	@ (80009e0 <DMA1_Stream5_IRQHandler+0x14c>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800094e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000952:	4293      	cmp	r3, r2
 8000954:	d110      	bne.n	8000978 <DMA1_Stream5_IRQHandler+0xe4>
	    	{
	    		if((__DMA1_Stream5_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000956:	4b22      	ldr	r3, [pc, #136]	@ (80009e0 <DMA1_Stream5_IRQHandler+0x14c>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	685b      	ldr	r3, [r3, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000962:	2b00      	cmp	r3, #0
 8000964:	d004      	beq.n	8000970 <DMA1_Stream5_IRQHandler+0xdc>
	    		{
	    			__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000966:	4b1e      	ldr	r3, [pc, #120]	@ (80009e0 <DMA1_Stream5_IRQHandler+0x14c>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800096c:	4798      	blx	r3
 800096e:	e003      	b.n	8000978 <DMA1_Stream5_IRQHandler+0xe4>
	    		}
	    		else
	    		{
	    			__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000970:	4b1b      	ldr	r3, [pc, #108]	@ (80009e0 <DMA1_Stream5_IRQHandler+0x14c>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000976:	4798      	blx	r3
	    		}
	    	}
	    }
	}

	if(DMA_HISR & DMA_HISR_TCIF5)
 8000978:	4b18      	ldr	r3, [pc, #96]	@ (80009dc <DMA1_Stream5_IRQHandler+0x148>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000980:	2b00      	cmp	r3, #0
 8000982:	d026      	beq.n	80009d2 <DMA1_Stream5_IRQHandler+0x13e>
	{
	    if (__DMA1_Stream5_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8000984:	4b16      	ldr	r3, [pc, #88]	@ (80009e0 <DMA1_Stream5_IRQHandler+0x14c>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800098a:	2b00      	cmp	r3, #0
 800098c:	d021      	beq.n	80009d2 <DMA1_Stream5_IRQHandler+0x13e>
	    {
	    	__DMA1_Stream5_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 800098e:	4b14      	ldr	r3, [pc, #80]	@ (80009e0 <DMA1_Stream5_IRQHandler+0x14c>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000994:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CTCIF5;
 8000996:	4b10      	ldr	r3, [pc, #64]	@ (80009d8 <DMA1_Stream5_IRQHandler+0x144>)
 8000998:	68db      	ldr	r3, [r3, #12]
 800099a:	4a0f      	ldr	r2, [pc, #60]	@ (80009d8 <DMA1_Stream5_IRQHandler+0x144>)
 800099c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80009a0:	60d3      	str	r3, [r2, #12]

	    	if(__DMA1_Stream5_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80009a2:	4b0f      	ldr	r3, [pc, #60]	@ (80009e0 <DMA1_Stream5_IRQHandler+0x14c>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80009a8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d110      	bne.n	80009d2 <DMA1_Stream5_IRQHandler+0x13e>
	    	{
	    		if((__DMA1_Stream5_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80009b0:	4b0b      	ldr	r3, [pc, #44]	@ (80009e0 <DMA1_Stream5_IRQHandler+0x14c>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d004      	beq.n	80009ca <DMA1_Stream5_IRQHandler+0x136>
	    		{
	    			__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80009c0:	4b07      	ldr	r3, [pc, #28]	@ (80009e0 <DMA1_Stream5_IRQHandler+0x14c>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80009c6:	4798      	blx	r3
	    			__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
	    		}
	    	}
	    }
	}
}
 80009c8:	e003      	b.n	80009d2 <DMA1_Stream5_IRQHandler+0x13e>
	    			__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80009ca:	4b05      	ldr	r3, [pc, #20]	@ (80009e0 <DMA1_Stream5_IRQHandler+0x14c>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80009d0:	4798      	blx	r3
}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40026000 	.word	0x40026000
 80009dc:	20000064 	.word	0x20000064
 80009e0:	20000034 	.word	0x20000034

080009e4 <DMA1_Stream6_IRQHandler>:



void DMA1_Stream6_IRQHandler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
	DMA_HISR = DMA1 -> HISR;
 80009e8:	4b4f      	ldr	r3, [pc, #316]	@ (8000b28 <DMA1_Stream6_IRQHandler+0x144>)
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	4a4f      	ldr	r2, [pc, #316]	@ (8000b2c <DMA1_Stream6_IRQHandler+0x148>)
 80009ee:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF6)
 80009f0:	4b4e      	ldr	r3, [pc, #312]	@ (8000b2c <DMA1_Stream6_IRQHandler+0x148>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d00e      	beq.n	8000a1a <DMA1_Stream6_IRQHandler+0x36>
	{
	    if (__DMA1_Stream6_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80009fc:	4b4c      	ldr	r3, [pc, #304]	@ (8000b30 <DMA1_Stream6_IRQHandler+0x14c>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d009      	beq.n	8000a1a <DMA1_Stream6_IRQHandler+0x36>
	    {
	    	__DMA1_Stream6_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8000a06:	4b4a      	ldr	r3, [pc, #296]	@ (8000b30 <DMA1_Stream6_IRQHandler+0x14c>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000a0c:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CFEIF6;
 8000a0e:	4b46      	ldr	r3, [pc, #280]	@ (8000b28 <DMA1_Stream6_IRQHandler+0x144>)
 8000a10:	68db      	ldr	r3, [r3, #12]
 8000a12:	4a45      	ldr	r2, [pc, #276]	@ (8000b28 <DMA1_Stream6_IRQHandler+0x144>)
 8000a14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000a18:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_DMEIF6)
 8000a1a:	4b44      	ldr	r3, [pc, #272]	@ (8000b2c <DMA1_Stream6_IRQHandler+0x148>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d00e      	beq.n	8000a44 <DMA1_Stream6_IRQHandler+0x60>
	{
	    if (__DMA1_Stream6_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8000a26:	4b42      	ldr	r3, [pc, #264]	@ (8000b30 <DMA1_Stream6_IRQHandler+0x14c>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d009      	beq.n	8000a44 <DMA1_Stream6_IRQHandler+0x60>
	    {
	    	__DMA1_Stream6_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8000a30:	4b3f      	ldr	r3, [pc, #252]	@ (8000b30 <DMA1_Stream6_IRQHandler+0x14c>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a36:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF6;
 8000a38:	4b3b      	ldr	r3, [pc, #236]	@ (8000b28 <DMA1_Stream6_IRQHandler+0x144>)
 8000a3a:	68db      	ldr	r3, [r3, #12]
 8000a3c:	4a3a      	ldr	r2, [pc, #232]	@ (8000b28 <DMA1_Stream6_IRQHandler+0x144>)
 8000a3e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a42:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_TEIF6)
 8000a44:	4b39      	ldr	r3, [pc, #228]	@ (8000b2c <DMA1_Stream6_IRQHandler+0x148>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d00e      	beq.n	8000a6e <DMA1_Stream6_IRQHandler+0x8a>
	{
	    if (__DMA1_Stream6_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8000a50:	4b37      	ldr	r3, [pc, #220]	@ (8000b30 <DMA1_Stream6_IRQHandler+0x14c>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d009      	beq.n	8000a6e <DMA1_Stream6_IRQHandler+0x8a>
	    {
	    	__DMA1_Stream6_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8000a5a:	4b35      	ldr	r3, [pc, #212]	@ (8000b30 <DMA1_Stream6_IRQHandler+0x14c>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a60:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CTEIF6;
 8000a62:	4b31      	ldr	r3, [pc, #196]	@ (8000b28 <DMA1_Stream6_IRQHandler+0x144>)
 8000a64:	68db      	ldr	r3, [r3, #12]
 8000a66:	4a30      	ldr	r2, [pc, #192]	@ (8000b28 <DMA1_Stream6_IRQHandler+0x144>)
 8000a68:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000a6c:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_HTIF6)
 8000a6e:	4b2f      	ldr	r3, [pc, #188]	@ (8000b2c <DMA1_Stream6_IRQHandler+0x148>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d026      	beq.n	8000ac8 <DMA1_Stream6_IRQHandler+0xe4>
	{
	    if (__DMA1_Stream6_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8000a7a:	4b2d      	ldr	r3, [pc, #180]	@ (8000b30 <DMA1_Stream6_IRQHandler+0x14c>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d021      	beq.n	8000ac8 <DMA1_Stream6_IRQHandler+0xe4>
	    {
	    	__DMA1_Stream6_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000a84:	4b2a      	ldr	r3, [pc, #168]	@ (8000b30 <DMA1_Stream6_IRQHandler+0x14c>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a8a:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CHTIF6;
 8000a8c:	4b26      	ldr	r3, [pc, #152]	@ (8000b28 <DMA1_Stream6_IRQHandler+0x144>)
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	4a25      	ldr	r2, [pc, #148]	@ (8000b28 <DMA1_Stream6_IRQHandler+0x144>)
 8000a92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000a96:	60d3      	str	r3, [r2, #12]

	    	if(__DMA1_Stream6_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000a98:	4b25      	ldr	r3, [pc, #148]	@ (8000b30 <DMA1_Stream6_IRQHandler+0x14c>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000a9e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d110      	bne.n	8000ac8 <DMA1_Stream6_IRQHandler+0xe4>
	    	{
	    		if((__DMA1_Stream6_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000aa6:	4b22      	ldr	r3, [pc, #136]	@ (8000b30 <DMA1_Stream6_IRQHandler+0x14c>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d004      	beq.n	8000ac0 <DMA1_Stream6_IRQHandler+0xdc>
	    		{
	    			__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000ab6:	4b1e      	ldr	r3, [pc, #120]	@ (8000b30 <DMA1_Stream6_IRQHandler+0x14c>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000abc:	4798      	blx	r3
 8000abe:	e003      	b.n	8000ac8 <DMA1_Stream6_IRQHandler+0xe4>
	    		}
	    		else
	    		{
	    			__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000ac0:	4b1b      	ldr	r3, [pc, #108]	@ (8000b30 <DMA1_Stream6_IRQHandler+0x14c>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ac6:	4798      	blx	r3
	    		}
	    	}
	    }
	}

	if(DMA_HISR & DMA_HISR_TCIF6)
 8000ac8:	4b18      	ldr	r3, [pc, #96]	@ (8000b2c <DMA1_Stream6_IRQHandler+0x148>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d026      	beq.n	8000b22 <DMA1_Stream6_IRQHandler+0x13e>
	{
	    if (__DMA1_Stream6_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8000ad4:	4b16      	ldr	r3, [pc, #88]	@ (8000b30 <DMA1_Stream6_IRQHandler+0x14c>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d021      	beq.n	8000b22 <DMA1_Stream6_IRQHandler+0x13e>
	    {
	    	__DMA1_Stream6_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000ade:	4b14      	ldr	r3, [pc, #80]	@ (8000b30 <DMA1_Stream6_IRQHandler+0x14c>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ae4:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CTCIF6;
 8000ae6:	4b10      	ldr	r3, [pc, #64]	@ (8000b28 <DMA1_Stream6_IRQHandler+0x144>)
 8000ae8:	68db      	ldr	r3, [r3, #12]
 8000aea:	4a0f      	ldr	r2, [pc, #60]	@ (8000b28 <DMA1_Stream6_IRQHandler+0x144>)
 8000aec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000af0:	60d3      	str	r3, [r2, #12]

	    	if(__DMA1_Stream6_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000af2:	4b0f      	ldr	r3, [pc, #60]	@ (8000b30 <DMA1_Stream6_IRQHandler+0x14c>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000af8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d110      	bne.n	8000b22 <DMA1_Stream6_IRQHandler+0x13e>
	    	{
	    		if((__DMA1_Stream6_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000b00:	4b0b      	ldr	r3, [pc, #44]	@ (8000b30 <DMA1_Stream6_IRQHandler+0x14c>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d004      	beq.n	8000b1a <DMA1_Stream6_IRQHandler+0x136>
	    		{
	    			__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000b10:	4b07      	ldr	r3, [pc, #28]	@ (8000b30 <DMA1_Stream6_IRQHandler+0x14c>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000b16:	4798      	blx	r3
	    			__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
	    		}
	    	}
	    }
	}
}
 8000b18:	e003      	b.n	8000b22 <DMA1_Stream6_IRQHandler+0x13e>
	    			__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000b1a:	4b05      	ldr	r3, [pc, #20]	@ (8000b30 <DMA1_Stream6_IRQHandler+0x14c>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000b20:	4798      	blx	r3
}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40026000 	.word	0x40026000
 8000b2c:	20000064 	.word	0x20000064
 8000b30:	20000038 	.word	0x20000038

08000b34 <DMA1_Stream7_IRQHandler>:


void DMA1_Stream7_IRQHandler(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
	DMA_HISR = DMA1 -> HISR;
 8000b38:	4b4f      	ldr	r3, [pc, #316]	@ (8000c78 <DMA1_Stream7_IRQHandler+0x144>)
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	4a4f      	ldr	r2, [pc, #316]	@ (8000c7c <DMA1_Stream7_IRQHandler+0x148>)
 8000b3e:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF7)
 8000b40:	4b4e      	ldr	r3, [pc, #312]	@ (8000c7c <DMA1_Stream7_IRQHandler+0x148>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d00e      	beq.n	8000b6a <DMA1_Stream7_IRQHandler+0x36>
	{
	    if (__DMA1_Stream7_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8000b4c:	4b4c      	ldr	r3, [pc, #304]	@ (8000c80 <DMA1_Stream7_IRQHandler+0x14c>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d009      	beq.n	8000b6a <DMA1_Stream7_IRQHandler+0x36>
	    {
	    	__DMA1_Stream7_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8000b56:	4b4a      	ldr	r3, [pc, #296]	@ (8000c80 <DMA1_Stream7_IRQHandler+0x14c>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b5c:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CFEIF7;
 8000b5e:	4b46      	ldr	r3, [pc, #280]	@ (8000c78 <DMA1_Stream7_IRQHandler+0x144>)
 8000b60:	68db      	ldr	r3, [r3, #12]
 8000b62:	4a45      	ldr	r2, [pc, #276]	@ (8000c78 <DMA1_Stream7_IRQHandler+0x144>)
 8000b64:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b68:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_DMEIF7)
 8000b6a:	4b44      	ldr	r3, [pc, #272]	@ (8000c7c <DMA1_Stream7_IRQHandler+0x148>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d00e      	beq.n	8000b94 <DMA1_Stream7_IRQHandler+0x60>
	{
	    if (__DMA1_Stream7_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8000b76:	4b42      	ldr	r3, [pc, #264]	@ (8000c80 <DMA1_Stream7_IRQHandler+0x14c>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d009      	beq.n	8000b94 <DMA1_Stream7_IRQHandler+0x60>
	    {
	    	__DMA1_Stream7_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8000b80:	4b3f      	ldr	r3, [pc, #252]	@ (8000c80 <DMA1_Stream7_IRQHandler+0x14c>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b86:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF7;
 8000b88:	4b3b      	ldr	r3, [pc, #236]	@ (8000c78 <DMA1_Stream7_IRQHandler+0x144>)
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	4a3a      	ldr	r2, [pc, #232]	@ (8000c78 <DMA1_Stream7_IRQHandler+0x144>)
 8000b8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000b92:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_TEIF7)
 8000b94:	4b39      	ldr	r3, [pc, #228]	@ (8000c7c <DMA1_Stream7_IRQHandler+0x148>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d00e      	beq.n	8000bbe <DMA1_Stream7_IRQHandler+0x8a>
	{
	    if (__DMA1_Stream7_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8000ba0:	4b37      	ldr	r3, [pc, #220]	@ (8000c80 <DMA1_Stream7_IRQHandler+0x14c>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d009      	beq.n	8000bbe <DMA1_Stream7_IRQHandler+0x8a>
	    {
	    	__DMA1_Stream7_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8000baa:	4b35      	ldr	r3, [pc, #212]	@ (8000c80 <DMA1_Stream7_IRQHandler+0x14c>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bb0:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CTEIF7;
 8000bb2:	4b31      	ldr	r3, [pc, #196]	@ (8000c78 <DMA1_Stream7_IRQHandler+0x144>)
 8000bb4:	68db      	ldr	r3, [r3, #12]
 8000bb6:	4a30      	ldr	r2, [pc, #192]	@ (8000c78 <DMA1_Stream7_IRQHandler+0x144>)
 8000bb8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000bbc:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_HTIF7)
 8000bbe:	4b2f      	ldr	r3, [pc, #188]	@ (8000c7c <DMA1_Stream7_IRQHandler+0x148>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d026      	beq.n	8000c18 <DMA1_Stream7_IRQHandler+0xe4>
	{
	    if (__DMA1_Stream7_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8000bca:	4b2d      	ldr	r3, [pc, #180]	@ (8000c80 <DMA1_Stream7_IRQHandler+0x14c>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d021      	beq.n	8000c18 <DMA1_Stream7_IRQHandler+0xe4>
	    {
	    	__DMA1_Stream7_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000bd4:	4b2a      	ldr	r3, [pc, #168]	@ (8000c80 <DMA1_Stream7_IRQHandler+0x14c>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000bda:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CHTIF7;
 8000bdc:	4b26      	ldr	r3, [pc, #152]	@ (8000c78 <DMA1_Stream7_IRQHandler+0x144>)
 8000bde:	68db      	ldr	r3, [r3, #12]
 8000be0:	4a25      	ldr	r2, [pc, #148]	@ (8000c78 <DMA1_Stream7_IRQHandler+0x144>)
 8000be2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000be6:	60d3      	str	r3, [r2, #12]

	    	if(__DMA1_Stream7_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000be8:	4b25      	ldr	r3, [pc, #148]	@ (8000c80 <DMA1_Stream7_IRQHandler+0x14c>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000bee:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d110      	bne.n	8000c18 <DMA1_Stream7_IRQHandler+0xe4>
	    	{
	    		if((__DMA1_Stream7_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000bf6:	4b22      	ldr	r3, [pc, #136]	@ (8000c80 <DMA1_Stream7_IRQHandler+0x14c>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d004      	beq.n	8000c10 <DMA1_Stream7_IRQHandler+0xdc>
	    		{
	    			__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000c06:	4b1e      	ldr	r3, [pc, #120]	@ (8000c80 <DMA1_Stream7_IRQHandler+0x14c>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000c0c:	4798      	blx	r3
 8000c0e:	e003      	b.n	8000c18 <DMA1_Stream7_IRQHandler+0xe4>
	    		}
	    		else
	    		{
	    			__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000c10:	4b1b      	ldr	r3, [pc, #108]	@ (8000c80 <DMA1_Stream7_IRQHandler+0x14c>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000c16:	4798      	blx	r3
	    		}
	    	}
	    }
	}

	if(DMA_HISR & DMA_HISR_TCIF7)
 8000c18:	4b18      	ldr	r3, [pc, #96]	@ (8000c7c <DMA1_Stream7_IRQHandler+0x148>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d026      	beq.n	8000c72 <DMA1_Stream7_IRQHandler+0x13e>
	{
	    if (__DMA1_Stream7_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8000c24:	4b16      	ldr	r3, [pc, #88]	@ (8000c80 <DMA1_Stream7_IRQHandler+0x14c>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d021      	beq.n	8000c72 <DMA1_Stream7_IRQHandler+0x13e>
	    {
	    	__DMA1_Stream7_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000c2e:	4b14      	ldr	r3, [pc, #80]	@ (8000c80 <DMA1_Stream7_IRQHandler+0x14c>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c34:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CTCIF7;
 8000c36:	4b10      	ldr	r3, [pc, #64]	@ (8000c78 <DMA1_Stream7_IRQHandler+0x144>)
 8000c38:	68db      	ldr	r3, [r3, #12]
 8000c3a:	4a0f      	ldr	r2, [pc, #60]	@ (8000c78 <DMA1_Stream7_IRQHandler+0x144>)
 8000c3c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000c40:	60d3      	str	r3, [r2, #12]

	    	if(__DMA1_Stream7_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000c42:	4b0f      	ldr	r3, [pc, #60]	@ (8000c80 <DMA1_Stream7_IRQHandler+0x14c>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c48:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d110      	bne.n	8000c72 <DMA1_Stream7_IRQHandler+0x13e>
	    	{
	    		if((__DMA1_Stream7_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000c50:	4b0b      	ldr	r3, [pc, #44]	@ (8000c80 <DMA1_Stream7_IRQHandler+0x14c>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d004      	beq.n	8000c6a <DMA1_Stream7_IRQHandler+0x136>
	    		{
	    			__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000c60:	4b07      	ldr	r3, [pc, #28]	@ (8000c80 <DMA1_Stream7_IRQHandler+0x14c>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000c66:	4798      	blx	r3
	    			__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
	    		}
	    	}
	    }
	}
}
 8000c68:	e003      	b.n	8000c72 <DMA1_Stream7_IRQHandler+0x13e>
	    			__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000c6a:	4b05      	ldr	r3, [pc, #20]	@ (8000c80 <DMA1_Stream7_IRQHandler+0x14c>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000c70:	4798      	blx	r3
}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40026000 	.word	0x40026000
 8000c7c:	20000064 	.word	0x20000064
 8000c80:	2000003c 	.word	0x2000003c

08000c84 <DMA2_Stream0_IRQHandler>:

void DMA2_Stream0_IRQHandler(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
	DMA_LISR = DMA2 -> LISR;
 8000c88:	4b4f      	ldr	r3, [pc, #316]	@ (8000dc8 <DMA2_Stream0_IRQHandler+0x144>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a4f      	ldr	r2, [pc, #316]	@ (8000dcc <DMA2_Stream0_IRQHandler+0x148>)
 8000c8e:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF0)
 8000c90:	4b4e      	ldr	r3, [pc, #312]	@ (8000dcc <DMA2_Stream0_IRQHandler+0x148>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f003 0301 	and.w	r3, r3, #1
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d00e      	beq.n	8000cba <DMA2_Stream0_IRQHandler+0x36>
	{
	    if (__DMA2_Stream0_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8000c9c:	4b4c      	ldr	r3, [pc, #304]	@ (8000dd0 <DMA2_Stream0_IRQHandler+0x14c>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d009      	beq.n	8000cba <DMA2_Stream0_IRQHandler+0x36>
	    {
	    	__DMA2_Stream0_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8000ca6:	4b4a      	ldr	r3, [pc, #296]	@ (8000dd0 <DMA2_Stream0_IRQHandler+0x14c>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000cac:	4798      	blx	r3
	    	DMA2 -> LIFCR |= DMA_LIFCR_CFEIF0;
 8000cae:	4b46      	ldr	r3, [pc, #280]	@ (8000dc8 <DMA2_Stream0_IRQHandler+0x144>)
 8000cb0:	689b      	ldr	r3, [r3, #8]
 8000cb2:	4a45      	ldr	r2, [pc, #276]	@ (8000dc8 <DMA2_Stream0_IRQHandler+0x144>)
 8000cb4:	f043 0301 	orr.w	r3, r3, #1
 8000cb8:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_DMEIF0)
 8000cba:	4b44      	ldr	r3, [pc, #272]	@ (8000dcc <DMA2_Stream0_IRQHandler+0x148>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f003 0304 	and.w	r3, r3, #4
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d00e      	beq.n	8000ce4 <DMA2_Stream0_IRQHandler+0x60>
	{
	    if (__DMA2_Stream0_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8000cc6:	4b42      	ldr	r3, [pc, #264]	@ (8000dd0 <DMA2_Stream0_IRQHandler+0x14c>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d009      	beq.n	8000ce4 <DMA2_Stream0_IRQHandler+0x60>
	    {
	    	__DMA2_Stream0_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8000cd0:	4b3f      	ldr	r3, [pc, #252]	@ (8000dd0 <DMA2_Stream0_IRQHandler+0x14c>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd6:	4798      	blx	r3
	    	DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF0;
 8000cd8:	4b3b      	ldr	r3, [pc, #236]	@ (8000dc8 <DMA2_Stream0_IRQHandler+0x144>)
 8000cda:	689b      	ldr	r3, [r3, #8]
 8000cdc:	4a3a      	ldr	r2, [pc, #232]	@ (8000dc8 <DMA2_Stream0_IRQHandler+0x144>)
 8000cde:	f043 0304 	orr.w	r3, r3, #4
 8000ce2:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_TEIF0)
 8000ce4:	4b39      	ldr	r3, [pc, #228]	@ (8000dcc <DMA2_Stream0_IRQHandler+0x148>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f003 0308 	and.w	r3, r3, #8
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d00e      	beq.n	8000d0e <DMA2_Stream0_IRQHandler+0x8a>
	{
	    if (__DMA2_Stream0_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8000cf0:	4b37      	ldr	r3, [pc, #220]	@ (8000dd0 <DMA2_Stream0_IRQHandler+0x14c>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d009      	beq.n	8000d0e <DMA2_Stream0_IRQHandler+0x8a>
	    {
	    	__DMA2_Stream0_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8000cfa:	4b35      	ldr	r3, [pc, #212]	@ (8000dd0 <DMA2_Stream0_IRQHandler+0x14c>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d00:	4798      	blx	r3
	    	DMA2 -> LIFCR |= DMA_LIFCR_CTEIF0;
 8000d02:	4b31      	ldr	r3, [pc, #196]	@ (8000dc8 <DMA2_Stream0_IRQHandler+0x144>)
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	4a30      	ldr	r2, [pc, #192]	@ (8000dc8 <DMA2_Stream0_IRQHandler+0x144>)
 8000d08:	f043 0308 	orr.w	r3, r3, #8
 8000d0c:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_HTIF0)
 8000d0e:	4b2f      	ldr	r3, [pc, #188]	@ (8000dcc <DMA2_Stream0_IRQHandler+0x148>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f003 0310 	and.w	r3, r3, #16
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d026      	beq.n	8000d68 <DMA2_Stream0_IRQHandler+0xe4>
	{
	    if (__DMA2_Stream0_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8000d1a:	4b2d      	ldr	r3, [pc, #180]	@ (8000dd0 <DMA2_Stream0_IRQHandler+0x14c>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d021      	beq.n	8000d68 <DMA2_Stream0_IRQHandler+0xe4>
	    {
	    	__DMA2_Stream0_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000d24:	4b2a      	ldr	r3, [pc, #168]	@ (8000dd0 <DMA2_Stream0_IRQHandler+0x14c>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d2a:	4798      	blx	r3
	    	DMA2 -> LIFCR |= DMA_LIFCR_CHTIF0;
 8000d2c:	4b26      	ldr	r3, [pc, #152]	@ (8000dc8 <DMA2_Stream0_IRQHandler+0x144>)
 8000d2e:	689b      	ldr	r3, [r3, #8]
 8000d30:	4a25      	ldr	r2, [pc, #148]	@ (8000dc8 <DMA2_Stream0_IRQHandler+0x144>)
 8000d32:	f043 0310 	orr.w	r3, r3, #16
 8000d36:	6093      	str	r3, [r2, #8]

	    	if(__DMA2_Stream0_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000d38:	4b25      	ldr	r3, [pc, #148]	@ (8000dd0 <DMA2_Stream0_IRQHandler+0x14c>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d3e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d110      	bne.n	8000d68 <DMA2_Stream0_IRQHandler+0xe4>
	    	{
	    		if((__DMA2_Stream0_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000d46:	4b22      	ldr	r3, [pc, #136]	@ (8000dd0 <DMA2_Stream0_IRQHandler+0x14c>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d004      	beq.n	8000d60 <DMA2_Stream0_IRQHandler+0xdc>
	    		{
	    			__DMA2_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000d56:	4b1e      	ldr	r3, [pc, #120]	@ (8000dd0 <DMA2_Stream0_IRQHandler+0x14c>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000d5c:	4798      	blx	r3
 8000d5e:	e003      	b.n	8000d68 <DMA2_Stream0_IRQHandler+0xe4>
	    		}
	    		else
	    		{
	    			__DMA2_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000d60:	4b1b      	ldr	r3, [pc, #108]	@ (8000dd0 <DMA2_Stream0_IRQHandler+0x14c>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000d66:	4798      	blx	r3
	    		}
	    	}
	    }
	}

	if(DMA_LISR & DMA_LISR_TCIF0)
 8000d68:	4b18      	ldr	r3, [pc, #96]	@ (8000dcc <DMA2_Stream0_IRQHandler+0x148>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f003 0320 	and.w	r3, r3, #32
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d026      	beq.n	8000dc2 <DMA2_Stream0_IRQHandler+0x13e>
	{
	    if (__DMA2_Stream0_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8000d74:	4b16      	ldr	r3, [pc, #88]	@ (8000dd0 <DMA2_Stream0_IRQHandler+0x14c>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d021      	beq.n	8000dc2 <DMA2_Stream0_IRQHandler+0x13e>
	    {
	    	__DMA2_Stream0_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000d7e:	4b14      	ldr	r3, [pc, #80]	@ (8000dd0 <DMA2_Stream0_IRQHandler+0x14c>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d84:	4798      	blx	r3
	    	DMA2 -> LIFCR |= DMA_LIFCR_CTCIF0;
 8000d86:	4b10      	ldr	r3, [pc, #64]	@ (8000dc8 <DMA2_Stream0_IRQHandler+0x144>)
 8000d88:	689b      	ldr	r3, [r3, #8]
 8000d8a:	4a0f      	ldr	r2, [pc, #60]	@ (8000dc8 <DMA2_Stream0_IRQHandler+0x144>)
 8000d8c:	f043 0320 	orr.w	r3, r3, #32
 8000d90:	6093      	str	r3, [r2, #8]

	    	if(__DMA2_Stream0_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000d92:	4b0f      	ldr	r3, [pc, #60]	@ (8000dd0 <DMA2_Stream0_IRQHandler+0x14c>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d98:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d110      	bne.n	8000dc2 <DMA2_Stream0_IRQHandler+0x13e>
	    	{
	    		if((__DMA2_Stream0_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000da0:	4b0b      	ldr	r3, [pc, #44]	@ (8000dd0 <DMA2_Stream0_IRQHandler+0x14c>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d004      	beq.n	8000dba <DMA2_Stream0_IRQHandler+0x136>
	    		{
	    			__DMA2_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000db0:	4b07      	ldr	r3, [pc, #28]	@ (8000dd0 <DMA2_Stream0_IRQHandler+0x14c>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000db6:	4798      	blx	r3
	    			__DMA2_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
	    		}
	    	}
	    }
	}
}
 8000db8:	e003      	b.n	8000dc2 <DMA2_Stream0_IRQHandler+0x13e>
	    			__DMA2_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000dba:	4b05      	ldr	r3, [pc, #20]	@ (8000dd0 <DMA2_Stream0_IRQHandler+0x14c>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000dc0:	4798      	blx	r3
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40026400 	.word	0x40026400
 8000dcc:	20000060 	.word	0x20000060
 8000dd0:	20000040 	.word	0x20000040

08000dd4 <DMA2_Stream1_IRQHandler>:

void DMA2_Stream1_IRQHandler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
	DMA_LISR = DMA2 -> LISR;
 8000dd8:	4b4f      	ldr	r3, [pc, #316]	@ (8000f18 <DMA2_Stream1_IRQHandler+0x144>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a4f      	ldr	r2, [pc, #316]	@ (8000f1c <DMA2_Stream1_IRQHandler+0x148>)
 8000dde:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF1)
 8000de0:	4b4e      	ldr	r3, [pc, #312]	@ (8000f1c <DMA2_Stream1_IRQHandler+0x148>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d00e      	beq.n	8000e0a <DMA2_Stream1_IRQHandler+0x36>
	{
	    if (__DMA2_Stream1_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8000dec:	4b4c      	ldr	r3, [pc, #304]	@ (8000f20 <DMA2_Stream1_IRQHandler+0x14c>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d009      	beq.n	8000e0a <DMA2_Stream1_IRQHandler+0x36>
	    {
	    	__DMA2_Stream1_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8000df6:	4b4a      	ldr	r3, [pc, #296]	@ (8000f20 <DMA2_Stream1_IRQHandler+0x14c>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000dfc:	4798      	blx	r3
	    	DMA2 -> LIFCR |= DMA_LIFCR_CFEIF1;
 8000dfe:	4b46      	ldr	r3, [pc, #280]	@ (8000f18 <DMA2_Stream1_IRQHandler+0x144>)
 8000e00:	689b      	ldr	r3, [r3, #8]
 8000e02:	4a45      	ldr	r2, [pc, #276]	@ (8000f18 <DMA2_Stream1_IRQHandler+0x144>)
 8000e04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e08:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_DMEIF1)
 8000e0a:	4b44      	ldr	r3, [pc, #272]	@ (8000f1c <DMA2_Stream1_IRQHandler+0x148>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d00e      	beq.n	8000e34 <DMA2_Stream1_IRQHandler+0x60>
	{
	    if (__DMA2_Stream1_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8000e16:	4b42      	ldr	r3, [pc, #264]	@ (8000f20 <DMA2_Stream1_IRQHandler+0x14c>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d009      	beq.n	8000e34 <DMA2_Stream1_IRQHandler+0x60>
	    {
	    	__DMA2_Stream1_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8000e20:	4b3f      	ldr	r3, [pc, #252]	@ (8000f20 <DMA2_Stream1_IRQHandler+0x14c>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e26:	4798      	blx	r3
	    	DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF1;
 8000e28:	4b3b      	ldr	r3, [pc, #236]	@ (8000f18 <DMA2_Stream1_IRQHandler+0x144>)
 8000e2a:	689b      	ldr	r3, [r3, #8]
 8000e2c:	4a3a      	ldr	r2, [pc, #232]	@ (8000f18 <DMA2_Stream1_IRQHandler+0x144>)
 8000e2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e32:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_TEIF1)
 8000e34:	4b39      	ldr	r3, [pc, #228]	@ (8000f1c <DMA2_Stream1_IRQHandler+0x148>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d00e      	beq.n	8000e5e <DMA2_Stream1_IRQHandler+0x8a>
	{
	    if (__DMA2_Stream1_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8000e40:	4b37      	ldr	r3, [pc, #220]	@ (8000f20 <DMA2_Stream1_IRQHandler+0x14c>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d009      	beq.n	8000e5e <DMA2_Stream1_IRQHandler+0x8a>
	    {
	    	__DMA2_Stream1_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8000e4a:	4b35      	ldr	r3, [pc, #212]	@ (8000f20 <DMA2_Stream1_IRQHandler+0x14c>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e50:	4798      	blx	r3
	    	DMA2 -> LIFCR |= DMA_LIFCR_CTEIF1;
 8000e52:	4b31      	ldr	r3, [pc, #196]	@ (8000f18 <DMA2_Stream1_IRQHandler+0x144>)
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	4a30      	ldr	r2, [pc, #192]	@ (8000f18 <DMA2_Stream1_IRQHandler+0x144>)
 8000e58:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e5c:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_HTIF1)
 8000e5e:	4b2f      	ldr	r3, [pc, #188]	@ (8000f1c <DMA2_Stream1_IRQHandler+0x148>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d026      	beq.n	8000eb8 <DMA2_Stream1_IRQHandler+0xe4>
	{
	    if (__DMA2_Stream1_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8000e6a:	4b2d      	ldr	r3, [pc, #180]	@ (8000f20 <DMA2_Stream1_IRQHandler+0x14c>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d021      	beq.n	8000eb8 <DMA2_Stream1_IRQHandler+0xe4>
	    {
	    	__DMA2_Stream1_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000e74:	4b2a      	ldr	r3, [pc, #168]	@ (8000f20 <DMA2_Stream1_IRQHandler+0x14c>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e7a:	4798      	blx	r3
	    	DMA2 -> LIFCR |= DMA_LIFCR_CHTIF1;
 8000e7c:	4b26      	ldr	r3, [pc, #152]	@ (8000f18 <DMA2_Stream1_IRQHandler+0x144>)
 8000e7e:	689b      	ldr	r3, [r3, #8]
 8000e80:	4a25      	ldr	r2, [pc, #148]	@ (8000f18 <DMA2_Stream1_IRQHandler+0x144>)
 8000e82:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e86:	6093      	str	r3, [r2, #8]

	    	if(__DMA2_Stream1_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000e88:	4b25      	ldr	r3, [pc, #148]	@ (8000f20 <DMA2_Stream1_IRQHandler+0x14c>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e8e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d110      	bne.n	8000eb8 <DMA2_Stream1_IRQHandler+0xe4>
	    	{
	    		if((__DMA2_Stream1_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000e96:	4b22      	ldr	r3, [pc, #136]	@ (8000f20 <DMA2_Stream1_IRQHandler+0x14c>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d004      	beq.n	8000eb0 <DMA2_Stream1_IRQHandler+0xdc>
	    		{
	    			__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000ea6:	4b1e      	ldr	r3, [pc, #120]	@ (8000f20 <DMA2_Stream1_IRQHandler+0x14c>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000eac:	4798      	blx	r3
 8000eae:	e003      	b.n	8000eb8 <DMA2_Stream1_IRQHandler+0xe4>
	    		}
	    		else
	    		{
	    			__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000eb0:	4b1b      	ldr	r3, [pc, #108]	@ (8000f20 <DMA2_Stream1_IRQHandler+0x14c>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000eb6:	4798      	blx	r3
	    		}
	    	}
	    }
	}

	if(DMA_LISR & DMA_LISR_TCIF1)
 8000eb8:	4b18      	ldr	r3, [pc, #96]	@ (8000f1c <DMA2_Stream1_IRQHandler+0x148>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d026      	beq.n	8000f12 <DMA2_Stream1_IRQHandler+0x13e>
	{
	    if (__DMA2_Stream1_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8000ec4:	4b16      	ldr	r3, [pc, #88]	@ (8000f20 <DMA2_Stream1_IRQHandler+0x14c>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d021      	beq.n	8000f12 <DMA2_Stream1_IRQHandler+0x13e>
	    {
	    	__DMA2_Stream1_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000ece:	4b14      	ldr	r3, [pc, #80]	@ (8000f20 <DMA2_Stream1_IRQHandler+0x14c>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ed4:	4798      	blx	r3
	    	DMA2 -> LIFCR |= DMA_LIFCR_CTCIF1;
 8000ed6:	4b10      	ldr	r3, [pc, #64]	@ (8000f18 <DMA2_Stream1_IRQHandler+0x144>)
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	4a0f      	ldr	r2, [pc, #60]	@ (8000f18 <DMA2_Stream1_IRQHandler+0x144>)
 8000edc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000ee0:	6093      	str	r3, [r2, #8]

	    	if(__DMA2_Stream1_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000ee2:	4b0f      	ldr	r3, [pc, #60]	@ (8000f20 <DMA2_Stream1_IRQHandler+0x14c>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ee8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d110      	bne.n	8000f12 <DMA2_Stream1_IRQHandler+0x13e>
	    	{
	    		if((__DMA2_Stream1_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8000f20 <DMA2_Stream1_IRQHandler+0x14c>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d004      	beq.n	8000f0a <DMA2_Stream1_IRQHandler+0x136>
	    		{
	    			__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000f00:	4b07      	ldr	r3, [pc, #28]	@ (8000f20 <DMA2_Stream1_IRQHandler+0x14c>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000f06:	4798      	blx	r3
	    			__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
	    		}
	    	}
	    }
	}
}
 8000f08:	e003      	b.n	8000f12 <DMA2_Stream1_IRQHandler+0x13e>
	    			__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000f0a:	4b05      	ldr	r3, [pc, #20]	@ (8000f20 <DMA2_Stream1_IRQHandler+0x14c>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f10:	4798      	blx	r3
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40026400 	.word	0x40026400
 8000f1c:	20000060 	.word	0x20000060
 8000f20:	20000044 	.word	0x20000044

08000f24 <DMA2_Stream2_IRQHandler>:


void DMA2_Stream2_IRQHandler(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
	DMA_LISR = DMA2 -> LISR;
 8000f28:	4b4f      	ldr	r3, [pc, #316]	@ (8001068 <DMA2_Stream2_IRQHandler+0x144>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a4f      	ldr	r2, [pc, #316]	@ (800106c <DMA2_Stream2_IRQHandler+0x148>)
 8000f2e:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF2)
 8000f30:	4b4e      	ldr	r3, [pc, #312]	@ (800106c <DMA2_Stream2_IRQHandler+0x148>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d00e      	beq.n	8000f5a <DMA2_Stream2_IRQHandler+0x36>
	{
	    if (__DMA2_Stream2_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8000f3c:	4b4c      	ldr	r3, [pc, #304]	@ (8001070 <DMA2_Stream2_IRQHandler+0x14c>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d009      	beq.n	8000f5a <DMA2_Stream2_IRQHandler+0x36>
	    {
	    	__DMA2_Stream2_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8000f46:	4b4a      	ldr	r3, [pc, #296]	@ (8001070 <DMA2_Stream2_IRQHandler+0x14c>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f4c:	4798      	blx	r3
	    	DMA2 -> LIFCR |= DMA_LIFCR_CFEIF2;
 8000f4e:	4b46      	ldr	r3, [pc, #280]	@ (8001068 <DMA2_Stream2_IRQHandler+0x144>)
 8000f50:	689b      	ldr	r3, [r3, #8]
 8000f52:	4a45      	ldr	r2, [pc, #276]	@ (8001068 <DMA2_Stream2_IRQHandler+0x144>)
 8000f54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f58:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_DMEIF2)
 8000f5a:	4b44      	ldr	r3, [pc, #272]	@ (800106c <DMA2_Stream2_IRQHandler+0x148>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d00e      	beq.n	8000f84 <DMA2_Stream2_IRQHandler+0x60>
	{
	    if (__DMA2_Stream2_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8000f66:	4b42      	ldr	r3, [pc, #264]	@ (8001070 <DMA2_Stream2_IRQHandler+0x14c>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d009      	beq.n	8000f84 <DMA2_Stream2_IRQHandler+0x60>
	    {
	    	__DMA2_Stream2_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8000f70:	4b3f      	ldr	r3, [pc, #252]	@ (8001070 <DMA2_Stream2_IRQHandler+0x14c>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f76:	4798      	blx	r3
	    	DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF2;
 8000f78:	4b3b      	ldr	r3, [pc, #236]	@ (8001068 <DMA2_Stream2_IRQHandler+0x144>)
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	4a3a      	ldr	r2, [pc, #232]	@ (8001068 <DMA2_Stream2_IRQHandler+0x144>)
 8000f7e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f82:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_TEIF2)
 8000f84:	4b39      	ldr	r3, [pc, #228]	@ (800106c <DMA2_Stream2_IRQHandler+0x148>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d00e      	beq.n	8000fae <DMA2_Stream2_IRQHandler+0x8a>
	{
	    if (__DMA2_Stream2_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8000f90:	4b37      	ldr	r3, [pc, #220]	@ (8001070 <DMA2_Stream2_IRQHandler+0x14c>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d009      	beq.n	8000fae <DMA2_Stream2_IRQHandler+0x8a>
	    {
	    	__DMA2_Stream2_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8000f9a:	4b35      	ldr	r3, [pc, #212]	@ (8001070 <DMA2_Stream2_IRQHandler+0x14c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fa0:	4798      	blx	r3
	    	DMA2 -> LIFCR |= DMA_LIFCR_CTEIF2;
 8000fa2:	4b31      	ldr	r3, [pc, #196]	@ (8001068 <DMA2_Stream2_IRQHandler+0x144>)
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	4a30      	ldr	r2, [pc, #192]	@ (8001068 <DMA2_Stream2_IRQHandler+0x144>)
 8000fa8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000fac:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_HTIF2)
 8000fae:	4b2f      	ldr	r3, [pc, #188]	@ (800106c <DMA2_Stream2_IRQHandler+0x148>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d026      	beq.n	8001008 <DMA2_Stream2_IRQHandler+0xe4>
	{
	    if (__DMA2_Stream2_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8000fba:	4b2d      	ldr	r3, [pc, #180]	@ (8001070 <DMA2_Stream2_IRQHandler+0x14c>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d021      	beq.n	8001008 <DMA2_Stream2_IRQHandler+0xe4>
	    {
	    	__DMA2_Stream2_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000fc4:	4b2a      	ldr	r3, [pc, #168]	@ (8001070 <DMA2_Stream2_IRQHandler+0x14c>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fca:	4798      	blx	r3
	    	DMA2 -> LIFCR |= DMA_LIFCR_CHTIF2;
 8000fcc:	4b26      	ldr	r3, [pc, #152]	@ (8001068 <DMA2_Stream2_IRQHandler+0x144>)
 8000fce:	689b      	ldr	r3, [r3, #8]
 8000fd0:	4a25      	ldr	r2, [pc, #148]	@ (8001068 <DMA2_Stream2_IRQHandler+0x144>)
 8000fd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000fd6:	6093      	str	r3, [r2, #8]

	    	if(__DMA2_Stream2_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000fd8:	4b25      	ldr	r3, [pc, #148]	@ (8001070 <DMA2_Stream2_IRQHandler+0x14c>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fde:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d110      	bne.n	8001008 <DMA2_Stream2_IRQHandler+0xe4>
	    	{
	    		if((__DMA2_Stream2_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000fe6:	4b22      	ldr	r3, [pc, #136]	@ (8001070 <DMA2_Stream2_IRQHandler+0x14c>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d004      	beq.n	8001000 <DMA2_Stream2_IRQHandler+0xdc>
	    		{
	    			__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000ff6:	4b1e      	ldr	r3, [pc, #120]	@ (8001070 <DMA2_Stream2_IRQHandler+0x14c>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000ffc:	4798      	blx	r3
 8000ffe:	e003      	b.n	8001008 <DMA2_Stream2_IRQHandler+0xe4>
	    		}
	    		else
	    		{
	    			__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001000:	4b1b      	ldr	r3, [pc, #108]	@ (8001070 <DMA2_Stream2_IRQHandler+0x14c>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001006:	4798      	blx	r3
	    		}
	    	}
	    }
	}

	if(DMA_LISR & DMA_LISR_TCIF2)
 8001008:	4b18      	ldr	r3, [pc, #96]	@ (800106c <DMA2_Stream2_IRQHandler+0x148>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001010:	2b00      	cmp	r3, #0
 8001012:	d026      	beq.n	8001062 <DMA2_Stream2_IRQHandler+0x13e>
	{
	    if (__DMA2_Stream2_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001014:	4b16      	ldr	r3, [pc, #88]	@ (8001070 <DMA2_Stream2_IRQHandler+0x14c>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800101a:	2b00      	cmp	r3, #0
 800101c:	d021      	beq.n	8001062 <DMA2_Stream2_IRQHandler+0x13e>
	    {
	    	__DMA2_Stream2_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 800101e:	4b14      	ldr	r3, [pc, #80]	@ (8001070 <DMA2_Stream2_IRQHandler+0x14c>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001024:	4798      	blx	r3
	    	DMA2 -> LIFCR |= DMA_LIFCR_CTCIF2;
 8001026:	4b10      	ldr	r3, [pc, #64]	@ (8001068 <DMA2_Stream2_IRQHandler+0x144>)
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	4a0f      	ldr	r2, [pc, #60]	@ (8001068 <DMA2_Stream2_IRQHandler+0x144>)
 800102c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001030:	6093      	str	r3, [r2, #8]

	    	if(__DMA2_Stream2_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001032:	4b0f      	ldr	r3, [pc, #60]	@ (8001070 <DMA2_Stream2_IRQHandler+0x14c>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001038:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800103c:	4293      	cmp	r3, r2
 800103e:	d110      	bne.n	8001062 <DMA2_Stream2_IRQHandler+0x13e>
	    	{
	    		if((__DMA2_Stream2_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001040:	4b0b      	ldr	r3, [pc, #44]	@ (8001070 <DMA2_Stream2_IRQHandler+0x14c>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800104c:	2b00      	cmp	r3, #0
 800104e:	d004      	beq.n	800105a <DMA2_Stream2_IRQHandler+0x136>
	    		{
	    			__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001050:	4b07      	ldr	r3, [pc, #28]	@ (8001070 <DMA2_Stream2_IRQHandler+0x14c>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001056:	4798      	blx	r3
	    			__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
	    		}
	    	}
	    }
	}
}
 8001058:	e003      	b.n	8001062 <DMA2_Stream2_IRQHandler+0x13e>
	    			__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800105a:	4b05      	ldr	r3, [pc, #20]	@ (8001070 <DMA2_Stream2_IRQHandler+0x14c>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001060:	4798      	blx	r3
}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40026400 	.word	0x40026400
 800106c:	20000060 	.word	0x20000060
 8001070:	20000048 	.word	0x20000048

08001074 <DMA2_Stream3_IRQHandler>:

void DMA2_Stream3_IRQHandler(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
	DMA_LISR = DMA2 -> LISR;
 8001078:	4b60      	ldr	r3, [pc, #384]	@ (80011fc <DMA2_Stream3_IRQHandler+0x188>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a60      	ldr	r2, [pc, #384]	@ (8001200 <DMA2_Stream3_IRQHandler+0x18c>)
 800107e:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF3)
 8001080:	4b5f      	ldr	r3, [pc, #380]	@ (8001200 <DMA2_Stream3_IRQHandler+0x18c>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001088:	2b00      	cmp	r3, #0
 800108a:	d015      	beq.n	80010b8 <DMA2_Stream3_IRQHandler+0x44>
	{
		if(__DMA2_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 800108c:	4b5d      	ldr	r3, [pc, #372]	@ (8001204 <DMA2_Stream3_IRQHandler+0x190>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	69db      	ldr	r3, [r3, #28]
 8001092:	2280      	movs	r2, #128	@ 0x80
 8001094:	4013      	ands	r3, r2
 8001096:	2b00      	cmp	r3, #0
 8001098:	d00e      	beq.n	80010b8 <DMA2_Stream3_IRQHandler+0x44>
		{
		    if (__DMA2_Stream3_Config__ -> ISR_Routines.FIFO_Error_ISR)
 800109a:	4b5a      	ldr	r3, [pc, #360]	@ (8001204 <DMA2_Stream3_IRQHandler+0x190>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d009      	beq.n	80010b8 <DMA2_Stream3_IRQHandler+0x44>
		    {
		    	__DMA2_Stream3_Config__ ->ISR_Routines.FIFO_Error_ISR();
 80010a4:	4b57      	ldr	r3, [pc, #348]	@ (8001204 <DMA2_Stream3_IRQHandler+0x190>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80010aa:	4798      	blx	r3
		    	DMA2 -> LIFCR |= DMA_LIFCR_CFEIF3;
 80010ac:	4b53      	ldr	r3, [pc, #332]	@ (80011fc <DMA2_Stream3_IRQHandler+0x188>)
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	4a52      	ldr	r2, [pc, #328]	@ (80011fc <DMA2_Stream3_IRQHandler+0x188>)
 80010b2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80010b6:	6093      	str	r3, [r2, #8]
		    }
		}
	}

	if(DMA_LISR & DMA_LISR_DMEIF3)
 80010b8:	4b51      	ldr	r3, [pc, #324]	@ (8001200 <DMA2_Stream3_IRQHandler+0x18c>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d015      	beq.n	80010f0 <DMA2_Stream3_IRQHandler+0x7c>
	{
		if(__DMA2_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 80010c4:	4b4f      	ldr	r3, [pc, #316]	@ (8001204 <DMA2_Stream3_IRQHandler+0x190>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	69db      	ldr	r3, [r3, #28]
 80010ca:	2202      	movs	r2, #2
 80010cc:	4013      	ands	r3, r2
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d00e      	beq.n	80010f0 <DMA2_Stream3_IRQHandler+0x7c>
		{
		    if (__DMA2_Stream3_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 80010d2:	4b4c      	ldr	r3, [pc, #304]	@ (8001204 <DMA2_Stream3_IRQHandler+0x190>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d009      	beq.n	80010f0 <DMA2_Stream3_IRQHandler+0x7c>
		    {
		    	__DMA2_Stream3_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 80010dc:	4b49      	ldr	r3, [pc, #292]	@ (8001204 <DMA2_Stream3_IRQHandler+0x190>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e2:	4798      	blx	r3
		    	DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF3;
 80010e4:	4b45      	ldr	r3, [pc, #276]	@ (80011fc <DMA2_Stream3_IRQHandler+0x188>)
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	4a44      	ldr	r2, [pc, #272]	@ (80011fc <DMA2_Stream3_IRQHandler+0x188>)
 80010ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80010ee:	6093      	str	r3, [r2, #8]
		    }
		}
	}

	if(DMA_LISR & DMA_LISR_TEIF3)
 80010f0:	4b43      	ldr	r3, [pc, #268]	@ (8001200 <DMA2_Stream3_IRQHandler+0x18c>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d015      	beq.n	8001128 <DMA2_Stream3_IRQHandler+0xb4>
	{
		if(__DMA2_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 80010fc:	4b41      	ldr	r3, [pc, #260]	@ (8001204 <DMA2_Stream3_IRQHandler+0x190>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	69db      	ldr	r3, [r3, #28]
 8001102:	2204      	movs	r2, #4
 8001104:	4013      	ands	r3, r2
 8001106:	2b00      	cmp	r3, #0
 8001108:	d00e      	beq.n	8001128 <DMA2_Stream3_IRQHandler+0xb4>
		{
		    if (__DMA2_Stream3_Config__ -> ISR_Routines.Transfer_Error_ISR)
 800110a:	4b3e      	ldr	r3, [pc, #248]	@ (8001204 <DMA2_Stream3_IRQHandler+0x190>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001110:	2b00      	cmp	r3, #0
 8001112:	d009      	beq.n	8001128 <DMA2_Stream3_IRQHandler+0xb4>
		    {
		    	__DMA2_Stream3_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8001114:	4b3b      	ldr	r3, [pc, #236]	@ (8001204 <DMA2_Stream3_IRQHandler+0x190>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800111a:	4798      	blx	r3
		    	DMA2 -> LIFCR |= DMA_LIFCR_CTEIF3;
 800111c:	4b37      	ldr	r3, [pc, #220]	@ (80011fc <DMA2_Stream3_IRQHandler+0x188>)
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	4a36      	ldr	r2, [pc, #216]	@ (80011fc <DMA2_Stream3_IRQHandler+0x188>)
 8001122:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001126:	6093      	str	r3, [r2, #8]
		    }
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF3)
 8001128:	4b35      	ldr	r3, [pc, #212]	@ (8001200 <DMA2_Stream3_IRQHandler+0x18c>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001130:	2b00      	cmp	r3, #0
 8001132:	d02d      	beq.n	8001190 <DMA2_Stream3_IRQHandler+0x11c>
	{
		if(__DMA2_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 8001134:	4b33      	ldr	r3, [pc, #204]	@ (8001204 <DMA2_Stream3_IRQHandler+0x190>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	69db      	ldr	r3, [r3, #28]
 800113a:	2208      	movs	r2, #8
 800113c:	4013      	ands	r3, r2
 800113e:	2b00      	cmp	r3, #0
 8001140:	d026      	beq.n	8001190 <DMA2_Stream3_IRQHandler+0x11c>
		{
		    if (__DMA2_Stream3_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001142:	4b30      	ldr	r3, [pc, #192]	@ (8001204 <DMA2_Stream3_IRQHandler+0x190>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001148:	2b00      	cmp	r3, #0
 800114a:	d021      	beq.n	8001190 <DMA2_Stream3_IRQHandler+0x11c>
		    {
		    	__DMA2_Stream3_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 800114c:	4b2d      	ldr	r3, [pc, #180]	@ (8001204 <DMA2_Stream3_IRQHandler+0x190>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001152:	4798      	blx	r3
		    	DMA2 -> LIFCR |= DMA_LIFCR_CHTIF3;
 8001154:	4b29      	ldr	r3, [pc, #164]	@ (80011fc <DMA2_Stream3_IRQHandler+0x188>)
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	4a28      	ldr	r2, [pc, #160]	@ (80011fc <DMA2_Stream3_IRQHandler+0x188>)
 800115a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800115e:	6093      	str	r3, [r2, #8]

		    	if(__DMA2_Stream3_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001160:	4b28      	ldr	r3, [pc, #160]	@ (8001204 <DMA2_Stream3_IRQHandler+0x190>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001166:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800116a:	4293      	cmp	r3, r2
 800116c:	d110      	bne.n	8001190 <DMA2_Stream3_IRQHandler+0x11c>
		    	{
		    		if((__DMA2_Stream3_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800116e:	4b25      	ldr	r3, [pc, #148]	@ (8001204 <DMA2_Stream3_IRQHandler+0x190>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d004      	beq.n	8001188 <DMA2_Stream3_IRQHandler+0x114>
		    		{
		    			__DMA2_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800117e:	4b21      	ldr	r3, [pc, #132]	@ (8001204 <DMA2_Stream3_IRQHandler+0x190>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001184:	4798      	blx	r3
 8001186:	e003      	b.n	8001190 <DMA2_Stream3_IRQHandler+0x11c>
		    		}
		    		else
		    		{
		    			__DMA2_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001188:	4b1e      	ldr	r3, [pc, #120]	@ (8001204 <DMA2_Stream3_IRQHandler+0x190>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800118e:	4798      	blx	r3
		    }
		}

	}

	if(DMA_LISR & DMA_LISR_TCIF3)
 8001190:	4b1b      	ldr	r3, [pc, #108]	@ (8001200 <DMA2_Stream3_IRQHandler+0x18c>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001198:	2b00      	cmp	r3, #0
 800119a:	d02d      	beq.n	80011f8 <DMA2_Stream3_IRQHandler+0x184>
	{
		if(__DMA2_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 800119c:	4b19      	ldr	r3, [pc, #100]	@ (8001204 <DMA2_Stream3_IRQHandler+0x190>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	69db      	ldr	r3, [r3, #28]
 80011a2:	2210      	movs	r2, #16
 80011a4:	4013      	ands	r3, r2
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d026      	beq.n	80011f8 <DMA2_Stream3_IRQHandler+0x184>
		{
		    if (__DMA2_Stream3_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 80011aa:	4b16      	ldr	r3, [pc, #88]	@ (8001204 <DMA2_Stream3_IRQHandler+0x190>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d021      	beq.n	80011f8 <DMA2_Stream3_IRQHandler+0x184>
		    {
		    	__DMA2_Stream3_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 80011b4:	4b13      	ldr	r3, [pc, #76]	@ (8001204 <DMA2_Stream3_IRQHandler+0x190>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ba:	4798      	blx	r3
		    	DMA2 -> LIFCR |= DMA_LIFCR_CTCIF3;
 80011bc:	4b0f      	ldr	r3, [pc, #60]	@ (80011fc <DMA2_Stream3_IRQHandler+0x188>)
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	4a0e      	ldr	r2, [pc, #56]	@ (80011fc <DMA2_Stream3_IRQHandler+0x188>)
 80011c2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80011c6:	6093      	str	r3, [r2, #8]

		    	if(__DMA2_Stream3_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80011c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001204 <DMA2_Stream3_IRQHandler+0x190>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011ce:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d110      	bne.n	80011f8 <DMA2_Stream3_IRQHandler+0x184>
		    	{
		    		if((__DMA2_Stream3_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80011d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001204 <DMA2_Stream3_IRQHandler+0x190>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d004      	beq.n	80011f0 <DMA2_Stream3_IRQHandler+0x17c>
		    		{
		    			__DMA2_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80011e6:	4b07      	ldr	r3, [pc, #28]	@ (8001204 <DMA2_Stream3_IRQHandler+0x190>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80011ec:	4798      	blx	r3
		    		}
		    	}
		    }
		}
	}
}
 80011ee:	e003      	b.n	80011f8 <DMA2_Stream3_IRQHandler+0x184>
		    			__DMA2_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80011f0:	4b04      	ldr	r3, [pc, #16]	@ (8001204 <DMA2_Stream3_IRQHandler+0x190>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011f6:	4798      	blx	r3
}
 80011f8:	bf00      	nop
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40026400 	.word	0x40026400
 8001200:	20000060 	.word	0x20000060
 8001204:	2000004c 	.word	0x2000004c

08001208 <DMA2_Stream4_IRQHandler>:

void DMA2_Stream4_IRQHandler(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
	DMA_HISR = DMA2 -> HISR;
 800120c:	4b4f      	ldr	r3, [pc, #316]	@ (800134c <DMA2_Stream4_IRQHandler+0x144>)
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	4a4f      	ldr	r2, [pc, #316]	@ (8001350 <DMA2_Stream4_IRQHandler+0x148>)
 8001212:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF4)
 8001214:	4b4e      	ldr	r3, [pc, #312]	@ (8001350 <DMA2_Stream4_IRQHandler+0x148>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f003 0301 	and.w	r3, r3, #1
 800121c:	2b00      	cmp	r3, #0
 800121e:	d00e      	beq.n	800123e <DMA2_Stream4_IRQHandler+0x36>
	{
	    if (__DMA2_Stream4_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001220:	4b4c      	ldr	r3, [pc, #304]	@ (8001354 <DMA2_Stream4_IRQHandler+0x14c>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001226:	2b00      	cmp	r3, #0
 8001228:	d009      	beq.n	800123e <DMA2_Stream4_IRQHandler+0x36>
	    {
	    	__DMA2_Stream4_Config__ ->ISR_Routines.FIFO_Error_ISR();
 800122a:	4b4a      	ldr	r3, [pc, #296]	@ (8001354 <DMA2_Stream4_IRQHandler+0x14c>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001230:	4798      	blx	r3
	    	DMA2 -> LIFCR |= DMA_HIFCR_CFEIF5;
 8001232:	4b46      	ldr	r3, [pc, #280]	@ (800134c <DMA2_Stream4_IRQHandler+0x144>)
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	4a45      	ldr	r2, [pc, #276]	@ (800134c <DMA2_Stream4_IRQHandler+0x144>)
 8001238:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800123c:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_HISR & DMA_HISR_DMEIF4)
 800123e:	4b44      	ldr	r3, [pc, #272]	@ (8001350 <DMA2_Stream4_IRQHandler+0x148>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0304 	and.w	r3, r3, #4
 8001246:	2b00      	cmp	r3, #0
 8001248:	d00e      	beq.n	8001268 <DMA2_Stream4_IRQHandler+0x60>
	{
	    if (__DMA2_Stream4_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 800124a:	4b42      	ldr	r3, [pc, #264]	@ (8001354 <DMA2_Stream4_IRQHandler+0x14c>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001250:	2b00      	cmp	r3, #0
 8001252:	d009      	beq.n	8001268 <DMA2_Stream4_IRQHandler+0x60>
	    {
	    	__DMA2_Stream4_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001254:	4b3f      	ldr	r3, [pc, #252]	@ (8001354 <DMA2_Stream4_IRQHandler+0x14c>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800125a:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF4;
 800125c:	4b3b      	ldr	r3, [pc, #236]	@ (800134c <DMA2_Stream4_IRQHandler+0x144>)
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	4a3a      	ldr	r2, [pc, #232]	@ (800134c <DMA2_Stream4_IRQHandler+0x144>)
 8001262:	f043 0304 	orr.w	r3, r3, #4
 8001266:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_TEIF4)
 8001268:	4b39      	ldr	r3, [pc, #228]	@ (8001350 <DMA2_Stream4_IRQHandler+0x148>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 0308 	and.w	r3, r3, #8
 8001270:	2b00      	cmp	r3, #0
 8001272:	d00e      	beq.n	8001292 <DMA2_Stream4_IRQHandler+0x8a>
	{
	    if (__DMA2_Stream4_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001274:	4b37      	ldr	r3, [pc, #220]	@ (8001354 <DMA2_Stream4_IRQHandler+0x14c>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800127a:	2b00      	cmp	r3, #0
 800127c:	d009      	beq.n	8001292 <DMA2_Stream4_IRQHandler+0x8a>
	    {
	    	__DMA2_Stream4_Config__ ->ISR_Routines.Transfer_Error_ISR();
 800127e:	4b35      	ldr	r3, [pc, #212]	@ (8001354 <DMA2_Stream4_IRQHandler+0x14c>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001284:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CTEIF4;
 8001286:	4b31      	ldr	r3, [pc, #196]	@ (800134c <DMA2_Stream4_IRQHandler+0x144>)
 8001288:	68db      	ldr	r3, [r3, #12]
 800128a:	4a30      	ldr	r2, [pc, #192]	@ (800134c <DMA2_Stream4_IRQHandler+0x144>)
 800128c:	f043 0308 	orr.w	r3, r3, #8
 8001290:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_HTIF4)
 8001292:	4b2f      	ldr	r3, [pc, #188]	@ (8001350 <DMA2_Stream4_IRQHandler+0x148>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0310 	and.w	r3, r3, #16
 800129a:	2b00      	cmp	r3, #0
 800129c:	d026      	beq.n	80012ec <DMA2_Stream4_IRQHandler+0xe4>
	{
	    if (__DMA2_Stream4_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 800129e:	4b2d      	ldr	r3, [pc, #180]	@ (8001354 <DMA2_Stream4_IRQHandler+0x14c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d021      	beq.n	80012ec <DMA2_Stream4_IRQHandler+0xe4>
	    {
	    	__DMA2_Stream4_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80012a8:	4b2a      	ldr	r3, [pc, #168]	@ (8001354 <DMA2_Stream4_IRQHandler+0x14c>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012ae:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CHTIF4;
 80012b0:	4b26      	ldr	r3, [pc, #152]	@ (800134c <DMA2_Stream4_IRQHandler+0x144>)
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	4a25      	ldr	r2, [pc, #148]	@ (800134c <DMA2_Stream4_IRQHandler+0x144>)
 80012b6:	f043 0310 	orr.w	r3, r3, #16
 80012ba:	60d3      	str	r3, [r2, #12]

	    	if(__DMA2_Stream4_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80012bc:	4b25      	ldr	r3, [pc, #148]	@ (8001354 <DMA2_Stream4_IRQHandler+0x14c>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012c2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d110      	bne.n	80012ec <DMA2_Stream4_IRQHandler+0xe4>
	    	{
	    		if((__DMA2_Stream4_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80012ca:	4b22      	ldr	r3, [pc, #136]	@ (8001354 <DMA2_Stream4_IRQHandler+0x14c>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d004      	beq.n	80012e4 <DMA2_Stream4_IRQHandler+0xdc>
	    		{
	    			__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80012da:	4b1e      	ldr	r3, [pc, #120]	@ (8001354 <DMA2_Stream4_IRQHandler+0x14c>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80012e0:	4798      	blx	r3
 80012e2:	e003      	b.n	80012ec <DMA2_Stream4_IRQHandler+0xe4>
	    		}
	    		else
	    		{
	    			__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80012e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001354 <DMA2_Stream4_IRQHandler+0x14c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012ea:	4798      	blx	r3
	    		}
	    	}
	    }
	}

	if(DMA_HISR & DMA_HISR_TCIF4)
 80012ec:	4b18      	ldr	r3, [pc, #96]	@ (8001350 <DMA2_Stream4_IRQHandler+0x148>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f003 0320 	and.w	r3, r3, #32
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d026      	beq.n	8001346 <DMA2_Stream4_IRQHandler+0x13e>
	{
	    if (__DMA2_Stream4_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 80012f8:	4b16      	ldr	r3, [pc, #88]	@ (8001354 <DMA2_Stream4_IRQHandler+0x14c>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d021      	beq.n	8001346 <DMA2_Stream4_IRQHandler+0x13e>
	    {
	    	__DMA2_Stream4_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001302:	4b14      	ldr	r3, [pc, #80]	@ (8001354 <DMA2_Stream4_IRQHandler+0x14c>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001308:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CTCIF4;
 800130a:	4b10      	ldr	r3, [pc, #64]	@ (800134c <DMA2_Stream4_IRQHandler+0x144>)
 800130c:	68db      	ldr	r3, [r3, #12]
 800130e:	4a0f      	ldr	r2, [pc, #60]	@ (800134c <DMA2_Stream4_IRQHandler+0x144>)
 8001310:	f043 0320 	orr.w	r3, r3, #32
 8001314:	60d3      	str	r3, [r2, #12]

	    	if(__DMA2_Stream4_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001316:	4b0f      	ldr	r3, [pc, #60]	@ (8001354 <DMA2_Stream4_IRQHandler+0x14c>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800131c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001320:	4293      	cmp	r3, r2
 8001322:	d110      	bne.n	8001346 <DMA2_Stream4_IRQHandler+0x13e>
	    	{
	    		if((__DMA2_Stream4_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001324:	4b0b      	ldr	r3, [pc, #44]	@ (8001354 <DMA2_Stream4_IRQHandler+0x14c>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001330:	2b00      	cmp	r3, #0
 8001332:	d004      	beq.n	800133e <DMA2_Stream4_IRQHandler+0x136>
	    		{
	    			__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001334:	4b07      	ldr	r3, [pc, #28]	@ (8001354 <DMA2_Stream4_IRQHandler+0x14c>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800133a:	4798      	blx	r3
	    			__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
	    		}
	    	}
	    }
	}
}
 800133c:	e003      	b.n	8001346 <DMA2_Stream4_IRQHandler+0x13e>
	    			__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800133e:	4b05      	ldr	r3, [pc, #20]	@ (8001354 <DMA2_Stream4_IRQHandler+0x14c>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001344:	4798      	blx	r3
}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40026400 	.word	0x40026400
 8001350:	20000064 	.word	0x20000064
 8001354:	20000050 	.word	0x20000050

08001358 <DMA2_Stream5_IRQHandler>:




void DMA2_Stream5_IRQHandler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
	DMA_HISR = DMA2 -> HISR;
 800135c:	4b4f      	ldr	r3, [pc, #316]	@ (800149c <DMA2_Stream5_IRQHandler+0x144>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	4a4f      	ldr	r2, [pc, #316]	@ (80014a0 <DMA2_Stream5_IRQHandler+0x148>)
 8001362:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF5)
 8001364:	4b4e      	ldr	r3, [pc, #312]	@ (80014a0 <DMA2_Stream5_IRQHandler+0x148>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800136c:	2b00      	cmp	r3, #0
 800136e:	d00e      	beq.n	800138e <DMA2_Stream5_IRQHandler+0x36>
	{
	    if (__DMA2_Stream5_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001370:	4b4c      	ldr	r3, [pc, #304]	@ (80014a4 <DMA2_Stream5_IRQHandler+0x14c>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001376:	2b00      	cmp	r3, #0
 8001378:	d009      	beq.n	800138e <DMA2_Stream5_IRQHandler+0x36>
	    {
	    	__DMA2_Stream5_Config__ ->ISR_Routines.FIFO_Error_ISR();
 800137a:	4b4a      	ldr	r3, [pc, #296]	@ (80014a4 <DMA2_Stream5_IRQHandler+0x14c>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001380:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CFEIF5;
 8001382:	4b46      	ldr	r3, [pc, #280]	@ (800149c <DMA2_Stream5_IRQHandler+0x144>)
 8001384:	68db      	ldr	r3, [r3, #12]
 8001386:	4a45      	ldr	r2, [pc, #276]	@ (800149c <DMA2_Stream5_IRQHandler+0x144>)
 8001388:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800138c:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_DMEIF5)
 800138e:	4b44      	ldr	r3, [pc, #272]	@ (80014a0 <DMA2_Stream5_IRQHandler+0x148>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001396:	2b00      	cmp	r3, #0
 8001398:	d00e      	beq.n	80013b8 <DMA2_Stream5_IRQHandler+0x60>
	{
	    if (__DMA2_Stream5_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 800139a:	4b42      	ldr	r3, [pc, #264]	@ (80014a4 <DMA2_Stream5_IRQHandler+0x14c>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d009      	beq.n	80013b8 <DMA2_Stream5_IRQHandler+0x60>
	    {
	    	__DMA2_Stream5_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 80013a4:	4b3f      	ldr	r3, [pc, #252]	@ (80014a4 <DMA2_Stream5_IRQHandler+0x14c>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013aa:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF5;
 80013ac:	4b3b      	ldr	r3, [pc, #236]	@ (800149c <DMA2_Stream5_IRQHandler+0x144>)
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	4a3a      	ldr	r2, [pc, #232]	@ (800149c <DMA2_Stream5_IRQHandler+0x144>)
 80013b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013b6:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_TEIF5)
 80013b8:	4b39      	ldr	r3, [pc, #228]	@ (80014a0 <DMA2_Stream5_IRQHandler+0x148>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d00e      	beq.n	80013e2 <DMA2_Stream5_IRQHandler+0x8a>
	{
	    if (__DMA2_Stream5_Config__ -> ISR_Routines.Transfer_Error_ISR)
 80013c4:	4b37      	ldr	r3, [pc, #220]	@ (80014a4 <DMA2_Stream5_IRQHandler+0x14c>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d009      	beq.n	80013e2 <DMA2_Stream5_IRQHandler+0x8a>
	    {
	    	__DMA2_Stream5_Config__ ->ISR_Routines.Transfer_Error_ISR();
 80013ce:	4b35      	ldr	r3, [pc, #212]	@ (80014a4 <DMA2_Stream5_IRQHandler+0x14c>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013d4:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CTEIF5;
 80013d6:	4b31      	ldr	r3, [pc, #196]	@ (800149c <DMA2_Stream5_IRQHandler+0x144>)
 80013d8:	68db      	ldr	r3, [r3, #12]
 80013da:	4a30      	ldr	r2, [pc, #192]	@ (800149c <DMA2_Stream5_IRQHandler+0x144>)
 80013dc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013e0:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_HTIF5)
 80013e2:	4b2f      	ldr	r3, [pc, #188]	@ (80014a0 <DMA2_Stream5_IRQHandler+0x148>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d026      	beq.n	800143c <DMA2_Stream5_IRQHandler+0xe4>
	{
	    if (__DMA2_Stream5_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 80013ee:	4b2d      	ldr	r3, [pc, #180]	@ (80014a4 <DMA2_Stream5_IRQHandler+0x14c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d021      	beq.n	800143c <DMA2_Stream5_IRQHandler+0xe4>
	    {
	    	__DMA2_Stream5_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80013f8:	4b2a      	ldr	r3, [pc, #168]	@ (80014a4 <DMA2_Stream5_IRQHandler+0x14c>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013fe:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CHTIF5;
 8001400:	4b26      	ldr	r3, [pc, #152]	@ (800149c <DMA2_Stream5_IRQHandler+0x144>)
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	4a25      	ldr	r2, [pc, #148]	@ (800149c <DMA2_Stream5_IRQHandler+0x144>)
 8001406:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800140a:	60d3      	str	r3, [r2, #12]

	    	if(__DMA2_Stream5_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800140c:	4b25      	ldr	r3, [pc, #148]	@ (80014a4 <DMA2_Stream5_IRQHandler+0x14c>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001412:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001416:	4293      	cmp	r3, r2
 8001418:	d110      	bne.n	800143c <DMA2_Stream5_IRQHandler+0xe4>
	    	{
	    		if((__DMA2_Stream5_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800141a:	4b22      	ldr	r3, [pc, #136]	@ (80014a4 <DMA2_Stream5_IRQHandler+0x14c>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d004      	beq.n	8001434 <DMA2_Stream5_IRQHandler+0xdc>
	    		{
	    			__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800142a:	4b1e      	ldr	r3, [pc, #120]	@ (80014a4 <DMA2_Stream5_IRQHandler+0x14c>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001430:	4798      	blx	r3
 8001432:	e003      	b.n	800143c <DMA2_Stream5_IRQHandler+0xe4>
	    		}
	    		else
	    		{
	    			__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001434:	4b1b      	ldr	r3, [pc, #108]	@ (80014a4 <DMA2_Stream5_IRQHandler+0x14c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800143a:	4798      	blx	r3
	    		}
	    	}
	    }
	}

	if(DMA_HISR & DMA_HISR_TCIF5)
 800143c:	4b18      	ldr	r3, [pc, #96]	@ (80014a0 <DMA2_Stream5_IRQHandler+0x148>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001444:	2b00      	cmp	r3, #0
 8001446:	d026      	beq.n	8001496 <DMA2_Stream5_IRQHandler+0x13e>
	{
	    if (__DMA2_Stream5_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001448:	4b16      	ldr	r3, [pc, #88]	@ (80014a4 <DMA2_Stream5_IRQHandler+0x14c>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800144e:	2b00      	cmp	r3, #0
 8001450:	d021      	beq.n	8001496 <DMA2_Stream5_IRQHandler+0x13e>
	    {
	    	__DMA2_Stream5_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001452:	4b14      	ldr	r3, [pc, #80]	@ (80014a4 <DMA2_Stream5_IRQHandler+0x14c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001458:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CTCIF5;
 800145a:	4b10      	ldr	r3, [pc, #64]	@ (800149c <DMA2_Stream5_IRQHandler+0x144>)
 800145c:	68db      	ldr	r3, [r3, #12]
 800145e:	4a0f      	ldr	r2, [pc, #60]	@ (800149c <DMA2_Stream5_IRQHandler+0x144>)
 8001460:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001464:	60d3      	str	r3, [r2, #12]

	    	if(__DMA2_Stream5_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001466:	4b0f      	ldr	r3, [pc, #60]	@ (80014a4 <DMA2_Stream5_IRQHandler+0x14c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800146c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001470:	4293      	cmp	r3, r2
 8001472:	d110      	bne.n	8001496 <DMA2_Stream5_IRQHandler+0x13e>
	    	{
	    		if((__DMA2_Stream5_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001474:	4b0b      	ldr	r3, [pc, #44]	@ (80014a4 <DMA2_Stream5_IRQHandler+0x14c>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d004      	beq.n	800148e <DMA2_Stream5_IRQHandler+0x136>
	    		{
	    			__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001484:	4b07      	ldr	r3, [pc, #28]	@ (80014a4 <DMA2_Stream5_IRQHandler+0x14c>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800148a:	4798      	blx	r3
	    			__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
	    		}
	    	}
	    }
	}
}
 800148c:	e003      	b.n	8001496 <DMA2_Stream5_IRQHandler+0x13e>
	    			__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800148e:	4b05      	ldr	r3, [pc, #20]	@ (80014a4 <DMA2_Stream5_IRQHandler+0x14c>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001494:	4798      	blx	r3
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40026400 	.word	0x40026400
 80014a0:	20000064 	.word	0x20000064
 80014a4:	20000054 	.word	0x20000054

080014a8 <DMA2_Stream6_IRQHandler>:



void DMA2_Stream6_IRQHandler(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
	DMA_HISR = DMA2 -> HISR;
 80014ac:	4b4f      	ldr	r3, [pc, #316]	@ (80015ec <DMA2_Stream6_IRQHandler+0x144>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	4a4f      	ldr	r2, [pc, #316]	@ (80015f0 <DMA2_Stream6_IRQHandler+0x148>)
 80014b2:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF6)
 80014b4:	4b4e      	ldr	r3, [pc, #312]	@ (80015f0 <DMA2_Stream6_IRQHandler+0x148>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d00e      	beq.n	80014de <DMA2_Stream6_IRQHandler+0x36>
	{
	    if (__DMA2_Stream6_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80014c0:	4b4c      	ldr	r3, [pc, #304]	@ (80015f4 <DMA2_Stream6_IRQHandler+0x14c>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d009      	beq.n	80014de <DMA2_Stream6_IRQHandler+0x36>
	    {
	    	__DMA2_Stream6_Config__ ->ISR_Routines.FIFO_Error_ISR();
 80014ca:	4b4a      	ldr	r3, [pc, #296]	@ (80015f4 <DMA2_Stream6_IRQHandler+0x14c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014d0:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CFEIF6;
 80014d2:	4b46      	ldr	r3, [pc, #280]	@ (80015ec <DMA2_Stream6_IRQHandler+0x144>)
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	4a45      	ldr	r2, [pc, #276]	@ (80015ec <DMA2_Stream6_IRQHandler+0x144>)
 80014d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014dc:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_DMEIF6)
 80014de:	4b44      	ldr	r3, [pc, #272]	@ (80015f0 <DMA2_Stream6_IRQHandler+0x148>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d00e      	beq.n	8001508 <DMA2_Stream6_IRQHandler+0x60>
	{
	    if (__DMA2_Stream6_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 80014ea:	4b42      	ldr	r3, [pc, #264]	@ (80015f4 <DMA2_Stream6_IRQHandler+0x14c>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d009      	beq.n	8001508 <DMA2_Stream6_IRQHandler+0x60>
	    {
	    	__DMA2_Stream6_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 80014f4:	4b3f      	ldr	r3, [pc, #252]	@ (80015f4 <DMA2_Stream6_IRQHandler+0x14c>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fa:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF6;
 80014fc:	4b3b      	ldr	r3, [pc, #236]	@ (80015ec <DMA2_Stream6_IRQHandler+0x144>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	4a3a      	ldr	r2, [pc, #232]	@ (80015ec <DMA2_Stream6_IRQHandler+0x144>)
 8001502:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001506:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_TEIF6)
 8001508:	4b39      	ldr	r3, [pc, #228]	@ (80015f0 <DMA2_Stream6_IRQHandler+0x148>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001510:	2b00      	cmp	r3, #0
 8001512:	d00e      	beq.n	8001532 <DMA2_Stream6_IRQHandler+0x8a>
	{
	    if (__DMA2_Stream6_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001514:	4b37      	ldr	r3, [pc, #220]	@ (80015f4 <DMA2_Stream6_IRQHandler+0x14c>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800151a:	2b00      	cmp	r3, #0
 800151c:	d009      	beq.n	8001532 <DMA2_Stream6_IRQHandler+0x8a>
	    {
	    	__DMA2_Stream6_Config__ ->ISR_Routines.Transfer_Error_ISR();
 800151e:	4b35      	ldr	r3, [pc, #212]	@ (80015f4 <DMA2_Stream6_IRQHandler+0x14c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001524:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CTEIF6;
 8001526:	4b31      	ldr	r3, [pc, #196]	@ (80015ec <DMA2_Stream6_IRQHandler+0x144>)
 8001528:	68db      	ldr	r3, [r3, #12]
 800152a:	4a30      	ldr	r2, [pc, #192]	@ (80015ec <DMA2_Stream6_IRQHandler+0x144>)
 800152c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001530:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_HTIF6)
 8001532:	4b2f      	ldr	r3, [pc, #188]	@ (80015f0 <DMA2_Stream6_IRQHandler+0x148>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d026      	beq.n	800158c <DMA2_Stream6_IRQHandler+0xe4>
	{
	    if (__DMA2_Stream6_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 800153e:	4b2d      	ldr	r3, [pc, #180]	@ (80015f4 <DMA2_Stream6_IRQHandler+0x14c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001544:	2b00      	cmp	r3, #0
 8001546:	d021      	beq.n	800158c <DMA2_Stream6_IRQHandler+0xe4>
	    {
	    	__DMA2_Stream6_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001548:	4b2a      	ldr	r3, [pc, #168]	@ (80015f4 <DMA2_Stream6_IRQHandler+0x14c>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800154e:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CHTIF6;
 8001550:	4b26      	ldr	r3, [pc, #152]	@ (80015ec <DMA2_Stream6_IRQHandler+0x144>)
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	4a25      	ldr	r2, [pc, #148]	@ (80015ec <DMA2_Stream6_IRQHandler+0x144>)
 8001556:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800155a:	60d3      	str	r3, [r2, #12]

	    	if(__DMA2_Stream6_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800155c:	4b25      	ldr	r3, [pc, #148]	@ (80015f4 <DMA2_Stream6_IRQHandler+0x14c>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001562:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001566:	4293      	cmp	r3, r2
 8001568:	d110      	bne.n	800158c <DMA2_Stream6_IRQHandler+0xe4>
	    	{
	    		if((__DMA2_Stream6_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800156a:	4b22      	ldr	r3, [pc, #136]	@ (80015f4 <DMA2_Stream6_IRQHandler+0x14c>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d004      	beq.n	8001584 <DMA2_Stream6_IRQHandler+0xdc>
	    		{
	    			__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800157a:	4b1e      	ldr	r3, [pc, #120]	@ (80015f4 <DMA2_Stream6_IRQHandler+0x14c>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001580:	4798      	blx	r3
 8001582:	e003      	b.n	800158c <DMA2_Stream6_IRQHandler+0xe4>
	    		}
	    		else
	    		{
	    			__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001584:	4b1b      	ldr	r3, [pc, #108]	@ (80015f4 <DMA2_Stream6_IRQHandler+0x14c>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800158a:	4798      	blx	r3
	    		}
	    	}
	    }
	}

	if(DMA_HISR & DMA_HISR_TCIF6)
 800158c:	4b18      	ldr	r3, [pc, #96]	@ (80015f0 <DMA2_Stream6_IRQHandler+0x148>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001594:	2b00      	cmp	r3, #0
 8001596:	d026      	beq.n	80015e6 <DMA2_Stream6_IRQHandler+0x13e>
	{
	    if (__DMA2_Stream6_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001598:	4b16      	ldr	r3, [pc, #88]	@ (80015f4 <DMA2_Stream6_IRQHandler+0x14c>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d021      	beq.n	80015e6 <DMA2_Stream6_IRQHandler+0x13e>
	    {
	    	__DMA2_Stream6_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80015a2:	4b14      	ldr	r3, [pc, #80]	@ (80015f4 <DMA2_Stream6_IRQHandler+0x14c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015a8:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CTCIF6;
 80015aa:	4b10      	ldr	r3, [pc, #64]	@ (80015ec <DMA2_Stream6_IRQHandler+0x144>)
 80015ac:	68db      	ldr	r3, [r3, #12]
 80015ae:	4a0f      	ldr	r2, [pc, #60]	@ (80015ec <DMA2_Stream6_IRQHandler+0x144>)
 80015b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80015b4:	60d3      	str	r3, [r2, #12]

	    	if(__DMA2_Stream6_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80015b6:	4b0f      	ldr	r3, [pc, #60]	@ (80015f4 <DMA2_Stream6_IRQHandler+0x14c>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015bc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d110      	bne.n	80015e6 <DMA2_Stream6_IRQHandler+0x13e>
	    	{
	    		if((__DMA2_Stream6_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80015c4:	4b0b      	ldr	r3, [pc, #44]	@ (80015f4 <DMA2_Stream6_IRQHandler+0x14c>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d004      	beq.n	80015de <DMA2_Stream6_IRQHandler+0x136>
	    		{
	    			__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80015d4:	4b07      	ldr	r3, [pc, #28]	@ (80015f4 <DMA2_Stream6_IRQHandler+0x14c>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015da:	4798      	blx	r3
	    			__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
	    		}
	    	}
	    }
	}
}
 80015dc:	e003      	b.n	80015e6 <DMA2_Stream6_IRQHandler+0x13e>
	    			__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80015de:	4b05      	ldr	r3, [pc, #20]	@ (80015f4 <DMA2_Stream6_IRQHandler+0x14c>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015e4:	4798      	blx	r3
}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40026400 	.word	0x40026400
 80015f0:	20000064 	.word	0x20000064
 80015f4:	20000058 	.word	0x20000058

080015f8 <DMA2_Stream7_IRQHandler>:


void DMA2_Stream7_IRQHandler(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
	DMA_HISR = DMA2 -> HISR;
 80015fc:	4b4f      	ldr	r3, [pc, #316]	@ (800173c <DMA2_Stream7_IRQHandler+0x144>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	4a4f      	ldr	r2, [pc, #316]	@ (8001740 <DMA2_Stream7_IRQHandler+0x148>)
 8001602:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF7)
 8001604:	4b4e      	ldr	r3, [pc, #312]	@ (8001740 <DMA2_Stream7_IRQHandler+0x148>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d00e      	beq.n	800162e <DMA2_Stream7_IRQHandler+0x36>
	{
	    if (__DMA2_Stream7_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001610:	4b4c      	ldr	r3, [pc, #304]	@ (8001744 <DMA2_Stream7_IRQHandler+0x14c>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001616:	2b00      	cmp	r3, #0
 8001618:	d009      	beq.n	800162e <DMA2_Stream7_IRQHandler+0x36>
	    {
	    	__DMA2_Stream7_Config__ ->ISR_Routines.FIFO_Error_ISR();
 800161a:	4b4a      	ldr	r3, [pc, #296]	@ (8001744 <DMA2_Stream7_IRQHandler+0x14c>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001620:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CFEIF7;
 8001622:	4b46      	ldr	r3, [pc, #280]	@ (800173c <DMA2_Stream7_IRQHandler+0x144>)
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	4a45      	ldr	r2, [pc, #276]	@ (800173c <DMA2_Stream7_IRQHandler+0x144>)
 8001628:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800162c:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_DMEIF7)
 800162e:	4b44      	ldr	r3, [pc, #272]	@ (8001740 <DMA2_Stream7_IRQHandler+0x148>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d00e      	beq.n	8001658 <DMA2_Stream7_IRQHandler+0x60>
	{
	    if (__DMA2_Stream7_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 800163a:	4b42      	ldr	r3, [pc, #264]	@ (8001744 <DMA2_Stream7_IRQHandler+0x14c>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001640:	2b00      	cmp	r3, #0
 8001642:	d009      	beq.n	8001658 <DMA2_Stream7_IRQHandler+0x60>
	    {
	    	__DMA2_Stream7_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001644:	4b3f      	ldr	r3, [pc, #252]	@ (8001744 <DMA2_Stream7_IRQHandler+0x14c>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164a:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF7;
 800164c:	4b3b      	ldr	r3, [pc, #236]	@ (800173c <DMA2_Stream7_IRQHandler+0x144>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	4a3a      	ldr	r2, [pc, #232]	@ (800173c <DMA2_Stream7_IRQHandler+0x144>)
 8001652:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001656:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_TEIF7)
 8001658:	4b39      	ldr	r3, [pc, #228]	@ (8001740 <DMA2_Stream7_IRQHandler+0x148>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d00e      	beq.n	8001682 <DMA2_Stream7_IRQHandler+0x8a>
	{
	    if (__DMA2_Stream7_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001664:	4b37      	ldr	r3, [pc, #220]	@ (8001744 <DMA2_Stream7_IRQHandler+0x14c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800166a:	2b00      	cmp	r3, #0
 800166c:	d009      	beq.n	8001682 <DMA2_Stream7_IRQHandler+0x8a>
	    {
	    	__DMA2_Stream7_Config__ ->ISR_Routines.Transfer_Error_ISR();
 800166e:	4b35      	ldr	r3, [pc, #212]	@ (8001744 <DMA2_Stream7_IRQHandler+0x14c>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001674:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CTEIF7;
 8001676:	4b31      	ldr	r3, [pc, #196]	@ (800173c <DMA2_Stream7_IRQHandler+0x144>)
 8001678:	68db      	ldr	r3, [r3, #12]
 800167a:	4a30      	ldr	r2, [pc, #192]	@ (800173c <DMA2_Stream7_IRQHandler+0x144>)
 800167c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001680:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_HTIF7)
 8001682:	4b2f      	ldr	r3, [pc, #188]	@ (8001740 <DMA2_Stream7_IRQHandler+0x148>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d026      	beq.n	80016dc <DMA2_Stream7_IRQHandler+0xe4>
	{
	    if (__DMA2_Stream7_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 800168e:	4b2d      	ldr	r3, [pc, #180]	@ (8001744 <DMA2_Stream7_IRQHandler+0x14c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001694:	2b00      	cmp	r3, #0
 8001696:	d021      	beq.n	80016dc <DMA2_Stream7_IRQHandler+0xe4>
	    {
	    	__DMA2_Stream7_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001698:	4b2a      	ldr	r3, [pc, #168]	@ (8001744 <DMA2_Stream7_IRQHandler+0x14c>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800169e:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CHTIF7;
 80016a0:	4b26      	ldr	r3, [pc, #152]	@ (800173c <DMA2_Stream7_IRQHandler+0x144>)
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	4a25      	ldr	r2, [pc, #148]	@ (800173c <DMA2_Stream7_IRQHandler+0x144>)
 80016a6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80016aa:	60d3      	str	r3, [r2, #12]

	    	if(__DMA2_Stream7_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80016ac:	4b25      	ldr	r3, [pc, #148]	@ (8001744 <DMA2_Stream7_IRQHandler+0x14c>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016b2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d110      	bne.n	80016dc <DMA2_Stream7_IRQHandler+0xe4>
	    	{
	    		if((__DMA2_Stream7_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80016ba:	4b22      	ldr	r3, [pc, #136]	@ (8001744 <DMA2_Stream7_IRQHandler+0x14c>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d004      	beq.n	80016d4 <DMA2_Stream7_IRQHandler+0xdc>
	    		{
	    			__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80016ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001744 <DMA2_Stream7_IRQHandler+0x14c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80016d0:	4798      	blx	r3
 80016d2:	e003      	b.n	80016dc <DMA2_Stream7_IRQHandler+0xe4>
	    		}
	    		else
	    		{
	    			__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80016d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001744 <DMA2_Stream7_IRQHandler+0x14c>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016da:	4798      	blx	r3
	    		}
	    	}
	    }
	}

	if(DMA_HISR & DMA_HISR_TCIF7)
 80016dc:	4b18      	ldr	r3, [pc, #96]	@ (8001740 <DMA2_Stream7_IRQHandler+0x148>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d026      	beq.n	8001736 <DMA2_Stream7_IRQHandler+0x13e>
	{
	    if (__DMA2_Stream7_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 80016e8:	4b16      	ldr	r3, [pc, #88]	@ (8001744 <DMA2_Stream7_IRQHandler+0x14c>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d021      	beq.n	8001736 <DMA2_Stream7_IRQHandler+0x13e>
	    {
	    	__DMA2_Stream7_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80016f2:	4b14      	ldr	r3, [pc, #80]	@ (8001744 <DMA2_Stream7_IRQHandler+0x14c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016f8:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CTCIF7;
 80016fa:	4b10      	ldr	r3, [pc, #64]	@ (800173c <DMA2_Stream7_IRQHandler+0x144>)
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	4a0f      	ldr	r2, [pc, #60]	@ (800173c <DMA2_Stream7_IRQHandler+0x144>)
 8001700:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001704:	60d3      	str	r3, [r2, #12]

	    	if(__DMA2_Stream7_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001706:	4b0f      	ldr	r3, [pc, #60]	@ (8001744 <DMA2_Stream7_IRQHandler+0x14c>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800170c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001710:	4293      	cmp	r3, r2
 8001712:	d110      	bne.n	8001736 <DMA2_Stream7_IRQHandler+0x13e>
	    	{
	    		if((__DMA2_Stream7_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001714:	4b0b      	ldr	r3, [pc, #44]	@ (8001744 <DMA2_Stream7_IRQHandler+0x14c>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001720:	2b00      	cmp	r3, #0
 8001722:	d004      	beq.n	800172e <DMA2_Stream7_IRQHandler+0x136>
	    		{
	    			__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001724:	4b07      	ldr	r3, [pc, #28]	@ (8001744 <DMA2_Stream7_IRQHandler+0x14c>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800172a:	4798      	blx	r3
	    			__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
	    		}
	    	}
	    }
	}
}
 800172c:	e003      	b.n	8001736 <DMA2_Stream7_IRQHandler+0x13e>
	    			__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800172e:	4b05      	ldr	r3, [pc, #20]	@ (8001744 <DMA2_Stream7_IRQHandler+0x14c>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001734:	4798      	blx	r3
}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	40026400 	.word	0x40026400
 8001740:	20000064 	.word	0x20000064
 8001744:	2000005c 	.word	0x2000005c

08001748 <DMA_Clock_Enable>:
 * the RCC AHB1 peripheral clock enable register.
 *
 * @param[in] config Pointer to the `DMA_Config` structure that contains the DMA controller configuration.
 */
void DMA_Clock_Enable(DMA_Config *config)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
	if(config -> Request.Controller == DMA1){
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a0c      	ldr	r2, [pc, #48]	@ (8001788 <DMA_Clock_Enable+0x40>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d105      	bne.n	8001766 <DMA_Clock_Enable+0x1e>
		RCC -> AHB1ENR |= RCC_AHB1ENR_DMA1EN;
 800175a:	4b0c      	ldr	r3, [pc, #48]	@ (800178c <DMA_Clock_Enable+0x44>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175e:	4a0b      	ldr	r2, [pc, #44]	@ (800178c <DMA_Clock_Enable+0x44>)
 8001760:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001764:	6313      	str	r3, [r2, #48]	@ 0x30
	}
	if(config -> Request.Controller == DMA2)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a09      	ldr	r2, [pc, #36]	@ (8001790 <DMA_Clock_Enable+0x48>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d105      	bne.n	800177c <DMA_Clock_Enable+0x34>
		{
		RCC -> AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 8001770:	4b06      	ldr	r3, [pc, #24]	@ (800178c <DMA_Clock_Enable+0x44>)
 8001772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001774:	4a05      	ldr	r2, [pc, #20]	@ (800178c <DMA_Clock_Enable+0x44>)
 8001776:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800177a:	6313      	str	r3, [r2, #48]	@ 0x30
		}
}
 800177c:	bf00      	nop
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	40026000 	.word	0x40026000
 800178c:	40023800 	.word	0x40023800
 8001790:	40026400 	.word	0x40026400

08001794 <DMA_Init>:
 * @param[in] config Pointer to the `DMA_Config` structure containing the configuration parameters.
 *
 * @return int8_t Returns 1 on successful initialization, or -1 if an error occurs.
 */
int8_t DMA_Init(DMA_Config *config)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
//	DMA_Clock_Disable(config);
    DMA_Clock_Enable(config);  // Enable the clock for the specified DMA controller
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f7ff ffd3 	bl	8001748 <DMA_Clock_Enable>

    if (config->Request.Stream->CR & DMA_SxCR_EN)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0301 	and.w	r3, r3, #1
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d00f      	beq.n	80017d0 <DMA_Init+0x3c>
    {
    	config->Request.Stream->CR &= ~DMA_SxCR_EN;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f022 0201 	bic.w	r2, r2, #1
 80017be:	601a      	str	r2, [r3, #0]
        while (config->Request.Stream->CR & DMA_SxCR_EN);  // Wait until disabled
 80017c0:	bf00      	nop
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0301 	and.w	r3, r3, #1
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d1f8      	bne.n	80017c2 <DMA_Init+0x2e>
    }


    config->Request.Stream->CR |= config->Request.channel << DMA_SxCR_CHSEL_Pos;  // Set the DMA channel
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	6819      	ldr	r1, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	7a1b      	ldrb	r3, [r3, #8]
 80017da:	065a      	lsls	r2, r3, #25
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	430a      	orrs	r2, r1
 80017e2:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->circular_mode;  // Configure circular mode
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	6819      	ldr	r1, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	699a      	ldr	r2, [r3, #24]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	430a      	orrs	r2, r1
 80017f4:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->flow_control;  // Set flow control
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	6819      	ldr	r1, [r3, #0]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	68da      	ldr	r2, [r3, #12]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	430a      	orrs	r2, r1
 8001806:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->priority_level;  // Set priority level
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	6819      	ldr	r1, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	695a      	ldr	r2, [r3, #20]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	430a      	orrs	r2, r1
 8001818:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->memory_data_size;  // Set memory data size
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	6819      	ldr	r1, [r3, #0]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	430a      	orrs	r2, r1
 800182a:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->peripheral_data_size;  // Set peripheral data size
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	6819      	ldr	r1, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	430a      	orrs	r2, r1
 800183c:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->transfer_direction;  // Set transfer direction
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	6819      	ldr	r1, [r3, #0]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	691a      	ldr	r2, [r3, #16]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	430a      	orrs	r2, r1
 800184e:	601a      	str	r2, [r3, #0]

    // Configure DMA interrupts if enabled


     if(config->interrupts != DMA_Configuration.DMA_Interrupts.Disable)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	69db      	ldr	r3, [r3, #28]
 8001854:	2200      	movs	r2, #0
 8001856:	4293      	cmp	r3, r2
 8001858:	f000 8110 	beq.w	8001a7c <DMA_Init+0x2e8>
    {

        if(config->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	69db      	ldr	r3, [r3, #28]
 8001860:	2280      	movs	r2, #128	@ 0x80
 8001862:	4013      	ands	r3, r2
 8001864:	2b00      	cmp	r3, #0
 8001866:	d008      	beq.n	800187a <DMA_Init+0xe6>
        {
        	config->Request.Stream->FCR |= config->interrupts;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	6959      	ldr	r1, [r3, #20]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	69da      	ldr	r2, [r3, #28]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	430a      	orrs	r2, r1
 8001878:	615a      	str	r2, [r3, #20]
        }

        if(config->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	2210      	movs	r2, #16
 8001880:	4013      	ands	r3, r2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d007      	beq.n	8001896 <DMA_Init+0x102>
        {
        	config->Request.Stream->CR |= DMA_SxCR_TCIE;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f042 0210 	orr.w	r2, r2, #16
 8001894:	601a      	str	r2, [r3, #0]
        }

        if(config->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	69db      	ldr	r3, [r3, #28]
 800189a:	2208      	movs	r2, #8
 800189c:	4013      	ands	r3, r2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d007      	beq.n	80018b2 <DMA_Init+0x11e>
        {
        	config->Request.Stream->CR |= DMA_SxCR_HTIE;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f042 0208 	orr.w	r2, r2, #8
 80018b0:	601a      	str	r2, [r3, #0]
        }

        if(config->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	69db      	ldr	r3, [r3, #28]
 80018b6:	2204      	movs	r2, #4
 80018b8:	4013      	ands	r3, r2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d007      	beq.n	80018ce <DMA_Init+0x13a>
        {
        	config->Request.Stream->CR |= DMA_SxCR_TEIE;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f042 0204 	orr.w	r2, r2, #4
 80018cc:	601a      	str	r2, [r3, #0]
        }
        if(config->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	69db      	ldr	r3, [r3, #28]
 80018d2:	2202      	movs	r2, #2
 80018d4:	4013      	ands	r3, r2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d007      	beq.n	80018ea <DMA_Init+0x156>
        {
        	config->Request.Stream->CR |= DMA_SxCR_DMEIE;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f042 0202 	orr.w	r2, r2, #2
 80018e8:	601a      	str	r2, [r3, #0]
        }

        // Enable the corresponding NVIC interrupt for the DMA stream
        if(config->Request.Controller == DMA1)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a80      	ldr	r2, [pc, #512]	@ (8001af0 <DMA_Init+0x35c>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d15f      	bne.n	80019b4 <DMA_Init+0x220>
        {
            if(config->Request.Stream == DMA1_Stream0){
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	4a7e      	ldr	r2, [pc, #504]	@ (8001af4 <DMA_Init+0x360>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d106      	bne.n	800190c <DMA_Init+0x178>
            	__DMA1_Stream0_Config__ = config;
 80018fe:	4a7e      	ldr	r2, [pc, #504]	@ (8001af8 <DMA_Init+0x364>)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6013      	str	r3, [r2, #0]
            	NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001904:	200b      	movs	r0, #11
 8001906:	f7fe fc5f 	bl	80001c8 <__NVIC_EnableIRQ>
 800190a:	e0b7      	b.n	8001a7c <DMA_Init+0x2e8>
            }
            else if(config->Request.Stream == DMA1_Stream1){
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	4a7a      	ldr	r2, [pc, #488]	@ (8001afc <DMA_Init+0x368>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d106      	bne.n	8001924 <DMA_Init+0x190>
            	__DMA1_Stream1_Config__ = config;
 8001916:	4a7a      	ldr	r2, [pc, #488]	@ (8001b00 <DMA_Init+0x36c>)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6013      	str	r3, [r2, #0]
            	NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800191c:	200c      	movs	r0, #12
 800191e:	f7fe fc53 	bl	80001c8 <__NVIC_EnableIRQ>
 8001922:	e0ab      	b.n	8001a7c <DMA_Init+0x2e8>
            }
            else if(config->Request.Stream == DMA1_Stream2){
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	4a76      	ldr	r2, [pc, #472]	@ (8001b04 <DMA_Init+0x370>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d106      	bne.n	800193c <DMA_Init+0x1a8>
            	__DMA1_Stream2_Config__ = config;
 800192e:	4a76      	ldr	r2, [pc, #472]	@ (8001b08 <DMA_Init+0x374>)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6013      	str	r3, [r2, #0]
            	NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001934:	200d      	movs	r0, #13
 8001936:	f7fe fc47 	bl	80001c8 <__NVIC_EnableIRQ>
 800193a:	e09f      	b.n	8001a7c <DMA_Init+0x2e8>
            }
            else if(config->Request.Stream == DMA1_Stream3){
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	4a72      	ldr	r2, [pc, #456]	@ (8001b0c <DMA_Init+0x378>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d106      	bne.n	8001954 <DMA_Init+0x1c0>
            	__DMA1_Stream3_Config__ = config;
 8001946:	4a72      	ldr	r2, [pc, #456]	@ (8001b10 <DMA_Init+0x37c>)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6013      	str	r3, [r2, #0]
            	NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800194c:	200e      	movs	r0, #14
 800194e:	f7fe fc3b 	bl	80001c8 <__NVIC_EnableIRQ>
 8001952:	e093      	b.n	8001a7c <DMA_Init+0x2e8>
            }
            else if(config->Request.Stream == DMA1_Stream4){
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	4a6e      	ldr	r2, [pc, #440]	@ (8001b14 <DMA_Init+0x380>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d106      	bne.n	800196c <DMA_Init+0x1d8>
            	__DMA1_Stream4_Config__ = config;
 800195e:	4a6e      	ldr	r2, [pc, #440]	@ (8001b18 <DMA_Init+0x384>)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6013      	str	r3, [r2, #0]
            	NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001964:	200f      	movs	r0, #15
 8001966:	f7fe fc2f 	bl	80001c8 <__NVIC_EnableIRQ>
 800196a:	e087      	b.n	8001a7c <DMA_Init+0x2e8>
            }
            else if(config->Request.Stream == DMA1_Stream5){
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	4a6a      	ldr	r2, [pc, #424]	@ (8001b1c <DMA_Init+0x388>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d106      	bne.n	8001984 <DMA_Init+0x1f0>
            	__DMA1_Stream5_Config__ = config;
 8001976:	4a6a      	ldr	r2, [pc, #424]	@ (8001b20 <DMA_Init+0x38c>)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6013      	str	r3, [r2, #0]
            	NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800197c:	2010      	movs	r0, #16
 800197e:	f7fe fc23 	bl	80001c8 <__NVIC_EnableIRQ>
 8001982:	e07b      	b.n	8001a7c <DMA_Init+0x2e8>
            }
            else if(config->Request.Stream == DMA1_Stream6) {
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	4a66      	ldr	r2, [pc, #408]	@ (8001b24 <DMA_Init+0x390>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d106      	bne.n	800199c <DMA_Init+0x208>
            	__DMA1_Stream6_Config__ = config;
 800198e:	4a66      	ldr	r2, [pc, #408]	@ (8001b28 <DMA_Init+0x394>)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6013      	str	r3, [r2, #0]
            	NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001994:	2011      	movs	r0, #17
 8001996:	f7fe fc17 	bl	80001c8 <__NVIC_EnableIRQ>
 800199a:	e06f      	b.n	8001a7c <DMA_Init+0x2e8>
            }
            else if(config->Request.Stream == DMA1_Stream7){
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	4a62      	ldr	r2, [pc, #392]	@ (8001b2c <DMA_Init+0x398>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d16a      	bne.n	8001a7c <DMA_Init+0x2e8>
            	__DMA1_Stream7_Config__ = config;
 80019a6:	4a62      	ldr	r2, [pc, #392]	@ (8001b30 <DMA_Init+0x39c>)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6013      	str	r3, [r2, #0]
            	NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80019ac:	202f      	movs	r0, #47	@ 0x2f
 80019ae:	f7fe fc0b 	bl	80001c8 <__NVIC_EnableIRQ>
 80019b2:	e063      	b.n	8001a7c <DMA_Init+0x2e8>
            }
        }
        else if(config->Request.Controller == DMA2)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a5e      	ldr	r2, [pc, #376]	@ (8001b34 <DMA_Init+0x3a0>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d15e      	bne.n	8001a7c <DMA_Init+0x2e8>
        {
            if(config->Request.Stream == DMA2_Stream0){
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	4a5d      	ldr	r2, [pc, #372]	@ (8001b38 <DMA_Init+0x3a4>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d106      	bne.n	80019d6 <DMA_Init+0x242>
            	__DMA2_Stream0_Config__ = config;
 80019c8:	4a5c      	ldr	r2, [pc, #368]	@ (8001b3c <DMA_Init+0x3a8>)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6013      	str	r3, [r2, #0]
            	NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80019ce:	2038      	movs	r0, #56	@ 0x38
 80019d0:	f7fe fbfa 	bl	80001c8 <__NVIC_EnableIRQ>
 80019d4:	e052      	b.n	8001a7c <DMA_Init+0x2e8>
            }
            else if(config->Request.Stream == DMA2_Stream1){
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	4a59      	ldr	r2, [pc, #356]	@ (8001b40 <DMA_Init+0x3ac>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d106      	bne.n	80019ee <DMA_Init+0x25a>
            	__DMA2_Stream1_Config__ = config;
 80019e0:	4a58      	ldr	r2, [pc, #352]	@ (8001b44 <DMA_Init+0x3b0>)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6013      	str	r3, [r2, #0]
            	NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80019e6:	2039      	movs	r0, #57	@ 0x39
 80019e8:	f7fe fbee 	bl	80001c8 <__NVIC_EnableIRQ>
 80019ec:	e046      	b.n	8001a7c <DMA_Init+0x2e8>
            }
            else if(config->Request.Stream == DMA2_Stream2){
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	4a55      	ldr	r2, [pc, #340]	@ (8001b48 <DMA_Init+0x3b4>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d106      	bne.n	8001a06 <DMA_Init+0x272>
            	__DMA2_Stream2_Config__ = config;
 80019f8:	4a54      	ldr	r2, [pc, #336]	@ (8001b4c <DMA_Init+0x3b8>)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6013      	str	r3, [r2, #0]
            	NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80019fe:	203a      	movs	r0, #58	@ 0x3a
 8001a00:	f7fe fbe2 	bl	80001c8 <__NVIC_EnableIRQ>
 8001a04:	e03a      	b.n	8001a7c <DMA_Init+0x2e8>
            }
            else if(config->Request.Stream == DMA2_Stream3){
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	4a51      	ldr	r2, [pc, #324]	@ (8001b50 <DMA_Init+0x3bc>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d106      	bne.n	8001a1e <DMA_Init+0x28a>
            	__DMA2_Stream3_Config__ = config;
 8001a10:	4a50      	ldr	r2, [pc, #320]	@ (8001b54 <DMA_Init+0x3c0>)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6013      	str	r3, [r2, #0]
            	NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001a16:	203b      	movs	r0, #59	@ 0x3b
 8001a18:	f7fe fbd6 	bl	80001c8 <__NVIC_EnableIRQ>
 8001a1c:	e02e      	b.n	8001a7c <DMA_Init+0x2e8>
            }
            else if(config->Request.Stream == DMA2_Stream4){
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	4a4d      	ldr	r2, [pc, #308]	@ (8001b58 <DMA_Init+0x3c4>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d106      	bne.n	8001a36 <DMA_Init+0x2a2>
            	__DMA2_Stream4_Config__ = config;
 8001a28:	4a4c      	ldr	r2, [pc, #304]	@ (8001b5c <DMA_Init+0x3c8>)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6013      	str	r3, [r2, #0]
            	NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8001a2e:	203c      	movs	r0, #60	@ 0x3c
 8001a30:	f7fe fbca 	bl	80001c8 <__NVIC_EnableIRQ>
 8001a34:	e022      	b.n	8001a7c <DMA_Init+0x2e8>
            }
            else if(config->Request.Stream == DMA2_Stream5){
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	4a49      	ldr	r2, [pc, #292]	@ (8001b60 <DMA_Init+0x3cc>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d106      	bne.n	8001a4e <DMA_Init+0x2ba>
            	__DMA2_Stream5_Config__ = config;
 8001a40:	4a48      	ldr	r2, [pc, #288]	@ (8001b64 <DMA_Init+0x3d0>)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6013      	str	r3, [r2, #0]
            	NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8001a46:	2044      	movs	r0, #68	@ 0x44
 8001a48:	f7fe fbbe 	bl	80001c8 <__NVIC_EnableIRQ>
 8001a4c:	e016      	b.n	8001a7c <DMA_Init+0x2e8>
            }
            else if(config->Request.Stream == DMA2_Stream6){
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	4a45      	ldr	r2, [pc, #276]	@ (8001b68 <DMA_Init+0x3d4>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d106      	bne.n	8001a66 <DMA_Init+0x2d2>
            	__DMA2_Stream6_Config__ = config;
 8001a58:	4a44      	ldr	r2, [pc, #272]	@ (8001b6c <DMA_Init+0x3d8>)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6013      	str	r3, [r2, #0]
            	NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001a5e:	2045      	movs	r0, #69	@ 0x45
 8001a60:	f7fe fbb2 	bl	80001c8 <__NVIC_EnableIRQ>
 8001a64:	e00a      	b.n	8001a7c <DMA_Init+0x2e8>
            }
            else if(config->Request.Stream == DMA2_Stream7){
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	4a41      	ldr	r2, [pc, #260]	@ (8001b70 <DMA_Init+0x3dc>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d105      	bne.n	8001a7c <DMA_Init+0x2e8>
            	__DMA2_Stream7_Config__ = config;
 8001a70:	4a40      	ldr	r2, [pc, #256]	@ (8001b74 <DMA_Init+0x3e0>)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6013      	str	r3, [r2, #0]
//            	NVIC_SetPriority(DMA2_Stream7_IRQn,0);
            	NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001a76:	2046      	movs	r0, #70	@ 0x46
 8001a78:	f7fe fba6 	bl	80001c8 <__NVIC_EnableIRQ>
            }
        }
    }

    // Configure memory and peripheral pointer increments
    config->Request.Stream->CR |= config->memory_pointer_increment;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	8c1b      	ldrh	r3, [r3, #32]
 8001a86:	4619      	mov	r1, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->peripheral_pointer_increment;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	601a      	str	r2, [r3, #0]

    // Configure circular mode
    if(config->circular_mode == DMA_Configuration.Circular_Mode.Enable)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d108      	bne.n	8001ac2 <DMA_Init+0x32e>
    {
        config->Request.Stream->CR |= DMA_SxCR_CIRC;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	e010      	b.n	8001ae4 <DMA_Init+0x350>
    }
    else if(config->circular_mode == DMA_Configuration.Circular_Mode.Disable)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d108      	bne.n	8001ade <DMA_Init+0x34a>
    {
        config->Request.Stream->CR &= ~DMA_SxCR_CIRC;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	e002      	b.n	8001ae4 <DMA_Init+0x350>
    }
    else
    {
        return -1;  // Return -1 if circular mode configuration is invalid
 8001ade:	f04f 33ff 	mov.w	r3, #4294967295
 8001ae2:	e000      	b.n	8001ae6 <DMA_Init+0x352>
    }

    return 1;  // Return 1 on successful initialization
 8001ae4:	2301      	movs	r3, #1
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	40026000 	.word	0x40026000
 8001af4:	40026010 	.word	0x40026010
 8001af8:	20000020 	.word	0x20000020
 8001afc:	40026028 	.word	0x40026028
 8001b00:	20000024 	.word	0x20000024
 8001b04:	40026040 	.word	0x40026040
 8001b08:	20000028 	.word	0x20000028
 8001b0c:	40026058 	.word	0x40026058
 8001b10:	2000002c 	.word	0x2000002c
 8001b14:	40026070 	.word	0x40026070
 8001b18:	20000030 	.word	0x20000030
 8001b1c:	40026088 	.word	0x40026088
 8001b20:	20000034 	.word	0x20000034
 8001b24:	400260a0 	.word	0x400260a0
 8001b28:	20000038 	.word	0x20000038
 8001b2c:	400260b8 	.word	0x400260b8
 8001b30:	2000003c 	.word	0x2000003c
 8001b34:	40026400 	.word	0x40026400
 8001b38:	40026410 	.word	0x40026410
 8001b3c:	20000040 	.word	0x20000040
 8001b40:	40026428 	.word	0x40026428
 8001b44:	20000044 	.word	0x20000044
 8001b48:	40026440 	.word	0x40026440
 8001b4c:	20000048 	.word	0x20000048
 8001b50:	40026458 	.word	0x40026458
 8001b54:	2000004c 	.word	0x2000004c
 8001b58:	40026470 	.word	0x40026470
 8001b5c:	20000050 	.word	0x20000050
 8001b60:	40026488 	.word	0x40026488
 8001b64:	20000054 	.word	0x20000054
 8001b68:	400264a0 	.word	0x400264a0
 8001b6c:	20000058 	.word	0x20000058
 8001b70:	400264b8 	.word	0x400264b8
 8001b74:	2000005c 	.word	0x2000005c

08001b78 <DMA_Set_Target>:
 * memory increment before applying the new settings.
 *
 * @param[in] config Pointer to the `DMA_Config` structure containing the target configuration.
 */
void DMA_Set_Target(DMA_Config *config)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
	config -> Request.Stream -> CR &= ~DMA_SxCR_EN;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f022 0201 	bic.w	r2, r2, #1
 8001b8e:	601a      	str	r2, [r3, #0]



	if(config -> circular_mode == DMA_Configuration.Circular_Mode.Disable)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	2200      	movs	r2, #0
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d108      	bne.n	8001bac <DMA_Set_Target+0x34>
	{
		config -> Request.Stream -> CR &= ~DMA_SxCR_CIRC;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	e00d      	b.n	8001bc8 <DMA_Set_Target+0x50>
	}
	else if(config -> circular_mode == DMA_Configuration.Circular_Mode.Enable)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d107      	bne.n	8001bc8 <DMA_Set_Target+0x50>
	{
		config -> Request.Stream -> CR |= DMA_SxCR_CIRC;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001bc6:	601a      	str	r2, [r3, #0]
	}

    // Clear previous data size and memory increment settings
    config -> Request.Stream -> CR &= ~(DMA_SxCR_MSIZE | DMA_SxCR_PSIZE | DMA_SxCR_MINC);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f422 42f8 	bic.w	r2, r2, #31744	@ 0x7c00
 8001bd6:	601a      	str	r2, [r3, #0]

    // Set the peripheral data size
    config -> Request.Stream -> CR |= config -> peripheral_data_size;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	6819      	ldr	r1, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	430a      	orrs	r2, r1
 8001be8:	601a      	str	r2, [r3, #0]

    // Set the memory data size
    config -> Request.Stream -> CR |= config -> memory_data_size;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	6819      	ldr	r1, [r3, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	601a      	str	r2, [r3, #0]

    // Set the number of data items to be transferred
    config -> Request.Stream -> NDTR = config -> buffer_length;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	605a      	str	r2, [r3, #4]

    // Set memory pointer increment mode
    config -> Request.Stream -> CR |= DMA_SxCR_MINC;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001c14:	601a      	str	r2, [r3, #0]

    // Set the memory address
    config -> Request.Stream -> M0AR = (uint32_t)config->memory_address;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001c1e:	60da      	str	r2, [r3, #12]

    // Set the peripheral address
    config -> Request.Stream -> PAR = (uint32_t)config->peripheral_address;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001c28:	609a      	str	r2, [r3, #8]
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
	...

08001c38 <DMA_Set_Trigger>:
 * number and the DMA controller (DMA1 or DMA2).
 *
 * @param[in] config Pointer to the `DMA_Config` structure that contains the configuration settings.
 */
void DMA_Set_Trigger(DMA_Config *config)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b087      	sub	sp, #28
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
    // Bit shift values for streams 0 to 7
    static const uint8_t LIFCR_Shifts[4] = {0, 6, 16, 22};
    static const uint8_t HIFCR_Shifts[4] = {0, 6, 16, 22};

    DMA_TypeDef *controller = config->Request.Controller;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	617b      	str	r3, [r7, #20]
    DMA_Stream_TypeDef *stream = config->Request.Stream;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	613b      	str	r3, [r7, #16]
    uint32_t shift;

    if (controller == DMA1 || controller == DMA2)
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	4a43      	ldr	r2, [pc, #268]	@ (8001d5c <DMA_Set_Trigger+0x124>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d003      	beq.n	8001c5c <DMA_Set_Trigger+0x24>
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	4a42      	ldr	r2, [pc, #264]	@ (8001d60 <DMA_Set_Trigger+0x128>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d178      	bne.n	8001d4e <DMA_Set_Trigger+0x116>
    {
        // Determine the correct shift value and clear the corresponding flags in LIFCR or HIFCR
        if (stream >= DMA1_Stream0 && stream <= DMA1_Stream3)
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	4a41      	ldr	r2, [pc, #260]	@ (8001d64 <DMA_Set_Trigger+0x12c>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d918      	bls.n	8001c96 <DMA_Set_Trigger+0x5e>
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	4a40      	ldr	r2, [pc, #256]	@ (8001d68 <DMA_Set_Trigger+0x130>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d814      	bhi.n	8001c96 <DMA_Set_Trigger+0x5e>
        {
            shift = LIFCR_Shifts[stream - DMA1_Stream0];
 8001c6c:	693a      	ldr	r2, [r7, #16]
 8001c6e:	4b3f      	ldr	r3, [pc, #252]	@ (8001d6c <DMA_Set_Trigger+0x134>)
 8001c70:	4413      	add	r3, r2
 8001c72:	10db      	asrs	r3, r3, #3
 8001c74:	4a3e      	ldr	r2, [pc, #248]	@ (8001d70 <DMA_Set_Trigger+0x138>)
 8001c76:	fb02 f303 	mul.w	r3, r2, r3
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	4b3d      	ldr	r3, [pc, #244]	@ (8001d74 <DMA_Set_Trigger+0x13c>)
 8001c7e:	5c9b      	ldrb	r3, [r3, r2]
 8001c80:	60fb      	str	r3, [r7, #12]
            controller->LIFCR |= 0x3F << shift;  // Clear interrupt flags for the stream
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	213f      	movs	r1, #63	@ 0x3f
 8001c88:	68fa      	ldr	r2, [r7, #12]
 8001c8a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c8e:	431a      	orrs	r2, r3
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	609a      	str	r2, [r3, #8]
 8001c94:	e055      	b.n	8001d42 <DMA_Set_Trigger+0x10a>
        }
        else if (stream >= DMA1_Stream4 && stream <= DMA1_Stream7)
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	4a37      	ldr	r2, [pc, #220]	@ (8001d78 <DMA_Set_Trigger+0x140>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d918      	bls.n	8001cd0 <DMA_Set_Trigger+0x98>
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	4a36      	ldr	r2, [pc, #216]	@ (8001d7c <DMA_Set_Trigger+0x144>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d814      	bhi.n	8001cd0 <DMA_Set_Trigger+0x98>
        {
            shift = HIFCR_Shifts[stream - DMA1_Stream4];
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	4b35      	ldr	r3, [pc, #212]	@ (8001d80 <DMA_Set_Trigger+0x148>)
 8001caa:	4413      	add	r3, r2
 8001cac:	10db      	asrs	r3, r3, #3
 8001cae:	4a30      	ldr	r2, [pc, #192]	@ (8001d70 <DMA_Set_Trigger+0x138>)
 8001cb0:	fb02 f303 	mul.w	r3, r2, r3
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	4b33      	ldr	r3, [pc, #204]	@ (8001d84 <DMA_Set_Trigger+0x14c>)
 8001cb8:	5c9b      	ldrb	r3, [r3, r2]
 8001cba:	60fb      	str	r3, [r7, #12]
            controller->HIFCR |= 0x3F << shift;  // Clear interrupt flags for the stream
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	213f      	movs	r1, #63	@ 0x3f
 8001cc2:	68fa      	ldr	r2, [r7, #12]
 8001cc4:	fa01 f202 	lsl.w	r2, r1, r2
 8001cc8:	431a      	orrs	r2, r3
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	60da      	str	r2, [r3, #12]
 8001cce:	e038      	b.n	8001d42 <DMA_Set_Trigger+0x10a>
        }
        else if (stream >= DMA2_Stream0 && stream <= DMA2_Stream3)
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	4a2d      	ldr	r2, [pc, #180]	@ (8001d88 <DMA_Set_Trigger+0x150>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d918      	bls.n	8001d0a <DMA_Set_Trigger+0xd2>
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	4a2c      	ldr	r2, [pc, #176]	@ (8001d8c <DMA_Set_Trigger+0x154>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d814      	bhi.n	8001d0a <DMA_Set_Trigger+0xd2>
        {
            shift = LIFCR_Shifts[stream - DMA2_Stream0];
 8001ce0:	693a      	ldr	r2, [r7, #16]
 8001ce2:	4b2b      	ldr	r3, [pc, #172]	@ (8001d90 <DMA_Set_Trigger+0x158>)
 8001ce4:	4413      	add	r3, r2
 8001ce6:	10db      	asrs	r3, r3, #3
 8001ce8:	4a21      	ldr	r2, [pc, #132]	@ (8001d70 <DMA_Set_Trigger+0x138>)
 8001cea:	fb02 f303 	mul.w	r3, r2, r3
 8001cee:	461a      	mov	r2, r3
 8001cf0:	4b20      	ldr	r3, [pc, #128]	@ (8001d74 <DMA_Set_Trigger+0x13c>)
 8001cf2:	5c9b      	ldrb	r3, [r3, r2]
 8001cf4:	60fb      	str	r3, [r7, #12]
            controller->LIFCR |= 0x3F << shift;  // Clear interrupt flags for the stream
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	213f      	movs	r1, #63	@ 0x3f
 8001cfc:	68fa      	ldr	r2, [r7, #12]
 8001cfe:	fa01 f202 	lsl.w	r2, r1, r2
 8001d02:	431a      	orrs	r2, r3
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	609a      	str	r2, [r3, #8]
 8001d08:	e01b      	b.n	8001d42 <DMA_Set_Trigger+0x10a>
        }
        else if (stream >= DMA2_Stream4 && stream <= DMA2_Stream7)
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	4a21      	ldr	r2, [pc, #132]	@ (8001d94 <DMA_Set_Trigger+0x15c>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d917      	bls.n	8001d42 <DMA_Set_Trigger+0x10a>
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	4a20      	ldr	r2, [pc, #128]	@ (8001d98 <DMA_Set_Trigger+0x160>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d813      	bhi.n	8001d42 <DMA_Set_Trigger+0x10a>
        {
            shift = HIFCR_Shifts[stream - DMA2_Stream4];
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	4b1f      	ldr	r3, [pc, #124]	@ (8001d9c <DMA_Set_Trigger+0x164>)
 8001d1e:	4413      	add	r3, r2
 8001d20:	10db      	asrs	r3, r3, #3
 8001d22:	4a13      	ldr	r2, [pc, #76]	@ (8001d70 <DMA_Set_Trigger+0x138>)
 8001d24:	fb02 f303 	mul.w	r3, r2, r3
 8001d28:	461a      	mov	r2, r3
 8001d2a:	4b16      	ldr	r3, [pc, #88]	@ (8001d84 <DMA_Set_Trigger+0x14c>)
 8001d2c:	5c9b      	ldrb	r3, [r3, r2]
 8001d2e:	60fb      	str	r3, [r7, #12]
            controller->HIFCR |= 0x3F << shift;  // Clear interrupt flags for the stream
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	213f      	movs	r1, #63	@ 0x3f
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	fa01 f202 	lsl.w	r2, r1, r2
 8001d3c:	431a      	orrs	r2, r3
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	60da      	str	r2, [r3, #12]
        }

        stream->CR |= DMA_SxCR_EN;  // Enable the DMA stream
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f043 0201 	orr.w	r2, r3, #1
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	601a      	str	r2, [r3, #0]
    }
}
 8001d4e:	bf00      	nop
 8001d50:	371c      	adds	r7, #28
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	40026000 	.word	0x40026000
 8001d60:	40026400 	.word	0x40026400
 8001d64:	4002600f 	.word	0x4002600f
 8001d68:	40026058 	.word	0x40026058
 8001d6c:	bffd9ff0 	.word	0xbffd9ff0
 8001d70:	aaaaaaab 	.word	0xaaaaaaab
 8001d74:	08004738 	.word	0x08004738
 8001d78:	4002606f 	.word	0x4002606f
 8001d7c:	400260b8 	.word	0x400260b8
 8001d80:	bffd9f90 	.word	0xbffd9f90
 8001d84:	0800473c 	.word	0x0800473c
 8001d88:	4002640f 	.word	0x4002640f
 8001d8c:	40026458 	.word	0x40026458
 8001d90:	bffd9bf0 	.word	0xbffd9bf0
 8001d94:	4002646f 	.word	0x4002646f
 8001d98:	400264b8 	.word	0x400264b8
 8001d9c:	bffd9b90 	.word	0xbffd9b90

08001da0 <EXTI0_IRQHandler>:
 * @brief Interrupt handler for EXTI line 0.
 *
 * This ISR handles interrupts for pin 0, invoking the associated callback
 * function if one is registered.
 */
void EXTI0_IRQHandler(void) {
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
    if (EXTI_ISR[0]) EXTI_ISR[0](); // Invoke registered callback
 8001da4:	4b07      	ldr	r3, [pc, #28]	@ (8001dc4 <EXTI0_IRQHandler+0x24>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d002      	beq.n	8001db2 <EXTI0_IRQHandler+0x12>
 8001dac:	4b05      	ldr	r3, [pc, #20]	@ (8001dc4 <EXTI0_IRQHandler+0x24>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR0;        // Clear interrupt flag
 8001db2:	4b05      	ldr	r3, [pc, #20]	@ (8001dc8 <EXTI0_IRQHandler+0x28>)
 8001db4:	695b      	ldr	r3, [r3, #20]
 8001db6:	4a04      	ldr	r2, [pc, #16]	@ (8001dc8 <EXTI0_IRQHandler+0x28>)
 8001db8:	f043 0301 	orr.w	r3, r3, #1
 8001dbc:	6153      	str	r3, [r2, #20]
}
 8001dbe:	bf00      	nop
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	20000068 	.word	0x20000068
 8001dc8:	40013c00 	.word	0x40013c00

08001dcc <EXTI1_IRQHandler>:

/**
 * @brief Interrupt handler for EXTI line 1.
 */
void EXTI1_IRQHandler(void) {
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
    if (EXTI_ISR[1]) EXTI_ISR[1]();
 8001dd0:	4b07      	ldr	r3, [pc, #28]	@ (8001df0 <EXTI1_IRQHandler+0x24>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d002      	beq.n	8001dde <EXTI1_IRQHandler+0x12>
 8001dd8:	4b05      	ldr	r3, [pc, #20]	@ (8001df0 <EXTI1_IRQHandler+0x24>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR1;
 8001dde:	4b05      	ldr	r3, [pc, #20]	@ (8001df4 <EXTI1_IRQHandler+0x28>)
 8001de0:	695b      	ldr	r3, [r3, #20]
 8001de2:	4a04      	ldr	r2, [pc, #16]	@ (8001df4 <EXTI1_IRQHandler+0x28>)
 8001de4:	f043 0302 	orr.w	r3, r3, #2
 8001de8:	6153      	str	r3, [r2, #20]
}
 8001dea:	bf00      	nop
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20000068 	.word	0x20000068
 8001df4:	40013c00 	.word	0x40013c00

08001df8 <EXTI2_IRQHandler>:

/**
 * @brief Interrupt handler for EXTI line 2.
 */
void EXTI2_IRQHandler(void) {
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
    if (EXTI_ISR[2]) EXTI_ISR[2]();
 8001dfc:	4b07      	ldr	r3, [pc, #28]	@ (8001e1c <EXTI2_IRQHandler+0x24>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d002      	beq.n	8001e0a <EXTI2_IRQHandler+0x12>
 8001e04:	4b05      	ldr	r3, [pc, #20]	@ (8001e1c <EXTI2_IRQHandler+0x24>)
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR2;
 8001e0a:	4b05      	ldr	r3, [pc, #20]	@ (8001e20 <EXTI2_IRQHandler+0x28>)
 8001e0c:	695b      	ldr	r3, [r3, #20]
 8001e0e:	4a04      	ldr	r2, [pc, #16]	@ (8001e20 <EXTI2_IRQHandler+0x28>)
 8001e10:	f043 0304 	orr.w	r3, r3, #4
 8001e14:	6153      	str	r3, [r2, #20]
}
 8001e16:	bf00      	nop
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	20000068 	.word	0x20000068
 8001e20:	40013c00 	.word	0x40013c00

08001e24 <EXTI3_IRQHandler>:

/**
 * @brief Interrupt handler for EXTI line 3.
 */
void EXTI3_IRQHandler(void) {
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
    if (EXTI_ISR[3]) EXTI_ISR[3]();
 8001e28:	4b07      	ldr	r3, [pc, #28]	@ (8001e48 <EXTI3_IRQHandler+0x24>)
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d002      	beq.n	8001e36 <EXTI3_IRQHandler+0x12>
 8001e30:	4b05      	ldr	r3, [pc, #20]	@ (8001e48 <EXTI3_IRQHandler+0x24>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR3;
 8001e36:	4b05      	ldr	r3, [pc, #20]	@ (8001e4c <EXTI3_IRQHandler+0x28>)
 8001e38:	695b      	ldr	r3, [r3, #20]
 8001e3a:	4a04      	ldr	r2, [pc, #16]	@ (8001e4c <EXTI3_IRQHandler+0x28>)
 8001e3c:	f043 0308 	orr.w	r3, r3, #8
 8001e40:	6153      	str	r3, [r2, #20]
}
 8001e42:	bf00      	nop
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	20000068 	.word	0x20000068
 8001e4c:	40013c00 	.word	0x40013c00

08001e50 <EXTI4_IRQHandler>:

/**
 * @brief Interrupt handler for EXTI line 4.
 */
void EXTI4_IRQHandler(void) {
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
    if (EXTI_ISR[4]) EXTI_ISR[4]();
 8001e54:	4b07      	ldr	r3, [pc, #28]	@ (8001e74 <EXTI4_IRQHandler+0x24>)
 8001e56:	691b      	ldr	r3, [r3, #16]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d002      	beq.n	8001e62 <EXTI4_IRQHandler+0x12>
 8001e5c:	4b05      	ldr	r3, [pc, #20]	@ (8001e74 <EXTI4_IRQHandler+0x24>)
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR4;
 8001e62:	4b05      	ldr	r3, [pc, #20]	@ (8001e78 <EXTI4_IRQHandler+0x28>)
 8001e64:	695b      	ldr	r3, [r3, #20]
 8001e66:	4a04      	ldr	r2, [pc, #16]	@ (8001e78 <EXTI4_IRQHandler+0x28>)
 8001e68:	f043 0310 	orr.w	r3, r3, #16
 8001e6c:	6153      	str	r3, [r2, #20]
}
 8001e6e:	bf00      	nop
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	20000068 	.word	0x20000068
 8001e78:	40013c00 	.word	0x40013c00

08001e7c <EXTI9_5_IRQHandler>:
/**
 * @brief Interrupt handler for EXTI lines 5 to 9.
 *
 * Handles interrupts for pins 5 to 9, checking each pin for active flags.
 */
void EXTI9_5_IRQHandler(void) {
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
    for (int i = 5; i <= 9; ++i) {
 8001e82:	2305      	movs	r3, #5
 8001e84:	607b      	str	r3, [r7, #4]
 8001e86:	e020      	b.n	8001eca <EXTI9_5_IRQHandler+0x4e>
        if ((EXTI->PR & (1 << i)) && EXTI_ISR[i]) {
 8001e88:	4b14      	ldr	r3, [pc, #80]	@ (8001edc <EXTI9_5_IRQHandler+0x60>)
 8001e8a:	695b      	ldr	r3, [r3, #20]
 8001e8c:	2101      	movs	r1, #1
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	fa01 f202 	lsl.w	r2, r1, r2
 8001e94:	4013      	ands	r3, r2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d014      	beq.n	8001ec4 <EXTI9_5_IRQHandler+0x48>
 8001e9a:	4a11      	ldr	r2, [pc, #68]	@ (8001ee0 <EXTI9_5_IRQHandler+0x64>)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d00e      	beq.n	8001ec4 <EXTI9_5_IRQHandler+0x48>
            EXTI_ISR[i]();        // Invoke callback for pin `i`
 8001ea6:	4a0e      	ldr	r2, [pc, #56]	@ (8001ee0 <EXTI9_5_IRQHandler+0x64>)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eae:	4798      	blx	r3
            EXTI->PR |= (1 << i); // Clear interrupt flag
 8001eb0:	4b0a      	ldr	r3, [pc, #40]	@ (8001edc <EXTI9_5_IRQHandler+0x60>)
 8001eb2:	695b      	ldr	r3, [r3, #20]
 8001eb4:	2101      	movs	r1, #1
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	fa01 f202 	lsl.w	r2, r1, r2
 8001ebc:	4611      	mov	r1, r2
 8001ebe:	4a07      	ldr	r2, [pc, #28]	@ (8001edc <EXTI9_5_IRQHandler+0x60>)
 8001ec0:	430b      	orrs	r3, r1
 8001ec2:	6153      	str	r3, [r2, #20]
    for (int i = 5; i <= 9; ++i) {
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	607b      	str	r3, [r7, #4]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2b09      	cmp	r3, #9
 8001ece:	dddb      	ble.n	8001e88 <EXTI9_5_IRQHandler+0xc>
        }
    }
}
 8001ed0:	bf00      	nop
 8001ed2:	bf00      	nop
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	40013c00 	.word	0x40013c00
 8001ee0:	20000068 	.word	0x20000068

08001ee4 <EXTI15_10_IRQHandler>:
/**
 * @brief Interrupt handler for EXTI lines 10 to 15.
 *
 * Handles interrupts for pins 10 to 15, checking each pin for active flags.
 */
void EXTI15_10_IRQHandler(void) {
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
    for (int i = 10; i <= 15; ++i) {
 8001eea:	230a      	movs	r3, #10
 8001eec:	607b      	str	r3, [r7, #4]
 8001eee:	e020      	b.n	8001f32 <EXTI15_10_IRQHandler+0x4e>
        if ((EXTI->PR & (1 << i)) && EXTI_ISR[i]) {
 8001ef0:	4b14      	ldr	r3, [pc, #80]	@ (8001f44 <EXTI15_10_IRQHandler+0x60>)
 8001ef2:	695b      	ldr	r3, [r3, #20]
 8001ef4:	2101      	movs	r1, #1
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	fa01 f202 	lsl.w	r2, r1, r2
 8001efc:	4013      	ands	r3, r2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d014      	beq.n	8001f2c <EXTI15_10_IRQHandler+0x48>
 8001f02:	4a11      	ldr	r2, [pc, #68]	@ (8001f48 <EXTI15_10_IRQHandler+0x64>)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d00e      	beq.n	8001f2c <EXTI15_10_IRQHandler+0x48>
            EXTI_ISR[i]();        // Invoke callback for pin `i`
 8001f0e:	4a0e      	ldr	r2, [pc, #56]	@ (8001f48 <EXTI15_10_IRQHandler+0x64>)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f16:	4798      	blx	r3
            EXTI->PR |= (1 << i); // Clear interrupt flag
 8001f18:	4b0a      	ldr	r3, [pc, #40]	@ (8001f44 <EXTI15_10_IRQHandler+0x60>)
 8001f1a:	695b      	ldr	r3, [r3, #20]
 8001f1c:	2101      	movs	r1, #1
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	fa01 f202 	lsl.w	r2, r1, r2
 8001f24:	4611      	mov	r1, r2
 8001f26:	4a07      	ldr	r2, [pc, #28]	@ (8001f44 <EXTI15_10_IRQHandler+0x60>)
 8001f28:	430b      	orrs	r3, r1
 8001f2a:	6153      	str	r3, [r2, #20]
    for (int i = 10; i <= 15; ++i) {
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	3301      	adds	r3, #1
 8001f30:	607b      	str	r3, [r7, #4]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2b0f      	cmp	r3, #15
 8001f36:	dddb      	ble.n	8001ef0 <EXTI15_10_IRQHandler+0xc>
        }
    }
}
 8001f38:	bf00      	nop
 8001f3a:	bf00      	nop
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	40013c00 	.word	0x40013c00
 8001f48:	20000068 	.word	0x20000068

08001f4c <GPIO_Clock_Enable>:
 * @brief Enables the clock for a specific GPIO port.
 *
 * @param PORT Pointer to GPIO port base address.
 * @return GPIO_SUCCESS on success, GPIO_INVALID_PORT on failure.
 */
int GPIO_Clock_Enable(GPIO_TypeDef *PORT) {
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)PORT) {
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4a30      	ldr	r2, [pc, #192]	@ (8002018 <GPIO_Clock_Enable+0xcc>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d04b      	beq.n	8001ff4 <GPIO_Clock_Enable+0xa8>
 8001f5c:	4a2e      	ldr	r2, [pc, #184]	@ (8002018 <GPIO_Clock_Enable+0xcc>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d84f      	bhi.n	8002002 <GPIO_Clock_Enable+0xb6>
 8001f62:	4a2e      	ldr	r2, [pc, #184]	@ (800201c <GPIO_Clock_Enable+0xd0>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d03e      	beq.n	8001fe6 <GPIO_Clock_Enable+0x9a>
 8001f68:	4a2c      	ldr	r2, [pc, #176]	@ (800201c <GPIO_Clock_Enable+0xd0>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d849      	bhi.n	8002002 <GPIO_Clock_Enable+0xb6>
 8001f6e:	4a2c      	ldr	r2, [pc, #176]	@ (8002020 <GPIO_Clock_Enable+0xd4>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d031      	beq.n	8001fd8 <GPIO_Clock_Enable+0x8c>
 8001f74:	4a2a      	ldr	r2, [pc, #168]	@ (8002020 <GPIO_Clock_Enable+0xd4>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d843      	bhi.n	8002002 <GPIO_Clock_Enable+0xb6>
 8001f7a:	4a2a      	ldr	r2, [pc, #168]	@ (8002024 <GPIO_Clock_Enable+0xd8>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d024      	beq.n	8001fca <GPIO_Clock_Enable+0x7e>
 8001f80:	4a28      	ldr	r2, [pc, #160]	@ (8002024 <GPIO_Clock_Enable+0xd8>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d83d      	bhi.n	8002002 <GPIO_Clock_Enable+0xb6>
 8001f86:	4a28      	ldr	r2, [pc, #160]	@ (8002028 <GPIO_Clock_Enable+0xdc>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d017      	beq.n	8001fbc <GPIO_Clock_Enable+0x70>
 8001f8c:	4a26      	ldr	r2, [pc, #152]	@ (8002028 <GPIO_Clock_Enable+0xdc>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d837      	bhi.n	8002002 <GPIO_Clock_Enable+0xb6>
 8001f92:	4a26      	ldr	r2, [pc, #152]	@ (800202c <GPIO_Clock_Enable+0xe0>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d003      	beq.n	8001fa0 <GPIO_Clock_Enable+0x54>
 8001f98:	4a25      	ldr	r2, [pc, #148]	@ (8002030 <GPIO_Clock_Enable+0xe4>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d007      	beq.n	8001fae <GPIO_Clock_Enable+0x62>
 8001f9e:	e030      	b.n	8002002 <GPIO_Clock_Enable+0xb6>
        case (uint32_t)GPIOA: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN; break;
 8001fa0:	4b24      	ldr	r3, [pc, #144]	@ (8002034 <GPIO_Clock_Enable+0xe8>)
 8001fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa4:	4a23      	ldr	r2, [pc, #140]	@ (8002034 <GPIO_Clock_Enable+0xe8>)
 8001fa6:	f043 0301 	orr.w	r3, r3, #1
 8001faa:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fac:	e02c      	b.n	8002008 <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOB: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN; break;
 8001fae:	4b21      	ldr	r3, [pc, #132]	@ (8002034 <GPIO_Clock_Enable+0xe8>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb2:	4a20      	ldr	r2, [pc, #128]	@ (8002034 <GPIO_Clock_Enable+0xe8>)
 8001fb4:	f043 0302 	orr.w	r3, r3, #2
 8001fb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fba:	e025      	b.n	8002008 <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOC: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN; break;
 8001fbc:	4b1d      	ldr	r3, [pc, #116]	@ (8002034 <GPIO_Clock_Enable+0xe8>)
 8001fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc0:	4a1c      	ldr	r2, [pc, #112]	@ (8002034 <GPIO_Clock_Enable+0xe8>)
 8001fc2:	f043 0304 	orr.w	r3, r3, #4
 8001fc6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fc8:	e01e      	b.n	8002008 <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOD: RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN; break;
 8001fca:	4b1a      	ldr	r3, [pc, #104]	@ (8002034 <GPIO_Clock_Enable+0xe8>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fce:	4a19      	ldr	r2, [pc, #100]	@ (8002034 <GPIO_Clock_Enable+0xe8>)
 8001fd0:	f043 0308 	orr.w	r3, r3, #8
 8001fd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fd6:	e017      	b.n	8002008 <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOE: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN; break;
 8001fd8:	4b16      	ldr	r3, [pc, #88]	@ (8002034 <GPIO_Clock_Enable+0xe8>)
 8001fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fdc:	4a15      	ldr	r2, [pc, #84]	@ (8002034 <GPIO_Clock_Enable+0xe8>)
 8001fde:	f043 0310 	orr.w	r3, r3, #16
 8001fe2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fe4:	e010      	b.n	8002008 <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOF: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOFEN; break;
 8001fe6:	4b13      	ldr	r3, [pc, #76]	@ (8002034 <GPIO_Clock_Enable+0xe8>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fea:	4a12      	ldr	r2, [pc, #72]	@ (8002034 <GPIO_Clock_Enable+0xe8>)
 8001fec:	f043 0320 	orr.w	r3, r3, #32
 8001ff0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ff2:	e009      	b.n	8002008 <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOH: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN; break;
 8001ff4:	4b0f      	ldr	r3, [pc, #60]	@ (8002034 <GPIO_Clock_Enable+0xe8>)
 8001ff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff8:	4a0e      	ldr	r2, [pc, #56]	@ (8002034 <GPIO_Clock_Enable+0xe8>)
 8001ffa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ffe:	6313      	str	r3, [r2, #48]	@ 0x30
 8002000:	e002      	b.n	8002008 <GPIO_Clock_Enable+0xbc>
        default: return GPIO_INVALID_PORT;
 8002002:	f04f 33ff 	mov.w	r3, #4294967295
 8002006:	e000      	b.n	800200a <GPIO_Clock_Enable+0xbe>
    }
    return GPIO_SUCCESS;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	40021c00 	.word	0x40021c00
 800201c:	40021400 	.word	0x40021400
 8002020:	40021000 	.word	0x40021000
 8002024:	40020c00 	.word	0x40020c00
 8002028:	40020800 	.word	0x40020800
 800202c:	40020000 	.word	0x40020000
 8002030:	40020400 	.word	0x40020400
 8002034:	40023800 	.word	0x40023800

08002038 <GPIO_Pin_Init>:


GPIO_Status GPIO_Pin_Init(GPIO_TypeDef *Port, uint8_t pin, uint8_t mode, uint8_t output_type, uint8_t speed, uint8_t pull, uint8_t alternate_function) {
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	4608      	mov	r0, r1
 8002042:	4611      	mov	r1, r2
 8002044:	461a      	mov	r2, r3
 8002046:	4603      	mov	r3, r0
 8002048:	70fb      	strb	r3, [r7, #3]
 800204a:	460b      	mov	r3, r1
 800204c:	70bb      	strb	r3, [r7, #2]
 800204e:	4613      	mov	r3, r2
 8002050:	707b      	strb	r3, [r7, #1]
//    if (pin > 15 || mode > 3 || speed > 3 || pull > 2) return GPIO_INVALID_PIN;

    GPIO_Clock_Enable(Port);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f7ff ff7a 	bl	8001f4c <GPIO_Clock_Enable>

    // Reset and set mode
    Port->MODER &= ~(3 << PIN_POS(pin));
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	78fa      	ldrb	r2, [r7, #3]
 800205e:	0052      	lsls	r2, r2, #1
 8002060:	2103      	movs	r1, #3
 8002062:	fa01 f202 	lsl.w	r2, r1, r2
 8002066:	43d2      	mvns	r2, r2
 8002068:	401a      	ands	r2, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	601a      	str	r2, [r3, #0]
    Port->MODER |= mode << PIN_POS(pin);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	78b9      	ldrb	r1, [r7, #2]
 8002074:	78fa      	ldrb	r2, [r7, #3]
 8002076:	0052      	lsls	r2, r2, #1
 8002078:	fa01 f202 	lsl.w	r2, r1, r2
 800207c:	431a      	orrs	r2, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	601a      	str	r2, [r3, #0]

    // Reset and set output type
    Port->OTYPER &= ~(1 << pin);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	78fa      	ldrb	r2, [r7, #3]
 8002088:	2101      	movs	r1, #1
 800208a:	fa01 f202 	lsl.w	r2, r1, r2
 800208e:	43d2      	mvns	r2, r2
 8002090:	401a      	ands	r2, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	605a      	str	r2, [r3, #4]
    if (output_type != GPIO_Configuration.Output_Type.None) {
 8002096:	2202      	movs	r2, #2
 8002098:	787b      	ldrb	r3, [r7, #1]
 800209a:	4293      	cmp	r3, r2
 800209c:	d008      	beq.n	80020b0 <GPIO_Pin_Init+0x78>
        Port->OTYPER |= output_type << pin;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	7879      	ldrb	r1, [r7, #1]
 80020a4:	78fa      	ldrb	r2, [r7, #3]
 80020a6:	fa01 f202 	lsl.w	r2, r1, r2
 80020aa:	431a      	orrs	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	605a      	str	r2, [r3, #4]
    }

    // Reset and set speed
    Port->OSPEEDR &= ~(3 << PIN_POS(pin));
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	78fa      	ldrb	r2, [r7, #3]
 80020b6:	0052      	lsls	r2, r2, #1
 80020b8:	2103      	movs	r1, #3
 80020ba:	fa01 f202 	lsl.w	r2, r1, r2
 80020be:	43d2      	mvns	r2, r2
 80020c0:	401a      	ands	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	609a      	str	r2, [r3, #8]
    if (speed != GPIO_Configuration.Speed.None) {
 80020c6:	2204      	movs	r2, #4
 80020c8:	7c3b      	ldrb	r3, [r7, #16]
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d009      	beq.n	80020e2 <GPIO_Pin_Init+0xaa>
        Port->OSPEEDR |= speed << PIN_POS(pin);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	7c39      	ldrb	r1, [r7, #16]
 80020d4:	78fa      	ldrb	r2, [r7, #3]
 80020d6:	0052      	lsls	r2, r2, #1
 80020d8:	fa01 f202 	lsl.w	r2, r1, r2
 80020dc:	431a      	orrs	r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	609a      	str	r2, [r3, #8]
    }

    // Reset and set pull-up/pull-down
    Port->PUPDR &= ~(3 << PIN_POS(pin));
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	78fa      	ldrb	r2, [r7, #3]
 80020e8:	0052      	lsls	r2, r2, #1
 80020ea:	2103      	movs	r1, #3
 80020ec:	fa01 f202 	lsl.w	r2, r1, r2
 80020f0:	43d2      	mvns	r2, r2
 80020f2:	401a      	ands	r2, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	60da      	str	r2, [r3, #12]
    if (pull != GPIO_Configuration.Pull.None) {
 80020f8:	2204      	movs	r2, #4
 80020fa:	7d3b      	ldrb	r3, [r7, #20]
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d009      	beq.n	8002114 <GPIO_Pin_Init+0xdc>
        Port->PUPDR |= pull << PIN_POS(pin);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	7d39      	ldrb	r1, [r7, #20]
 8002106:	78fa      	ldrb	r2, [r7, #3]
 8002108:	0052      	lsls	r2, r2, #1
 800210a:	fa01 f202 	lsl.w	r2, r1, r2
 800210e:	431a      	orrs	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	60da      	str	r2, [r3, #12]
    }

    // Set alternate function
    if (mode == GPIO_Configuration.Mode.Alternate_Function) {
 8002114:	2202      	movs	r2, #2
 8002116:	78bb      	ldrb	r3, [r7, #2]
 8002118:	4293      	cmp	r3, r2
 800211a:	d12f      	bne.n	800217c <GPIO_Pin_Init+0x144>
        if (pin < GPIO_AF_SPLIT_POINT) {
 800211c:	78fb      	ldrb	r3, [r7, #3]
 800211e:	2b07      	cmp	r3, #7
 8002120:	d815      	bhi.n	800214e <GPIO_Pin_Init+0x116>
            Port->AFR[0] &= ~(0xF << (pin * 4));
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a1b      	ldr	r3, [r3, #32]
 8002126:	78fa      	ldrb	r2, [r7, #3]
 8002128:	0092      	lsls	r2, r2, #2
 800212a:	210f      	movs	r1, #15
 800212c:	fa01 f202 	lsl.w	r2, r1, r2
 8002130:	43d2      	mvns	r2, r2
 8002132:	401a      	ands	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	621a      	str	r2, [r3, #32]
            Port->AFR[0] |= alternate_function << (pin * 4);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6a1b      	ldr	r3, [r3, #32]
 800213c:	7e39      	ldrb	r1, [r7, #24]
 800213e:	78fa      	ldrb	r2, [r7, #3]
 8002140:	0092      	lsls	r2, r2, #2
 8002142:	fa01 f202 	lsl.w	r2, r1, r2
 8002146:	431a      	orrs	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	621a      	str	r2, [r3, #32]
 800214c:	e016      	b.n	800217c <GPIO_Pin_Init+0x144>
        } else {
            Port->AFR[1] &= ~(0xF << ((pin - GPIO_AF_SPLIT_POINT) * 4));
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002152:	78fa      	ldrb	r2, [r7, #3]
 8002154:	3a08      	subs	r2, #8
 8002156:	0092      	lsls	r2, r2, #2
 8002158:	210f      	movs	r1, #15
 800215a:	fa01 f202 	lsl.w	r2, r1, r2
 800215e:	43d2      	mvns	r2, r2
 8002160:	401a      	ands	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	625a      	str	r2, [r3, #36]	@ 0x24
            Port->AFR[1] |= alternate_function << ((pin - GPIO_AF_SPLIT_POINT) * 4);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800216a:	7e39      	ldrb	r1, [r7, #24]
 800216c:	78fa      	ldrb	r2, [r7, #3]
 800216e:	3a08      	subs	r2, #8
 8002170:	0092      	lsls	r2, r2, #2
 8002172:	fa01 f202 	lsl.w	r2, r1, r2
 8002176:	431a      	orrs	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    }

    return GPIO_SUCCESS;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
	...

08002188 <Delay_us>:
	SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
}


__STATIC_INLINE uint32_t Delay_us(volatile float us)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	ed87 0a01 	vstr	s0, [r7, #4]

	SysTick->LOAD = 168 * us;
 8002192:	edd7 7a01 	vldr	s15, [r7, #4]
 8002196:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80021cc <Delay_us+0x44>
 800219a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800219e:	4b0c      	ldr	r3, [pc, #48]	@ (80021d0 <Delay_us+0x48>)
 80021a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021a4:	ee17 2a90 	vmov	r2, s15
 80021a8:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 80021aa:	4b09      	ldr	r3, [pc, #36]	@ (80021d0 <Delay_us+0x48>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	609a      	str	r2, [r3, #8]
	while((SysTick->CTRL & 0x00010000) == 0);
 80021b0:	bf00      	nop
 80021b2:	4b07      	ldr	r3, [pc, #28]	@ (80021d0 <Delay_us+0x48>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d0f9      	beq.n	80021b2 <Delay_us+0x2a>
	return (0UL);                                                     /* Function successful */
 80021be:	2300      	movs	r3, #0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr
 80021cc:	43280000 	.word	0x43280000
 80021d0:	e000e010 	.word	0xe000e010

080021d4 <GPIO_Pin_Low>:
 * @brief  Sets a specific pin low.
 * @param  Port: Pointer to GPIO port base address.
 * @param  pin: Pin number to set low (0-15).
 */
__STATIC_INLINE  void GPIO_Pin_Low(GPIO_TypeDef *Port, int pin)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
	Port -> ODR &= ~(1 << pin);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	695b      	ldr	r3, [r3, #20]
 80021e2:	2101      	movs	r1, #1
 80021e4:	683a      	ldr	r2, [r7, #0]
 80021e6:	fa01 f202 	lsl.w	r2, r1, r2
 80021ea:	43d2      	mvns	r2, r2
 80021ec:	401a      	ands	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	615a      	str	r2, [r3, #20]
}
 80021f2:	bf00      	nop
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <GPIO_Pin_High>:
 * @brief  Sets a specific pin high.
 * @param  Port: Pointer to GPIO port base address.
 * @param  pin: Pin number to set high (0-15).
 */
__STATIC_INLINE  void GPIO_Pin_High(GPIO_TypeDef *Port, int pin)
{
 80021fe:	b480      	push	{r7}
 8002200:	b083      	sub	sp, #12
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
 8002206:	6039      	str	r1, [r7, #0]
	Port -> ODR |= 1 << pin;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	695b      	ldr	r3, [r3, #20]
 800220c:	2101      	movs	r1, #1
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	fa01 f202 	lsl.w	r2, r1, r2
 8002214:	431a      	orrs	r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	615a      	str	r2, [r3, #20]
}
 800221a:	bf00      	nop
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
	...

08002228 <SPI1_ISR>:
#include "SPI.h"


volatile bool TX_Complete = 0;
void SPI1_ISR()
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
	TX_Complete = 1;
 800222c:	4b03      	ldr	r3, [pc, #12]	@ (800223c <SPI1_ISR+0x14>)
 800222e:	2201      	movs	r2, #1
 8002230:	701a      	strb	r2, [r3, #0]
}
 8002232:	bf00      	nop
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	200000a8 	.word	0x200000a8

08002240 <xDMA1_TX_Init>:
 * @brief Initializes the DMA for SPI1 TX.
 *
 * Configures and initializes the DMA channel for transmitting data via SPI1.
 */
static void xDMA1_TX_Init()
{
 8002240:	b598      	push	{r3, r4, r7, lr}
 8002242:	af00      	add	r7, sp, #0
	xDMA1_TX.Request = DMA_Configuration.Request.SPI1_TX;
 8002244:	4a14      	ldr	r2, [pc, #80]	@ (8002298 <xDMA1_TX_Init+0x58>)
 8002246:	4b15      	ldr	r3, [pc, #84]	@ (800229c <xDMA1_TX_Init+0x5c>)
 8002248:	4614      	mov	r4, r2
 800224a:	333c      	adds	r3, #60	@ 0x3c
 800224c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002250:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	xDMA1_TX.transfer_direction = DMA_Configuration.Transfer_Direction.Memory_to_peripheral;
 8002254:	2240      	movs	r2, #64	@ 0x40
 8002256:	4b10      	ldr	r3, [pc, #64]	@ (8002298 <xDMA1_TX_Init+0x58>)
 8002258:	611a      	str	r2, [r3, #16]
	xDMA1_TX.circular_mode = DMA_Configuration.Circular_Mode.Disable;
 800225a:	2200      	movs	r2, #0
 800225c:	4b0e      	ldr	r3, [pc, #56]	@ (8002298 <xDMA1_TX_Init+0x58>)
 800225e:	619a      	str	r2, [r3, #24]
	xDMA1_TX.flow_control = DMA_Configuration.Flow_Control.DMA_Control;
 8002260:	2200      	movs	r2, #0
 8002262:	4b0d      	ldr	r3, [pc, #52]	@ (8002298 <xDMA1_TX_Init+0x58>)
 8002264:	60da      	str	r2, [r3, #12]
	xDMA1_TX.interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 8002266:	2210      	movs	r2, #16
 8002268:	4b0b      	ldr	r3, [pc, #44]	@ (8002298 <xDMA1_TX_Init+0x58>)
 800226a:	61da      	str	r2, [r3, #28]
	xDMA1_TX.peripheral_pointer_increment = DMA_Configuration.Peripheral_Pointer_Increment.Disable;
 800226c:	2300      	movs	r3, #0
 800226e:	b29a      	uxth	r2, r3
 8002270:	4b09      	ldr	r3, [pc, #36]	@ (8002298 <xDMA1_TX_Init+0x58>)
 8002272:	845a      	strh	r2, [r3, #34]	@ 0x22
	xDMA1_TX.memory_pointer_increment = DMA_Configuration.Memory_Pointer_Increment.Enable;
 8002274:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002278:	b29a      	uxth	r2, r3
 800227a:	4b07      	ldr	r3, [pc, #28]	@ (8002298 <xDMA1_TX_Init+0x58>)
 800227c:	841a      	strh	r2, [r3, #32]
	xDMA1_TX.priority_level = DMA_Configuration.Priority_Level.Very_high;
 800227e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002282:	4b05      	ldr	r3, [pc, #20]	@ (8002298 <xDMA1_TX_Init+0x58>)
 8002284:	615a      	str	r2, [r3, #20]
	xDMA1_TX.ISR_Routines.Full_Transfer_Commplete_ISR = SPI1_ISR;
 8002286:	4b04      	ldr	r3, [pc, #16]	@ (8002298 <xDMA1_TX_Init+0x58>)
 8002288:	4a05      	ldr	r2, [pc, #20]	@ (80022a0 <xDMA1_TX_Init+0x60>)
 800228a:	64da      	str	r2, [r3, #76]	@ 0x4c
	DMA_Init(&xDMA1_TX);
 800228c:	4802      	ldr	r0, [pc, #8]	@ (8002298 <xDMA1_TX_Init+0x58>)
 800228e:	f7ff fa81 	bl	8001794 <DMA_Init>
}
 8002292:	bf00      	nop
 8002294:	bd98      	pop	{r3, r4, r7, pc}
 8002296:	bf00      	nop
 8002298:	200000ac 	.word	0x200000ac
 800229c:	08004740 	.word	0x08004740
 80022a0:	08002229 	.word	0x08002229

080022a4 <xDMA2_TX_Init>:
 * @brief Initializes the DMA for SPI2 TX.
 *
 * Configures and initializes the DMA channel for transmitting data via SPI2.
 */
static void xDMA2_TX_Init()
{
 80022a4:	b598      	push	{r3, r4, r7, lr}
 80022a6:	af00      	add	r7, sp, #0
	xDMA2_TX.Request = DMA_Configuration.Request.SPI2_TX;
 80022a8:	4a12      	ldr	r2, [pc, #72]	@ (80022f4 <xDMA2_TX_Init+0x50>)
 80022aa:	4b13      	ldr	r3, [pc, #76]	@ (80022f8 <xDMA2_TX_Init+0x54>)
 80022ac:	4614      	mov	r4, r2
 80022ae:	3324      	adds	r3, #36	@ 0x24
 80022b0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80022b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	xDMA2_TX.transfer_direction = DMA_Configuration.Transfer_Direction.Memory_to_peripheral;
 80022b8:	2240      	movs	r2, #64	@ 0x40
 80022ba:	4b0e      	ldr	r3, [pc, #56]	@ (80022f4 <xDMA2_TX_Init+0x50>)
 80022bc:	611a      	str	r2, [r3, #16]
	xDMA2_TX.circular_mode = DMA_Configuration.Circular_Mode.Disable;
 80022be:	2200      	movs	r2, #0
 80022c0:	4b0c      	ldr	r3, [pc, #48]	@ (80022f4 <xDMA2_TX_Init+0x50>)
 80022c2:	619a      	str	r2, [r3, #24]
	xDMA2_TX.flow_control = DMA_Configuration.Flow_Control.DMA_Control;
 80022c4:	2200      	movs	r2, #0
 80022c6:	4b0b      	ldr	r3, [pc, #44]	@ (80022f4 <xDMA2_TX_Init+0x50>)
 80022c8:	60da      	str	r2, [r3, #12]
	xDMA2_TX.interrupts = DMA_Configuration.DMA_Interrupts.Disable;
 80022ca:	2200      	movs	r2, #0
 80022cc:	4b09      	ldr	r3, [pc, #36]	@ (80022f4 <xDMA2_TX_Init+0x50>)
 80022ce:	61da      	str	r2, [r3, #28]
	xDMA2_TX.peripheral_pointer_increment = DMA_Configuration.Peripheral_Pointer_Increment.Disable;
 80022d0:	2300      	movs	r3, #0
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	4b07      	ldr	r3, [pc, #28]	@ (80022f4 <xDMA2_TX_Init+0x50>)
 80022d6:	845a      	strh	r2, [r3, #34]	@ 0x22
	xDMA2_TX.memory_pointer_increment = DMA_Configuration.Memory_Pointer_Increment.Enable;
 80022d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80022dc:	b29a      	uxth	r2, r3
 80022de:	4b05      	ldr	r3, [pc, #20]	@ (80022f4 <xDMA2_TX_Init+0x50>)
 80022e0:	841a      	strh	r2, [r3, #32]
	xDMA2_TX.priority_level = DMA_Configuration.Priority_Level.Very_high;
 80022e2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80022e6:	4b03      	ldr	r3, [pc, #12]	@ (80022f4 <xDMA2_TX_Init+0x50>)
 80022e8:	615a      	str	r2, [r3, #20]
	DMA_Init(&xDMA2_TX);
 80022ea:	4802      	ldr	r0, [pc, #8]	@ (80022f4 <xDMA2_TX_Init+0x50>)
 80022ec:	f7ff fa52 	bl	8001794 <DMA_Init>
}
 80022f0:	bf00      	nop
 80022f2:	bd98      	pop	{r3, r4, r7, pc}
 80022f4:	2000015c 	.word	0x2000015c
 80022f8:	08004740 	.word	0x08004740

080022fc <xDMA3_TX_Init>:

static void xDMA3_TX_Init()
{
 80022fc:	b598      	push	{r3, r4, r7, lr}
 80022fe:	af00      	add	r7, sp, #0
	xDMA3_TX.Request = DMA_Configuration.Request.SPI3_TX;
 8002300:	4a12      	ldr	r2, [pc, #72]	@ (800234c <xDMA3_TX_Init+0x50>)
 8002302:	4b13      	ldr	r3, [pc, #76]	@ (8002350 <xDMA3_TX_Init+0x54>)
 8002304:	4614      	mov	r4, r2
 8002306:	330c      	adds	r3, #12
 8002308:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800230c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	xDMA3_TX.transfer_direction = DMA_Configuration.Transfer_Direction.Memory_to_peripheral;
 8002310:	2240      	movs	r2, #64	@ 0x40
 8002312:	4b0e      	ldr	r3, [pc, #56]	@ (800234c <xDMA3_TX_Init+0x50>)
 8002314:	611a      	str	r2, [r3, #16]
	xDMA3_TX.circular_mode = DMA_Configuration.Circular_Mode.Disable;
 8002316:	2200      	movs	r2, #0
 8002318:	4b0c      	ldr	r3, [pc, #48]	@ (800234c <xDMA3_TX_Init+0x50>)
 800231a:	619a      	str	r2, [r3, #24]
	xDMA3_TX.flow_control = DMA_Configuration.Flow_Control.DMA_Control;
 800231c:	2200      	movs	r2, #0
 800231e:	4b0b      	ldr	r3, [pc, #44]	@ (800234c <xDMA3_TX_Init+0x50>)
 8002320:	60da      	str	r2, [r3, #12]
	xDMA3_TX.interrupts = DMA_Configuration.DMA_Interrupts.Disable;
 8002322:	2200      	movs	r2, #0
 8002324:	4b09      	ldr	r3, [pc, #36]	@ (800234c <xDMA3_TX_Init+0x50>)
 8002326:	61da      	str	r2, [r3, #28]
	xDMA3_TX.peripheral_pointer_increment = DMA_Configuration.Peripheral_Pointer_Increment.Disable;
 8002328:	2300      	movs	r3, #0
 800232a:	b29a      	uxth	r2, r3
 800232c:	4b07      	ldr	r3, [pc, #28]	@ (800234c <xDMA3_TX_Init+0x50>)
 800232e:	845a      	strh	r2, [r3, #34]	@ 0x22
	xDMA3_TX.memory_pointer_increment = DMA_Configuration.Memory_Pointer_Increment.Enable;
 8002330:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002334:	b29a      	uxth	r2, r3
 8002336:	4b05      	ldr	r3, [pc, #20]	@ (800234c <xDMA3_TX_Init+0x50>)
 8002338:	841a      	strh	r2, [r3, #32]
	xDMA3_TX.priority_level = DMA_Configuration.Priority_Level.Very_high;
 800233a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800233e:	4b03      	ldr	r3, [pc, #12]	@ (800234c <xDMA3_TX_Init+0x50>)
 8002340:	615a      	str	r2, [r3, #20]
	DMA_Init(&xDMA3_TX);
 8002342:	4802      	ldr	r0, [pc, #8]	@ (800234c <xDMA3_TX_Init+0x50>)
 8002344:	f7ff fa26 	bl	8001794 <DMA_Init>
}
 8002348:	bf00      	nop
 800234a:	bd98      	pop	{r3, r4, r7, pc}
 800234c:	2000020c 	.word	0x2000020c
 8002350:	08004740 	.word	0x08004740

08002354 <xDMA1_RX_Init>:
 * @brief Initializes the DMA for SPI3 TX.
 *
 * Configures and initializes the DMA channel for transmitting data via SPI3.
 */
static void xDMA1_RX_Init()
{
 8002354:	b598      	push	{r3, r4, r7, lr}
 8002356:	af00      	add	r7, sp, #0
	xDMA1_RX.Request = DMA_Configuration.Request.SPI1_RX;
 8002358:	4a12      	ldr	r2, [pc, #72]	@ (80023a4 <xDMA1_RX_Init+0x50>)
 800235a:	4b13      	ldr	r3, [pc, #76]	@ (80023a8 <xDMA1_RX_Init+0x54>)
 800235c:	4614      	mov	r4, r2
 800235e:	3330      	adds	r3, #48	@ 0x30
 8002360:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002364:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	xDMA1_RX.transfer_direction = DMA_Configuration.Transfer_Direction.Memory_to_peripheral;
 8002368:	2240      	movs	r2, #64	@ 0x40
 800236a:	4b0e      	ldr	r3, [pc, #56]	@ (80023a4 <xDMA1_RX_Init+0x50>)
 800236c:	611a      	str	r2, [r3, #16]
	xDMA1_RX.circular_mode = DMA_Configuration.Circular_Mode.Disable;
 800236e:	2200      	movs	r2, #0
 8002370:	4b0c      	ldr	r3, [pc, #48]	@ (80023a4 <xDMA1_RX_Init+0x50>)
 8002372:	619a      	str	r2, [r3, #24]
	xDMA1_RX.flow_control = DMA_Configuration.Flow_Control.DMA_Control;
 8002374:	2200      	movs	r2, #0
 8002376:	4b0b      	ldr	r3, [pc, #44]	@ (80023a4 <xDMA1_RX_Init+0x50>)
 8002378:	60da      	str	r2, [r3, #12]
	xDMA1_RX.interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 800237a:	2210      	movs	r2, #16
 800237c:	4b09      	ldr	r3, [pc, #36]	@ (80023a4 <xDMA1_RX_Init+0x50>)
 800237e:	61da      	str	r2, [r3, #28]
	xDMA1_RX.peripheral_pointer_increment = DMA_Configuration.Peripheral_Pointer_Increment.Disable;
 8002380:	2300      	movs	r3, #0
 8002382:	b29a      	uxth	r2, r3
 8002384:	4b07      	ldr	r3, [pc, #28]	@ (80023a4 <xDMA1_RX_Init+0x50>)
 8002386:	845a      	strh	r2, [r3, #34]	@ 0x22
	xDMA1_RX.memory_pointer_increment = DMA_Configuration.Memory_Pointer_Increment.Enable;
 8002388:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800238c:	b29a      	uxth	r2, r3
 800238e:	4b05      	ldr	r3, [pc, #20]	@ (80023a4 <xDMA1_RX_Init+0x50>)
 8002390:	841a      	strh	r2, [r3, #32]
	xDMA1_RX.priority_level = DMA_Configuration.Priority_Level.Very_high;
 8002392:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002396:	4b03      	ldr	r3, [pc, #12]	@ (80023a4 <xDMA1_RX_Init+0x50>)
 8002398:	615a      	str	r2, [r3, #20]
	DMA_Init(&xDMA1_RX);
 800239a:	4802      	ldr	r0, [pc, #8]	@ (80023a4 <xDMA1_RX_Init+0x50>)
 800239c:	f7ff f9fa 	bl	8001794 <DMA_Init>
}
 80023a0:	bf00      	nop
 80023a2:	bd98      	pop	{r3, r4, r7, pc}
 80023a4:	20000104 	.word	0x20000104
 80023a8:	08004740 	.word	0x08004740

080023ac <xDMA2_RX_Init>:
 * @brief Initializes the DMA for SPI1 RX.
 *
 * Configures and initializes the DMA channel for receiving data via SPI1.
 */
static void xDMA2_RX_Init()
{
 80023ac:	b598      	push	{r3, r4, r7, lr}
 80023ae:	af00      	add	r7, sp, #0
	xDMA2_RX.Request = DMA_Configuration.Request.SPI2_RX;
 80023b0:	4a12      	ldr	r2, [pc, #72]	@ (80023fc <xDMA2_RX_Init+0x50>)
 80023b2:	4b13      	ldr	r3, [pc, #76]	@ (8002400 <xDMA2_RX_Init+0x54>)
 80023b4:	4614      	mov	r4, r2
 80023b6:	3318      	adds	r3, #24
 80023b8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80023bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	xDMA2_RX.transfer_direction = DMA_Configuration.Transfer_Direction.Memory_to_peripheral;
 80023c0:	2240      	movs	r2, #64	@ 0x40
 80023c2:	4b0e      	ldr	r3, [pc, #56]	@ (80023fc <xDMA2_RX_Init+0x50>)
 80023c4:	611a      	str	r2, [r3, #16]
	xDMA2_RX.circular_mode = DMA_Configuration.Circular_Mode.Disable;
 80023c6:	2200      	movs	r2, #0
 80023c8:	4b0c      	ldr	r3, [pc, #48]	@ (80023fc <xDMA2_RX_Init+0x50>)
 80023ca:	619a      	str	r2, [r3, #24]
	xDMA2_RX.flow_control = DMA_Configuration.Flow_Control.DMA_Control;
 80023cc:	2200      	movs	r2, #0
 80023ce:	4b0b      	ldr	r3, [pc, #44]	@ (80023fc <xDMA2_RX_Init+0x50>)
 80023d0:	60da      	str	r2, [r3, #12]
	xDMA2_RX.interrupts = DMA_Configuration.DMA_Interrupts.Disable;
 80023d2:	2200      	movs	r2, #0
 80023d4:	4b09      	ldr	r3, [pc, #36]	@ (80023fc <xDMA2_RX_Init+0x50>)
 80023d6:	61da      	str	r2, [r3, #28]
	xDMA2_RX.peripheral_pointer_increment = DMA_Configuration.Peripheral_Pointer_Increment.Disable;
 80023d8:	2300      	movs	r3, #0
 80023da:	b29a      	uxth	r2, r3
 80023dc:	4b07      	ldr	r3, [pc, #28]	@ (80023fc <xDMA2_RX_Init+0x50>)
 80023de:	845a      	strh	r2, [r3, #34]	@ 0x22
	xDMA2_RX.memory_pointer_increment = DMA_Configuration.Memory_Pointer_Increment.Enable;
 80023e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80023e4:	b29a      	uxth	r2, r3
 80023e6:	4b05      	ldr	r3, [pc, #20]	@ (80023fc <xDMA2_RX_Init+0x50>)
 80023e8:	841a      	strh	r2, [r3, #32]
	xDMA2_RX.priority_level = DMA_Configuration.Priority_Level.Very_high;
 80023ea:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80023ee:	4b03      	ldr	r3, [pc, #12]	@ (80023fc <xDMA2_RX_Init+0x50>)
 80023f0:	615a      	str	r2, [r3, #20]
	DMA_Init(&xDMA2_RX);
 80023f2:	4802      	ldr	r0, [pc, #8]	@ (80023fc <xDMA2_RX_Init+0x50>)
 80023f4:	f7ff f9ce 	bl	8001794 <DMA_Init>
}
 80023f8:	bf00      	nop
 80023fa:	bd98      	pop	{r3, r4, r7, pc}
 80023fc:	200001b4 	.word	0x200001b4
 8002400:	08004740 	.word	0x08004740

08002404 <xDMA3_RX_Init>:
 * @brief Initializes the DMA for SPI2 RX.
 *
 * Configures and initializes the DMA channel for receiving data via SPI2.
 */
static void xDMA3_RX_Init()
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
	xDMA3_RX.Request = DMA_Configuration.Request.SPI3_RX;
 8002408:	4b11      	ldr	r3, [pc, #68]	@ (8002450 <xDMA3_RX_Init+0x4c>)
 800240a:	4a12      	ldr	r2, [pc, #72]	@ (8002454 <xDMA3_RX_Init+0x50>)
 800240c:	ca07      	ldmia	r2, {r0, r1, r2}
 800240e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	xDMA3_RX.transfer_direction = DMA_Configuration.Transfer_Direction.Memory_to_peripheral;
 8002412:	2240      	movs	r2, #64	@ 0x40
 8002414:	4b0e      	ldr	r3, [pc, #56]	@ (8002450 <xDMA3_RX_Init+0x4c>)
 8002416:	611a      	str	r2, [r3, #16]
	xDMA3_RX.circular_mode = DMA_Configuration.Circular_Mode.Disable;
 8002418:	2200      	movs	r2, #0
 800241a:	4b0d      	ldr	r3, [pc, #52]	@ (8002450 <xDMA3_RX_Init+0x4c>)
 800241c:	619a      	str	r2, [r3, #24]
	xDMA3_RX.flow_control = DMA_Configuration.Flow_Control.DMA_Control;
 800241e:	2200      	movs	r2, #0
 8002420:	4b0b      	ldr	r3, [pc, #44]	@ (8002450 <xDMA3_RX_Init+0x4c>)
 8002422:	60da      	str	r2, [r3, #12]
	xDMA3_RX.interrupts = DMA_Configuration.DMA_Interrupts.Disable;
 8002424:	2200      	movs	r2, #0
 8002426:	4b0a      	ldr	r3, [pc, #40]	@ (8002450 <xDMA3_RX_Init+0x4c>)
 8002428:	61da      	str	r2, [r3, #28]
	xDMA3_RX.peripheral_pointer_increment = DMA_Configuration.Peripheral_Pointer_Increment.Disable;
 800242a:	2300      	movs	r3, #0
 800242c:	b29a      	uxth	r2, r3
 800242e:	4b08      	ldr	r3, [pc, #32]	@ (8002450 <xDMA3_RX_Init+0x4c>)
 8002430:	845a      	strh	r2, [r3, #34]	@ 0x22
	xDMA3_RX.memory_pointer_increment = DMA_Configuration.Memory_Pointer_Increment.Enable;
 8002432:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002436:	b29a      	uxth	r2, r3
 8002438:	4b05      	ldr	r3, [pc, #20]	@ (8002450 <xDMA3_RX_Init+0x4c>)
 800243a:	841a      	strh	r2, [r3, #32]
	xDMA3_RX.priority_level = DMA_Configuration.Priority_Level.Very_high;
 800243c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002440:	4b03      	ldr	r3, [pc, #12]	@ (8002450 <xDMA3_RX_Init+0x4c>)
 8002442:	615a      	str	r2, [r3, #20]
	DMA_Init(&xDMA3_RX);
 8002444:	4802      	ldr	r0, [pc, #8]	@ (8002450 <xDMA3_RX_Init+0x4c>)
 8002446:	f7ff f9a5 	bl	8001794 <DMA_Init>
}
 800244a:	bf00      	nop
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	20000264 	.word	0x20000264
 8002454:	08004740 	.word	0x08004740

08002458 <SPI_Clock_Enable>:
 *
 * @param[in] config Pointer to the SPI configuration structure.
 * @return int8_t Returns 0 on success, -1 on failure.
 */
int8_t SPI_Clock_Enable(SPI_Config *config)
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
	int8_t retval = 0;
 8002460:	2300      	movs	r3, #0
 8002462:	73fb      	strb	r3, [r7, #15]
	if(config ->Port == SPI1)RCC -> APB2ENR |= RCC_APB2ENR_SPI1EN;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a14      	ldr	r2, [pc, #80]	@ (80024bc <SPI_Clock_Enable+0x64>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d105      	bne.n	800247a <SPI_Clock_Enable+0x22>
 800246e:	4b14      	ldr	r3, [pc, #80]	@ (80024c0 <SPI_Clock_Enable+0x68>)
 8002470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002472:	4a13      	ldr	r2, [pc, #76]	@ (80024c0 <SPI_Clock_Enable+0x68>)
 8002474:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002478:	6453      	str	r3, [r2, #68]	@ 0x44
	if(config ->Port == SPI2)RCC -> APB1ENR |= RCC_APB1ENR_SPI2EN;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a11      	ldr	r2, [pc, #68]	@ (80024c4 <SPI_Clock_Enable+0x6c>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d105      	bne.n	8002490 <SPI_Clock_Enable+0x38>
 8002484:	4b0e      	ldr	r3, [pc, #56]	@ (80024c0 <SPI_Clock_Enable+0x68>)
 8002486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002488:	4a0d      	ldr	r2, [pc, #52]	@ (80024c0 <SPI_Clock_Enable+0x68>)
 800248a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800248e:	6413      	str	r3, [r2, #64]	@ 0x40
	if(config ->Port == SPI3)RCC -> APB1ENR |= RCC_APB1ENR_SPI3EN;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a0c      	ldr	r2, [pc, #48]	@ (80024c8 <SPI_Clock_Enable+0x70>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d106      	bne.n	80024a8 <SPI_Clock_Enable+0x50>
 800249a:	4b09      	ldr	r3, [pc, #36]	@ (80024c0 <SPI_Clock_Enable+0x68>)
 800249c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800249e:	4a08      	ldr	r2, [pc, #32]	@ (80024c0 <SPI_Clock_Enable+0x68>)
 80024a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80024a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80024a6:	e001      	b.n	80024ac <SPI_Clock_Enable+0x54>
	else
		retval = -1;
 80024a8:	23ff      	movs	r3, #255	@ 0xff
 80024aa:	73fb      	strb	r3, [r7, #15]
	return retval;
 80024ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3714      	adds	r7, #20
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr
 80024bc:	40013000 	.word	0x40013000
 80024c0:	40023800 	.word	0x40023800
 80024c4:	40003800 	.word	0x40003800
 80024c8:	40003c00 	.word	0x40003c00

080024cc <SPI_Pin_Init>:
 * This function configures the necessary GPIO pins for the specified SPI port.
 *
 * @param[in] config Pointer to the SPI configuration structure.
 */
static void SPI_Pin_Init(SPI_Config *config)
{
 80024cc:	b590      	push	{r4, r7, lr}
 80024ce:	b087      	sub	sp, #28
 80024d0:	af04      	add	r7, sp, #16
 80024d2:	6078      	str	r0, [r7, #4]
	if(config -> Port == SPI1)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4aa2      	ldr	r2, [pc, #648]	@ (8002764 <SPI_Pin_Init+0x298>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	f040 816c 	bne.w	80027b8 <SPI_Pin_Init+0x2ec>
	{
		if((config->mode == SPI_Configurations.Mode.Full_Duplex_Master) || (config->mode == SPI_Configurations.Mode.Full_Duplex_Slave))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	89db      	ldrh	r3, [r3, #14]
 80024e4:	220b      	movs	r2, #11
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d004      	beq.n	80024f4 <SPI_Pin_Init+0x28>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	89db      	ldrh	r3, [r3, #14]
 80024ee:	220c      	movs	r2, #12
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d17d      	bne.n	80025f0 <SPI_Pin_Init+0x124>
		{
			if(config->clock_pin == SPI_Configurations.Pin._SPI1_.CLK1.PA5) GPIO_Pin_Init(GPIOA, 5, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_1);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	791b      	ldrb	r3, [r3, #4]
 80024f8:	220f      	movs	r2, #15
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d10e      	bne.n	800251c <SPI_Pin_Init+0x50>
 80024fe:	2002      	movs	r0, #2
 8002500:	2400      	movs	r4, #0
 8002502:	2303      	movs	r3, #3
 8002504:	2200      	movs	r2, #0
 8002506:	2105      	movs	r1, #5
 8002508:	9102      	str	r1, [sp, #8]
 800250a:	9201      	str	r2, [sp, #4]
 800250c:	9300      	str	r3, [sp, #0]
 800250e:	4623      	mov	r3, r4
 8002510:	4602      	mov	r2, r0
 8002512:	2105      	movs	r1, #5
 8002514:	4894      	ldr	r0, [pc, #592]	@ (8002768 <SPI_Pin_Init+0x29c>)
 8002516:	f7ff fd8f 	bl	8002038 <GPIO_Pin_Init>
 800251a:	e012      	b.n	8002542 <SPI_Pin_Init+0x76>
			else if(config->clock_pin == SPI_Configurations.Pin._SPI1_.CLK1.PB3) GPIO_Pin_Init(GPIOB, 3, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_1);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	791b      	ldrb	r3, [r3, #4]
 8002520:	2221      	movs	r2, #33	@ 0x21
 8002522:	4293      	cmp	r3, r2
 8002524:	d10d      	bne.n	8002542 <SPI_Pin_Init+0x76>
 8002526:	2002      	movs	r0, #2
 8002528:	2400      	movs	r4, #0
 800252a:	2303      	movs	r3, #3
 800252c:	2200      	movs	r2, #0
 800252e:	2105      	movs	r1, #5
 8002530:	9102      	str	r1, [sp, #8]
 8002532:	9201      	str	r2, [sp, #4]
 8002534:	9300      	str	r3, [sp, #0]
 8002536:	4623      	mov	r3, r4
 8002538:	4602      	mov	r2, r0
 800253a:	2103      	movs	r1, #3
 800253c:	488b      	ldr	r0, [pc, #556]	@ (800276c <SPI_Pin_Init+0x2a0>)
 800253e:	f7ff fd7b 	bl	8002038 <GPIO_Pin_Init>

			if(config->miso_pin == SPI_Configurations.Pin._SPI1_.MISO1.PA6) GPIO_Pin_Init(GPIOA, 6, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_1);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	799b      	ldrb	r3, [r3, #6]
 8002546:	2210      	movs	r2, #16
 8002548:	4293      	cmp	r3, r2
 800254a:	d10e      	bne.n	800256a <SPI_Pin_Init+0x9e>
 800254c:	2002      	movs	r0, #2
 800254e:	2400      	movs	r4, #0
 8002550:	2303      	movs	r3, #3
 8002552:	2200      	movs	r2, #0
 8002554:	2105      	movs	r1, #5
 8002556:	9102      	str	r1, [sp, #8]
 8002558:	9201      	str	r2, [sp, #4]
 800255a:	9300      	str	r3, [sp, #0]
 800255c:	4623      	mov	r3, r4
 800255e:	4602      	mov	r2, r0
 8002560:	2106      	movs	r1, #6
 8002562:	4881      	ldr	r0, [pc, #516]	@ (8002768 <SPI_Pin_Init+0x29c>)
 8002564:	f7ff fd68 	bl	8002038 <GPIO_Pin_Init>
 8002568:	e012      	b.n	8002590 <SPI_Pin_Init+0xc4>
			else if(config->miso_pin == SPI_Configurations.Pin._SPI1_.MISO1.PB4) GPIO_Pin_Init(GPIOB, 4, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_1);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	799b      	ldrb	r3, [r3, #6]
 800256e:	2222      	movs	r2, #34	@ 0x22
 8002570:	4293      	cmp	r3, r2
 8002572:	d10d      	bne.n	8002590 <SPI_Pin_Init+0xc4>
 8002574:	2002      	movs	r0, #2
 8002576:	2400      	movs	r4, #0
 8002578:	2303      	movs	r3, #3
 800257a:	2200      	movs	r2, #0
 800257c:	2105      	movs	r1, #5
 800257e:	9102      	str	r1, [sp, #8]
 8002580:	9201      	str	r2, [sp, #4]
 8002582:	9300      	str	r3, [sp, #0]
 8002584:	4623      	mov	r3, r4
 8002586:	4602      	mov	r2, r0
 8002588:	2104      	movs	r1, #4
 800258a:	4878      	ldr	r0, [pc, #480]	@ (800276c <SPI_Pin_Init+0x2a0>)
 800258c:	f7ff fd54 	bl	8002038 <GPIO_Pin_Init>

			if(config->mosi_pin == SPI_Configurations.Pin._SPI1_.MOSI1.PA7) GPIO_Pin_Init(GPIOA, 7, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_1);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	795b      	ldrb	r3, [r3, #5]
 8002594:	2211      	movs	r2, #17
 8002596:	4293      	cmp	r3, r2
 8002598:	d10e      	bne.n	80025b8 <SPI_Pin_Init+0xec>
 800259a:	2002      	movs	r0, #2
 800259c:	2400      	movs	r4, #0
 800259e:	2303      	movs	r3, #3
 80025a0:	2200      	movs	r2, #0
 80025a2:	2105      	movs	r1, #5
 80025a4:	9102      	str	r1, [sp, #8]
 80025a6:	9201      	str	r2, [sp, #4]
 80025a8:	9300      	str	r3, [sp, #0]
 80025aa:	4623      	mov	r3, r4
 80025ac:	4602      	mov	r2, r0
 80025ae:	2107      	movs	r1, #7
 80025b0:	486d      	ldr	r0, [pc, #436]	@ (8002768 <SPI_Pin_Init+0x29c>)
 80025b2:	f7ff fd41 	bl	8002038 <GPIO_Pin_Init>
 80025b6:	e012      	b.n	80025de <SPI_Pin_Init+0x112>
			else if(config->mosi_pin == SPI_Configurations.Pin._SPI1_.MOSI1.PB5) GPIO_Pin_Init(GPIOB, 5, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_1);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	795b      	ldrb	r3, [r3, #5]
 80025bc:	2223      	movs	r2, #35	@ 0x23
 80025be:	4293      	cmp	r3, r2
 80025c0:	d10d      	bne.n	80025de <SPI_Pin_Init+0x112>
 80025c2:	2002      	movs	r0, #2
 80025c4:	2400      	movs	r4, #0
 80025c6:	2303      	movs	r3, #3
 80025c8:	2200      	movs	r2, #0
 80025ca:	2105      	movs	r1, #5
 80025cc:	9102      	str	r1, [sp, #8]
 80025ce:	9201      	str	r2, [sp, #4]
 80025d0:	9300      	str	r3, [sp, #0]
 80025d2:	4623      	mov	r3, r4
 80025d4:	4602      	mov	r2, r0
 80025d6:	2105      	movs	r1, #5
 80025d8:	4864      	ldr	r0, [pc, #400]	@ (800276c <SPI_Pin_Init+0x2a0>)
 80025da:	f7ff fd2d 	bl	8002038 <GPIO_Pin_Init>

			config->Port -> CR1 &= ~SPI_CR1_BIDIMODE;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80025ec:	601a      	str	r2, [r3, #0]
 80025ee:	e3b9      	b.n	8002d64 <SPI_Pin_Init+0x898>
		}
		else if((config->mode == SPI_Configurations.Mode.Half_Duplex_Master) || (config->mode == SPI_Configurations.Mode.TX_Only_Master) || (config->mode == SPI_Configurations.Mode.RX_Only_Slave))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	89db      	ldrh	r3, [r3, #14]
 80025f4:	220d      	movs	r2, #13
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d009      	beq.n	800260e <SPI_Pin_Init+0x142>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	89db      	ldrh	r3, [r3, #14]
 80025fe:	2211      	movs	r2, #17
 8002600:	4293      	cmp	r3, r2
 8002602:	d004      	beq.n	800260e <SPI_Pin_Init+0x142>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	89db      	ldrh	r3, [r3, #14]
 8002608:	2210      	movs	r2, #16
 800260a:	4293      	cmp	r3, r2
 800260c:	d15e      	bne.n	80026cc <SPI_Pin_Init+0x200>
		{
			if(config->clock_pin == SPI_Configurations.Pin._SPI1_.CLK1.PA5) GPIO_Pin_Init(GPIOA, 5, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_1);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	791b      	ldrb	r3, [r3, #4]
 8002612:	220f      	movs	r2, #15
 8002614:	4293      	cmp	r3, r2
 8002616:	d10e      	bne.n	8002636 <SPI_Pin_Init+0x16a>
 8002618:	2002      	movs	r0, #2
 800261a:	2400      	movs	r4, #0
 800261c:	2303      	movs	r3, #3
 800261e:	2200      	movs	r2, #0
 8002620:	2105      	movs	r1, #5
 8002622:	9102      	str	r1, [sp, #8]
 8002624:	9201      	str	r2, [sp, #4]
 8002626:	9300      	str	r3, [sp, #0]
 8002628:	4623      	mov	r3, r4
 800262a:	4602      	mov	r2, r0
 800262c:	2105      	movs	r1, #5
 800262e:	484e      	ldr	r0, [pc, #312]	@ (8002768 <SPI_Pin_Init+0x29c>)
 8002630:	f7ff fd02 	bl	8002038 <GPIO_Pin_Init>
 8002634:	e012      	b.n	800265c <SPI_Pin_Init+0x190>
			else if(config->clock_pin == SPI_Configurations.Pin._SPI1_.CLK1.PB3) GPIO_Pin_Init(GPIOB, 3, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_1);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	791b      	ldrb	r3, [r3, #4]
 800263a:	2221      	movs	r2, #33	@ 0x21
 800263c:	4293      	cmp	r3, r2
 800263e:	d10d      	bne.n	800265c <SPI_Pin_Init+0x190>
 8002640:	2002      	movs	r0, #2
 8002642:	2400      	movs	r4, #0
 8002644:	2303      	movs	r3, #3
 8002646:	2200      	movs	r2, #0
 8002648:	2105      	movs	r1, #5
 800264a:	9102      	str	r1, [sp, #8]
 800264c:	9201      	str	r2, [sp, #4]
 800264e:	9300      	str	r3, [sp, #0]
 8002650:	4623      	mov	r3, r4
 8002652:	4602      	mov	r2, r0
 8002654:	2103      	movs	r1, #3
 8002656:	4845      	ldr	r0, [pc, #276]	@ (800276c <SPI_Pin_Init+0x2a0>)
 8002658:	f7ff fcee 	bl	8002038 <GPIO_Pin_Init>

			if(config->mosi_pin == SPI_Configurations.Pin._SPI1_.MOSI1.PA7) GPIO_Pin_Init(GPIOA, 7, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_1);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	795b      	ldrb	r3, [r3, #5]
 8002660:	2211      	movs	r2, #17
 8002662:	4293      	cmp	r3, r2
 8002664:	d10e      	bne.n	8002684 <SPI_Pin_Init+0x1b8>
 8002666:	2002      	movs	r0, #2
 8002668:	2400      	movs	r4, #0
 800266a:	2303      	movs	r3, #3
 800266c:	2200      	movs	r2, #0
 800266e:	2105      	movs	r1, #5
 8002670:	9102      	str	r1, [sp, #8]
 8002672:	9201      	str	r2, [sp, #4]
 8002674:	9300      	str	r3, [sp, #0]
 8002676:	4623      	mov	r3, r4
 8002678:	4602      	mov	r2, r0
 800267a:	2107      	movs	r1, #7
 800267c:	483a      	ldr	r0, [pc, #232]	@ (8002768 <SPI_Pin_Init+0x29c>)
 800267e:	f7ff fcdb 	bl	8002038 <GPIO_Pin_Init>
 8002682:	e012      	b.n	80026aa <SPI_Pin_Init+0x1de>
			else if(config->mosi_pin == SPI_Configurations.Pin._SPI1_.MOSI1.PB5) GPIO_Pin_Init(GPIOB, 5, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_1);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	795b      	ldrb	r3, [r3, #5]
 8002688:	2223      	movs	r2, #35	@ 0x23
 800268a:	4293      	cmp	r3, r2
 800268c:	d10d      	bne.n	80026aa <SPI_Pin_Init+0x1de>
 800268e:	2002      	movs	r0, #2
 8002690:	2400      	movs	r4, #0
 8002692:	2303      	movs	r3, #3
 8002694:	2200      	movs	r2, #0
 8002696:	2105      	movs	r1, #5
 8002698:	9102      	str	r1, [sp, #8]
 800269a:	9201      	str	r2, [sp, #4]
 800269c:	9300      	str	r3, [sp, #0]
 800269e:	4623      	mov	r3, r4
 80026a0:	4602      	mov	r2, r0
 80026a2:	2105      	movs	r1, #5
 80026a4:	4831      	ldr	r0, [pc, #196]	@ (800276c <SPI_Pin_Init+0x2a0>)
 80026a6:	f7ff fcc7 	bl	8002038 <GPIO_Pin_Init>

			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80026b8:	601a      	str	r2, [r3, #0]
			config->Port -> CR1 |= SPI_CR1_BIDIOE;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80026c8:	601a      	str	r2, [r3, #0]
 80026ca:	e34b      	b.n	8002d64 <SPI_Pin_Init+0x898>
		}
		else if((config->mode == SPI_Configurations.Mode.Half_Duplex_Slave) || (config->mode == SPI_Configurations.Mode.RX_Only_Master) || (config->mode == SPI_Configurations.Mode.TX_Only_Slave))
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	89db      	ldrh	r3, [r3, #14]
 80026d0:	220e      	movs	r2, #14
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d00a      	beq.n	80026ec <SPI_Pin_Init+0x220>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	89db      	ldrh	r3, [r3, #14]
 80026da:	220f      	movs	r2, #15
 80026dc:	4293      	cmp	r3, r2
 80026de:	d005      	beq.n	80026ec <SPI_Pin_Init+0x220>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	89db      	ldrh	r3, [r3, #14]
 80026e4:	2212      	movs	r2, #18
 80026e6:	4293      	cmp	r3, r2
 80026e8:	f040 833c 	bne.w	8002d64 <SPI_Pin_Init+0x898>
		{
			if(config->clock_pin == SPI_Configurations.Pin._SPI1_.CLK1.PA5) GPIO_Pin_Init(GPIOA, 5, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_1);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	791b      	ldrb	r3, [r3, #4]
 80026f0:	220f      	movs	r2, #15
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d10e      	bne.n	8002714 <SPI_Pin_Init+0x248>
 80026f6:	2002      	movs	r0, #2
 80026f8:	2400      	movs	r4, #0
 80026fa:	2303      	movs	r3, #3
 80026fc:	2200      	movs	r2, #0
 80026fe:	2105      	movs	r1, #5
 8002700:	9102      	str	r1, [sp, #8]
 8002702:	9201      	str	r2, [sp, #4]
 8002704:	9300      	str	r3, [sp, #0]
 8002706:	4623      	mov	r3, r4
 8002708:	4602      	mov	r2, r0
 800270a:	2105      	movs	r1, #5
 800270c:	4816      	ldr	r0, [pc, #88]	@ (8002768 <SPI_Pin_Init+0x29c>)
 800270e:	f7ff fc93 	bl	8002038 <GPIO_Pin_Init>
 8002712:	e012      	b.n	800273a <SPI_Pin_Init+0x26e>
			else if(config->clock_pin == SPI_Configurations.Pin._SPI1_.CLK1.PB3) GPIO_Pin_Init(GPIOB, 3, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_1);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	791b      	ldrb	r3, [r3, #4]
 8002718:	2221      	movs	r2, #33	@ 0x21
 800271a:	4293      	cmp	r3, r2
 800271c:	d10d      	bne.n	800273a <SPI_Pin_Init+0x26e>
 800271e:	2002      	movs	r0, #2
 8002720:	2400      	movs	r4, #0
 8002722:	2303      	movs	r3, #3
 8002724:	2200      	movs	r2, #0
 8002726:	2105      	movs	r1, #5
 8002728:	9102      	str	r1, [sp, #8]
 800272a:	9201      	str	r2, [sp, #4]
 800272c:	9300      	str	r3, [sp, #0]
 800272e:	4623      	mov	r3, r4
 8002730:	4602      	mov	r2, r0
 8002732:	2103      	movs	r1, #3
 8002734:	480d      	ldr	r0, [pc, #52]	@ (800276c <SPI_Pin_Init+0x2a0>)
 8002736:	f7ff fc7f 	bl	8002038 <GPIO_Pin_Init>

			if(config->miso_pin == SPI_Configurations.Pin._SPI1_.MISO1.PA6) GPIO_Pin_Init(GPIOA, 6, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_1);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	799b      	ldrb	r3, [r3, #6]
 800273e:	2210      	movs	r2, #16
 8002740:	4293      	cmp	r3, r2
 8002742:	d115      	bne.n	8002770 <SPI_Pin_Init+0x2a4>
 8002744:	2002      	movs	r0, #2
 8002746:	2400      	movs	r4, #0
 8002748:	2303      	movs	r3, #3
 800274a:	2200      	movs	r2, #0
 800274c:	2105      	movs	r1, #5
 800274e:	9102      	str	r1, [sp, #8]
 8002750:	9201      	str	r2, [sp, #4]
 8002752:	9300      	str	r3, [sp, #0]
 8002754:	4623      	mov	r3, r4
 8002756:	4602      	mov	r2, r0
 8002758:	2106      	movs	r1, #6
 800275a:	4803      	ldr	r0, [pc, #12]	@ (8002768 <SPI_Pin_Init+0x29c>)
 800275c:	f7ff fc6c 	bl	8002038 <GPIO_Pin_Init>
 8002760:	e019      	b.n	8002796 <SPI_Pin_Init+0x2ca>
 8002762:	bf00      	nop
 8002764:	40013000 	.word	0x40013000
 8002768:	40020000 	.word	0x40020000
 800276c:	40020400 	.word	0x40020400
			else if(config->miso_pin == SPI_Configurations.Pin._SPI1_.MISO1.PB4) GPIO_Pin_Init(GPIOB, 4, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_1);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	799b      	ldrb	r3, [r3, #6]
 8002774:	2222      	movs	r2, #34	@ 0x22
 8002776:	4293      	cmp	r3, r2
 8002778:	d10d      	bne.n	8002796 <SPI_Pin_Init+0x2ca>
 800277a:	2002      	movs	r0, #2
 800277c:	2400      	movs	r4, #0
 800277e:	2303      	movs	r3, #3
 8002780:	2200      	movs	r2, #0
 8002782:	2105      	movs	r1, #5
 8002784:	9102      	str	r1, [sp, #8]
 8002786:	9201      	str	r2, [sp, #4]
 8002788:	9300      	str	r3, [sp, #0]
 800278a:	4623      	mov	r3, r4
 800278c:	4602      	mov	r2, r0
 800278e:	2104      	movs	r1, #4
 8002790:	489f      	ldr	r0, [pc, #636]	@ (8002a10 <SPI_Pin_Init+0x544>)
 8002792:	f7ff fc51 	bl	8002038 <GPIO_Pin_Init>

			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80027a4:	601a      	str	r2, [r3, #0]
			config->Port -> CR1 &= ~SPI_CR1_BIDIOE;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80027b4:	601a      	str	r2, [r3, #0]

			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
			config->Port -> CR1 &= ~SPI_CR1_BIDIOE;
		}
	}
}
 80027b6:	e2d5      	b.n	8002d64 <SPI_Pin_Init+0x898>
	else if(config -> Port == SPI2)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a95      	ldr	r2, [pc, #596]	@ (8002a14 <SPI_Pin_Init+0x548>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	f040 8151 	bne.w	8002a66 <SPI_Pin_Init+0x59a>
		if((config->mode == SPI_Configurations.Mode.Full_Duplex_Master) || (config->mode == SPI_Configurations.Mode.Full_Duplex_Slave))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	89db      	ldrh	r3, [r3, #14]
 80027c8:	220b      	movs	r2, #11
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d005      	beq.n	80027da <SPI_Pin_Init+0x30e>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	89db      	ldrh	r3, [r3, #14]
 80027d2:	220c      	movs	r2, #12
 80027d4:	4293      	cmp	r3, r2
 80027d6:	f040 8084 	bne.w	80028e2 <SPI_Pin_Init+0x416>
			if(config->clock_pin == SPI_Configurations.Pin._SPI2_.CLK2.PB10) GPIO_Pin_Init(GPIOB, 10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_2);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	791b      	ldrb	r3, [r3, #4]
 80027de:	461a      	mov	r2, r3
 80027e0:	2313      	movs	r3, #19
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d10e      	bne.n	8002804 <SPI_Pin_Init+0x338>
 80027e6:	2002      	movs	r0, #2
 80027e8:	2400      	movs	r4, #0
 80027ea:	2303      	movs	r3, #3
 80027ec:	2200      	movs	r2, #0
 80027ee:	2105      	movs	r1, #5
 80027f0:	9102      	str	r1, [sp, #8]
 80027f2:	9201      	str	r2, [sp, #4]
 80027f4:	9300      	str	r3, [sp, #0]
 80027f6:	4623      	mov	r3, r4
 80027f8:	4602      	mov	r2, r0
 80027fa:	210a      	movs	r1, #10
 80027fc:	4884      	ldr	r0, [pc, #528]	@ (8002a10 <SPI_Pin_Init+0x544>)
 80027fe:	f7ff fc1b 	bl	8002038 <GPIO_Pin_Init>
 8002802:	e013      	b.n	800282c <SPI_Pin_Init+0x360>
			else if(config->clock_pin == SPI_Configurations.Pin._SPI2_.CLK2.PB13) GPIO_Pin_Init(GPIOB, 13, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_2);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	791b      	ldrb	r3, [r3, #4]
 8002808:	461a      	mov	r2, r3
 800280a:	2317      	movs	r3, #23
 800280c:	429a      	cmp	r2, r3
 800280e:	d10d      	bne.n	800282c <SPI_Pin_Init+0x360>
 8002810:	2002      	movs	r0, #2
 8002812:	2400      	movs	r4, #0
 8002814:	2303      	movs	r3, #3
 8002816:	2200      	movs	r2, #0
 8002818:	2105      	movs	r1, #5
 800281a:	9102      	str	r1, [sp, #8]
 800281c:	9201      	str	r2, [sp, #4]
 800281e:	9300      	str	r3, [sp, #0]
 8002820:	4623      	mov	r3, r4
 8002822:	4602      	mov	r2, r0
 8002824:	210d      	movs	r1, #13
 8002826:	487a      	ldr	r0, [pc, #488]	@ (8002a10 <SPI_Pin_Init+0x544>)
 8002828:	f7ff fc06 	bl	8002038 <GPIO_Pin_Init>
			if(config->miso_pin == SPI_Configurations.Pin._SPI2_.MISO2.PB14) GPIO_Pin_Init(GPIOB, 14, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_2);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	799b      	ldrb	r3, [r3, #6]
 8002830:	461a      	mov	r2, r3
 8002832:	231b      	movs	r3, #27
 8002834:	429a      	cmp	r2, r3
 8002836:	d10e      	bne.n	8002856 <SPI_Pin_Init+0x38a>
 8002838:	2002      	movs	r0, #2
 800283a:	2400      	movs	r4, #0
 800283c:	2303      	movs	r3, #3
 800283e:	2200      	movs	r2, #0
 8002840:	2105      	movs	r1, #5
 8002842:	9102      	str	r1, [sp, #8]
 8002844:	9201      	str	r2, [sp, #4]
 8002846:	9300      	str	r3, [sp, #0]
 8002848:	4623      	mov	r3, r4
 800284a:	4602      	mov	r2, r0
 800284c:	210e      	movs	r1, #14
 800284e:	4870      	ldr	r0, [pc, #448]	@ (8002a10 <SPI_Pin_Init+0x544>)
 8002850:	f7ff fbf2 	bl	8002038 <GPIO_Pin_Init>
 8002854:	e013      	b.n	800287e <SPI_Pin_Init+0x3b2>
			else if(config->miso_pin == SPI_Configurations.Pin._SPI2_.MISO2.PC2) GPIO_Pin_Init(GPIOC, 2, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_2);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	799b      	ldrb	r3, [r3, #6]
 800285a:	461a      	mov	r2, r3
 800285c:	2320      	movs	r3, #32
 800285e:	429a      	cmp	r2, r3
 8002860:	d10d      	bne.n	800287e <SPI_Pin_Init+0x3b2>
 8002862:	2002      	movs	r0, #2
 8002864:	2400      	movs	r4, #0
 8002866:	2303      	movs	r3, #3
 8002868:	2200      	movs	r2, #0
 800286a:	2105      	movs	r1, #5
 800286c:	9102      	str	r1, [sp, #8]
 800286e:	9201      	str	r2, [sp, #4]
 8002870:	9300      	str	r3, [sp, #0]
 8002872:	4623      	mov	r3, r4
 8002874:	4602      	mov	r2, r0
 8002876:	2102      	movs	r1, #2
 8002878:	4867      	ldr	r0, [pc, #412]	@ (8002a18 <SPI_Pin_Init+0x54c>)
 800287a:	f7ff fbdd 	bl	8002038 <GPIO_Pin_Init>
			if(config->mosi_pin == SPI_Configurations.Pin._SPI2_.MOSI2.PB15) GPIO_Pin_Init(GPIOB, 15, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_2);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	795b      	ldrb	r3, [r3, #5]
 8002882:	461a      	mov	r2, r3
 8002884:	231d      	movs	r3, #29
 8002886:	429a      	cmp	r2, r3
 8002888:	d10e      	bne.n	80028a8 <SPI_Pin_Init+0x3dc>
 800288a:	2002      	movs	r0, #2
 800288c:	2400      	movs	r4, #0
 800288e:	2303      	movs	r3, #3
 8002890:	2200      	movs	r2, #0
 8002892:	2105      	movs	r1, #5
 8002894:	9102      	str	r1, [sp, #8]
 8002896:	9201      	str	r2, [sp, #4]
 8002898:	9300      	str	r3, [sp, #0]
 800289a:	4623      	mov	r3, r4
 800289c:	4602      	mov	r2, r0
 800289e:	210f      	movs	r1, #15
 80028a0:	485b      	ldr	r0, [pc, #364]	@ (8002a10 <SPI_Pin_Init+0x544>)
 80028a2:	f7ff fbc9 	bl	8002038 <GPIO_Pin_Init>
 80028a6:	e013      	b.n	80028d0 <SPI_Pin_Init+0x404>
			else if(config->mosi_pin == SPI_Configurations.Pin._SPI2_.MOSI2.PC3) GPIO_Pin_Init(GPIOC, 3, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_2);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	795b      	ldrb	r3, [r3, #5]
 80028ac:	461a      	mov	r2, r3
 80028ae:	2311      	movs	r3, #17
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d10d      	bne.n	80028d0 <SPI_Pin_Init+0x404>
 80028b4:	2002      	movs	r0, #2
 80028b6:	2400      	movs	r4, #0
 80028b8:	2303      	movs	r3, #3
 80028ba:	2200      	movs	r2, #0
 80028bc:	2105      	movs	r1, #5
 80028be:	9102      	str	r1, [sp, #8]
 80028c0:	9201      	str	r2, [sp, #4]
 80028c2:	9300      	str	r3, [sp, #0]
 80028c4:	4623      	mov	r3, r4
 80028c6:	4602      	mov	r2, r0
 80028c8:	2103      	movs	r1, #3
 80028ca:	4853      	ldr	r0, [pc, #332]	@ (8002a18 <SPI_Pin_Init+0x54c>)
 80028cc:	f7ff fbb4 	bl	8002038 <GPIO_Pin_Init>
			config->Port -> CR1 &= ~SPI_CR1_BIDIMODE;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80028de:	601a      	str	r2, [r3, #0]
 80028e0:	e240      	b.n	8002d64 <SPI_Pin_Init+0x898>
		else if((config->mode == SPI_Configurations.Mode.Half_Duplex_Master) || (config->mode == SPI_Configurations.Mode.TX_Only_Master) || (config->mode == SPI_Configurations.Mode.RX_Only_Slave))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	89db      	ldrh	r3, [r3, #14]
 80028e6:	220d      	movs	r2, #13
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d009      	beq.n	8002900 <SPI_Pin_Init+0x434>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	89db      	ldrh	r3, [r3, #14]
 80028f0:	2211      	movs	r2, #17
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d004      	beq.n	8002900 <SPI_Pin_Init+0x434>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	89db      	ldrh	r3, [r3, #14]
 80028fa:	2210      	movs	r2, #16
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d139      	bne.n	8002974 <SPI_Pin_Init+0x4a8>
			if(config->clock_pin == SPI_Configurations.Pin._SPI2_.CLK2.PB10) GPIO_Pin_Init(GPIOB, 10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_2);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	791b      	ldrb	r3, [r3, #4]
 8002904:	461a      	mov	r2, r3
 8002906:	2313      	movs	r3, #19
 8002908:	429a      	cmp	r2, r3
 800290a:	d10e      	bne.n	800292a <SPI_Pin_Init+0x45e>
 800290c:	2002      	movs	r0, #2
 800290e:	2400      	movs	r4, #0
 8002910:	2303      	movs	r3, #3
 8002912:	2200      	movs	r2, #0
 8002914:	2105      	movs	r1, #5
 8002916:	9102      	str	r1, [sp, #8]
 8002918:	9201      	str	r2, [sp, #4]
 800291a:	9300      	str	r3, [sp, #0]
 800291c:	4623      	mov	r3, r4
 800291e:	4602      	mov	r2, r0
 8002920:	210a      	movs	r1, #10
 8002922:	483b      	ldr	r0, [pc, #236]	@ (8002a10 <SPI_Pin_Init+0x544>)
 8002924:	f7ff fb88 	bl	8002038 <GPIO_Pin_Init>
 8002928:	e013      	b.n	8002952 <SPI_Pin_Init+0x486>
			else if(config->clock_pin == SPI_Configurations.Pin._SPI2_.CLK2.PB13) GPIO_Pin_Init(GPIOB, 13, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_2);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	791b      	ldrb	r3, [r3, #4]
 800292e:	461a      	mov	r2, r3
 8002930:	2317      	movs	r3, #23
 8002932:	429a      	cmp	r2, r3
 8002934:	d10d      	bne.n	8002952 <SPI_Pin_Init+0x486>
 8002936:	2002      	movs	r0, #2
 8002938:	2400      	movs	r4, #0
 800293a:	2303      	movs	r3, #3
 800293c:	2200      	movs	r2, #0
 800293e:	2105      	movs	r1, #5
 8002940:	9102      	str	r1, [sp, #8]
 8002942:	9201      	str	r2, [sp, #4]
 8002944:	9300      	str	r3, [sp, #0]
 8002946:	4623      	mov	r3, r4
 8002948:	4602      	mov	r2, r0
 800294a:	210d      	movs	r1, #13
 800294c:	4830      	ldr	r0, [pc, #192]	@ (8002a10 <SPI_Pin_Init+0x544>)
 800294e:	f7ff fb73 	bl	8002038 <GPIO_Pin_Init>
			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002960:	601a      	str	r2, [r3, #0]
			config->Port -> CR1 |= SPI_CR1_BIDIOE;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002970:	601a      	str	r2, [r3, #0]
 8002972:	e1f7      	b.n	8002d64 <SPI_Pin_Init+0x898>
		else if((config->mode == SPI_Configurations.Mode.Half_Duplex_Slave) || (config->mode == SPI_Configurations.Mode.RX_Only_Master) || (config->mode == SPI_Configurations.Mode.TX_Only_Slave))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	89db      	ldrh	r3, [r3, #14]
 8002978:	220e      	movs	r2, #14
 800297a:	4293      	cmp	r3, r2
 800297c:	d00a      	beq.n	8002994 <SPI_Pin_Init+0x4c8>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	89db      	ldrh	r3, [r3, #14]
 8002982:	220f      	movs	r2, #15
 8002984:	4293      	cmp	r3, r2
 8002986:	d005      	beq.n	8002994 <SPI_Pin_Init+0x4c8>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	89db      	ldrh	r3, [r3, #14]
 800298c:	2212      	movs	r2, #18
 800298e:	4293      	cmp	r3, r2
 8002990:	f040 81e8 	bne.w	8002d64 <SPI_Pin_Init+0x898>
			if(config->clock_pin == SPI_Configurations.Pin._SPI2_.CLK2.PB10) GPIO_Pin_Init(GPIOB, 10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_2);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	791b      	ldrb	r3, [r3, #4]
 8002998:	461a      	mov	r2, r3
 800299a:	2313      	movs	r3, #19
 800299c:	429a      	cmp	r2, r3
 800299e:	d10e      	bne.n	80029be <SPI_Pin_Init+0x4f2>
 80029a0:	2002      	movs	r0, #2
 80029a2:	2400      	movs	r4, #0
 80029a4:	2303      	movs	r3, #3
 80029a6:	2200      	movs	r2, #0
 80029a8:	2105      	movs	r1, #5
 80029aa:	9102      	str	r1, [sp, #8]
 80029ac:	9201      	str	r2, [sp, #4]
 80029ae:	9300      	str	r3, [sp, #0]
 80029b0:	4623      	mov	r3, r4
 80029b2:	4602      	mov	r2, r0
 80029b4:	210a      	movs	r1, #10
 80029b6:	4816      	ldr	r0, [pc, #88]	@ (8002a10 <SPI_Pin_Init+0x544>)
 80029b8:	f7ff fb3e 	bl	8002038 <GPIO_Pin_Init>
 80029bc:	e013      	b.n	80029e6 <SPI_Pin_Init+0x51a>
			else if(config->clock_pin == SPI_Configurations.Pin._SPI2_.CLK2.PB13) GPIO_Pin_Init(GPIOB, 13, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_2);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	791b      	ldrb	r3, [r3, #4]
 80029c2:	461a      	mov	r2, r3
 80029c4:	2317      	movs	r3, #23
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d10d      	bne.n	80029e6 <SPI_Pin_Init+0x51a>
 80029ca:	2002      	movs	r0, #2
 80029cc:	2400      	movs	r4, #0
 80029ce:	2303      	movs	r3, #3
 80029d0:	2200      	movs	r2, #0
 80029d2:	2105      	movs	r1, #5
 80029d4:	9102      	str	r1, [sp, #8]
 80029d6:	9201      	str	r2, [sp, #4]
 80029d8:	9300      	str	r3, [sp, #0]
 80029da:	4623      	mov	r3, r4
 80029dc:	4602      	mov	r2, r0
 80029de:	210d      	movs	r1, #13
 80029e0:	480b      	ldr	r0, [pc, #44]	@ (8002a10 <SPI_Pin_Init+0x544>)
 80029e2:	f7ff fb29 	bl	8002038 <GPIO_Pin_Init>
			if(config->miso_pin == SPI_Configurations.Pin._SPI2_.MISO2.PB14) GPIO_Pin_Init(GPIOB, 14, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_2);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	799b      	ldrb	r3, [r3, #6]
 80029ea:	461a      	mov	r2, r3
 80029ec:	231b      	movs	r3, #27
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d114      	bne.n	8002a1c <SPI_Pin_Init+0x550>
 80029f2:	2002      	movs	r0, #2
 80029f4:	2400      	movs	r4, #0
 80029f6:	2303      	movs	r3, #3
 80029f8:	2200      	movs	r2, #0
 80029fa:	2105      	movs	r1, #5
 80029fc:	9102      	str	r1, [sp, #8]
 80029fe:	9201      	str	r2, [sp, #4]
 8002a00:	9300      	str	r3, [sp, #0]
 8002a02:	4623      	mov	r3, r4
 8002a04:	4602      	mov	r2, r0
 8002a06:	210e      	movs	r1, #14
 8002a08:	4801      	ldr	r0, [pc, #4]	@ (8002a10 <SPI_Pin_Init+0x544>)
 8002a0a:	f7ff fb15 	bl	8002038 <GPIO_Pin_Init>
 8002a0e:	e019      	b.n	8002a44 <SPI_Pin_Init+0x578>
 8002a10:	40020400 	.word	0x40020400
 8002a14:	40003800 	.word	0x40003800
 8002a18:	40020800 	.word	0x40020800
			else if(config->miso_pin == SPI_Configurations.Pin._SPI2_.MISO2.PC2) GPIO_Pin_Init(GPIOC, 2, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_2);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	799b      	ldrb	r3, [r3, #6]
 8002a20:	461a      	mov	r2, r3
 8002a22:	2320      	movs	r3, #32
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d10d      	bne.n	8002a44 <SPI_Pin_Init+0x578>
 8002a28:	2002      	movs	r0, #2
 8002a2a:	2400      	movs	r4, #0
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	2200      	movs	r2, #0
 8002a30:	2105      	movs	r1, #5
 8002a32:	9102      	str	r1, [sp, #8]
 8002a34:	9201      	str	r2, [sp, #4]
 8002a36:	9300      	str	r3, [sp, #0]
 8002a38:	4623      	mov	r3, r4
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	2102      	movs	r1, #2
 8002a3e:	489f      	ldr	r0, [pc, #636]	@ (8002cbc <SPI_Pin_Init+0x7f0>)
 8002a40:	f7ff fafa 	bl	8002038 <GPIO_Pin_Init>
			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a52:	601a      	str	r2, [r3, #0]
			config->Port -> CR1 &= ~SPI_CR1_BIDIOE;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002a62:	601a      	str	r2, [r3, #0]
}
 8002a64:	e17e      	b.n	8002d64 <SPI_Pin_Init+0x898>
	else if(config -> Port == SPI3)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a95      	ldr	r2, [pc, #596]	@ (8002cc0 <SPI_Pin_Init+0x7f4>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	f040 8179 	bne.w	8002d64 <SPI_Pin_Init+0x898>
		if((config->mode == SPI_Configurations.Mode.Full_Duplex_Master) || (config->mode == SPI_Configurations.Mode.Full_Duplex_Slave))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	89db      	ldrh	r3, [r3, #14]
 8002a76:	220b      	movs	r2, #11
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d005      	beq.n	8002a88 <SPI_Pin_Init+0x5bc>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	89db      	ldrh	r3, [r3, #14]
 8002a80:	220c      	movs	r2, #12
 8002a82:	4293      	cmp	r3, r2
 8002a84:	f040 8084 	bne.w	8002b90 <SPI_Pin_Init+0x6c4>
			if(config->clock_pin == SPI_Configurations.Pin._SPI3_.CLK3.PB3) GPIO_Pin_Init(GPIOB, 3, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_3);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	791b      	ldrb	r3, [r3, #4]
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	2317      	movs	r3, #23
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d10e      	bne.n	8002ab2 <SPI_Pin_Init+0x5e6>
 8002a94:	2002      	movs	r0, #2
 8002a96:	2400      	movs	r4, #0
 8002a98:	2303      	movs	r3, #3
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	2106      	movs	r1, #6
 8002a9e:	9102      	str	r1, [sp, #8]
 8002aa0:	9201      	str	r2, [sp, #4]
 8002aa2:	9300      	str	r3, [sp, #0]
 8002aa4:	4623      	mov	r3, r4
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	2103      	movs	r1, #3
 8002aaa:	4886      	ldr	r0, [pc, #536]	@ (8002cc4 <SPI_Pin_Init+0x7f8>)
 8002aac:	f7ff fac4 	bl	8002038 <GPIO_Pin_Init>
 8002ab0:	e013      	b.n	8002ada <SPI_Pin_Init+0x60e>
			else if(config->clock_pin == SPI_Configurations.Pin._SPI3_.CLK3.PC10) GPIO_Pin_Init(GPIOC, 10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_3);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	791b      	ldrb	r3, [r3, #4]
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	2325      	movs	r3, #37	@ 0x25
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d10d      	bne.n	8002ada <SPI_Pin_Init+0x60e>
 8002abe:	2002      	movs	r0, #2
 8002ac0:	2400      	movs	r4, #0
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	2106      	movs	r1, #6
 8002ac8:	9102      	str	r1, [sp, #8]
 8002aca:	9201      	str	r2, [sp, #4]
 8002acc:	9300      	str	r3, [sp, #0]
 8002ace:	4623      	mov	r3, r4
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	210a      	movs	r1, #10
 8002ad4:	4879      	ldr	r0, [pc, #484]	@ (8002cbc <SPI_Pin_Init+0x7f0>)
 8002ad6:	f7ff faaf 	bl	8002038 <GPIO_Pin_Init>
			if(config->miso_pin == SPI_Configurations.Pin._SPI3_.MISO3.PB4) GPIO_Pin_Init(GPIOB, 4, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_3);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	799b      	ldrb	r3, [r3, #6]
 8002ade:	461a      	mov	r2, r3
 8002ae0:	2318      	movs	r3, #24
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d10e      	bne.n	8002b04 <SPI_Pin_Init+0x638>
 8002ae6:	2002      	movs	r0, #2
 8002ae8:	2400      	movs	r4, #0
 8002aea:	2303      	movs	r3, #3
 8002aec:	2200      	movs	r2, #0
 8002aee:	2106      	movs	r1, #6
 8002af0:	9102      	str	r1, [sp, #8]
 8002af2:	9201      	str	r2, [sp, #4]
 8002af4:	9300      	str	r3, [sp, #0]
 8002af6:	4623      	mov	r3, r4
 8002af8:	4602      	mov	r2, r0
 8002afa:	2104      	movs	r1, #4
 8002afc:	4871      	ldr	r0, [pc, #452]	@ (8002cc4 <SPI_Pin_Init+0x7f8>)
 8002afe:	f7ff fa9b 	bl	8002038 <GPIO_Pin_Init>
 8002b02:	e013      	b.n	8002b2c <SPI_Pin_Init+0x660>
			else if(config->miso_pin == SPI_Configurations.Pin._SPI3_.MISO3.PC11) GPIO_Pin_Init(GPIOC,11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_3);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	799b      	ldrb	r3, [r3, #6]
 8002b08:	461a      	mov	r2, r3
 8002b0a:	2327      	movs	r3, #39	@ 0x27
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d10d      	bne.n	8002b2c <SPI_Pin_Init+0x660>
 8002b10:	2002      	movs	r0, #2
 8002b12:	2400      	movs	r4, #0
 8002b14:	2303      	movs	r3, #3
 8002b16:	2200      	movs	r2, #0
 8002b18:	2106      	movs	r1, #6
 8002b1a:	9102      	str	r1, [sp, #8]
 8002b1c:	9201      	str	r2, [sp, #4]
 8002b1e:	9300      	str	r3, [sp, #0]
 8002b20:	4623      	mov	r3, r4
 8002b22:	4602      	mov	r2, r0
 8002b24:	210b      	movs	r1, #11
 8002b26:	4865      	ldr	r0, [pc, #404]	@ (8002cbc <SPI_Pin_Init+0x7f0>)
 8002b28:	f7ff fa86 	bl	8002038 <GPIO_Pin_Init>
			if(config->mosi_pin == SPI_Configurations.Pin._SPI3_.MOSI3.PB5) GPIO_Pin_Init(GPIOB, 5, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_3);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	795b      	ldrb	r3, [r3, #5]
 8002b30:	461a      	mov	r2, r3
 8002b32:	2319      	movs	r3, #25
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d10e      	bne.n	8002b56 <SPI_Pin_Init+0x68a>
 8002b38:	2002      	movs	r0, #2
 8002b3a:	2400      	movs	r4, #0
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	2200      	movs	r2, #0
 8002b40:	2106      	movs	r1, #6
 8002b42:	9102      	str	r1, [sp, #8]
 8002b44:	9201      	str	r2, [sp, #4]
 8002b46:	9300      	str	r3, [sp, #0]
 8002b48:	4623      	mov	r3, r4
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	2105      	movs	r1, #5
 8002b4e:	485d      	ldr	r0, [pc, #372]	@ (8002cc4 <SPI_Pin_Init+0x7f8>)
 8002b50:	f7ff fa72 	bl	8002038 <GPIO_Pin_Init>
 8002b54:	e013      	b.n	8002b7e <SPI_Pin_Init+0x6b2>
			else if(config->mosi_pin == SPI_Configurations.Pin._SPI3_.MOSI3.PC12) GPIO_Pin_Init(GPIOC, 12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_3);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	795b      	ldrb	r3, [r3, #5]
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	2327      	movs	r3, #39	@ 0x27
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d10d      	bne.n	8002b7e <SPI_Pin_Init+0x6b2>
 8002b62:	2002      	movs	r0, #2
 8002b64:	2400      	movs	r4, #0
 8002b66:	2303      	movs	r3, #3
 8002b68:	2200      	movs	r2, #0
 8002b6a:	2106      	movs	r1, #6
 8002b6c:	9102      	str	r1, [sp, #8]
 8002b6e:	9201      	str	r2, [sp, #4]
 8002b70:	9300      	str	r3, [sp, #0]
 8002b72:	4623      	mov	r3, r4
 8002b74:	4602      	mov	r2, r0
 8002b76:	210c      	movs	r1, #12
 8002b78:	4850      	ldr	r0, [pc, #320]	@ (8002cbc <SPI_Pin_Init+0x7f0>)
 8002b7a:	f7ff fa5d 	bl	8002038 <GPIO_Pin_Init>
			config->Port -> CR1 &= ~SPI_CR1_BIDIMODE;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b8c:	601a      	str	r2, [r3, #0]
 8002b8e:	e0e9      	b.n	8002d64 <SPI_Pin_Init+0x898>
		else if((config->mode == SPI_Configurations.Mode.Half_Duplex_Master) || (config->mode == SPI_Configurations.Mode.TX_Only_Master) || (config->mode == SPI_Configurations.Mode.RX_Only_Slave))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	89db      	ldrh	r3, [r3, #14]
 8002b94:	220d      	movs	r2, #13
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d009      	beq.n	8002bae <SPI_Pin_Init+0x6e2>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	89db      	ldrh	r3, [r3, #14]
 8002b9e:	2211      	movs	r2, #17
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d004      	beq.n	8002bae <SPI_Pin_Init+0x6e2>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	89db      	ldrh	r3, [r3, #14]
 8002ba8:	2210      	movs	r2, #16
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d162      	bne.n	8002c74 <SPI_Pin_Init+0x7a8>
			if(config->clock_pin == SPI_Configurations.Pin._SPI3_.CLK3.PB3) GPIO_Pin_Init(GPIOB, 3, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_3);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	791b      	ldrb	r3, [r3, #4]
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	2317      	movs	r3, #23
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d10e      	bne.n	8002bd8 <SPI_Pin_Init+0x70c>
 8002bba:	2002      	movs	r0, #2
 8002bbc:	2400      	movs	r4, #0
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	2106      	movs	r1, #6
 8002bc4:	9102      	str	r1, [sp, #8]
 8002bc6:	9201      	str	r2, [sp, #4]
 8002bc8:	9300      	str	r3, [sp, #0]
 8002bca:	4623      	mov	r3, r4
 8002bcc:	4602      	mov	r2, r0
 8002bce:	2103      	movs	r1, #3
 8002bd0:	483c      	ldr	r0, [pc, #240]	@ (8002cc4 <SPI_Pin_Init+0x7f8>)
 8002bd2:	f7ff fa31 	bl	8002038 <GPIO_Pin_Init>
 8002bd6:	e013      	b.n	8002c00 <SPI_Pin_Init+0x734>
			else if(config->clock_pin == SPI_Configurations.Pin._SPI3_.CLK3.PC10) GPIO_Pin_Init(GPIOC, 10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_3);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	791b      	ldrb	r3, [r3, #4]
 8002bdc:	461a      	mov	r2, r3
 8002bde:	2325      	movs	r3, #37	@ 0x25
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d10d      	bne.n	8002c00 <SPI_Pin_Init+0x734>
 8002be4:	2002      	movs	r0, #2
 8002be6:	2400      	movs	r4, #0
 8002be8:	2303      	movs	r3, #3
 8002bea:	2200      	movs	r2, #0
 8002bec:	2106      	movs	r1, #6
 8002bee:	9102      	str	r1, [sp, #8]
 8002bf0:	9201      	str	r2, [sp, #4]
 8002bf2:	9300      	str	r3, [sp, #0]
 8002bf4:	4623      	mov	r3, r4
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	210a      	movs	r1, #10
 8002bfa:	4830      	ldr	r0, [pc, #192]	@ (8002cbc <SPI_Pin_Init+0x7f0>)
 8002bfc:	f7ff fa1c 	bl	8002038 <GPIO_Pin_Init>
			if(config->miso_pin == SPI_Configurations.Pin._SPI3_.MISO3.PB4) GPIO_Pin_Init(GPIOB, 4, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_3);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	799b      	ldrb	r3, [r3, #6]
 8002c04:	461a      	mov	r2, r3
 8002c06:	2318      	movs	r3, #24
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d10e      	bne.n	8002c2a <SPI_Pin_Init+0x75e>
 8002c0c:	2002      	movs	r0, #2
 8002c0e:	2400      	movs	r4, #0
 8002c10:	2303      	movs	r3, #3
 8002c12:	2200      	movs	r2, #0
 8002c14:	2106      	movs	r1, #6
 8002c16:	9102      	str	r1, [sp, #8]
 8002c18:	9201      	str	r2, [sp, #4]
 8002c1a:	9300      	str	r3, [sp, #0]
 8002c1c:	4623      	mov	r3, r4
 8002c1e:	4602      	mov	r2, r0
 8002c20:	2104      	movs	r1, #4
 8002c22:	4828      	ldr	r0, [pc, #160]	@ (8002cc4 <SPI_Pin_Init+0x7f8>)
 8002c24:	f7ff fa08 	bl	8002038 <GPIO_Pin_Init>
 8002c28:	e013      	b.n	8002c52 <SPI_Pin_Init+0x786>
			else if(config->miso_pin == SPI_Configurations.Pin._SPI3_.MISO3.PC11) GPIO_Pin_Init(GPIOC,11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_3);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	799b      	ldrb	r3, [r3, #6]
 8002c2e:	461a      	mov	r2, r3
 8002c30:	2327      	movs	r3, #39	@ 0x27
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d10d      	bne.n	8002c52 <SPI_Pin_Init+0x786>
 8002c36:	2002      	movs	r0, #2
 8002c38:	2400      	movs	r4, #0
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	2106      	movs	r1, #6
 8002c40:	9102      	str	r1, [sp, #8]
 8002c42:	9201      	str	r2, [sp, #4]
 8002c44:	9300      	str	r3, [sp, #0]
 8002c46:	4623      	mov	r3, r4
 8002c48:	4602      	mov	r2, r0
 8002c4a:	210b      	movs	r1, #11
 8002c4c:	481b      	ldr	r0, [pc, #108]	@ (8002cbc <SPI_Pin_Init+0x7f0>)
 8002c4e:	f7ff f9f3 	bl	8002038 <GPIO_Pin_Init>
			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c60:	601a      	str	r2, [r3, #0]
			config->Port -> CR1 |= SPI_CR1_BIDIOE;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	e077      	b.n	8002d64 <SPI_Pin_Init+0x898>
		else if((config->mode == SPI_Configurations.Mode.Half_Duplex_Slave) || (config->mode == SPI_Configurations.Mode.RX_Only_Master) || (config->mode == SPI_Configurations.Mode.TX_Only_Slave))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	89db      	ldrh	r3, [r3, #14]
 8002c78:	220e      	movs	r2, #14
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d009      	beq.n	8002c92 <SPI_Pin_Init+0x7c6>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	89db      	ldrh	r3, [r3, #14]
 8002c82:	220f      	movs	r2, #15
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d004      	beq.n	8002c92 <SPI_Pin_Init+0x7c6>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	89db      	ldrh	r3, [r3, #14]
 8002c8c:	2212      	movs	r2, #18
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d168      	bne.n	8002d64 <SPI_Pin_Init+0x898>
			if(config->clock_pin == SPI_Configurations.Pin._SPI3_.CLK3.PB3) GPIO_Pin_Init(GPIOB, 3, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_3);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	791b      	ldrb	r3, [r3, #4]
 8002c96:	461a      	mov	r2, r3
 8002c98:	2317      	movs	r3, #23
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d114      	bne.n	8002cc8 <SPI_Pin_Init+0x7fc>
 8002c9e:	2002      	movs	r0, #2
 8002ca0:	2400      	movs	r4, #0
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	2106      	movs	r1, #6
 8002ca8:	9102      	str	r1, [sp, #8]
 8002caa:	9201      	str	r2, [sp, #4]
 8002cac:	9300      	str	r3, [sp, #0]
 8002cae:	4623      	mov	r3, r4
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	2103      	movs	r1, #3
 8002cb4:	4803      	ldr	r0, [pc, #12]	@ (8002cc4 <SPI_Pin_Init+0x7f8>)
 8002cb6:	f7ff f9bf 	bl	8002038 <GPIO_Pin_Init>
 8002cba:	e019      	b.n	8002cf0 <SPI_Pin_Init+0x824>
 8002cbc:	40020800 	.word	0x40020800
 8002cc0:	40003c00 	.word	0x40003c00
 8002cc4:	40020400 	.word	0x40020400
			else if(config->clock_pin == SPI_Configurations.Pin._SPI3_.CLK3.PC10) GPIO_Pin_Init(GPIOC, 10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_3);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	791b      	ldrb	r3, [r3, #4]
 8002ccc:	461a      	mov	r2, r3
 8002cce:	2325      	movs	r3, #37	@ 0x25
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d10d      	bne.n	8002cf0 <SPI_Pin_Init+0x824>
 8002cd4:	2002      	movs	r0, #2
 8002cd6:	2400      	movs	r4, #0
 8002cd8:	2303      	movs	r3, #3
 8002cda:	2200      	movs	r2, #0
 8002cdc:	2106      	movs	r1, #6
 8002cde:	9102      	str	r1, [sp, #8]
 8002ce0:	9201      	str	r2, [sp, #4]
 8002ce2:	9300      	str	r3, [sp, #0]
 8002ce4:	4623      	mov	r3, r4
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	210a      	movs	r1, #10
 8002cea:	4820      	ldr	r0, [pc, #128]	@ (8002d6c <SPI_Pin_Init+0x8a0>)
 8002cec:	f7ff f9a4 	bl	8002038 <GPIO_Pin_Init>
			if(config->mosi_pin == SPI_Configurations.Pin._SPI3_.MOSI3.PB5) GPIO_Pin_Init(GPIOB, 5, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_3);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	795b      	ldrb	r3, [r3, #5]
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	2319      	movs	r3, #25
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d10e      	bne.n	8002d1a <SPI_Pin_Init+0x84e>
 8002cfc:	2002      	movs	r0, #2
 8002cfe:	2400      	movs	r4, #0
 8002d00:	2303      	movs	r3, #3
 8002d02:	2200      	movs	r2, #0
 8002d04:	2106      	movs	r1, #6
 8002d06:	9102      	str	r1, [sp, #8]
 8002d08:	9201      	str	r2, [sp, #4]
 8002d0a:	9300      	str	r3, [sp, #0]
 8002d0c:	4623      	mov	r3, r4
 8002d0e:	4602      	mov	r2, r0
 8002d10:	2105      	movs	r1, #5
 8002d12:	4817      	ldr	r0, [pc, #92]	@ (8002d70 <SPI_Pin_Init+0x8a4>)
 8002d14:	f7ff f990 	bl	8002038 <GPIO_Pin_Init>
 8002d18:	e013      	b.n	8002d42 <SPI_Pin_Init+0x876>
			else if(config->mosi_pin == SPI_Configurations.Pin._SPI3_.MOSI3.PC12) GPIO_Pin_Init(GPIOC, 12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_3);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	795b      	ldrb	r3, [r3, #5]
 8002d1e:	461a      	mov	r2, r3
 8002d20:	2327      	movs	r3, #39	@ 0x27
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d10d      	bne.n	8002d42 <SPI_Pin_Init+0x876>
 8002d26:	2002      	movs	r0, #2
 8002d28:	2400      	movs	r4, #0
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	2106      	movs	r1, #6
 8002d30:	9102      	str	r1, [sp, #8]
 8002d32:	9201      	str	r2, [sp, #4]
 8002d34:	9300      	str	r3, [sp, #0]
 8002d36:	4623      	mov	r3, r4
 8002d38:	4602      	mov	r2, r0
 8002d3a:	210c      	movs	r1, #12
 8002d3c:	480b      	ldr	r0, [pc, #44]	@ (8002d6c <SPI_Pin_Init+0x8a0>)
 8002d3e:	f7ff f97b 	bl	8002038 <GPIO_Pin_Init>
			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002d50:	601a      	str	r2, [r3, #0]
			config->Port -> CR1 &= ~SPI_CR1_BIDIOE;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002d60:	601a      	str	r2, [r3, #0]
}
 8002d62:	e7ff      	b.n	8002d64 <SPI_Pin_Init+0x898>
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd90      	pop	{r4, r7, pc}
 8002d6c:	40020800 	.word	0x40020800
 8002d70:	40020400 	.word	0x40020400

08002d74 <SPI_Init>:
 *
 * @param[in] config Pointer to the SPI configuration structure.
 * @return int8_t Returns 1 on success, -1 on failure.
 */
int8_t SPI_Init(SPI_Config *config)
{
 8002d74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d76:	b087      	sub	sp, #28
 8002d78:	af04      	add	r7, sp, #16
 8002d7a:	6078      	str	r0, [r7, #4]
	if(config->type == SPI_Configurations.Type.Master){
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	8b1b      	ldrh	r3, [r3, #24]
 8002d80:	2232      	movs	r2, #50	@ 0x32
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d110      	bne.n	8002da8 <SPI_Init+0x34>
		GPIO_Pin_Init(config->NSS_Port, config->NSS_Pin, GPIO_Configuration.Mode.General_Purpose_Output, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.Pull_Up, GPIO_Configuration.Alternate_Functions.None);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6898      	ldr	r0, [r3, #8]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	7b19      	ldrb	r1, [r3, #12]
 8002d8e:	2501      	movs	r5, #1
 8002d90:	2600      	movs	r6, #0
 8002d92:	2303      	movs	r3, #3
 8002d94:	2201      	movs	r2, #1
 8002d96:	2400      	movs	r4, #0
 8002d98:	9402      	str	r4, [sp, #8]
 8002d9a:	9201      	str	r2, [sp, #4]
 8002d9c:	9300      	str	r3, [sp, #0]
 8002d9e:	4633      	mov	r3, r6
 8002da0:	462a      	mov	r2, r5
 8002da2:	f7ff f949 	bl	8002038 <GPIO_Pin_Init>
 8002da6:	e014      	b.n	8002dd2 <SPI_Init+0x5e>
	}
	else if(config->type == SPI_Configurations.Type.Slave){
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	8b1b      	ldrh	r3, [r3, #24]
 8002dac:	2233      	movs	r2, #51	@ 0x33
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d10f      	bne.n	8002dd2 <SPI_Init+0x5e>
		GPIO_Pin_Init(config->NSS_Port, config->NSS_Pin, GPIO_Configuration.Mode.Input, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.Pull_Up, GPIO_Configuration.Alternate_Functions.None);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6898      	ldr	r0, [r3, #8]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	7b19      	ldrb	r1, [r3, #12]
 8002dba:	2500      	movs	r5, #0
 8002dbc:	2600      	movs	r6, #0
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	2400      	movs	r4, #0
 8002dc4:	9402      	str	r4, [sp, #8]
 8002dc6:	9201      	str	r2, [sp, #4]
 8002dc8:	9300      	str	r3, [sp, #0]
 8002dca:	4633      	mov	r3, r6
 8002dcc:	462a      	mov	r2, r5
 8002dce:	f7ff f933 	bl	8002038 <GPIO_Pin_Init>
	}

	SPI_Clock_Enable(config);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f7ff fb40 	bl	8002458 <SPI_Clock_Enable>
	SPI_Pin_Init(config);
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f7ff fb77 	bl	80024cc <SPI_Pin_Init>

	SPI_NSS_High(config);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f000 fc02 	bl	80035e8 <SPI_NSS_High>

	config -> Port -> CR1 &= ~SPI_CR1_SPE;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002df2:	601a      	str	r2, [r3, #0]



	if((config -> Port == SPI1) || (config -> Port == SPI2) || (config -> Port == SPI3))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a89      	ldr	r2, [pc, #548]	@ (8003020 <SPI_Init+0x2ac>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d00a      	beq.n	8002e14 <SPI_Init+0xa0>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a88      	ldr	r2, [pc, #544]	@ (8003024 <SPI_Init+0x2b0>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d005      	beq.n	8002e14 <SPI_Init+0xa0>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a86      	ldr	r2, [pc, #536]	@ (8003028 <SPI_Init+0x2b4>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	f040 81d6 	bne.w	80031c0 <SPI_Init+0x44c>
	{

		config -> Port ->CR1 |= SPI_CR1_SSM | SPI_CR1_SSI;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002e22:	601a      	str	r2, [r3, #0]


		     if(config -> clock_phase == SPI_Configurations.Clock_Phase.Low_0) config-> Port -> CR1 &= ~SPI_CR1_CPHA;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	8b9b      	ldrh	r3, [r3, #28]
 8002e28:	2217      	movs	r2, #23
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d108      	bne.n	8002e40 <SPI_Init+0xcc>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f022 0201 	bic.w	r2, r2, #1
 8002e3c:	601a      	str	r2, [r3, #0]
 8002e3e:	e010      	b.n	8002e62 <SPI_Init+0xee>
		else if(config -> clock_phase == SPI_Configurations.Clock_Phase.High_1) config-> Port -> CR1 |= SPI_CR1_CPHA;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	8b9b      	ldrh	r3, [r3, #28]
 8002e44:	2216      	movs	r2, #22
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d108      	bne.n	8002e5c <SPI_Init+0xe8>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f042 0201 	orr.w	r2, r2, #1
 8002e58:	601a      	str	r2, [r3, #0]
 8002e5a:	e002      	b.n	8002e62 <SPI_Init+0xee>
		else {return -1;}
 8002e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8002e60:	e1b2      	b.n	80031c8 <SPI_Init+0x454>

		     if(config -> clock_polarity == SPI_Configurations.Clock_Polarity.Low_0) config-> Port -> CR1 &= ~SPI_CR1_CPOL;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	8b5b      	ldrh	r3, [r3, #26]
 8002e66:	2221      	movs	r2, #33	@ 0x21
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d108      	bne.n	8002e7e <SPI_Init+0x10a>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f022 0202 	bic.w	r2, r2, #2
 8002e7a:	601a      	str	r2, [r3, #0]
 8002e7c:	e010      	b.n	8002ea0 <SPI_Init+0x12c>
		else if(config -> clock_polarity == SPI_Configurations.Clock_Polarity.High_1) config-> Port -> CR1 |= SPI_CR1_CPOL;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	8b5b      	ldrh	r3, [r3, #26]
 8002e82:	2220      	movs	r2, #32
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d108      	bne.n	8002e9a <SPI_Init+0x126>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f042 0202 	orr.w	r2, r2, #2
 8002e96:	601a      	str	r2, [r3, #0]
 8002e98:	e002      	b.n	8002ea0 <SPI_Init+0x12c>
		else {return -1;}
 8002e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e9e:	e193      	b.n	80031c8 <SPI_Init+0x454>

		     if(config -> crc == SPI_Configurations.CRC_Enable.Disable) config -> Port -> CR1 &= ~SPI_CR1_CRCEN;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	8a1b      	ldrh	r3, [r3, #16]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d108      	bne.n	8002ebc <SPI_Init+0x148>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002eb8:	601a      	str	r2, [r3, #0]
 8002eba:	e010      	b.n	8002ede <SPI_Init+0x16a>
		else if(config -> crc == SPI_Configurations.CRC_Enable.Enable) config -> Port -> CR1 |=  SPI_CR1_CRCEN;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	8a1b      	ldrh	r3, [r3, #16]
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d108      	bne.n	8002ed8 <SPI_Init+0x164>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002ed4:	601a      	str	r2, [r3, #0]
 8002ed6:	e002      	b.n	8002ede <SPI_Init+0x16a>
		else {return -1;}
 8002ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8002edc:	e174      	b.n	80031c8 <SPI_Init+0x454>

		     if(config -> data_format == SPI_Configurations.Data_Format.Bit8) config -> Port -> CR1 &= ~SPI_CR1_DFF;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	8a5b      	ldrh	r3, [r3, #18]
 8002ee2:	220b      	movs	r2, #11
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d108      	bne.n	8002efa <SPI_Init+0x186>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	e010      	b.n	8002f1c <SPI_Init+0x1a8>
		else if(config -> data_format == SPI_Configurations.Data_Format.Bit16) config -> Port -> CR1 |=  SPI_CR1_DFF;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	8a5b      	ldrh	r3, [r3, #18]
 8002efe:	220c      	movs	r2, #12
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d108      	bne.n	8002f16 <SPI_Init+0x1a2>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f12:	601a      	str	r2, [r3, #0]
 8002f14:	e002      	b.n	8002f1c <SPI_Init+0x1a8>
		else {return -1;}
 8002f16:	f04f 33ff 	mov.w	r3, #4294967295
 8002f1a:	e155      	b.n	80031c8 <SPI_Init+0x454>

		     if(config -> frame_format == SPI_Configurations.Frame_Format.LSB_First) config -> Port -> CR1 |= SPI_CR1_LSBFIRST;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	8a9b      	ldrh	r3, [r3, #20]
 8002f20:	2218      	movs	r2, #24
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d108      	bne.n	8002f38 <SPI_Init+0x1c4>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002f34:	601a      	str	r2, [r3, #0]
 8002f36:	e010      	b.n	8002f5a <SPI_Init+0x1e6>
		else if(config -> frame_format == SPI_Configurations.Frame_Format.MSB_First) config -> Port -> CR1 &= ~SPI_CR1_LSBFIRST;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	8a9b      	ldrh	r3, [r3, #20]
 8002f3c:	2217      	movs	r2, #23
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d108      	bne.n	8002f54 <SPI_Init+0x1e0>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f50:	601a      	str	r2, [r3, #0]
 8002f52:	e002      	b.n	8002f5a <SPI_Init+0x1e6>
		else {return -1;}
 8002f54:	f04f 33ff 	mov.w	r3, #4294967295
 8002f58:	e136      	b.n	80031c8 <SPI_Init+0x454>

		     if(config->prescaler == SPI_Configurations.Prescaler.CLK_div_2) config -> Port -> CR1 &=   ~SPI_CR1_BR;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	8adb      	ldrh	r3, [r3, #22]
 8002f5e:	2228      	movs	r2, #40	@ 0x28
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d108      	bne.n	8002f76 <SPI_Init+0x202>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f022 0238 	bic.w	r2, r2, #56	@ 0x38
 8002f72:	601a      	str	r2, [r3, #0]
 8002f74:	e06b      	b.n	800304e <SPI_Init+0x2da>
		else if(config->prescaler == SPI_Configurations.Prescaler.CLK_div_4) config -> Port -> CR1 |=    SPI_CR1_BR_0;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	8adb      	ldrh	r3, [r3, #22]
 8002f7a:	2229      	movs	r2, #41	@ 0x29
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d108      	bne.n	8002f92 <SPI_Init+0x21e>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f042 0208 	orr.w	r2, r2, #8
 8002f8e:	601a      	str	r2, [r3, #0]
 8002f90:	e05d      	b.n	800304e <SPI_Init+0x2da>
		else if(config->prescaler == SPI_Configurations.Prescaler.CLK_div_8) config -> Port -> CR1 |=    SPI_CR1_BR_1;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	8adb      	ldrh	r3, [r3, #22]
 8002f96:	222a      	movs	r2, #42	@ 0x2a
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d108      	bne.n	8002fae <SPI_Init+0x23a>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f042 0210 	orr.w	r2, r2, #16
 8002faa:	601a      	str	r2, [r3, #0]
 8002fac:	e04f      	b.n	800304e <SPI_Init+0x2da>
		else if(config->prescaler == SPI_Configurations.Prescaler.CLK_div_16) config -> Port -> CR1 |=   SPI_CR1_BR_0 | SPI_CR1_BR_1;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	8adb      	ldrh	r3, [r3, #22]
 8002fb2:	222b      	movs	r2, #43	@ 0x2b
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d108      	bne.n	8002fca <SPI_Init+0x256>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f042 0218 	orr.w	r2, r2, #24
 8002fc6:	601a      	str	r2, [r3, #0]
 8002fc8:	e041      	b.n	800304e <SPI_Init+0x2da>
		else if(config->prescaler == SPI_Configurations.Prescaler.CLK_div_32) config -> Port -> CR1 |=   SPI_CR1_BR_2;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	8adb      	ldrh	r3, [r3, #22]
 8002fce:	222c      	movs	r2, #44	@ 0x2c
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d108      	bne.n	8002fe6 <SPI_Init+0x272>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f042 0220 	orr.w	r2, r2, #32
 8002fe2:	601a      	str	r2, [r3, #0]
 8002fe4:	e033      	b.n	800304e <SPI_Init+0x2da>
		else if(config->prescaler == SPI_Configurations.Prescaler.CLK_div_64) config -> Port -> CR1 |=   SPI_CR1_BR_2 | SPI_CR1_BR_0;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	8adb      	ldrh	r3, [r3, #22]
 8002fea:	222d      	movs	r2, #45	@ 0x2d
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d108      	bne.n	8003002 <SPI_Init+0x28e>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f042 0228 	orr.w	r2, r2, #40	@ 0x28
 8002ffe:	601a      	str	r2, [r3, #0]
 8003000:	e025      	b.n	800304e <SPI_Init+0x2da>
		else if(config->prescaler == SPI_Configurations.Prescaler.CLK_div_128) config -> Port -> CR1 |=  SPI_CR1_BR_2 | SPI_CR1_BR_1;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	8adb      	ldrh	r3, [r3, #22]
 8003006:	222e      	movs	r2, #46	@ 0x2e
 8003008:	4293      	cmp	r3, r2
 800300a:	d10f      	bne.n	800302c <SPI_Init+0x2b8>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 800301a:	601a      	str	r2, [r3, #0]
 800301c:	e017      	b.n	800304e <SPI_Init+0x2da>
 800301e:	bf00      	nop
 8003020:	40013000 	.word	0x40013000
 8003024:	40003800 	.word	0x40003800
 8003028:	40003c00 	.word	0x40003c00
		else if(config->prescaler == SPI_Configurations.Prescaler.CLK_div_256) config -> Port -> CR1 |=  SPI_CR1_BR_2 | SPI_CR1_BR_1 | SPI_CR1_BR_0;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	8adb      	ldrh	r3, [r3, #22]
 8003030:	222f      	movs	r2, #47	@ 0x2f
 8003032:	4293      	cmp	r3, r2
 8003034:	d108      	bne.n	8003048 <SPI_Init+0x2d4>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f042 0238 	orr.w	r2, r2, #56	@ 0x38
 8003044:	601a      	str	r2, [r3, #0]
 8003046:	e002      	b.n	800304e <SPI_Init+0x2da>
		else {return -1;}
 8003048:	f04f 33ff 	mov.w	r3, #4294967295
 800304c:	e0bc      	b.n	80031c8 <SPI_Init+0x454>

		     if(config->type == SPI_Configurations.Type.Master) config -> Port -> CR1 |= SPI_CR1_MSTR;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	8b1b      	ldrh	r3, [r3, #24]
 8003052:	2232      	movs	r2, #50	@ 0x32
 8003054:	4293      	cmp	r3, r2
 8003056:	d108      	bne.n	800306a <SPI_Init+0x2f6>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f042 0204 	orr.w	r2, r2, #4
 8003066:	601a      	str	r2, [r3, #0]
 8003068:	e010      	b.n	800308c <SPI_Init+0x318>
		else if(config->type == SPI_Configurations.Type.Slave) config -> Port -> CR1 &= ~SPI_CR1_MSTR;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	8b1b      	ldrh	r3, [r3, #24]
 800306e:	2233      	movs	r2, #51	@ 0x33
 8003070:	4293      	cmp	r3, r2
 8003072:	d108      	bne.n	8003086 <SPI_Init+0x312>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f022 0204 	bic.w	r2, r2, #4
 8003082:	601a      	str	r2, [r3, #0]
 8003084:	e002      	b.n	800308c <SPI_Init+0x318>
		else {return -1;}
 8003086:	f04f 33ff 	mov.w	r3, #4294967295
 800308a:	e09d      	b.n	80031c8 <SPI_Init+0x454>

		     if(config->interrupt == SPI_Configurations.Interrupts.Disable) config -> Port ->  CR2 &= ~(SPI_CR2_TXEIE | SPI_CR2_RXNEIE | SPI_CR2_ERRIE);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	8bdb      	ldrh	r3, [r3, #30]
 8003090:	2246      	movs	r2, #70	@ 0x46
 8003092:	4293      	cmp	r3, r2
 8003094:	d108      	bne.n	80030a8 <SPI_Init+0x334>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	685a      	ldr	r2, [r3, #4]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80030a4:	605a      	str	r2, [r3, #4]
 80030a6:	e02c      	b.n	8003102 <SPI_Init+0x38e>
		else if(config->interrupt == SPI_Configurations.Interrupts.Tx_Buffer_Empty) config -> Port ->  CR2 |= SPI_CR2_TXEIE;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	8bdb      	ldrh	r3, [r3, #30]
 80030ac:	2249      	movs	r2, #73	@ 0x49
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d108      	bne.n	80030c4 <SPI_Init+0x350>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	685a      	ldr	r2, [r3, #4]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80030c0:	605a      	str	r2, [r3, #4]
 80030c2:	e01e      	b.n	8003102 <SPI_Init+0x38e>
		else if(config->interrupt == SPI_Configurations.Interrupts.RX_Buffer_not_Empty) config -> Port ->  CR2 |= SPI_CR2_RXNEIE ;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	8bdb      	ldrh	r3, [r3, #30]
 80030c8:	2248      	movs	r2, #72	@ 0x48
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d108      	bne.n	80030e0 <SPI_Init+0x36c>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	685a      	ldr	r2, [r3, #4]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80030dc:	605a      	str	r2, [r3, #4]
 80030de:	e010      	b.n	8003102 <SPI_Init+0x38e>
		else if(config->interrupt == SPI_Configurations.Interrupts.Error) config -> Port ->  CR2 |=  SPI_CR2_ERRIE;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	8bdb      	ldrh	r3, [r3, #30]
 80030e4:	2247      	movs	r2, #71	@ 0x47
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d108      	bne.n	80030fc <SPI_Init+0x388>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	685a      	ldr	r2, [r3, #4]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f042 0220 	orr.w	r2, r2, #32
 80030f8:	605a      	str	r2, [r3, #4]
 80030fa:	e002      	b.n	8003102 <SPI_Init+0x38e>
		else { return -1;}
 80030fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003100:	e062      	b.n	80031c8 <SPI_Init+0x454>




		if(config -> dma == SPI_Configurations.DMA_Type.RX_DMA_Disable){
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	8c1b      	ldrh	r3, [r3, #32]
 8003106:	2240      	movs	r2, #64	@ 0x40
 8003108:	4293      	cmp	r3, r2
 800310a:	d108      	bne.n	800311e <SPI_Init+0x3aa>
		    config -> Port -> CR2 &= ~SPI_CR2_RXDMAEN;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	685a      	ldr	r2, [r3, #4]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f022 0201 	bic.w	r2, r2, #1
 800311a:	605a      	str	r2, [r3, #4]
 800311c:	e01f      	b.n	800315e <SPI_Init+0x3ea>
		 }
		else if(config -> dma == SPI_Configurations.DMA_Type.RX_DMA_Enable)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	8c1b      	ldrh	r3, [r3, #32]
 8003122:	223f      	movs	r2, #63	@ 0x3f
 8003124:	4293      	cmp	r3, r2
 8003126:	d11a      	bne.n	800315e <SPI_Init+0x3ea>
		{
//			config -> Port -> CR2 |=  SPI_CR2_RXDMAEN;
//			config -> Port -> CR2 |=  SPI_CR2_TXDMAEN;
			if(config -> Port == SPI1){
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a28      	ldr	r2, [pc, #160]	@ (80031d0 <SPI_Init+0x45c>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d102      	bne.n	8003138 <SPI_Init+0x3c4>
				xDMA1_RX_Init();
 8003132:	f7ff f90f 	bl	8002354 <xDMA1_RX_Init>
 8003136:	e012      	b.n	800315e <SPI_Init+0x3ea>
			}
			else if(config -> Port == SPI2){
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a25      	ldr	r2, [pc, #148]	@ (80031d4 <SPI_Init+0x460>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d102      	bne.n	8003148 <SPI_Init+0x3d4>
				xDMA2_RX_Init();
 8003142:	f7ff f933 	bl	80023ac <xDMA2_RX_Init>
 8003146:	e00a      	b.n	800315e <SPI_Init+0x3ea>
			}
			else if(config -> Port == SPI3){
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a22      	ldr	r2, [pc, #136]	@ (80031d8 <SPI_Init+0x464>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d102      	bne.n	8003158 <SPI_Init+0x3e4>
				xDMA3_RX_Init();
 8003152:	f7ff f957 	bl	8002404 <xDMA3_RX_Init>
 8003156:	e002      	b.n	800315e <SPI_Init+0x3ea>
			}
			else {return -1;}
 8003158:	f04f 33ff 	mov.w	r3, #4294967295
 800315c:	e034      	b.n	80031c8 <SPI_Init+0x454>
		}

		if(config -> dma == SPI_Configurations.DMA_Type.TX_DMA_Disable){
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	8c1b      	ldrh	r3, [r3, #32]
 8003162:	223e      	movs	r2, #62	@ 0x3e
 8003164:	4293      	cmp	r3, r2
 8003166:	d108      	bne.n	800317a <SPI_Init+0x406>
			config -> Port -> CR2 &= ~SPI_CR2_TXDMAEN;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	685a      	ldr	r2, [r3, #4]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f022 0202 	bic.w	r2, r2, #2
 8003176:	605a      	str	r2, [r3, #4]
		if(config -> dma == SPI_Configurations.DMA_Type.TX_DMA_Disable){
 8003178:	e025      	b.n	80031c6 <SPI_Init+0x452>
		}
		else if(config -> dma == SPI_Configurations.DMA_Type.TX_DMA_Enable){
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	8c1b      	ldrh	r3, [r3, #32]
 800317e:	223d      	movs	r2, #61	@ 0x3d
 8003180:	4293      	cmp	r3, r2
 8003182:	d11a      	bne.n	80031ba <SPI_Init+0x446>
//			config -> Port -> CR2 |=  SPI_CR2_TXDMAEN;
			if(config -> Port == SPI1){
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a11      	ldr	r2, [pc, #68]	@ (80031d0 <SPI_Init+0x45c>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d102      	bne.n	8003194 <SPI_Init+0x420>
				xDMA1_TX_Init();
 800318e:	f7ff f857 	bl	8002240 <xDMA1_TX_Init>
		if(config -> dma == SPI_Configurations.DMA_Type.TX_DMA_Disable){
 8003192:	e018      	b.n	80031c6 <SPI_Init+0x452>
			}
			else if(config -> Port == SPI2){
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a0e      	ldr	r2, [pc, #56]	@ (80031d4 <SPI_Init+0x460>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d102      	bne.n	80031a4 <SPI_Init+0x430>
				xDMA2_TX_Init();
 800319e:	f7ff f881 	bl	80022a4 <xDMA2_TX_Init>
		if(config -> dma == SPI_Configurations.DMA_Type.TX_DMA_Disable){
 80031a2:	e010      	b.n	80031c6 <SPI_Init+0x452>
			}
			else if(config -> Port == SPI3){
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a0b      	ldr	r2, [pc, #44]	@ (80031d8 <SPI_Init+0x464>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d102      	bne.n	80031b4 <SPI_Init+0x440>
				xDMA3_TX_Init();
 80031ae:	f7ff f8a5 	bl	80022fc <xDMA3_TX_Init>
		if(config -> dma == SPI_Configurations.DMA_Type.TX_DMA_Disable){
 80031b2:	e008      	b.n	80031c6 <SPI_Init+0x452>
			}
			else {return -1;}
 80031b4:	f04f 33ff 	mov.w	r3, #4294967295
 80031b8:	e006      	b.n	80031c8 <SPI_Init+0x454>
		}
		else {return -1;}
 80031ba:	f04f 33ff 	mov.w	r3, #4294967295
 80031be:	e003      	b.n	80031c8 <SPI_Init+0x454>


	}
	else
	{
		return -1;
 80031c0:	f04f 33ff 	mov.w	r3, #4294967295
 80031c4:	e000      	b.n	80031c8 <SPI_Init+0x454>
	}

	return 1;
 80031c6:	2301      	movs	r3, #1
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031d0:	40013000 	.word	0x40013000
 80031d4:	40003800 	.word	0x40003800
 80031d8:	40003c00 	.word	0x40003c00

080031dc <SPI_Enable>:
 * This function enables the SPI peripheral, allowing data transmission and reception.
 *
 * @param[in] config Pointer to the SPI configuration structure.
 */
void SPI_Enable(SPI_Config *config)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
	config->Port -> CR1 |= SPI_CR1_SPE;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80031f2:	601a      	str	r2, [r3, #0]
}
 80031f4:	bf00      	nop
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <SPI_TRX_Byte>:
 * @param[in] config Pointer to the SPI configuration structure.
 * @param[in] tx_data Data to transmit.
 * @return uint16_t Received data.
 */
uint16_t SPI_TRX_Byte(SPI_Config *config,uint16_t tx_data)
{
 8003200:	b480      	push	{r7}
 8003202:	b085      	sub	sp, #20
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	460b      	mov	r3, r1
 800320a:	807b      	strh	r3, [r7, #2]
	volatile uint16_t temp = 0;
 800320c:	2300      	movs	r3, #0
 800320e:	81fb      	strh	r3, [r7, #14]
	while (!(config->Port->SR & SPI_SR_TXE));
 8003210:	bf00      	nop
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d0f8      	beq.n	8003212 <SPI_TRX_Byte+0x12>
	config->Port -> DR = tx_data;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	887a      	ldrh	r2, [r7, #2]
 8003226:	60da      	str	r2, [r3, #12]
	while (!(config->Port->SR & SPI_SR_RXNE));
 8003228:	bf00      	nop
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f003 0301 	and.w	r3, r3, #1
 8003234:	2b00      	cmp	r3, #0
 8003236:	d0f8      	beq.n	800322a <SPI_TRX_Byte+0x2a>
	temp = config->Port -> DR;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	b29b      	uxth	r3, r3
 8003240:	81fb      	strh	r3, [r7, #14]
	while (!(config->Port->SR & SPI_SR_TXE));
 8003242:	bf00      	nop
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d0f8      	beq.n	8003244 <SPI_TRX_Byte+0x44>
	while (config->Port->SR & SPI_SR_BSY);
 8003252:	bf00      	nop
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800325e:	2b00      	cmp	r3, #0
 8003260:	d1f8      	bne.n	8003254 <SPI_TRX_Byte+0x54>
	return temp;
 8003262:	89fb      	ldrh	r3, [r7, #14]
 8003264:	b29b      	uxth	r3, r3
}
 8003266:	4618      	mov	r0, r3
 8003268:	3714      	adds	r7, #20
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
	...

08003274 <SPI_TRX_Buffer>:
 * @param[in] tx_length Length of the transmit buffer.
 * @param[in] rx_length Length of the receive buffer.
 * @return int8_t Returns 1 on success, -1 on failure.
 */
int8_t SPI_TRX_Buffer(SPI_Config *config, uint16_t *tx_buffer,uint16_t *rx_buffer, uint16_t tx_length, uint16_t rx_length)
{
 8003274:	b590      	push	{r4, r7, lr}
 8003276:	b087      	sub	sp, #28
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]
 8003280:	807b      	strh	r3, [r7, #2]

	if((config->dma & SPI_Configurations.DMA_Type.RX_DMA_Enable) || (config->dma & SPI_Configurations.DMA_Type.TX_DMA_Enable))
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	8c1b      	ldrh	r3, [r3, #32]
 8003286:	461a      	mov	r2, r3
 8003288:	233f      	movs	r3, #63	@ 0x3f
 800328a:	4013      	ands	r3, r2
 800328c:	2b00      	cmp	r3, #0
 800328e:	d107      	bne.n	80032a0 <SPI_TRX_Buffer+0x2c>
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	8c1b      	ldrh	r3, [r3, #32]
 8003294:	461a      	mov	r2, r3
 8003296:	233d      	movs	r3, #61	@ 0x3d
 8003298:	4013      	ands	r3, r2
 800329a:	2b00      	cmp	r3, #0
 800329c:	f000 8182 	beq.w	80035a4 <SPI_TRX_Buffer+0x330>
	{
		if(config->Port == SPI1)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a93      	ldr	r2, [pc, #588]	@ (80034f4 <SPI_TRX_Buffer+0x280>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	f040 808c 	bne.w	80033c4 <SPI_TRX_Buffer+0x150>
		{
			xDMA1_TX.memory_address = (uint32_t)&tx_buffer[0];
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	4a92      	ldr	r2, [pc, #584]	@ (80034f8 <SPI_TRX_Buffer+0x284>)
 80032b0:	6313      	str	r3, [r2, #48]	@ 0x30
			if(config->data_format == SPI_Configurations.Data_Format.Bit8) xDMA1_TX.memory_data_size = DMA_Configuration.Memory_Data_Size.byte;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	8a5b      	ldrh	r3, [r3, #18]
 80032b6:	220b      	movs	r2, #11
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d103      	bne.n	80032c4 <SPI_TRX_Buffer+0x50>
 80032bc:	2200      	movs	r2, #0
 80032be:	4b8e      	ldr	r3, [pc, #568]	@ (80034f8 <SPI_TRX_Buffer+0x284>)
 80032c0:	629a      	str	r2, [r3, #40]	@ 0x28
 80032c2:	e008      	b.n	80032d6 <SPI_TRX_Buffer+0x62>
			else if(config->data_format == SPI_Configurations.Data_Format.Bit16) xDMA1_TX.memory_data_size = DMA_Configuration.Memory_Data_Size.half_word;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	8a5b      	ldrh	r3, [r3, #18]
 80032c8:	220c      	movs	r2, #12
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d103      	bne.n	80032d6 <SPI_TRX_Buffer+0x62>
 80032ce:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80032d2:	4b89      	ldr	r3, [pc, #548]	@ (80034f8 <SPI_TRX_Buffer+0x284>)
 80032d4:	629a      	str	r2, [r3, #40]	@ 0x28
			xDMA1_TX.peripheral_address = (uint32_t)&config->Port->DR;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	330c      	adds	r3, #12
 80032dc:	461a      	mov	r2, r3
 80032de:	4b86      	ldr	r3, [pc, #536]	@ (80034f8 <SPI_TRX_Buffer+0x284>)
 80032e0:	62da      	str	r2, [r3, #44]	@ 0x2c
			if(config->data_format == SPI_Configurations.Data_Format.Bit8) xDMA1_TX.peripheral_data_size = DMA_Configuration.Peripheral_Data_Size.byte;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	8a5b      	ldrh	r3, [r3, #18]
 80032e6:	220b      	movs	r2, #11
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d103      	bne.n	80032f4 <SPI_TRX_Buffer+0x80>
 80032ec:	2200      	movs	r2, #0
 80032ee:	4b82      	ldr	r3, [pc, #520]	@ (80034f8 <SPI_TRX_Buffer+0x284>)
 80032f0:	625a      	str	r2, [r3, #36]	@ 0x24
 80032f2:	e008      	b.n	8003306 <SPI_TRX_Buffer+0x92>
			else if(config->data_format == SPI_Configurations.Data_Format.Bit16) xDMA1_TX.peripheral_data_size = DMA_Configuration.Peripheral_Data_Size.half_word;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	8a5b      	ldrh	r3, [r3, #18]
 80032f8:	220c      	movs	r2, #12
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d103      	bne.n	8003306 <SPI_TRX_Buffer+0x92>
 80032fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003302:	4b7d      	ldr	r3, [pc, #500]	@ (80034f8 <SPI_TRX_Buffer+0x284>)
 8003304:	625a      	str	r2, [r3, #36]	@ 0x24
			xDMA1_TX.buffer_length = tx_length;
 8003306:	4a7c      	ldr	r2, [pc, #496]	@ (80034f8 <SPI_TRX_Buffer+0x284>)
 8003308:	887b      	ldrh	r3, [r7, #2]
 800330a:	8693      	strh	r3, [r2, #52]	@ 0x34
			xDMA1_TX.memory_pointer_increment = DMA_Configuration.Memory_Pointer_Increment.Enable;
 800330c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003310:	b29a      	uxth	r2, r3
 8003312:	4b79      	ldr	r3, [pc, #484]	@ (80034f8 <SPI_TRX_Buffer+0x284>)
 8003314:	841a      	strh	r2, [r3, #32]
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			xDMA1_RX.memory_address = (uint32_t)&rx_buffer[0];
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a78      	ldr	r2, [pc, #480]	@ (80034fc <SPI_TRX_Buffer+0x288>)
 800331a:	6313      	str	r3, [r2, #48]	@ 0x30
			if(config->data_format == SPI_Configurations.Data_Format.Bit8) xDMA1_TX.memory_data_size = DMA_Configuration.Memory_Data_Size.byte;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	8a5b      	ldrh	r3, [r3, #18]
 8003320:	220b      	movs	r2, #11
 8003322:	4293      	cmp	r3, r2
 8003324:	d103      	bne.n	800332e <SPI_TRX_Buffer+0xba>
 8003326:	2200      	movs	r2, #0
 8003328:	4b73      	ldr	r3, [pc, #460]	@ (80034f8 <SPI_TRX_Buffer+0x284>)
 800332a:	629a      	str	r2, [r3, #40]	@ 0x28
 800332c:	e008      	b.n	8003340 <SPI_TRX_Buffer+0xcc>
			else if(config->data_format == SPI_Configurations.Data_Format.Bit16) xDMA1_TX.memory_data_size = DMA_Configuration.Memory_Data_Size.half_word;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	8a5b      	ldrh	r3, [r3, #18]
 8003332:	220c      	movs	r2, #12
 8003334:	4293      	cmp	r3, r2
 8003336:	d103      	bne.n	8003340 <SPI_TRX_Buffer+0xcc>
 8003338:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800333c:	4b6e      	ldr	r3, [pc, #440]	@ (80034f8 <SPI_TRX_Buffer+0x284>)
 800333e:	629a      	str	r2, [r3, #40]	@ 0x28
			xDMA1_RX.peripheral_address = (uint32_t)&config->Port->DR;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	330c      	adds	r3, #12
 8003346:	461a      	mov	r2, r3
 8003348:	4b6c      	ldr	r3, [pc, #432]	@ (80034fc <SPI_TRX_Buffer+0x288>)
 800334a:	62da      	str	r2, [r3, #44]	@ 0x2c
			if(config->data_format == SPI_Configurations.Data_Format.Bit8) xDMA1_TX.peripheral_data_size = DMA_Configuration.Peripheral_Data_Size.byte;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	8a5b      	ldrh	r3, [r3, #18]
 8003350:	220b      	movs	r2, #11
 8003352:	4293      	cmp	r3, r2
 8003354:	d103      	bne.n	800335e <SPI_TRX_Buffer+0xea>
 8003356:	2200      	movs	r2, #0
 8003358:	4b67      	ldr	r3, [pc, #412]	@ (80034f8 <SPI_TRX_Buffer+0x284>)
 800335a:	625a      	str	r2, [r3, #36]	@ 0x24
 800335c:	e008      	b.n	8003370 <SPI_TRX_Buffer+0xfc>
			else if(config->data_format == SPI_Configurations.Data_Format.Bit16) xDMA1_TX.peripheral_data_size = DMA_Configuration.Peripheral_Data_Size.half_word;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	8a5b      	ldrh	r3, [r3, #18]
 8003362:	220c      	movs	r2, #12
 8003364:	4293      	cmp	r3, r2
 8003366:	d103      	bne.n	8003370 <SPI_TRX_Buffer+0xfc>
 8003368:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800336c:	4b62      	ldr	r3, [pc, #392]	@ (80034f8 <SPI_TRX_Buffer+0x284>)
 800336e:	625a      	str	r2, [r3, #36]	@ 0x24
			xDMA1_RX.buffer_length = rx_length;
 8003370:	4a62      	ldr	r2, [pc, #392]	@ (80034fc <SPI_TRX_Buffer+0x288>)
 8003372:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003374:	8693      	strh	r3, [r2, #52]	@ 0x34

			DMA_Set_Target(&xDMA1_TX);
 8003376:	4860      	ldr	r0, [pc, #384]	@ (80034f8 <SPI_TRX_Buffer+0x284>)
 8003378:	f7fe fbfe 	bl	8001b78 <DMA_Set_Target>
//			DMA_Set_Target(&xDMA1_RX);
			DMA_Set_Trigger(&xDMA1_TX);
 800337c:	485e      	ldr	r0, [pc, #376]	@ (80034f8 <SPI_TRX_Buffer+0x284>)
 800337e:	f7fe fc5b 	bl	8001c38 <DMA_Set_Trigger>

			config -> Port -> CR2 |=  SPI_CR2_RXDMAEN;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	685a      	ldr	r2, [r3, #4]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f042 0201 	orr.w	r2, r2, #1
 8003390:	605a      	str	r2, [r3, #4]
			config -> Port -> CR2 |=  SPI_CR2_TXDMAEN;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	685a      	ldr	r2, [r3, #4]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f042 0202 	orr.w	r2, r2, #2
 80033a0:	605a      	str	r2, [r3, #4]

			while(TX_Complete == 0){}
 80033a2:	bf00      	nop
 80033a4:	4b56      	ldr	r3, [pc, #344]	@ (8003500 <SPI_TRX_Buffer+0x28c>)
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	f083 0301 	eor.w	r3, r3, #1
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d1f7      	bne.n	80033a4 <SPI_TRX_Buffer+0x130>
			TX_Complete = 0;
 80033b4:	4b52      	ldr	r3, [pc, #328]	@ (8003500 <SPI_TRX_Buffer+0x28c>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	701a      	strb	r2, [r3, #0]
			Delay_us(1);
 80033ba:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80033be:	f7fe fee3 	bl	8002188 <Delay_us>
		if(config->Port == SPI1)
 80033c2:	e107      	b.n	80035d4 <SPI_TRX_Buffer+0x360>

		}
		else if(config->Port == SPI2)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a4e      	ldr	r2, [pc, #312]	@ (8003504 <SPI_TRX_Buffer+0x290>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d168      	bne.n	80034a0 <SPI_TRX_Buffer+0x22c>
		{
			xDMA2_TX.memory_address = (uint32_t)&tx_buffer[0];
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	4a4d      	ldr	r2, [pc, #308]	@ (8003508 <SPI_TRX_Buffer+0x294>)
 80033d2:	6313      	str	r3, [r2, #48]	@ 0x30
			if(config->data_format == SPI_Configurations.Data_Format.Bit8) xDMA2_TX.memory_data_size = DMA_Configuration.Memory_Data_Size.byte;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	8a5b      	ldrh	r3, [r3, #18]
 80033d8:	220b      	movs	r2, #11
 80033da:	4293      	cmp	r3, r2
 80033dc:	d103      	bne.n	80033e6 <SPI_TRX_Buffer+0x172>
 80033de:	2200      	movs	r2, #0
 80033e0:	4b49      	ldr	r3, [pc, #292]	@ (8003508 <SPI_TRX_Buffer+0x294>)
 80033e2:	629a      	str	r2, [r3, #40]	@ 0x28
 80033e4:	e008      	b.n	80033f8 <SPI_TRX_Buffer+0x184>
			else if(config->data_format == SPI_Configurations.Data_Format.Bit16) xDMA2_TX.memory_data_size = DMA_Configuration.Peripheral_Data_Size.half_word;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	8a5b      	ldrh	r3, [r3, #18]
 80033ea:	220c      	movs	r2, #12
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d103      	bne.n	80033f8 <SPI_TRX_Buffer+0x184>
 80033f0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80033f4:	4b44      	ldr	r3, [pc, #272]	@ (8003508 <SPI_TRX_Buffer+0x294>)
 80033f6:	629a      	str	r2, [r3, #40]	@ 0x28

			xDMA2_TX.peripheral_address = (uint32_t)&config->Port->DR;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	330c      	adds	r3, #12
 80033fe:	461a      	mov	r2, r3
 8003400:	4b41      	ldr	r3, [pc, #260]	@ (8003508 <SPI_TRX_Buffer+0x294>)
 8003402:	62da      	str	r2, [r3, #44]	@ 0x2c
			if(config->data_format == SPI_Configurations.Data_Format.Bit8) xDMA2_TX.peripheral_data_size = DMA_Configuration.Memory_Data_Size.byte;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	8a5b      	ldrh	r3, [r3, #18]
 8003408:	220b      	movs	r2, #11
 800340a:	4293      	cmp	r3, r2
 800340c:	d103      	bne.n	8003416 <SPI_TRX_Buffer+0x1a2>
 800340e:	2200      	movs	r2, #0
 8003410:	4b3d      	ldr	r3, [pc, #244]	@ (8003508 <SPI_TRX_Buffer+0x294>)
 8003412:	625a      	str	r2, [r3, #36]	@ 0x24
 8003414:	e008      	b.n	8003428 <SPI_TRX_Buffer+0x1b4>
			else if(config->data_format == SPI_Configurations.Data_Format.Bit16) xDMA2_TX.peripheral_data_size = DMA_Configuration.Peripheral_Data_Size.half_word;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	8a5b      	ldrh	r3, [r3, #18]
 800341a:	220c      	movs	r2, #12
 800341c:	4293      	cmp	r3, r2
 800341e:	d103      	bne.n	8003428 <SPI_TRX_Buffer+0x1b4>
 8003420:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003424:	4b38      	ldr	r3, [pc, #224]	@ (8003508 <SPI_TRX_Buffer+0x294>)
 8003426:	625a      	str	r2, [r3, #36]	@ 0x24
			xDMA2_RX.buffer_length = tx_length + 2;
 8003428:	887b      	ldrh	r3, [r7, #2]
 800342a:	3302      	adds	r3, #2
 800342c:	b29a      	uxth	r2, r3
 800342e:	4b37      	ldr	r3, [pc, #220]	@ (800350c <SPI_TRX_Buffer+0x298>)
 8003430:	869a      	strh	r2, [r3, #52]	@ 0x34

			xDMA2_RX.memory_address = (uint32_t)&rx_buffer[0];
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a35      	ldr	r2, [pc, #212]	@ (800350c <SPI_TRX_Buffer+0x298>)
 8003436:	6313      	str	r3, [r2, #48]	@ 0x30
			if(config->data_format == SPI_Configurations.Data_Format.Bit8) xDMA2_TX.memory_data_size = DMA_Configuration.Memory_Data_Size.byte;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	8a5b      	ldrh	r3, [r3, #18]
 800343c:	220b      	movs	r2, #11
 800343e:	4293      	cmp	r3, r2
 8003440:	d103      	bne.n	800344a <SPI_TRX_Buffer+0x1d6>
 8003442:	2200      	movs	r2, #0
 8003444:	4b30      	ldr	r3, [pc, #192]	@ (8003508 <SPI_TRX_Buffer+0x294>)
 8003446:	629a      	str	r2, [r3, #40]	@ 0x28
 8003448:	e008      	b.n	800345c <SPI_TRX_Buffer+0x1e8>
			else if(config->data_format == SPI_Configurations.Data_Format.Bit16) xDMA2_TX.memory_data_size = DMA_Configuration.Peripheral_Data_Size.half_word;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	8a5b      	ldrh	r3, [r3, #18]
 800344e:	220c      	movs	r2, #12
 8003450:	4293      	cmp	r3, r2
 8003452:	d103      	bne.n	800345c <SPI_TRX_Buffer+0x1e8>
 8003454:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003458:	4b2b      	ldr	r3, [pc, #172]	@ (8003508 <SPI_TRX_Buffer+0x294>)
 800345a:	629a      	str	r2, [r3, #40]	@ 0x28

			xDMA2_RX.peripheral_address = (uint32_t)&config->Port->DR;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	330c      	adds	r3, #12
 8003462:	461a      	mov	r2, r3
 8003464:	4b29      	ldr	r3, [pc, #164]	@ (800350c <SPI_TRX_Buffer+0x298>)
 8003466:	62da      	str	r2, [r3, #44]	@ 0x2c
			if(config->data_format == SPI_Configurations.Data_Format.Bit8) xDMA2_TX.peripheral_data_size = DMA_Configuration.Memory_Data_Size.byte;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	8a5b      	ldrh	r3, [r3, #18]
 800346c:	220b      	movs	r2, #11
 800346e:	4293      	cmp	r3, r2
 8003470:	d103      	bne.n	800347a <SPI_TRX_Buffer+0x206>
 8003472:	2200      	movs	r2, #0
 8003474:	4b24      	ldr	r3, [pc, #144]	@ (8003508 <SPI_TRX_Buffer+0x294>)
 8003476:	625a      	str	r2, [r3, #36]	@ 0x24
 8003478:	e008      	b.n	800348c <SPI_TRX_Buffer+0x218>
			else if(config->data_format == SPI_Configurations.Data_Format.Bit16) xDMA2_TX.peripheral_data_size = DMA_Configuration.Peripheral_Data_Size.half_word;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	8a5b      	ldrh	r3, [r3, #18]
 800347e:	220c      	movs	r2, #12
 8003480:	4293      	cmp	r3, r2
 8003482:	d103      	bne.n	800348c <SPI_TRX_Buffer+0x218>
 8003484:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003488:	4b1f      	ldr	r3, [pc, #124]	@ (8003508 <SPI_TRX_Buffer+0x294>)
 800348a:	625a      	str	r2, [r3, #36]	@ 0x24
			xDMA2_RX.buffer_length = rx_length;
 800348c:	4a1f      	ldr	r2, [pc, #124]	@ (800350c <SPI_TRX_Buffer+0x298>)
 800348e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003490:	8693      	strh	r3, [r2, #52]	@ 0x34

			DMA_Set_Target(&xDMA2_TX);
 8003492:	481d      	ldr	r0, [pc, #116]	@ (8003508 <SPI_TRX_Buffer+0x294>)
 8003494:	f7fe fb70 	bl	8001b78 <DMA_Set_Target>
//			DMA_Set_Target(&xDMA2_RX);
			DMA_Set_Trigger(&xDMA2_TX);
 8003498:	481b      	ldr	r0, [pc, #108]	@ (8003508 <SPI_TRX_Buffer+0x294>)
 800349a:	f7fe fbcd 	bl	8001c38 <DMA_Set_Trigger>
		if(config->Port == SPI1)
 800349e:	e099      	b.n	80035d4 <SPI_TRX_Buffer+0x360>

//			while((SPI2_TX_DMA_Flag.Transfer_Complete_Flag == false)){}
//			SPI2_TX_DMA_Flag.Transfer_Complete_Flag = false;

		}
		else if(config->Port == SPI3)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a1a      	ldr	r2, [pc, #104]	@ (8003510 <SPI_TRX_Buffer+0x29c>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d179      	bne.n	800359e <SPI_TRX_Buffer+0x32a>
		{
			xDMA3_TX.memory_address = (uint32_t)&tx_buffer[0];
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	4a19      	ldr	r2, [pc, #100]	@ (8003514 <SPI_TRX_Buffer+0x2a0>)
 80034ae:	6313      	str	r3, [r2, #48]	@ 0x30
			if(config->data_format == SPI_Configurations.Data_Format.Bit8) xDMA3_TX.memory_data_size = DMA_Configuration.Memory_Data_Size.byte;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	8a5b      	ldrh	r3, [r3, #18]
 80034b4:	220b      	movs	r2, #11
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d103      	bne.n	80034c2 <SPI_TRX_Buffer+0x24e>
 80034ba:	2200      	movs	r2, #0
 80034bc:	4b15      	ldr	r3, [pc, #84]	@ (8003514 <SPI_TRX_Buffer+0x2a0>)
 80034be:	629a      	str	r2, [r3, #40]	@ 0x28
 80034c0:	e008      	b.n	80034d4 <SPI_TRX_Buffer+0x260>
			else if(config->data_format == SPI_Configurations.Data_Format.Bit16) xDMA3_TX.memory_data_size = DMA_Configuration.Peripheral_Data_Size.half_word;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	8a5b      	ldrh	r3, [r3, #18]
 80034c6:	220c      	movs	r2, #12
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d103      	bne.n	80034d4 <SPI_TRX_Buffer+0x260>
 80034cc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80034d0:	4b10      	ldr	r3, [pc, #64]	@ (8003514 <SPI_TRX_Buffer+0x2a0>)
 80034d2:	629a      	str	r2, [r3, #40]	@ 0x28

			xDMA3_TX.peripheral_address = (uint32_t)&config->Port->DR;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	330c      	adds	r3, #12
 80034da:	461a      	mov	r2, r3
 80034dc:	4b0d      	ldr	r3, [pc, #52]	@ (8003514 <SPI_TRX_Buffer+0x2a0>)
 80034de:	62da      	str	r2, [r3, #44]	@ 0x2c
			if(config->data_format == SPI_Configurations.Data_Format.Bit8) xDMA3_TX.peripheral_data_size = DMA_Configuration.Memory_Data_Size.byte;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	8a5b      	ldrh	r3, [r3, #18]
 80034e4:	220b      	movs	r2, #11
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d116      	bne.n	8003518 <SPI_TRX_Buffer+0x2a4>
 80034ea:	2200      	movs	r2, #0
 80034ec:	4b09      	ldr	r3, [pc, #36]	@ (8003514 <SPI_TRX_Buffer+0x2a0>)
 80034ee:	625a      	str	r2, [r3, #36]	@ 0x24
 80034f0:	e01b      	b.n	800352a <SPI_TRX_Buffer+0x2b6>
 80034f2:	bf00      	nop
 80034f4:	40013000 	.word	0x40013000
 80034f8:	200000ac 	.word	0x200000ac
 80034fc:	20000104 	.word	0x20000104
 8003500:	200000a8 	.word	0x200000a8
 8003504:	40003800 	.word	0x40003800
 8003508:	2000015c 	.word	0x2000015c
 800350c:	200001b4 	.word	0x200001b4
 8003510:	40003c00 	.word	0x40003c00
 8003514:	2000020c 	.word	0x2000020c
			else if(config->data_format == SPI_Configurations.Data_Format.Bit16) xDMA3_TX.peripheral_data_size = DMA_Configuration.Peripheral_Data_Size.half_word;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	8a5b      	ldrh	r3, [r3, #18]
 800351c:	220c      	movs	r2, #12
 800351e:	4293      	cmp	r3, r2
 8003520:	d103      	bne.n	800352a <SPI_TRX_Buffer+0x2b6>
 8003522:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003526:	4b2e      	ldr	r3, [pc, #184]	@ (80035e0 <SPI_TRX_Buffer+0x36c>)
 8003528:	625a      	str	r2, [r3, #36]	@ 0x24
			xDMA3_RX.buffer_length = tx_length;
 800352a:	4a2e      	ldr	r2, [pc, #184]	@ (80035e4 <SPI_TRX_Buffer+0x370>)
 800352c:	887b      	ldrh	r3, [r7, #2]
 800352e:	8693      	strh	r3, [r2, #52]	@ 0x34

			xDMA3_RX.memory_address = (uint32_t)&rx_buffer[0];
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a2c      	ldr	r2, [pc, #176]	@ (80035e4 <SPI_TRX_Buffer+0x370>)
 8003534:	6313      	str	r3, [r2, #48]	@ 0x30
			if(config->data_format == SPI_Configurations.Data_Format.Bit8) xDMA3_TX.memory_data_size = DMA_Configuration.Memory_Data_Size.byte;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	8a5b      	ldrh	r3, [r3, #18]
 800353a:	220b      	movs	r2, #11
 800353c:	4293      	cmp	r3, r2
 800353e:	d103      	bne.n	8003548 <SPI_TRX_Buffer+0x2d4>
 8003540:	2200      	movs	r2, #0
 8003542:	4b27      	ldr	r3, [pc, #156]	@ (80035e0 <SPI_TRX_Buffer+0x36c>)
 8003544:	629a      	str	r2, [r3, #40]	@ 0x28
 8003546:	e008      	b.n	800355a <SPI_TRX_Buffer+0x2e6>
			else if(config->data_format == SPI_Configurations.Data_Format.Bit16) xDMA3_TX.memory_data_size = DMA_Configuration.Peripheral_Data_Size.half_word;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	8a5b      	ldrh	r3, [r3, #18]
 800354c:	220c      	movs	r2, #12
 800354e:	4293      	cmp	r3, r2
 8003550:	d103      	bne.n	800355a <SPI_TRX_Buffer+0x2e6>
 8003552:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003556:	4b22      	ldr	r3, [pc, #136]	@ (80035e0 <SPI_TRX_Buffer+0x36c>)
 8003558:	629a      	str	r2, [r3, #40]	@ 0x28

			xDMA3_RX.peripheral_address = (uint32_t)&config->Port->DR;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	330c      	adds	r3, #12
 8003560:	461a      	mov	r2, r3
 8003562:	4b20      	ldr	r3, [pc, #128]	@ (80035e4 <SPI_TRX_Buffer+0x370>)
 8003564:	62da      	str	r2, [r3, #44]	@ 0x2c
			if(config->data_format == SPI_Configurations.Data_Format.Bit8) xDMA3_TX.peripheral_data_size = DMA_Configuration.Memory_Data_Size.byte;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	8a5b      	ldrh	r3, [r3, #18]
 800356a:	220b      	movs	r2, #11
 800356c:	4293      	cmp	r3, r2
 800356e:	d103      	bne.n	8003578 <SPI_TRX_Buffer+0x304>
 8003570:	2200      	movs	r2, #0
 8003572:	4b1b      	ldr	r3, [pc, #108]	@ (80035e0 <SPI_TRX_Buffer+0x36c>)
 8003574:	625a      	str	r2, [r3, #36]	@ 0x24
 8003576:	e008      	b.n	800358a <SPI_TRX_Buffer+0x316>
			else if(config->data_format == SPI_Configurations.Data_Format.Bit16) xDMA3_TX.peripheral_data_size = DMA_Configuration.Peripheral_Data_Size.half_word;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	8a5b      	ldrh	r3, [r3, #18]
 800357c:	220c      	movs	r2, #12
 800357e:	4293      	cmp	r3, r2
 8003580:	d103      	bne.n	800358a <SPI_TRX_Buffer+0x316>
 8003582:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003586:	4b16      	ldr	r3, [pc, #88]	@ (80035e0 <SPI_TRX_Buffer+0x36c>)
 8003588:	625a      	str	r2, [r3, #36]	@ 0x24
			xDMA3_RX.buffer_length = rx_length;
 800358a:	4a16      	ldr	r2, [pc, #88]	@ (80035e4 <SPI_TRX_Buffer+0x370>)
 800358c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800358e:	8693      	strh	r3, [r2, #52]	@ 0x34

			DMA_Set_Target(&xDMA3_TX);
 8003590:	4813      	ldr	r0, [pc, #76]	@ (80035e0 <SPI_TRX_Buffer+0x36c>)
 8003592:	f7fe faf1 	bl	8001b78 <DMA_Set_Target>
//			DMA_Set_Target(&xDMA3_RX);
			DMA_Set_Trigger(&xDMA3_TX);
 8003596:	4812      	ldr	r0, [pc, #72]	@ (80035e0 <SPI_TRX_Buffer+0x36c>)
 8003598:	f7fe fb4e 	bl	8001c38 <DMA_Set_Trigger>
		if(config->Port == SPI1)
 800359c:	e01a      	b.n	80035d4 <SPI_TRX_Buffer+0x360>
//			SPI3_TX_DMA_Flag.Transfer_Complete_Flag = false;

		}
		else
		{
			return -1;
 800359e:	f04f 33ff 	mov.w	r3, #4294967295
 80035a2:	e018      	b.n	80035d6 <SPI_TRX_Buffer+0x362>
		}
	}
	else
	{
		for(uint16_t i = 0; i < tx_length; i++)
 80035a4:	2300      	movs	r3, #0
 80035a6:	82fb      	strh	r3, [r7, #22]
 80035a8:	e010      	b.n	80035cc <SPI_TRX_Buffer+0x358>
		{
			rx_buffer[i] = SPI_TRX_Byte(config,tx_buffer[i]);
 80035aa:	8afb      	ldrh	r3, [r7, #22]
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	68ba      	ldr	r2, [r7, #8]
 80035b0:	4413      	add	r3, r2
 80035b2:	8819      	ldrh	r1, [r3, #0]
 80035b4:	8afb      	ldrh	r3, [r7, #22]
 80035b6:	005b      	lsls	r3, r3, #1
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	18d4      	adds	r4, r2, r3
 80035bc:	68f8      	ldr	r0, [r7, #12]
 80035be:	f7ff fe1f 	bl	8003200 <SPI_TRX_Byte>
 80035c2:	4603      	mov	r3, r0
 80035c4:	8023      	strh	r3, [r4, #0]
		for(uint16_t i = 0; i < tx_length; i++)
 80035c6:	8afb      	ldrh	r3, [r7, #22]
 80035c8:	3301      	adds	r3, #1
 80035ca:	82fb      	strh	r3, [r7, #22]
 80035cc:	8afa      	ldrh	r2, [r7, #22]
 80035ce:	887b      	ldrh	r3, [r7, #2]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d3ea      	bcc.n	80035aa <SPI_TRX_Buffer+0x336>
		}
	}

	return 1;
 80035d4:	2301      	movs	r3, #1
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	371c      	adds	r7, #28
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd90      	pop	{r4, r7, pc}
 80035de:	bf00      	nop
 80035e0:	2000020c 	.word	0x2000020c
 80035e4:	20000264 	.word	0x20000264

080035e8 <SPI_NSS_High>:
 * This function sets the NSS pin to a high level, indicating the end of SPI communication.
 *
 * @param[in] config Pointer to the SPI configuration structure.
 */
void SPI_NSS_High(SPI_Config *config)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
	GPIO_Pin_High(config->NSS_Port, config->NSS_Pin);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	689a      	ldr	r2, [r3, #8]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	7b1b      	ldrb	r3, [r3, #12]
 80035f8:	4619      	mov	r1, r3
 80035fa:	4610      	mov	r0, r2
 80035fc:	f7fe fdff 	bl	80021fe <GPIO_Pin_High>
}
 8003600:	bf00      	nop
 8003602:	3708      	adds	r7, #8
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <SPI_NSS_Low>:
 * This function sets the NSS pin to a low level, indicating the start of SPI communication.
 *
 * @param[in] config Pointer to the SPI configuration structure.
 */
void SPI_NSS_Low(SPI_Config *config)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
	GPIO_Pin_Low(config->NSS_Port, config->NSS_Pin);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	689a      	ldr	r2, [r3, #8]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	7b1b      	ldrb	r3, [r3, #12]
 8003618:	4619      	mov	r1, r3
 800361a:	4610      	mov	r0, r2
 800361c:	f7fe fdda 	bl	80021d4 <GPIO_Pin_Low>
}
 8003620:	bf00      	nop
 8003622:	3708      	adds	r7, #8
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <TIM1_BRK_TIM9_IRQHandler>:
Timer_Config *__timer_13_config__;
Timer_Config *__timer_14_config__;



void TIM1_BRK_TIM9_IRQHandler(void) {
 8003628:	b580      	push	{r7, lr}
 800362a:	af00      	add	r7, sp, #0
    if (__timer_1_config__ ->ISR_Routines.Break_ISR) {
 800362c:	4b2b      	ldr	r3, [pc, #172]	@ (80036dc <TIM1_BRK_TIM9_IRQHandler+0xb4>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003634:	2b00      	cmp	r3, #0
 8003636:	d00a      	beq.n	800364e <TIM1_BRK_TIM9_IRQHandler+0x26>
    	__timer_1_config__ ->ISR_Routines.Break_ISR();
 8003638:	4b28      	ldr	r3, [pc, #160]	@ (80036dc <TIM1_BRK_TIM9_IRQHandler+0xb4>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003640:	4798      	blx	r3
    	TIM1->SR &= ~TIM_SR_BIF;  // Clear the Break interrupt flag
 8003642:	4b27      	ldr	r3, [pc, #156]	@ (80036e0 <TIM1_BRK_TIM9_IRQHandler+0xb8>)
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	4a26      	ldr	r2, [pc, #152]	@ (80036e0 <TIM1_BRK_TIM9_IRQHandler+0xb8>)
 8003648:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800364c:	6113      	str	r3, [r2, #16]
    }

    if (__timer_9_config__ ->ISR_Routines.Capture_Compare_1_ISR){
 800364e:	4b25      	ldr	r3, [pc, #148]	@ (80036e4 <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00a      	beq.n	8003670 <TIM1_BRK_TIM9_IRQHandler+0x48>
    	__timer_9_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 800365a:	4b22      	ldr	r3, [pc, #136]	@ (80036e4 <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003662:	4798      	blx	r3
    	TIM9->SR &= ~TIM_SR_CC1IF;  // Clear the Break interrupt flag
 8003664:	4b20      	ldr	r3, [pc, #128]	@ (80036e8 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	4a1f      	ldr	r2, [pc, #124]	@ (80036e8 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 800366a:	f023 0302 	bic.w	r3, r3, #2
 800366e:	6113      	str	r3, [r2, #16]
    }

    if (__timer_9_config__ ->ISR_Routines.Capture_Compare_2_ISR){
 8003670:	4b1c      	ldr	r3, [pc, #112]	@ (80036e4 <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003678:	2b00      	cmp	r3, #0
 800367a:	d00a      	beq.n	8003692 <TIM1_BRK_TIM9_IRQHandler+0x6a>
    	__timer_9_config__ ->ISR_Routines.Capture_Compare_2_ISR();
 800367c:	4b19      	ldr	r3, [pc, #100]	@ (80036e4 <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003684:	4798      	blx	r3
    	TIM9->SR &= ~TIM_SR_CC2IF;  // Clear the Break interrupt flag
 8003686:	4b18      	ldr	r3, [pc, #96]	@ (80036e8 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	4a17      	ldr	r2, [pc, #92]	@ (80036e8 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 800368c:	f023 0304 	bic.w	r3, r3, #4
 8003690:	6113      	str	r3, [r2, #16]
    }

    if (__timer_9_config__ ->ISR_Routines.Update_ISR){
 8003692:	4b14      	ldr	r3, [pc, #80]	@ (80036e4 <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00a      	beq.n	80036b4 <TIM1_BRK_TIM9_IRQHandler+0x8c>
    	__timer_9_config__ ->ISR_Routines.Update_ISR();
 800369e:	4b11      	ldr	r3, [pc, #68]	@ (80036e4 <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80036a6:	4798      	blx	r3
    	TIM9->SR &= ~TIM_SR_UIF;  // Clear the Break interrupt flag
 80036a8:	4b0f      	ldr	r3, [pc, #60]	@ (80036e8 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 80036aa:	691b      	ldr	r3, [r3, #16]
 80036ac:	4a0e      	ldr	r2, [pc, #56]	@ (80036e8 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 80036ae:	f023 0301 	bic.w	r3, r3, #1
 80036b2:	6113      	str	r3, [r2, #16]
    }

    if (__timer_9_config__ ->ISR_Routines.Trigger_ISR){
 80036b4:	4b0b      	ldr	r3, [pc, #44]	@ (80036e4 <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d00a      	beq.n	80036d6 <TIM1_BRK_TIM9_IRQHandler+0xae>
    	__timer_9_config__ ->ISR_Routines.Trigger_ISR();
 80036c0:	4b08      	ldr	r3, [pc, #32]	@ (80036e4 <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80036c8:	4798      	blx	r3
    	TIM9->SR &= ~TIM_SR_TIF;  // Clear the Break interrupt flag
 80036ca:	4b07      	ldr	r3, [pc, #28]	@ (80036e8 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	4a06      	ldr	r2, [pc, #24]	@ (80036e8 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 80036d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80036d4:	6113      	str	r3, [r2, #16]
    }

}
 80036d6:	bf00      	nop
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	200002bc 	.word	0x200002bc
 80036e0:	40010000 	.word	0x40010000
 80036e4:	200002dc 	.word	0x200002dc
 80036e8:	40014000 	.word	0x40014000

080036ec <TIM1_UP_TIM10_IRQHandler>:

void TIM1_UP_TIM10_IRQHandler(void) {
 80036ec:	b580      	push	{r7, lr}
 80036ee:	af00      	add	r7, sp, #0
    if (__timer_1_config__ ->ISR_Routines.Update_ISR) {
 80036f0:	4b1a      	ldr	r3, [pc, #104]	@ (800375c <TIM1_UP_TIM10_IRQHandler+0x70>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00a      	beq.n	8003712 <TIM1_UP_TIM10_IRQHandler+0x26>
    	__timer_1_config__ ->ISR_Routines.Update_ISR();
 80036fc:	4b17      	ldr	r3, [pc, #92]	@ (800375c <TIM1_UP_TIM10_IRQHandler+0x70>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003704:	4798      	blx	r3
    	TIM1->SR &= ~TIM_SR_UIF;  // Clear the Update interrupt flag
 8003706:	4b16      	ldr	r3, [pc, #88]	@ (8003760 <TIM1_UP_TIM10_IRQHandler+0x74>)
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	4a15      	ldr	r2, [pc, #84]	@ (8003760 <TIM1_UP_TIM10_IRQHandler+0x74>)
 800370c:	f023 0301 	bic.w	r3, r3, #1
 8003710:	6113      	str	r3, [r2, #16]
    }

    if (__timer_10_config__ ->ISR_Routines.Update_ISR) {
 8003712:	4b14      	ldr	r3, [pc, #80]	@ (8003764 <TIM1_UP_TIM10_IRQHandler+0x78>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800371a:	2b00      	cmp	r3, #0
 800371c:	d00a      	beq.n	8003734 <TIM1_UP_TIM10_IRQHandler+0x48>
    	__timer_10_config__ ->ISR_Routines.Update_ISR();
 800371e:	4b11      	ldr	r3, [pc, #68]	@ (8003764 <TIM1_UP_TIM10_IRQHandler+0x78>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003726:	4798      	blx	r3
    	TIM10->SR &= ~TIM_SR_UIF;  // Clear the Update interrupt flag
 8003728:	4b0f      	ldr	r3, [pc, #60]	@ (8003768 <TIM1_UP_TIM10_IRQHandler+0x7c>)
 800372a:	691b      	ldr	r3, [r3, #16]
 800372c:	4a0e      	ldr	r2, [pc, #56]	@ (8003768 <TIM1_UP_TIM10_IRQHandler+0x7c>)
 800372e:	f023 0301 	bic.w	r3, r3, #1
 8003732:	6113      	str	r3, [r2, #16]
    }

    if (__timer_10_config__ ->ISR_Routines.Capture_Compare_1_ISR) {
 8003734:	4b0b      	ldr	r3, [pc, #44]	@ (8003764 <TIM1_UP_TIM10_IRQHandler+0x78>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00a      	beq.n	8003756 <TIM1_UP_TIM10_IRQHandler+0x6a>
    	__timer_10_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 8003740:	4b08      	ldr	r3, [pc, #32]	@ (8003764 <TIM1_UP_TIM10_IRQHandler+0x78>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003748:	4798      	blx	r3
    	TIM10->SR &= ~TIM_SR_CC1IF;  // Clear the Update interrupt flag
 800374a:	4b07      	ldr	r3, [pc, #28]	@ (8003768 <TIM1_UP_TIM10_IRQHandler+0x7c>)
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	4a06      	ldr	r2, [pc, #24]	@ (8003768 <TIM1_UP_TIM10_IRQHandler+0x7c>)
 8003750:	f023 0302 	bic.w	r3, r3, #2
 8003754:	6113      	str	r3, [r2, #16]
    }

}
 8003756:	bf00      	nop
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	200002bc 	.word	0x200002bc
 8003760:	40010000 	.word	0x40010000
 8003764:	200002e0 	.word	0x200002e0
 8003768:	40014400 	.word	0x40014400

0800376c <TIM1_TRG_COM_TIM11_IRQHandler>:

void TIM1_TRG_COM_TIM11_IRQHandler(void) {
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0
    if (__timer_1_config__ ->ISR_Routines.Trigger_ISR) {
 8003770:	4b22      	ldr	r3, [pc, #136]	@ (80037fc <TIM1_TRG_COM_TIM11_IRQHandler+0x90>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00a      	beq.n	8003792 <TIM1_TRG_COM_TIM11_IRQHandler+0x26>
    	__timer_1_config__ ->ISR_Routines.Trigger_ISR();
 800377c:	4b1f      	ldr	r3, [pc, #124]	@ (80037fc <TIM1_TRG_COM_TIM11_IRQHandler+0x90>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003784:	4798      	blx	r3

    	TIM1->SR &= ~TIM_SR_TIF;  // Clear the Trigger interrupt flag
 8003786:	4b1e      	ldr	r3, [pc, #120]	@ (8003800 <TIM1_TRG_COM_TIM11_IRQHandler+0x94>)
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	4a1d      	ldr	r2, [pc, #116]	@ (8003800 <TIM1_TRG_COM_TIM11_IRQHandler+0x94>)
 800378c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003790:	6113      	str	r3, [r2, #16]
    }

    if (__timer_1_config__ ->ISR_Routines.Commutation_ISR) {
 8003792:	4b1a      	ldr	r3, [pc, #104]	@ (80037fc <TIM1_TRG_COM_TIM11_IRQHandler+0x90>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00a      	beq.n	80037b4 <TIM1_TRG_COM_TIM11_IRQHandler+0x48>
    	__timer_1_config__ ->ISR_Routines.Commutation_ISR();
 800379e:	4b17      	ldr	r3, [pc, #92]	@ (80037fc <TIM1_TRG_COM_TIM11_IRQHandler+0x90>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80037a6:	4798      	blx	r3

    	TIM1->SR &= ~TIM_SR_COMIF;  // Clear the Trigger interrupt flag
 80037a8:	4b15      	ldr	r3, [pc, #84]	@ (8003800 <TIM1_TRG_COM_TIM11_IRQHandler+0x94>)
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	4a14      	ldr	r2, [pc, #80]	@ (8003800 <TIM1_TRG_COM_TIM11_IRQHandler+0x94>)
 80037ae:	f023 0320 	bic.w	r3, r3, #32
 80037b2:	6113      	str	r3, [r2, #16]
    }

    if (__timer_11_config__ ->ISR_Routines.Update_ISR) {
 80037b4:	4b13      	ldr	r3, [pc, #76]	@ (8003804 <TIM1_TRG_COM_TIM11_IRQHandler+0x98>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00a      	beq.n	80037d6 <TIM1_TRG_COM_TIM11_IRQHandler+0x6a>
    	__timer_11_config__ ->ISR_Routines.Update_ISR();
 80037c0:	4b10      	ldr	r3, [pc, #64]	@ (8003804 <TIM1_TRG_COM_TIM11_IRQHandler+0x98>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80037c8:	4798      	blx	r3
    	TIM11->SR &= ~TIM_SR_UIF;  // Clear the Update interrupt flag
 80037ca:	4b0f      	ldr	r3, [pc, #60]	@ (8003808 <TIM1_TRG_COM_TIM11_IRQHandler+0x9c>)
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	4a0e      	ldr	r2, [pc, #56]	@ (8003808 <TIM1_TRG_COM_TIM11_IRQHandler+0x9c>)
 80037d0:	f023 0301 	bic.w	r3, r3, #1
 80037d4:	6113      	str	r3, [r2, #16]
    }

    if (__timer_11_config__ ->ISR_Routines.Capture_Compare_1_ISR) {
 80037d6:	4b0b      	ldr	r3, [pc, #44]	@ (8003804 <TIM1_TRG_COM_TIM11_IRQHandler+0x98>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00a      	beq.n	80037f8 <TIM1_TRG_COM_TIM11_IRQHandler+0x8c>
    	__timer_11_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 80037e2:	4b08      	ldr	r3, [pc, #32]	@ (8003804 <TIM1_TRG_COM_TIM11_IRQHandler+0x98>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037ea:	4798      	blx	r3
    	TIM11->SR &= ~TIM_SR_CC1IF;  // Clear the Update interrupt flag
 80037ec:	4b06      	ldr	r3, [pc, #24]	@ (8003808 <TIM1_TRG_COM_TIM11_IRQHandler+0x9c>)
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	4a05      	ldr	r2, [pc, #20]	@ (8003808 <TIM1_TRG_COM_TIM11_IRQHandler+0x9c>)
 80037f2:	f023 0302 	bic.w	r3, r3, #2
 80037f6:	6113      	str	r3, [r2, #16]
    }

}
 80037f8:	bf00      	nop
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	200002bc 	.word	0x200002bc
 8003800:	40010000 	.word	0x40010000
 8003804:	200002e4 	.word	0x200002e4
 8003808:	40014800 	.word	0x40014800

0800380c <TIM1_CC_IRQHandler>:

void TIM1_CC_IRQHandler(void) {
 800380c:	b580      	push	{r7, lr}
 800380e:	af00      	add	r7, sp, #0
    if (__timer_1_config__ ->ISR_Routines.Capture_Compare_1_ISR) {
 8003810:	4b22      	ldr	r3, [pc, #136]	@ (800389c <TIM1_CC_IRQHandler+0x90>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00a      	beq.n	8003832 <TIM1_CC_IRQHandler+0x26>
    	__timer_1_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 800381c:	4b1f      	ldr	r3, [pc, #124]	@ (800389c <TIM1_CC_IRQHandler+0x90>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003824:	4798      	blx	r3

    	TIM1->SR &= ~TIM_SR_CC1IF;  // Clear the Capture Compare interrupt flag
 8003826:	4b1e      	ldr	r3, [pc, #120]	@ (80038a0 <TIM1_CC_IRQHandler+0x94>)
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	4a1d      	ldr	r2, [pc, #116]	@ (80038a0 <TIM1_CC_IRQHandler+0x94>)
 800382c:	f023 0302 	bic.w	r3, r3, #2
 8003830:	6113      	str	r3, [r2, #16]
    }

    if (__timer_1_config__ ->ISR_Routines.Capture_Compare_2_ISR) {
 8003832:	4b1a      	ldr	r3, [pc, #104]	@ (800389c <TIM1_CC_IRQHandler+0x90>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00a      	beq.n	8003854 <TIM1_CC_IRQHandler+0x48>
    	__timer_1_config__ ->ISR_Routines.Capture_Compare_2_ISR();
 800383e:	4b17      	ldr	r3, [pc, #92]	@ (800389c <TIM1_CC_IRQHandler+0x90>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003846:	4798      	blx	r3

    	TIM1->SR &= ~TIM_SR_CC2IF;  // Clear the Capture Compare interrupt flag
 8003848:	4b15      	ldr	r3, [pc, #84]	@ (80038a0 <TIM1_CC_IRQHandler+0x94>)
 800384a:	691b      	ldr	r3, [r3, #16]
 800384c:	4a14      	ldr	r2, [pc, #80]	@ (80038a0 <TIM1_CC_IRQHandler+0x94>)
 800384e:	f023 0304 	bic.w	r3, r3, #4
 8003852:	6113      	str	r3, [r2, #16]
    }

    if (__timer_1_config__ ->ISR_Routines.Capture_Compare_3_ISR) {
 8003854:	4b11      	ldr	r3, [pc, #68]	@ (800389c <TIM1_CC_IRQHandler+0x90>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800385c:	2b00      	cmp	r3, #0
 800385e:	d00a      	beq.n	8003876 <TIM1_CC_IRQHandler+0x6a>
    	__timer_1_config__ ->ISR_Routines.Capture_Compare_3_ISR();
 8003860:	4b0e      	ldr	r3, [pc, #56]	@ (800389c <TIM1_CC_IRQHandler+0x90>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003868:	4798      	blx	r3

    	TIM1->SR &= ~TIM_SR_CC3IF;  // Clear the Capture Compare interrupt flag
 800386a:	4b0d      	ldr	r3, [pc, #52]	@ (80038a0 <TIM1_CC_IRQHandler+0x94>)
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	4a0c      	ldr	r2, [pc, #48]	@ (80038a0 <TIM1_CC_IRQHandler+0x94>)
 8003870:	f023 0308 	bic.w	r3, r3, #8
 8003874:	6113      	str	r3, [r2, #16]
    }

    if (__timer_1_config__ ->ISR_Routines.Capture_Compare_4_ISR) {
 8003876:	4b09      	ldr	r3, [pc, #36]	@ (800389c <TIM1_CC_IRQHandler+0x90>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00a      	beq.n	8003898 <TIM1_CC_IRQHandler+0x8c>
    	__timer_1_config__ ->ISR_Routines.Capture_Compare_4_ISR();
 8003882:	4b06      	ldr	r3, [pc, #24]	@ (800389c <TIM1_CC_IRQHandler+0x90>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800388a:	4798      	blx	r3

    	TIM1->SR &= ~TIM_SR_CC4IF;  // Clear the Capture Compare interrupt flag
 800388c:	4b04      	ldr	r3, [pc, #16]	@ (80038a0 <TIM1_CC_IRQHandler+0x94>)
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	4a03      	ldr	r2, [pc, #12]	@ (80038a0 <TIM1_CC_IRQHandler+0x94>)
 8003892:	f023 0310 	bic.w	r3, r3, #16
 8003896:	6113      	str	r3, [r2, #16]
    }
}
 8003898:	bf00      	nop
 800389a:	bd80      	pop	{r7, pc}
 800389c:	200002bc 	.word	0x200002bc
 80038a0:	40010000 	.word	0x40010000

080038a4 <TIM2_IRQHandler>:


void TIM2_IRQHandler(void)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	af00      	add	r7, sp, #0
    if (__timer_2_config__ ->ISR_Routines.Capture_Compare_1_ISR) {
 80038a8:	4b39      	ldr	r3, [pc, #228]	@ (8003990 <TIM2_IRQHandler+0xec>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d00c      	beq.n	80038ce <TIM2_IRQHandler+0x2a>
    	__timer_2_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 80038b4:	4b36      	ldr	r3, [pc, #216]	@ (8003990 <TIM2_IRQHandler+0xec>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038bc:	4798      	blx	r3

    	TIM2->SR &= ~TIM_SR_CC1IF;  // Clear the Capture Compare interrupt flag
 80038be:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80038c2:	691b      	ldr	r3, [r3, #16]
 80038c4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80038c8:	f023 0302 	bic.w	r3, r3, #2
 80038cc:	6113      	str	r3, [r2, #16]
    }
    if (__timer_2_config__ ->ISR_Routines.Capture_Compare_2_ISR) {
 80038ce:	4b30      	ldr	r3, [pc, #192]	@ (8003990 <TIM2_IRQHandler+0xec>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00c      	beq.n	80038f4 <TIM2_IRQHandler+0x50>
    	__timer_2_config__ ->ISR_Routines.Capture_Compare_2_ISR();
 80038da:	4b2d      	ldr	r3, [pc, #180]	@ (8003990 <TIM2_IRQHandler+0xec>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038e2:	4798      	blx	r3

    	TIM2->SR &= ~TIM_SR_CC2IF;  // Clear the Capture Compare interrupt flag
 80038e4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80038ee:	f023 0304 	bic.w	r3, r3, #4
 80038f2:	6113      	str	r3, [r2, #16]
    }
    if (__timer_2_config__ ->ISR_Routines.Capture_Compare_3_ISR) {
 80038f4:	4b26      	ldr	r3, [pc, #152]	@ (8003990 <TIM2_IRQHandler+0xec>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d00c      	beq.n	800391a <TIM2_IRQHandler+0x76>
    	__timer_2_config__ ->ISR_Routines.Capture_Compare_3_ISR();
 8003900:	4b23      	ldr	r3, [pc, #140]	@ (8003990 <TIM2_IRQHandler+0xec>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003908:	4798      	blx	r3

    	TIM2->SR &= ~TIM_SR_CC3IF;  // Clear the Capture Compare interrupt flag
 800390a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800390e:	691b      	ldr	r3, [r3, #16]
 8003910:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003914:	f023 0308 	bic.w	r3, r3, #8
 8003918:	6113      	str	r3, [r2, #16]
    }
    if (__timer_2_config__ ->ISR_Routines.Capture_Compare_4_ISR) {
 800391a:	4b1d      	ldr	r3, [pc, #116]	@ (8003990 <TIM2_IRQHandler+0xec>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00c      	beq.n	8003940 <TIM2_IRQHandler+0x9c>
    	__timer_2_config__ ->ISR_Routines.Capture_Compare_4_ISR();
 8003926:	4b1a      	ldr	r3, [pc, #104]	@ (8003990 <TIM2_IRQHandler+0xec>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800392e:	4798      	blx	r3

    	TIM2->SR &= ~TIM_SR_CC4IF;  // Clear the Capture Compare interrupt flag
 8003930:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800393a:	f023 0310 	bic.w	r3, r3, #16
 800393e:	6113      	str	r3, [r2, #16]
    }
    if (__timer_2_config__ ->ISR_Routines.Update_ISR) {
 8003940:	4b13      	ldr	r3, [pc, #76]	@ (8003990 <TIM2_IRQHandler+0xec>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003948:	2b00      	cmp	r3, #0
 800394a:	d00c      	beq.n	8003966 <TIM2_IRQHandler+0xc2>
    	__timer_2_config__ ->ISR_Routines.Update_ISR();
 800394c:	4b10      	ldr	r3, [pc, #64]	@ (8003990 <TIM2_IRQHandler+0xec>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003954:	4798      	blx	r3

    	TIM2->SR &= ~TIM_SR_UIF;  // Clear the Capture Compare interrupt flag
 8003956:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003960:	f023 0301 	bic.w	r3, r3, #1
 8003964:	6113      	str	r3, [r2, #16]
    }
    if (__timer_2_config__ ->ISR_Routines.Trigger_ISR) {
 8003966:	4b0a      	ldr	r3, [pc, #40]	@ (8003990 <TIM2_IRQHandler+0xec>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00c      	beq.n	800398c <TIM2_IRQHandler+0xe8>
    	__timer_2_config__ ->ISR_Routines.Trigger_ISR();
 8003972:	4b07      	ldr	r3, [pc, #28]	@ (8003990 <TIM2_IRQHandler+0xec>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800397a:	4798      	blx	r3

    	TIM2->SR &= ~TIM_SR_TIF;  // Clear the Capture Compare interrupt flag
 800397c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003986:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800398a:	6113      	str	r3, [r2, #16]
    }
}
 800398c:	bf00      	nop
 800398e:	bd80      	pop	{r7, pc}
 8003990:	200002c0 	.word	0x200002c0

08003994 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0
    if (__timer_3_config__ ->ISR_Routines.Capture_Compare_1_ISR) {
 8003998:	4b33      	ldr	r3, [pc, #204]	@ (8003a68 <TIM3_IRQHandler+0xd4>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d00a      	beq.n	80039ba <TIM3_IRQHandler+0x26>
    	__timer_3_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 80039a4:	4b30      	ldr	r3, [pc, #192]	@ (8003a68 <TIM3_IRQHandler+0xd4>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039ac:	4798      	blx	r3

    	TIM3->SR &= ~TIM_SR_CC1IF;  // Clear the Capture Compare interrupt flag
 80039ae:	4b2f      	ldr	r3, [pc, #188]	@ (8003a6c <TIM3_IRQHandler+0xd8>)
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	4a2e      	ldr	r2, [pc, #184]	@ (8003a6c <TIM3_IRQHandler+0xd8>)
 80039b4:	f023 0302 	bic.w	r3, r3, #2
 80039b8:	6113      	str	r3, [r2, #16]
    }
    if (__timer_3_config__ ->ISR_Routines.Capture_Compare_2_ISR) {
 80039ba:	4b2b      	ldr	r3, [pc, #172]	@ (8003a68 <TIM3_IRQHandler+0xd4>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00a      	beq.n	80039dc <TIM3_IRQHandler+0x48>
    	__timer_3_config__ ->ISR_Routines.Capture_Compare_2_ISR();
 80039c6:	4b28      	ldr	r3, [pc, #160]	@ (8003a68 <TIM3_IRQHandler+0xd4>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039ce:	4798      	blx	r3

    	TIM3->SR &= ~TIM_SR_CC2IF;  // Clear the Capture Compare interrupt flag
 80039d0:	4b26      	ldr	r3, [pc, #152]	@ (8003a6c <TIM3_IRQHandler+0xd8>)
 80039d2:	691b      	ldr	r3, [r3, #16]
 80039d4:	4a25      	ldr	r2, [pc, #148]	@ (8003a6c <TIM3_IRQHandler+0xd8>)
 80039d6:	f023 0304 	bic.w	r3, r3, #4
 80039da:	6113      	str	r3, [r2, #16]
    }
    if (__timer_3_config__ ->ISR_Routines.Capture_Compare_3_ISR) {
 80039dc:	4b22      	ldr	r3, [pc, #136]	@ (8003a68 <TIM3_IRQHandler+0xd4>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d00a      	beq.n	80039fe <TIM3_IRQHandler+0x6a>
    	__timer_3_config__ ->ISR_Routines.Capture_Compare_3_ISR();
 80039e8:	4b1f      	ldr	r3, [pc, #124]	@ (8003a68 <TIM3_IRQHandler+0xd4>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80039f0:	4798      	blx	r3

    	TIM3->SR &= ~TIM_SR_CC3IF;  // Clear the Capture Compare interrupt flag
 80039f2:	4b1e      	ldr	r3, [pc, #120]	@ (8003a6c <TIM3_IRQHandler+0xd8>)
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	4a1d      	ldr	r2, [pc, #116]	@ (8003a6c <TIM3_IRQHandler+0xd8>)
 80039f8:	f023 0308 	bic.w	r3, r3, #8
 80039fc:	6113      	str	r3, [r2, #16]
    }
    if (__timer_3_config__ ->ISR_Routines.Capture_Compare_4_ISR) {
 80039fe:	4b1a      	ldr	r3, [pc, #104]	@ (8003a68 <TIM3_IRQHandler+0xd4>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00a      	beq.n	8003a20 <TIM3_IRQHandler+0x8c>
    	__timer_3_config__ ->ISR_Routines.Capture_Compare_4_ISR();
 8003a0a:	4b17      	ldr	r3, [pc, #92]	@ (8003a68 <TIM3_IRQHandler+0xd4>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003a12:	4798      	blx	r3

    	TIM3->SR &= ~TIM_SR_CC4IF;  // Clear the Capture Compare interrupt flag
 8003a14:	4b15      	ldr	r3, [pc, #84]	@ (8003a6c <TIM3_IRQHandler+0xd8>)
 8003a16:	691b      	ldr	r3, [r3, #16]
 8003a18:	4a14      	ldr	r2, [pc, #80]	@ (8003a6c <TIM3_IRQHandler+0xd8>)
 8003a1a:	f023 0310 	bic.w	r3, r3, #16
 8003a1e:	6113      	str	r3, [r2, #16]
    }
    if (__timer_3_config__ ->ISR_Routines.Update_ISR) {
 8003a20:	4b11      	ldr	r3, [pc, #68]	@ (8003a68 <TIM3_IRQHandler+0xd4>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d00a      	beq.n	8003a42 <TIM3_IRQHandler+0xae>
    	__timer_3_config__ ->ISR_Routines.Update_ISR();
 8003a2c:	4b0e      	ldr	r3, [pc, #56]	@ (8003a68 <TIM3_IRQHandler+0xd4>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a34:	4798      	blx	r3

    	TIM3->SR &= ~TIM_SR_UIF;  // Clear the Capture Compare interrupt flag
 8003a36:	4b0d      	ldr	r3, [pc, #52]	@ (8003a6c <TIM3_IRQHandler+0xd8>)
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	4a0c      	ldr	r2, [pc, #48]	@ (8003a6c <TIM3_IRQHandler+0xd8>)
 8003a3c:	f023 0301 	bic.w	r3, r3, #1
 8003a40:	6113      	str	r3, [r2, #16]
    }
    if (__timer_3_config__ ->ISR_Routines.Trigger_ISR) {
 8003a42:	4b09      	ldr	r3, [pc, #36]	@ (8003a68 <TIM3_IRQHandler+0xd4>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00a      	beq.n	8003a64 <TIM3_IRQHandler+0xd0>
    	__timer_3_config__ ->ISR_Routines.Trigger_ISR();
 8003a4e:	4b06      	ldr	r3, [pc, #24]	@ (8003a68 <TIM3_IRQHandler+0xd4>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003a56:	4798      	blx	r3

    	TIM3->SR &= ~TIM_SR_TIF;  // Clear the Capture Compare interrupt flag
 8003a58:	4b04      	ldr	r3, [pc, #16]	@ (8003a6c <TIM3_IRQHandler+0xd8>)
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	4a03      	ldr	r2, [pc, #12]	@ (8003a6c <TIM3_IRQHandler+0xd8>)
 8003a5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a62:	6113      	str	r3, [r2, #16]
    }
}
 8003a64:	bf00      	nop
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	200002c4 	.word	0x200002c4
 8003a6c:	40000400 	.word	0x40000400

08003a70 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	af00      	add	r7, sp, #0
    if (__timer_4_config__ ->ISR_Routines.Capture_Compare_1_ISR) {
 8003a74:	4b33      	ldr	r3, [pc, #204]	@ (8003b44 <TIM4_IRQHandler+0xd4>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00a      	beq.n	8003a96 <TIM4_IRQHandler+0x26>
    	__timer_4_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 8003a80:	4b30      	ldr	r3, [pc, #192]	@ (8003b44 <TIM4_IRQHandler+0xd4>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a88:	4798      	blx	r3

    	TIM4->SR &= ~TIM_SR_CC1IF;  // Clear the Capture Compare interrupt flag
 8003a8a:	4b2f      	ldr	r3, [pc, #188]	@ (8003b48 <TIM4_IRQHandler+0xd8>)
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	4a2e      	ldr	r2, [pc, #184]	@ (8003b48 <TIM4_IRQHandler+0xd8>)
 8003a90:	f023 0302 	bic.w	r3, r3, #2
 8003a94:	6113      	str	r3, [r2, #16]
    }
    if (__timer_4_config__ ->ISR_Routines.Capture_Compare_2_ISR) {
 8003a96:	4b2b      	ldr	r3, [pc, #172]	@ (8003b44 <TIM4_IRQHandler+0xd4>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00a      	beq.n	8003ab8 <TIM4_IRQHandler+0x48>
    	__timer_4_config__ ->ISR_Routines.Capture_Compare_2_ISR();
 8003aa2:	4b28      	ldr	r3, [pc, #160]	@ (8003b44 <TIM4_IRQHandler+0xd4>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003aaa:	4798      	blx	r3

    	TIM4->SR &= ~TIM_SR_CC2IF;  // Clear the Capture Compare interrupt flag
 8003aac:	4b26      	ldr	r3, [pc, #152]	@ (8003b48 <TIM4_IRQHandler+0xd8>)
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	4a25      	ldr	r2, [pc, #148]	@ (8003b48 <TIM4_IRQHandler+0xd8>)
 8003ab2:	f023 0304 	bic.w	r3, r3, #4
 8003ab6:	6113      	str	r3, [r2, #16]
    }
    if (__timer_4_config__ ->ISR_Routines.Capture_Compare_3_ISR) {
 8003ab8:	4b22      	ldr	r3, [pc, #136]	@ (8003b44 <TIM4_IRQHandler+0xd4>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00a      	beq.n	8003ada <TIM4_IRQHandler+0x6a>
    	__timer_4_config__ ->ISR_Routines.Capture_Compare_3_ISR();
 8003ac4:	4b1f      	ldr	r3, [pc, #124]	@ (8003b44 <TIM4_IRQHandler+0xd4>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003acc:	4798      	blx	r3

    	TIM4->SR &= ~TIM_SR_CC3IF;  // Clear the Capture Compare interrupt flag
 8003ace:	4b1e      	ldr	r3, [pc, #120]	@ (8003b48 <TIM4_IRQHandler+0xd8>)
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	4a1d      	ldr	r2, [pc, #116]	@ (8003b48 <TIM4_IRQHandler+0xd8>)
 8003ad4:	f023 0308 	bic.w	r3, r3, #8
 8003ad8:	6113      	str	r3, [r2, #16]
    }
    if (__timer_4_config__ ->ISR_Routines.Capture_Compare_4_ISR) {
 8003ada:	4b1a      	ldr	r3, [pc, #104]	@ (8003b44 <TIM4_IRQHandler+0xd4>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00a      	beq.n	8003afc <TIM4_IRQHandler+0x8c>
    	__timer_4_config__ ->ISR_Routines.Capture_Compare_4_ISR();
 8003ae6:	4b17      	ldr	r3, [pc, #92]	@ (8003b44 <TIM4_IRQHandler+0xd4>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003aee:	4798      	blx	r3

    	TIM4->SR &= ~TIM_SR_CC4IF;  // Clear the Capture Compare interrupt flag
 8003af0:	4b15      	ldr	r3, [pc, #84]	@ (8003b48 <TIM4_IRQHandler+0xd8>)
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	4a14      	ldr	r2, [pc, #80]	@ (8003b48 <TIM4_IRQHandler+0xd8>)
 8003af6:	f023 0310 	bic.w	r3, r3, #16
 8003afa:	6113      	str	r3, [r2, #16]
    }
    if (__timer_4_config__ ->ISR_Routines.Update_ISR) {
 8003afc:	4b11      	ldr	r3, [pc, #68]	@ (8003b44 <TIM4_IRQHandler+0xd4>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00a      	beq.n	8003b1e <TIM4_IRQHandler+0xae>
    	__timer_4_config__ ->ISR_Routines.Update_ISR();
 8003b08:	4b0e      	ldr	r3, [pc, #56]	@ (8003b44 <TIM4_IRQHandler+0xd4>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b10:	4798      	blx	r3

    	TIM4->SR &= ~TIM_SR_UIF;  // Clear the Capture Compare interrupt flag
 8003b12:	4b0d      	ldr	r3, [pc, #52]	@ (8003b48 <TIM4_IRQHandler+0xd8>)
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	4a0c      	ldr	r2, [pc, #48]	@ (8003b48 <TIM4_IRQHandler+0xd8>)
 8003b18:	f023 0301 	bic.w	r3, r3, #1
 8003b1c:	6113      	str	r3, [r2, #16]
    }
    if (__timer_4_config__ ->ISR_Routines.Trigger_ISR) {
 8003b1e:	4b09      	ldr	r3, [pc, #36]	@ (8003b44 <TIM4_IRQHandler+0xd4>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00a      	beq.n	8003b40 <TIM4_IRQHandler+0xd0>
    	__timer_4_config__ ->ISR_Routines.Trigger_ISR();
 8003b2a:	4b06      	ldr	r3, [pc, #24]	@ (8003b44 <TIM4_IRQHandler+0xd4>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003b32:	4798      	blx	r3

    	TIM4->SR &= ~TIM_SR_TIF;  // Clear the Capture Compare interrupt flag
 8003b34:	4b04      	ldr	r3, [pc, #16]	@ (8003b48 <TIM4_IRQHandler+0xd8>)
 8003b36:	691b      	ldr	r3, [r3, #16]
 8003b38:	4a03      	ldr	r2, [pc, #12]	@ (8003b48 <TIM4_IRQHandler+0xd8>)
 8003b3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b3e:	6113      	str	r3, [r2, #16]
    }
}
 8003b40:	bf00      	nop
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	200002c8 	.word	0x200002c8
 8003b48:	40000800 	.word	0x40000800

08003b4c <TIM5_IRQHandler>:

void TIM5_IRQHandler(void)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	af00      	add	r7, sp, #0
    if (__timer_5_config__ ->ISR_Routines.Capture_Compare_1_ISR) {
 8003b50:	4b33      	ldr	r3, [pc, #204]	@ (8003c20 <TIM5_IRQHandler+0xd4>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00a      	beq.n	8003b72 <TIM5_IRQHandler+0x26>
    	__timer_5_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 8003b5c:	4b30      	ldr	r3, [pc, #192]	@ (8003c20 <TIM5_IRQHandler+0xd4>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b64:	4798      	blx	r3

    	TIM5->SR &= ~TIM_SR_CC1IF;  // Clear the Capture Compare interrupt flag
 8003b66:	4b2f      	ldr	r3, [pc, #188]	@ (8003c24 <TIM5_IRQHandler+0xd8>)
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	4a2e      	ldr	r2, [pc, #184]	@ (8003c24 <TIM5_IRQHandler+0xd8>)
 8003b6c:	f023 0302 	bic.w	r3, r3, #2
 8003b70:	6113      	str	r3, [r2, #16]
    }
    if (__timer_5_config__ ->ISR_Routines.Capture_Compare_2_ISR) {
 8003b72:	4b2b      	ldr	r3, [pc, #172]	@ (8003c20 <TIM5_IRQHandler+0xd4>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00a      	beq.n	8003b94 <TIM5_IRQHandler+0x48>
    	__timer_5_config__ ->ISR_Routines.Capture_Compare_2_ISR();
 8003b7e:	4b28      	ldr	r3, [pc, #160]	@ (8003c20 <TIM5_IRQHandler+0xd4>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b86:	4798      	blx	r3

    	TIM5->SR &= ~TIM_SR_CC2IF;  // Clear the Capture Compare interrupt flag
 8003b88:	4b26      	ldr	r3, [pc, #152]	@ (8003c24 <TIM5_IRQHandler+0xd8>)
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	4a25      	ldr	r2, [pc, #148]	@ (8003c24 <TIM5_IRQHandler+0xd8>)
 8003b8e:	f023 0304 	bic.w	r3, r3, #4
 8003b92:	6113      	str	r3, [r2, #16]
    }
    if (__timer_5_config__ ->ISR_Routines.Capture_Compare_3_ISR) {
 8003b94:	4b22      	ldr	r3, [pc, #136]	@ (8003c20 <TIM5_IRQHandler+0xd4>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d00a      	beq.n	8003bb6 <TIM5_IRQHandler+0x6a>
    	__timer_5_config__ ->ISR_Routines.Capture_Compare_3_ISR();
 8003ba0:	4b1f      	ldr	r3, [pc, #124]	@ (8003c20 <TIM5_IRQHandler+0xd4>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ba8:	4798      	blx	r3

    	TIM5->SR &= ~TIM_SR_CC3IF;  // Clear the Capture Compare interrupt flag
 8003baa:	4b1e      	ldr	r3, [pc, #120]	@ (8003c24 <TIM5_IRQHandler+0xd8>)
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	4a1d      	ldr	r2, [pc, #116]	@ (8003c24 <TIM5_IRQHandler+0xd8>)
 8003bb0:	f023 0308 	bic.w	r3, r3, #8
 8003bb4:	6113      	str	r3, [r2, #16]
    }
    if (__timer_5_config__ ->ISR_Routines.Capture_Compare_4_ISR) {
 8003bb6:	4b1a      	ldr	r3, [pc, #104]	@ (8003c20 <TIM5_IRQHandler+0xd4>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00a      	beq.n	8003bd8 <TIM5_IRQHandler+0x8c>
    	__timer_5_config__ ->ISR_Routines.Capture_Compare_4_ISR();
 8003bc2:	4b17      	ldr	r3, [pc, #92]	@ (8003c20 <TIM5_IRQHandler+0xd4>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003bca:	4798      	blx	r3

    	TIM5->SR &= ~TIM_SR_CC4IF;  // Clear the Capture Compare interrupt flag
 8003bcc:	4b15      	ldr	r3, [pc, #84]	@ (8003c24 <TIM5_IRQHandler+0xd8>)
 8003bce:	691b      	ldr	r3, [r3, #16]
 8003bd0:	4a14      	ldr	r2, [pc, #80]	@ (8003c24 <TIM5_IRQHandler+0xd8>)
 8003bd2:	f023 0310 	bic.w	r3, r3, #16
 8003bd6:	6113      	str	r3, [r2, #16]
    }
    if (__timer_5_config__ ->ISR_Routines.Update_ISR) {
 8003bd8:	4b11      	ldr	r3, [pc, #68]	@ (8003c20 <TIM5_IRQHandler+0xd4>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d00a      	beq.n	8003bfa <TIM5_IRQHandler+0xae>
    	__timer_5_config__ ->ISR_Routines.Update_ISR();
 8003be4:	4b0e      	ldr	r3, [pc, #56]	@ (8003c20 <TIM5_IRQHandler+0xd4>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003bec:	4798      	blx	r3

    	TIM5->SR &= ~TIM_SR_UIF;  // Clear the Capture Compare interrupt flag
 8003bee:	4b0d      	ldr	r3, [pc, #52]	@ (8003c24 <TIM5_IRQHandler+0xd8>)
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	4a0c      	ldr	r2, [pc, #48]	@ (8003c24 <TIM5_IRQHandler+0xd8>)
 8003bf4:	f023 0301 	bic.w	r3, r3, #1
 8003bf8:	6113      	str	r3, [r2, #16]
    }
    if (__timer_5_config__ ->ISR_Routines.Trigger_ISR) {
 8003bfa:	4b09      	ldr	r3, [pc, #36]	@ (8003c20 <TIM5_IRQHandler+0xd4>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00a      	beq.n	8003c1c <TIM5_IRQHandler+0xd0>
    	__timer_5_config__ ->ISR_Routines.Trigger_ISR();
 8003c06:	4b06      	ldr	r3, [pc, #24]	@ (8003c20 <TIM5_IRQHandler+0xd4>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003c0e:	4798      	blx	r3

    	TIM5->SR &= ~TIM_SR_TIF;  // Clear the Capture Compare interrupt flag
 8003c10:	4b04      	ldr	r3, [pc, #16]	@ (8003c24 <TIM5_IRQHandler+0xd8>)
 8003c12:	691b      	ldr	r3, [r3, #16]
 8003c14:	4a03      	ldr	r2, [pc, #12]	@ (8003c24 <TIM5_IRQHandler+0xd8>)
 8003c16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c1a:	6113      	str	r3, [r2, #16]
    }
}
 8003c1c:	bf00      	nop
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	200002cc 	.word	0x200002cc
 8003c24:	40000c00 	.word	0x40000c00

08003c28 <TIM6_DAC_IRQHandler>:

void TIM6_DAC_IRQHandler(void)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	af00      	add	r7, sp, #0
    if (__timer_6_config__->ISR_Routines.Update_ISR) {
 8003c2c:	4b09      	ldr	r3, [pc, #36]	@ (8003c54 <TIM6_DAC_IRQHandler+0x2c>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00a      	beq.n	8003c4e <TIM6_DAC_IRQHandler+0x26>
    	__timer_6_config__->ISR_Routines.Update_ISR();
 8003c38:	4b06      	ldr	r3, [pc, #24]	@ (8003c54 <TIM6_DAC_IRQHandler+0x2c>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c40:	4798      	blx	r3
    	  TIM6->SR &= ~TIM_SR_UIF;  // Clear the Capture Compare interrupt flag
 8003c42:	4b05      	ldr	r3, [pc, #20]	@ (8003c58 <TIM6_DAC_IRQHandler+0x30>)
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	4a04      	ldr	r2, [pc, #16]	@ (8003c58 <TIM6_DAC_IRQHandler+0x30>)
 8003c48:	f023 0301 	bic.w	r3, r3, #1
 8003c4c:	6113      	str	r3, [r2, #16]

    }

}
 8003c4e:	bf00      	nop
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	200002d0 	.word	0x200002d0
 8003c58:	40001000 	.word	0x40001000

08003c5c <TIM7_IRQHandler>:

void TIM7_IRQHandler(void)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	af00      	add	r7, sp, #0
    if (__timer_7_config__->ISR_Routines.Update_ISR) {
 8003c60:	4b09      	ldr	r3, [pc, #36]	@ (8003c88 <TIM7_IRQHandler+0x2c>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d00a      	beq.n	8003c82 <TIM7_IRQHandler+0x26>
    	__timer_7_config__->ISR_Routines.Update_ISR();
 8003c6c:	4b06      	ldr	r3, [pc, #24]	@ (8003c88 <TIM7_IRQHandler+0x2c>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c74:	4798      	blx	r3

    	TIM7->SR &= ~TIM_SR_UIF;  // Clear the Capture Compare interrupt flag
 8003c76:	4b05      	ldr	r3, [pc, #20]	@ (8003c8c <TIM7_IRQHandler+0x30>)
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	4a04      	ldr	r2, [pc, #16]	@ (8003c8c <TIM7_IRQHandler+0x30>)
 8003c7c:	f023 0301 	bic.w	r3, r3, #1
 8003c80:	6113      	str	r3, [r2, #16]
    }
}
 8003c82:	bf00      	nop
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	200002d4 	.word	0x200002d4
 8003c8c:	40001400 	.word	0x40001400

08003c90 <TIM8_BRK_TIM12_IRQHandler>:
//		(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_4))
//{
//	NVIC_EnableIRQ(TIM8_CC_IRQn);
//}

void TIM8_BRK_TIM12_IRQHandler(void) {
 8003c90:	b580      	push	{r7, lr}
 8003c92:	af00      	add	r7, sp, #0
    if (__timer_8_config__ ->ISR_Routines.Break_ISR) {
 8003c94:	4b2b      	ldr	r3, [pc, #172]	@ (8003d44 <TIM8_BRK_TIM12_IRQHandler+0xb4>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d00a      	beq.n	8003cb6 <TIM8_BRK_TIM12_IRQHandler+0x26>
    	__timer_8_config__ ->ISR_Routines.Break_ISR();
 8003ca0:	4b28      	ldr	r3, [pc, #160]	@ (8003d44 <TIM8_BRK_TIM12_IRQHandler+0xb4>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003ca8:	4798      	blx	r3
    	TIM1->SR &= ~TIM_SR_BIF;  // Clear the Break interrupt flag
 8003caa:	4b27      	ldr	r3, [pc, #156]	@ (8003d48 <TIM8_BRK_TIM12_IRQHandler+0xb8>)
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	4a26      	ldr	r2, [pc, #152]	@ (8003d48 <TIM8_BRK_TIM12_IRQHandler+0xb8>)
 8003cb0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003cb4:	6113      	str	r3, [r2, #16]
    }

    if (__timer_12_config__ ->ISR_Routines.Capture_Compare_1_ISR){
 8003cb6:	4b25      	ldr	r3, [pc, #148]	@ (8003d4c <TIM8_BRK_TIM12_IRQHandler+0xbc>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00a      	beq.n	8003cd8 <TIM8_BRK_TIM12_IRQHandler+0x48>
    	__timer_12_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 8003cc2:	4b22      	ldr	r3, [pc, #136]	@ (8003d4c <TIM8_BRK_TIM12_IRQHandler+0xbc>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cca:	4798      	blx	r3
    	TIM9->SR &= ~TIM_SR_CC1IF;  // Clear the Break interrupt flag
 8003ccc:	4b20      	ldr	r3, [pc, #128]	@ (8003d50 <TIM8_BRK_TIM12_IRQHandler+0xc0>)
 8003cce:	691b      	ldr	r3, [r3, #16]
 8003cd0:	4a1f      	ldr	r2, [pc, #124]	@ (8003d50 <TIM8_BRK_TIM12_IRQHandler+0xc0>)
 8003cd2:	f023 0302 	bic.w	r3, r3, #2
 8003cd6:	6113      	str	r3, [r2, #16]
    }

    if (__timer_12_config__ ->ISR_Routines.Capture_Compare_2_ISR){
 8003cd8:	4b1c      	ldr	r3, [pc, #112]	@ (8003d4c <TIM8_BRK_TIM12_IRQHandler+0xbc>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d00a      	beq.n	8003cfa <TIM8_BRK_TIM12_IRQHandler+0x6a>
    	__timer_12_config__ ->ISR_Routines.Capture_Compare_2_ISR();
 8003ce4:	4b19      	ldr	r3, [pc, #100]	@ (8003d4c <TIM8_BRK_TIM12_IRQHandler+0xbc>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cec:	4798      	blx	r3
    	TIM9->SR &= ~TIM_SR_CC2IF;  // Clear the Break interrupt flag
 8003cee:	4b18      	ldr	r3, [pc, #96]	@ (8003d50 <TIM8_BRK_TIM12_IRQHandler+0xc0>)
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	4a17      	ldr	r2, [pc, #92]	@ (8003d50 <TIM8_BRK_TIM12_IRQHandler+0xc0>)
 8003cf4:	f023 0304 	bic.w	r3, r3, #4
 8003cf8:	6113      	str	r3, [r2, #16]
    }

    if (__timer_12_config__ ->ISR_Routines.Update_ISR){
 8003cfa:	4b14      	ldr	r3, [pc, #80]	@ (8003d4c <TIM8_BRK_TIM12_IRQHandler+0xbc>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00a      	beq.n	8003d1c <TIM8_BRK_TIM12_IRQHandler+0x8c>
    	__timer_12_config__ ->ISR_Routines.Update_ISR();
 8003d06:	4b11      	ldr	r3, [pc, #68]	@ (8003d4c <TIM8_BRK_TIM12_IRQHandler+0xbc>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d0e:	4798      	blx	r3
    	TIM9->SR &= ~TIM_SR_UIF;  // Clear the Break interrupt flag
 8003d10:	4b0f      	ldr	r3, [pc, #60]	@ (8003d50 <TIM8_BRK_TIM12_IRQHandler+0xc0>)
 8003d12:	691b      	ldr	r3, [r3, #16]
 8003d14:	4a0e      	ldr	r2, [pc, #56]	@ (8003d50 <TIM8_BRK_TIM12_IRQHandler+0xc0>)
 8003d16:	f023 0301 	bic.w	r3, r3, #1
 8003d1a:	6113      	str	r3, [r2, #16]
    }

    if (__timer_12_config__ ->ISR_Routines.Trigger_ISR){
 8003d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8003d4c <TIM8_BRK_TIM12_IRQHandler+0xbc>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d00a      	beq.n	8003d3e <TIM8_BRK_TIM12_IRQHandler+0xae>
    	__timer_12_config__ ->ISR_Routines.Trigger_ISR();
 8003d28:	4b08      	ldr	r3, [pc, #32]	@ (8003d4c <TIM8_BRK_TIM12_IRQHandler+0xbc>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003d30:	4798      	blx	r3
    	TIM9->SR &= ~TIM_SR_TIF;  // Clear the Break interrupt flag
 8003d32:	4b07      	ldr	r3, [pc, #28]	@ (8003d50 <TIM8_BRK_TIM12_IRQHandler+0xc0>)
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	4a06      	ldr	r2, [pc, #24]	@ (8003d50 <TIM8_BRK_TIM12_IRQHandler+0xc0>)
 8003d38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d3c:	6113      	str	r3, [r2, #16]
    }

}
 8003d3e:	bf00      	nop
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	200002d8 	.word	0x200002d8
 8003d48:	40010000 	.word	0x40010000
 8003d4c:	200002e8 	.word	0x200002e8
 8003d50:	40014000 	.word	0x40014000

08003d54 <TIM8_UP_TIM13_IRQHandler>:

void TIM8_UP_TIM13_IRQHandler(void) {
 8003d54:	b580      	push	{r7, lr}
 8003d56:	af00      	add	r7, sp, #0
    if (__timer_1_config__ ->ISR_Routines.Update_ISR) {
 8003d58:	4b1a      	ldr	r3, [pc, #104]	@ (8003dc4 <TIM8_UP_TIM13_IRQHandler+0x70>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00a      	beq.n	8003d7a <TIM8_UP_TIM13_IRQHandler+0x26>
    	__timer_1_config__ ->ISR_Routines.Update_ISR();
 8003d64:	4b17      	ldr	r3, [pc, #92]	@ (8003dc4 <TIM8_UP_TIM13_IRQHandler+0x70>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d6c:	4798      	blx	r3
    	TIM1->SR &= ~TIM_SR_UIF;  // Clear the Update interrupt flag
 8003d6e:	4b16      	ldr	r3, [pc, #88]	@ (8003dc8 <TIM8_UP_TIM13_IRQHandler+0x74>)
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	4a15      	ldr	r2, [pc, #84]	@ (8003dc8 <TIM8_UP_TIM13_IRQHandler+0x74>)
 8003d74:	f023 0301 	bic.w	r3, r3, #1
 8003d78:	6113      	str	r3, [r2, #16]
    }

    if (__timer_13_config__ ->ISR_Routines.Update_ISR) {
 8003d7a:	4b14      	ldr	r3, [pc, #80]	@ (8003dcc <TIM8_UP_TIM13_IRQHandler+0x78>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00a      	beq.n	8003d9c <TIM8_UP_TIM13_IRQHandler+0x48>
    	__timer_13_config__ ->ISR_Routines.Update_ISR();
 8003d86:	4b11      	ldr	r3, [pc, #68]	@ (8003dcc <TIM8_UP_TIM13_IRQHandler+0x78>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d8e:	4798      	blx	r3
    	TIM13->SR &= ~TIM_SR_UIF;  // Clear the Update interrupt flag
 8003d90:	4b0f      	ldr	r3, [pc, #60]	@ (8003dd0 <TIM8_UP_TIM13_IRQHandler+0x7c>)
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	4a0e      	ldr	r2, [pc, #56]	@ (8003dd0 <TIM8_UP_TIM13_IRQHandler+0x7c>)
 8003d96:	f023 0301 	bic.w	r3, r3, #1
 8003d9a:	6113      	str	r3, [r2, #16]
    }

    if (__timer_13_config__ ->ISR_Routines.Capture_Compare_1_ISR) {
 8003d9c:	4b0b      	ldr	r3, [pc, #44]	@ (8003dcc <TIM8_UP_TIM13_IRQHandler+0x78>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d00a      	beq.n	8003dbe <TIM8_UP_TIM13_IRQHandler+0x6a>
    	__timer_13_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 8003da8:	4b08      	ldr	r3, [pc, #32]	@ (8003dcc <TIM8_UP_TIM13_IRQHandler+0x78>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003db0:	4798      	blx	r3
    	TIM13->SR &= ~TIM_SR_CC1IF;  // Clear the Update interrupt flag
 8003db2:	4b07      	ldr	r3, [pc, #28]	@ (8003dd0 <TIM8_UP_TIM13_IRQHandler+0x7c>)
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	4a06      	ldr	r2, [pc, #24]	@ (8003dd0 <TIM8_UP_TIM13_IRQHandler+0x7c>)
 8003db8:	f023 0302 	bic.w	r3, r3, #2
 8003dbc:	6113      	str	r3, [r2, #16]
    }

}
 8003dbe:	bf00      	nop
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	200002bc 	.word	0x200002bc
 8003dc8:	40010000 	.word	0x40010000
 8003dcc:	200002ec 	.word	0x200002ec
 8003dd0:	40001c00 	.word	0x40001c00

08003dd4 <TIM8_TRG_COM_TIM14_IRQHandler>:

void TIM8_TRG_COM_TIM14_IRQHandler(void) {
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	af00      	add	r7, sp, #0
    if (__timer_8_config__ ->ISR_Routines.Trigger_ISR) {
 8003dd8:	4b22      	ldr	r3, [pc, #136]	@ (8003e64 <TIM8_TRG_COM_TIM14_IRQHandler+0x90>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d00a      	beq.n	8003dfa <TIM8_TRG_COM_TIM14_IRQHandler+0x26>
    	__timer_8_config__ ->ISR_Routines.Trigger_ISR();
 8003de4:	4b1f      	ldr	r3, [pc, #124]	@ (8003e64 <TIM8_TRG_COM_TIM14_IRQHandler+0x90>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003dec:	4798      	blx	r3

    	TIM8->SR &= ~TIM_SR_TIF;  // Clear the Trigger interrupt flag
 8003dee:	4b1e      	ldr	r3, [pc, #120]	@ (8003e68 <TIM8_TRG_COM_TIM14_IRQHandler+0x94>)
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	4a1d      	ldr	r2, [pc, #116]	@ (8003e68 <TIM8_TRG_COM_TIM14_IRQHandler+0x94>)
 8003df4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003df8:	6113      	str	r3, [r2, #16]
    }

    if (__timer_8_config__ ->ISR_Routines.Commutation_ISR) {
 8003dfa:	4b1a      	ldr	r3, [pc, #104]	@ (8003e64 <TIM8_TRG_COM_TIM14_IRQHandler+0x90>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00a      	beq.n	8003e1c <TIM8_TRG_COM_TIM14_IRQHandler+0x48>
    	__timer_8_config__ ->ISR_Routines.Commutation_ISR();
 8003e06:	4b17      	ldr	r3, [pc, #92]	@ (8003e64 <TIM8_TRG_COM_TIM14_IRQHandler+0x90>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003e0e:	4798      	blx	r3

    	TIM8->SR &= ~TIM_SR_COMIF;  // Clear the Trigger interrupt flag
 8003e10:	4b15      	ldr	r3, [pc, #84]	@ (8003e68 <TIM8_TRG_COM_TIM14_IRQHandler+0x94>)
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	4a14      	ldr	r2, [pc, #80]	@ (8003e68 <TIM8_TRG_COM_TIM14_IRQHandler+0x94>)
 8003e16:	f023 0320 	bic.w	r3, r3, #32
 8003e1a:	6113      	str	r3, [r2, #16]
    }

    if (__timer_14_config__ ->ISR_Routines.Update_ISR) {
 8003e1c:	4b13      	ldr	r3, [pc, #76]	@ (8003e6c <TIM8_TRG_COM_TIM14_IRQHandler+0x98>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d00a      	beq.n	8003e3e <TIM8_TRG_COM_TIM14_IRQHandler+0x6a>
    	__timer_14_config__ ->ISR_Routines.Update_ISR();
 8003e28:	4b10      	ldr	r3, [pc, #64]	@ (8003e6c <TIM8_TRG_COM_TIM14_IRQHandler+0x98>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e30:	4798      	blx	r3
    	TIM14->SR &= ~TIM_SR_UIF;  // Clear the Update interrupt flag
 8003e32:	4b0f      	ldr	r3, [pc, #60]	@ (8003e70 <TIM8_TRG_COM_TIM14_IRQHandler+0x9c>)
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	4a0e      	ldr	r2, [pc, #56]	@ (8003e70 <TIM8_TRG_COM_TIM14_IRQHandler+0x9c>)
 8003e38:	f023 0301 	bic.w	r3, r3, #1
 8003e3c:	6113      	str	r3, [r2, #16]
    }

    if (__timer_14_config__ ->ISR_Routines.Capture_Compare_1_ISR) {
 8003e3e:	4b0b      	ldr	r3, [pc, #44]	@ (8003e6c <TIM8_TRG_COM_TIM14_IRQHandler+0x98>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00a      	beq.n	8003e60 <TIM8_TRG_COM_TIM14_IRQHandler+0x8c>
    	__timer_14_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 8003e4a:	4b08      	ldr	r3, [pc, #32]	@ (8003e6c <TIM8_TRG_COM_TIM14_IRQHandler+0x98>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e52:	4798      	blx	r3
    	TIM14->SR &= ~TIM_SR_CC1IF;  // Clear the Update interrupt flag
 8003e54:	4b06      	ldr	r3, [pc, #24]	@ (8003e70 <TIM8_TRG_COM_TIM14_IRQHandler+0x9c>)
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	4a05      	ldr	r2, [pc, #20]	@ (8003e70 <TIM8_TRG_COM_TIM14_IRQHandler+0x9c>)
 8003e5a:	f023 0302 	bic.w	r3, r3, #2
 8003e5e:	6113      	str	r3, [r2, #16]
    }

}
 8003e60:	bf00      	nop
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	200002d8 	.word	0x200002d8
 8003e68:	40010400 	.word	0x40010400
 8003e6c:	200002f0 	.word	0x200002f0
 8003e70:	40002000 	.word	0x40002000

08003e74 <TIM8_CC_IRQHandler>:

void TIM8_CC_IRQHandler(void) {
 8003e74:	b580      	push	{r7, lr}
 8003e76:	af00      	add	r7, sp, #0
    if (__timer_8_config__ ->ISR_Routines.Capture_Compare_1_ISR) {
 8003e78:	4b22      	ldr	r3, [pc, #136]	@ (8003f04 <TIM8_CC_IRQHandler+0x90>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d00a      	beq.n	8003e9a <TIM8_CC_IRQHandler+0x26>
    	__timer_8_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 8003e84:	4b1f      	ldr	r3, [pc, #124]	@ (8003f04 <TIM8_CC_IRQHandler+0x90>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e8c:	4798      	blx	r3

    	TIM8->SR &= ~TIM_SR_CC1IF;  // Clear the Capture Compare interrupt flag
 8003e8e:	4b1e      	ldr	r3, [pc, #120]	@ (8003f08 <TIM8_CC_IRQHandler+0x94>)
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	4a1d      	ldr	r2, [pc, #116]	@ (8003f08 <TIM8_CC_IRQHandler+0x94>)
 8003e94:	f023 0302 	bic.w	r3, r3, #2
 8003e98:	6113      	str	r3, [r2, #16]
    }

    if (__timer_8_config__ ->ISR_Routines.Capture_Compare_2_ISR) {
 8003e9a:	4b1a      	ldr	r3, [pc, #104]	@ (8003f04 <TIM8_CC_IRQHandler+0x90>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00a      	beq.n	8003ebc <TIM8_CC_IRQHandler+0x48>
    	__timer_8_config__ ->ISR_Routines.Capture_Compare_2_ISR();
 8003ea6:	4b17      	ldr	r3, [pc, #92]	@ (8003f04 <TIM8_CC_IRQHandler+0x90>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003eae:	4798      	blx	r3

    	TIM8->SR &= ~TIM_SR_CC2IF;  // Clear the Capture Compare interrupt flag
 8003eb0:	4b15      	ldr	r3, [pc, #84]	@ (8003f08 <TIM8_CC_IRQHandler+0x94>)
 8003eb2:	691b      	ldr	r3, [r3, #16]
 8003eb4:	4a14      	ldr	r2, [pc, #80]	@ (8003f08 <TIM8_CC_IRQHandler+0x94>)
 8003eb6:	f023 0304 	bic.w	r3, r3, #4
 8003eba:	6113      	str	r3, [r2, #16]
    }

    if (__timer_8_config__ ->ISR_Routines.Capture_Compare_3_ISR) {
 8003ebc:	4b11      	ldr	r3, [pc, #68]	@ (8003f04 <TIM8_CC_IRQHandler+0x90>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d00a      	beq.n	8003ede <TIM8_CC_IRQHandler+0x6a>
    	__timer_8_config__ ->ISR_Routines.Capture_Compare_3_ISR();
 8003ec8:	4b0e      	ldr	r3, [pc, #56]	@ (8003f04 <TIM8_CC_IRQHandler+0x90>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ed0:	4798      	blx	r3

    	TIM8->SR &= ~TIM_SR_CC3IF;  // Clear the Capture Compare interrupt flag
 8003ed2:	4b0d      	ldr	r3, [pc, #52]	@ (8003f08 <TIM8_CC_IRQHandler+0x94>)
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	4a0c      	ldr	r2, [pc, #48]	@ (8003f08 <TIM8_CC_IRQHandler+0x94>)
 8003ed8:	f023 0308 	bic.w	r3, r3, #8
 8003edc:	6113      	str	r3, [r2, #16]
    }

    if (__timer_8_config__ ->ISR_Routines.Capture_Compare_4_ISR) {
 8003ede:	4b09      	ldr	r3, [pc, #36]	@ (8003f04 <TIM8_CC_IRQHandler+0x90>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00a      	beq.n	8003f00 <TIM8_CC_IRQHandler+0x8c>
    	__timer_8_config__ ->ISR_Routines.Capture_Compare_4_ISR();
 8003eea:	4b06      	ldr	r3, [pc, #24]	@ (8003f04 <TIM8_CC_IRQHandler+0x90>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003ef2:	4798      	blx	r3

    	TIM8->SR &= ~TIM_SR_CC4IF;  // Clear the Capture Compare interrupt flag
 8003ef4:	4b04      	ldr	r3, [pc, #16]	@ (8003f08 <TIM8_CC_IRQHandler+0x94>)
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	4a03      	ldr	r2, [pc, #12]	@ (8003f08 <TIM8_CC_IRQHandler+0x94>)
 8003efa:	f023 0310 	bic.w	r3, r3, #16
 8003efe:	6113      	str	r3, [r2, #16]
    }
}
 8003f00:	bf00      	nop
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	200002d8 	.word	0x200002d8
 8003f08:	40010400 	.word	0x40010400

08003f0c <UART4_IRQHandler>:




void UART4_IRQHandler(void)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	af00      	add	r7, sp, #0
	USART_SR = UART4 -> SR;
 8003f10:	4b57      	ldr	r3, [pc, #348]	@ (8004070 <UART4_IRQHandler+0x164>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	b29a      	uxth	r2, r3
 8003f16:	4b57      	ldr	r3, [pc, #348]	@ (8004074 <UART4_IRQHandler+0x168>)
 8003f18:	801a      	strh	r2, [r3, #0]
	if(USART_SR & USART_SR_CTS)
 8003f1a:	4b56      	ldr	r3, [pc, #344]	@ (8004074 <UART4_IRQHandler+0x168>)
 8003f1c:	881b      	ldrh	r3, [r3, #0]
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d010      	beq.n	8003f4a <UART4_IRQHandler+0x3e>
	{
	    if (__usart_4_config__ ->ISR_Routines.CTS_ISR) {
 8003f28:	4b53      	ldr	r3, [pc, #332]	@ (8004078 <UART4_IRQHandler+0x16c>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d00a      	beq.n	8003f4a <UART4_IRQHandler+0x3e>
	    	__usart_4_config__ ->ISR_Routines.CTS_ISR();
 8003f34:	4b50      	ldr	r3, [pc, #320]	@ (8004078 <UART4_IRQHandler+0x16c>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003f3c:	4798      	blx	r3
	    	UART4->SR &= ~USART_SR_CTS;  // Clear the Break interrupt flag
 8003f3e:	4b4c      	ldr	r3, [pc, #304]	@ (8004070 <UART4_IRQHandler+0x164>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a4b      	ldr	r2, [pc, #300]	@ (8004070 <UART4_IRQHandler+0x164>)
 8003f44:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003f48:	6013      	str	r3, [r2, #0]
	    }
	}

	if(USART_SR & USART_SR_LBD)
 8003f4a:	4b4a      	ldr	r3, [pc, #296]	@ (8004074 <UART4_IRQHandler+0x168>)
 8003f4c:	881b      	ldrh	r3, [r3, #0]
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d010      	beq.n	8003f7a <UART4_IRQHandler+0x6e>
	{
	    if (__usart_4_config__ ->ISR_Routines.LIN_Break_Detection_ISR) {
 8003f58:	4b47      	ldr	r3, [pc, #284]	@ (8004078 <UART4_IRQHandler+0x16c>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d00a      	beq.n	8003f7a <UART4_IRQHandler+0x6e>
	    	__usart_4_config__ ->ISR_Routines.LIN_Break_Detection_ISR();
 8003f64:	4b44      	ldr	r3, [pc, #272]	@ (8004078 <UART4_IRQHandler+0x16c>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003f6c:	4798      	blx	r3
	    	UART4->SR &= ~USART_SR_LBD;  // Clear the Break interrupt flag
 8003f6e:	4b40      	ldr	r3, [pc, #256]	@ (8004070 <UART4_IRQHandler+0x164>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a3f      	ldr	r2, [pc, #252]	@ (8004070 <UART4_IRQHandler+0x164>)
 8003f74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f78:	6013      	str	r3, [r2, #0]
	    }
	}

	if(USART_SR & USART_SR_TXE)
 8003f7a:	4b3e      	ldr	r3, [pc, #248]	@ (8004074 <UART4_IRQHandler+0x168>)
 8003f7c:	881b      	ldrh	r3, [r3, #0]
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d010      	beq.n	8003faa <UART4_IRQHandler+0x9e>
	{
	    if (__usart_4_config__ ->ISR_Routines.Transmit_Empty_ISR) {
 8003f88:	4b3b      	ldr	r3, [pc, #236]	@ (8004078 <UART4_IRQHandler+0x16c>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00a      	beq.n	8003faa <UART4_IRQHandler+0x9e>
	    	__usart_4_config__ ->ISR_Routines.Transmit_Empty_ISR();
 8003f94:	4b38      	ldr	r3, [pc, #224]	@ (8004078 <UART4_IRQHandler+0x16c>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8003f9c:	4798      	blx	r3
	    	UART4->SR &= ~USART_SR_TXE;  // Clear the Break interrupt flag
 8003f9e:	4b34      	ldr	r3, [pc, #208]	@ (8004070 <UART4_IRQHandler+0x164>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a33      	ldr	r2, [pc, #204]	@ (8004070 <UART4_IRQHandler+0x164>)
 8003fa4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003fa8:	6013      	str	r3, [r2, #0]
	    }
	}


	if(USART_SR & USART_SR_TC)
 8003faa:	4b32      	ldr	r3, [pc, #200]	@ (8004074 <UART4_IRQHandler+0x168>)
 8003fac:	881b      	ldrh	r3, [r3, #0]
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d010      	beq.n	8003fda <UART4_IRQHandler+0xce>
	{
	    if (__usart_4_config__ ->ISR_Routines.Transmission_Complete_ISR) {
 8003fb8:	4b2f      	ldr	r3, [pc, #188]	@ (8004078 <UART4_IRQHandler+0x16c>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d00a      	beq.n	8003fda <UART4_IRQHandler+0xce>
	    	__usart_4_config__ ->ISR_Routines.Transmission_Complete_ISR();
 8003fc4:	4b2c      	ldr	r3, [pc, #176]	@ (8004078 <UART4_IRQHandler+0x16c>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8003fcc:	4798      	blx	r3
	    	UART4->SR &= ~USART_SR_TC;  // Clear the Break interrupt flag
 8003fce:	4b28      	ldr	r3, [pc, #160]	@ (8004070 <UART4_IRQHandler+0x164>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a27      	ldr	r2, [pc, #156]	@ (8004070 <UART4_IRQHandler+0x164>)
 8003fd4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003fd8:	6013      	str	r3, [r2, #0]
	    }
	}

	if(USART_SR & USART_SR_RXNE)
 8003fda:	4b26      	ldr	r3, [pc, #152]	@ (8004074 <UART4_IRQHandler+0x168>)
 8003fdc:	881b      	ldrh	r3, [r3, #0]
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	f003 0320 	and.w	r3, r3, #32
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d010      	beq.n	800400a <UART4_IRQHandler+0xfe>
	{
	    if (__usart_4_config__ ->ISR_Routines.Receiver_Empty_ISR) {
 8003fe8:	4b23      	ldr	r3, [pc, #140]	@ (8004078 <UART4_IRQHandler+0x16c>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d00a      	beq.n	800400a <UART4_IRQHandler+0xfe>
	    	__usart_4_config__ ->ISR_Routines.Receiver_Empty_ISR();
 8003ff4:	4b20      	ldr	r3, [pc, #128]	@ (8004078 <UART4_IRQHandler+0x16c>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8003ffc:	4798      	blx	r3
	    	UART4->SR &= ~USART_SR_RXNE;  // Clear the Break interrupt flag
 8003ffe:	4b1c      	ldr	r3, [pc, #112]	@ (8004070 <UART4_IRQHandler+0x164>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a1b      	ldr	r2, [pc, #108]	@ (8004070 <UART4_IRQHandler+0x164>)
 8004004:	f023 0320 	bic.w	r3, r3, #32
 8004008:	6013      	str	r3, [r2, #0]
	    }
	}


	if(USART_SR & USART_SR_IDLE)
 800400a:	4b1a      	ldr	r3, [pc, #104]	@ (8004074 <UART4_IRQHandler+0x168>)
 800400c:	881b      	ldrh	r3, [r3, #0]
 800400e:	b29b      	uxth	r3, r3
 8004010:	f003 0310 	and.w	r3, r3, #16
 8004014:	2b00      	cmp	r3, #0
 8004016:	d010      	beq.n	800403a <UART4_IRQHandler+0x12e>
	{
	    if (__usart_4_config__ ->ISR_Routines.Idle_Line_ISR) {
 8004018:	4b17      	ldr	r3, [pc, #92]	@ (8004078 <UART4_IRQHandler+0x16c>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004020:	2b00      	cmp	r3, #0
 8004022:	d00a      	beq.n	800403a <UART4_IRQHandler+0x12e>
	    	__usart_4_config__ ->ISR_Routines.Idle_Line_ISR();
 8004024:	4b14      	ldr	r3, [pc, #80]	@ (8004078 <UART4_IRQHandler+0x16c>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800402c:	4798      	blx	r3
	    	UART4->SR &= ~USART_SR_IDLE;  // Clear the Break interrupt flag
 800402e:	4b10      	ldr	r3, [pc, #64]	@ (8004070 <UART4_IRQHandler+0x164>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a0f      	ldr	r2, [pc, #60]	@ (8004070 <UART4_IRQHandler+0x164>)
 8004034:	f023 0310 	bic.w	r3, r3, #16
 8004038:	6013      	str	r3, [r2, #0]
	    }
	}

	if(USART_SR & USART_SR_PE)
 800403a:	4b0e      	ldr	r3, [pc, #56]	@ (8004074 <UART4_IRQHandler+0x168>)
 800403c:	881b      	ldrh	r3, [r3, #0]
 800403e:	b29b      	uxth	r3, r3
 8004040:	f003 0301 	and.w	r3, r3, #1
 8004044:	2b00      	cmp	r3, #0
 8004046:	d010      	beq.n	800406a <UART4_IRQHandler+0x15e>
	{
	    if (__usart_4_config__ ->ISR_Routines.Parity_ISR) {
 8004048:	4b0b      	ldr	r3, [pc, #44]	@ (8004078 <UART4_IRQHandler+0x16c>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004050:	2b00      	cmp	r3, #0
 8004052:	d00a      	beq.n	800406a <UART4_IRQHandler+0x15e>
	    	__usart_4_config__ ->ISR_Routines.Parity_ISR();
 8004054:	4b08      	ldr	r3, [pc, #32]	@ (8004078 <UART4_IRQHandler+0x16c>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800405c:	4798      	blx	r3
	    	UART4->SR &= ~USART_SR_PE;  // Clear the Break interrupt flag
 800405e:	4b04      	ldr	r3, [pc, #16]	@ (8004070 <UART4_IRQHandler+0x164>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a03      	ldr	r2, [pc, #12]	@ (8004070 <UART4_IRQHandler+0x164>)
 8004064:	f023 0301 	bic.w	r3, r3, #1
 8004068:	6013      	str	r3, [r2, #0]
	    }
	}

}
 800406a:	bf00      	nop
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	40004c00 	.word	0x40004c00
 8004074:	200002fc 	.word	0x200002fc
 8004078:	200002f8 	.word	0x200002f8

0800407c <USART1_IRQHandler>:


void USART1_IRQHandler(void)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	af00      	add	r7, sp, #0
	USART_SR = USART1 -> SR;
 8004080:	4b57      	ldr	r3, [pc, #348]	@ (80041e0 <USART1_IRQHandler+0x164>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	b29a      	uxth	r2, r3
 8004086:	4b57      	ldr	r3, [pc, #348]	@ (80041e4 <USART1_IRQHandler+0x168>)
 8004088:	801a      	strh	r2, [r3, #0]
	if(USART_SR & USART_SR_CTS)
 800408a:	4b56      	ldr	r3, [pc, #344]	@ (80041e4 <USART1_IRQHandler+0x168>)
 800408c:	881b      	ldrh	r3, [r3, #0]
 800408e:	b29b      	uxth	r3, r3
 8004090:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004094:	2b00      	cmp	r3, #0
 8004096:	d010      	beq.n	80040ba <USART1_IRQHandler+0x3e>
	{
	    if (__usart_1_config__ ->ISR_Routines.CTS_ISR) {
 8004098:	4b53      	ldr	r3, [pc, #332]	@ (80041e8 <USART1_IRQHandler+0x16c>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00a      	beq.n	80040ba <USART1_IRQHandler+0x3e>
	    	__usart_1_config__ ->ISR_Routines.CTS_ISR();
 80040a4:	4b50      	ldr	r3, [pc, #320]	@ (80041e8 <USART1_IRQHandler+0x16c>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80040ac:	4798      	blx	r3
	    	USART1->SR &= ~USART_SR_CTS;  // Clear the Break interrupt flag
 80040ae:	4b4c      	ldr	r3, [pc, #304]	@ (80041e0 <USART1_IRQHandler+0x164>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a4b      	ldr	r2, [pc, #300]	@ (80041e0 <USART1_IRQHandler+0x164>)
 80040b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80040b8:	6013      	str	r3, [r2, #0]
	    }
	}

	if(USART_SR & USART_SR_LBD)
 80040ba:	4b4a      	ldr	r3, [pc, #296]	@ (80041e4 <USART1_IRQHandler+0x168>)
 80040bc:	881b      	ldrh	r3, [r3, #0]
 80040be:	b29b      	uxth	r3, r3
 80040c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d010      	beq.n	80040ea <USART1_IRQHandler+0x6e>
	{
	    if (__usart_1_config__ ->ISR_Routines.LIN_Break_Detection_ISR) {
 80040c8:	4b47      	ldr	r3, [pc, #284]	@ (80041e8 <USART1_IRQHandler+0x16c>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d00a      	beq.n	80040ea <USART1_IRQHandler+0x6e>
	    	__usart_1_config__ ->ISR_Routines.LIN_Break_Detection_ISR();
 80040d4:	4b44      	ldr	r3, [pc, #272]	@ (80041e8 <USART1_IRQHandler+0x16c>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80040dc:	4798      	blx	r3
	    	USART1->SR &= ~USART_SR_LBD;  // Clear the Break interrupt flag
 80040de:	4b40      	ldr	r3, [pc, #256]	@ (80041e0 <USART1_IRQHandler+0x164>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a3f      	ldr	r2, [pc, #252]	@ (80041e0 <USART1_IRQHandler+0x164>)
 80040e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80040e8:	6013      	str	r3, [r2, #0]
	    }
	}

	if(USART_SR & USART_SR_TXE)
 80040ea:	4b3e      	ldr	r3, [pc, #248]	@ (80041e4 <USART1_IRQHandler+0x168>)
 80040ec:	881b      	ldrh	r3, [r3, #0]
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d010      	beq.n	800411a <USART1_IRQHandler+0x9e>
	{
	    if (__usart_1_config__ ->ISR_Routines.Transmit_Empty_ISR) {
 80040f8:	4b3b      	ldr	r3, [pc, #236]	@ (80041e8 <USART1_IRQHandler+0x16c>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004100:	2b00      	cmp	r3, #0
 8004102:	d00a      	beq.n	800411a <USART1_IRQHandler+0x9e>
	    	__usart_1_config__ ->ISR_Routines.Transmit_Empty_ISR();
 8004104:	4b38      	ldr	r3, [pc, #224]	@ (80041e8 <USART1_IRQHandler+0x16c>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800410c:	4798      	blx	r3
	    	USART1->SR &= ~USART_SR_TXE;  // Clear the Break interrupt flag
 800410e:	4b34      	ldr	r3, [pc, #208]	@ (80041e0 <USART1_IRQHandler+0x164>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a33      	ldr	r2, [pc, #204]	@ (80041e0 <USART1_IRQHandler+0x164>)
 8004114:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004118:	6013      	str	r3, [r2, #0]
	    }
	}


	if(USART_SR & USART_SR_TC)
 800411a:	4b32      	ldr	r3, [pc, #200]	@ (80041e4 <USART1_IRQHandler+0x168>)
 800411c:	881b      	ldrh	r3, [r3, #0]
 800411e:	b29b      	uxth	r3, r3
 8004120:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004124:	2b00      	cmp	r3, #0
 8004126:	d010      	beq.n	800414a <USART1_IRQHandler+0xce>
	{
	    if (__usart_1_config__ ->ISR_Routines.Transmission_Complete_ISR) {
 8004128:	4b2f      	ldr	r3, [pc, #188]	@ (80041e8 <USART1_IRQHandler+0x16c>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00a      	beq.n	800414a <USART1_IRQHandler+0xce>
	    	__usart_1_config__ ->ISR_Routines.Transmission_Complete_ISR();
 8004134:	4b2c      	ldr	r3, [pc, #176]	@ (80041e8 <USART1_IRQHandler+0x16c>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800413c:	4798      	blx	r3
	    	USART1->SR &= ~USART_SR_TC;  // Clear the Break interrupt flag
 800413e:	4b28      	ldr	r3, [pc, #160]	@ (80041e0 <USART1_IRQHandler+0x164>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a27      	ldr	r2, [pc, #156]	@ (80041e0 <USART1_IRQHandler+0x164>)
 8004144:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004148:	6013      	str	r3, [r2, #0]
	    }
	}

	if(USART_SR & USART_SR_RXNE)
 800414a:	4b26      	ldr	r3, [pc, #152]	@ (80041e4 <USART1_IRQHandler+0x168>)
 800414c:	881b      	ldrh	r3, [r3, #0]
 800414e:	b29b      	uxth	r3, r3
 8004150:	f003 0320 	and.w	r3, r3, #32
 8004154:	2b00      	cmp	r3, #0
 8004156:	d010      	beq.n	800417a <USART1_IRQHandler+0xfe>
	{
	    if (__usart_1_config__ ->ISR_Routines.Receiver_Empty_ISR) {
 8004158:	4b23      	ldr	r3, [pc, #140]	@ (80041e8 <USART1_IRQHandler+0x16c>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d00a      	beq.n	800417a <USART1_IRQHandler+0xfe>
	    	__usart_1_config__ ->ISR_Routines.Receiver_Empty_ISR();
 8004164:	4b20      	ldr	r3, [pc, #128]	@ (80041e8 <USART1_IRQHandler+0x16c>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800416c:	4798      	blx	r3
	    	USART1->SR &= ~USART_SR_RXNE;  // Clear the Break interrupt flag
 800416e:	4b1c      	ldr	r3, [pc, #112]	@ (80041e0 <USART1_IRQHandler+0x164>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a1b      	ldr	r2, [pc, #108]	@ (80041e0 <USART1_IRQHandler+0x164>)
 8004174:	f023 0320 	bic.w	r3, r3, #32
 8004178:	6013      	str	r3, [r2, #0]
	    }
	}


	if(USART_SR & USART_SR_IDLE)
 800417a:	4b1a      	ldr	r3, [pc, #104]	@ (80041e4 <USART1_IRQHandler+0x168>)
 800417c:	881b      	ldrh	r3, [r3, #0]
 800417e:	b29b      	uxth	r3, r3
 8004180:	f003 0310 	and.w	r3, r3, #16
 8004184:	2b00      	cmp	r3, #0
 8004186:	d010      	beq.n	80041aa <USART1_IRQHandler+0x12e>
	{
	    if (__usart_1_config__ ->ISR_Routines.Idle_Line_ISR) {
 8004188:	4b17      	ldr	r3, [pc, #92]	@ (80041e8 <USART1_IRQHandler+0x16c>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004190:	2b00      	cmp	r3, #0
 8004192:	d00a      	beq.n	80041aa <USART1_IRQHandler+0x12e>
	    	__usart_1_config__ ->ISR_Routines.Idle_Line_ISR();
 8004194:	4b14      	ldr	r3, [pc, #80]	@ (80041e8 <USART1_IRQHandler+0x16c>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800419c:	4798      	blx	r3
	    	USART1->SR &= ~USART_SR_IDLE;  // Clear the Break interrupt flag
 800419e:	4b10      	ldr	r3, [pc, #64]	@ (80041e0 <USART1_IRQHandler+0x164>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a0f      	ldr	r2, [pc, #60]	@ (80041e0 <USART1_IRQHandler+0x164>)
 80041a4:	f023 0310 	bic.w	r3, r3, #16
 80041a8:	6013      	str	r3, [r2, #0]
	    }
	}

	if(USART_SR & USART_SR_PE)
 80041aa:	4b0e      	ldr	r3, [pc, #56]	@ (80041e4 <USART1_IRQHandler+0x168>)
 80041ac:	881b      	ldrh	r3, [r3, #0]
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	f003 0301 	and.w	r3, r3, #1
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d010      	beq.n	80041da <USART1_IRQHandler+0x15e>
	{
	    if (__usart_1_config__ ->ISR_Routines.Parity_ISR) {
 80041b8:	4b0b      	ldr	r3, [pc, #44]	@ (80041e8 <USART1_IRQHandler+0x16c>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d00a      	beq.n	80041da <USART1_IRQHandler+0x15e>
	    	__usart_1_config__ ->ISR_Routines.Parity_ISR();
 80041c4:	4b08      	ldr	r3, [pc, #32]	@ (80041e8 <USART1_IRQHandler+0x16c>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80041cc:	4798      	blx	r3
	    	USART1->SR &= ~USART_SR_PE;  // Clear the Break interrupt flag
 80041ce:	4b04      	ldr	r3, [pc, #16]	@ (80041e0 <USART1_IRQHandler+0x164>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a03      	ldr	r2, [pc, #12]	@ (80041e0 <USART1_IRQHandler+0x164>)
 80041d4:	f023 0301 	bic.w	r3, r3, #1
 80041d8:	6013      	str	r3, [r2, #0]
	    }
	}

}
 80041da:	bf00      	nop
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	40011000 	.word	0x40011000
 80041e4:	200002fc 	.word	0x200002fc
 80041e8:	200002f4 	.word	0x200002f4

080041ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	4603      	mov	r3, r0
 80041f4:	6039      	str	r1, [r7, #0]
 80041f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	db0a      	blt.n	8004216 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	b2da      	uxtb	r2, r3
 8004204:	490c      	ldr	r1, [pc, #48]	@ (8004238 <__NVIC_SetPriority+0x4c>)
 8004206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800420a:	0112      	lsls	r2, r2, #4
 800420c:	b2d2      	uxtb	r2, r2
 800420e:	440b      	add	r3, r1
 8004210:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004214:	e00a      	b.n	800422c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	b2da      	uxtb	r2, r3
 800421a:	4908      	ldr	r1, [pc, #32]	@ (800423c <__NVIC_SetPriority+0x50>)
 800421c:	79fb      	ldrb	r3, [r7, #7]
 800421e:	f003 030f 	and.w	r3, r3, #15
 8004222:	3b04      	subs	r3, #4
 8004224:	0112      	lsls	r2, r2, #4
 8004226:	b2d2      	uxtb	r2, r2
 8004228:	440b      	add	r3, r1
 800422a:	761a      	strb	r2, [r3, #24]
}
 800422c:	bf00      	nop
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr
 8004238:	e000e100 	.word	0xe000e100
 800423c:	e000ed00 	.word	0xe000ed00

08004240 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	3b01      	subs	r3, #1
 800424c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004250:	d301      	bcc.n	8004256 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004252:	2301      	movs	r3, #1
 8004254:	e00f      	b.n	8004276 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004256:	4a0a      	ldr	r2, [pc, #40]	@ (8004280 <SysTick_Config+0x40>)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	3b01      	subs	r3, #1
 800425c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800425e:	210f      	movs	r1, #15
 8004260:	f04f 30ff 	mov.w	r0, #4294967295
 8004264:	f7ff ffc2 	bl	80041ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004268:	4b05      	ldr	r3, [pc, #20]	@ (8004280 <SysTick_Config+0x40>)
 800426a:	2200      	movs	r2, #0
 800426c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800426e:	4b04      	ldr	r3, [pc, #16]	@ (8004280 <SysTick_Config+0x40>)
 8004270:	2207      	movs	r2, #7
 8004272:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	3708      	adds	r7, #8
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	e000e010 	.word	0xe000e010

08004284 <MCU_Clock_Setup>:
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
	SystemInit();
 800428a:	f000 f961 	bl	8004550 <SystemInit>
	uint8_t pll_m = 8;
 800428e:	2308      	movs	r3, #8
 8004290:	71fb      	strb	r3, [r7, #7]
	uint16_t pll_n = 336; //192
 8004292:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8004296:	80bb      	strh	r3, [r7, #4]
	uint8_t pll_p = 0;
 8004298:	2300      	movs	r3, #0
 800429a:	70fb      	strb	r3, [r7, #3]
	uint8_t pll_q = 7;
 800429c:	2307      	movs	r3, #7
 800429e:	70bb      	strb	r3, [r7, #2]
	RCC->PLLCFGR = 0x00000000;
 80042a0:	4b3c      	ldr	r3, [pc, #240]	@ (8004394 <MCU_Clock_Setup+0x110>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	605a      	str	r2, [r3, #4]
	RCC -> CR |= RCC_CR_HSEON;
 80042a6:	4b3b      	ldr	r3, [pc, #236]	@ (8004394 <MCU_Clock_Setup+0x110>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a3a      	ldr	r2, [pc, #232]	@ (8004394 <MCU_Clock_Setup+0x110>)
 80042ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042b0:	6013      	str	r3, [r2, #0]
	while(!(RCC -> CR & RCC_CR_HSERDY)){}
 80042b2:	bf00      	nop
 80042b4:	4b37      	ldr	r3, [pc, #220]	@ (8004394 <MCU_Clock_Setup+0x110>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d0f9      	beq.n	80042b4 <MCU_Clock_Setup+0x30>
	RCC -> APB1ENR |= RCC_APB1ENR_PWREN;
 80042c0:	4b34      	ldr	r3, [pc, #208]	@ (8004394 <MCU_Clock_Setup+0x110>)
 80042c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c4:	4a33      	ldr	r2, [pc, #204]	@ (8004394 <MCU_Clock_Setup+0x110>)
 80042c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042ca:	6413      	str	r3, [r2, #64]	@ 0x40
	PWR ->CR |= PWR_CR_VOS;
 80042cc:	4b32      	ldr	r3, [pc, #200]	@ (8004398 <MCU_Clock_Setup+0x114>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a31      	ldr	r2, [pc, #196]	@ (8004398 <MCU_Clock_Setup+0x114>)
 80042d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80042d6:	6013      	str	r3, [r2, #0]
	FLASH -> ACR |= FLASH_ACR_ICEN | FLASH_ACR_PRFTEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS;
 80042d8:	4b30      	ldr	r3, [pc, #192]	@ (800439c <MCU_Clock_Setup+0x118>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a2f      	ldr	r2, [pc, #188]	@ (800439c <MCU_Clock_Setup+0x118>)
 80042de:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80042e2:	f043 0305 	orr.w	r3, r3, #5
 80042e6:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR |= (pll_q << 24) | (pll_p << 16) | (pll_n << 6) | (pll_m << 0);
 80042e8:	4b2a      	ldr	r3, [pc, #168]	@ (8004394 <MCU_Clock_Setup+0x110>)
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	78ba      	ldrb	r2, [r7, #2]
 80042ee:	0611      	lsls	r1, r2, #24
 80042f0:	78fa      	ldrb	r2, [r7, #3]
 80042f2:	0412      	lsls	r2, r2, #16
 80042f4:	4311      	orrs	r1, r2
 80042f6:	88ba      	ldrh	r2, [r7, #4]
 80042f8:	0192      	lsls	r2, r2, #6
 80042fa:	4311      	orrs	r1, r2
 80042fc:	79fa      	ldrb	r2, [r7, #7]
 80042fe:	430a      	orrs	r2, r1
 8004300:	4611      	mov	r1, r2
 8004302:	4a24      	ldr	r2, [pc, #144]	@ (8004394 <MCU_Clock_Setup+0x110>)
 8004304:	430b      	orrs	r3, r1
 8004306:	6053      	str	r3, [r2, #4]
	RCC ->PLLCFGR |= 1 << 22;
 8004308:	4b22      	ldr	r3, [pc, #136]	@ (8004394 <MCU_Clock_Setup+0x110>)
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	4a21      	ldr	r2, [pc, #132]	@ (8004394 <MCU_Clock_Setup+0x110>)
 800430e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004312:	6053      	str	r3, [r2, #4]
	RCC -> CFGR |= RCC_CFGR_HPRE_DIV1;
 8004314:	4b1f      	ldr	r3, [pc, #124]	@ (8004394 <MCU_Clock_Setup+0x110>)
 8004316:	4a1f      	ldr	r2, [pc, #124]	@ (8004394 <MCU_Clock_Setup+0x110>)
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE1_DIV4;
 800431c:	4b1d      	ldr	r3, [pc, #116]	@ (8004394 <MCU_Clock_Setup+0x110>)
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	4a1c      	ldr	r2, [pc, #112]	@ (8004394 <MCU_Clock_Setup+0x110>)
 8004322:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 8004326:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE2_DIV2;
 8004328:	4b1a      	ldr	r3, [pc, #104]	@ (8004394 <MCU_Clock_Setup+0x110>)
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	4a19      	ldr	r2, [pc, #100]	@ (8004394 <MCU_Clock_Setup+0x110>)
 800432e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004332:	6093      	str	r3, [r2, #8]
	RCC -> CR |= RCC_CR_PLLON;
 8004334:	4b17      	ldr	r3, [pc, #92]	@ (8004394 <MCU_Clock_Setup+0x110>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a16      	ldr	r2, [pc, #88]	@ (8004394 <MCU_Clock_Setup+0x110>)
 800433a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800433e:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY)){}
 8004340:	bf00      	nop
 8004342:	4b14      	ldr	r3, [pc, #80]	@ (8004394 <MCU_Clock_Setup+0x110>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d0f9      	beq.n	8004342 <MCU_Clock_Setup+0xbe>
	RCC -> CFGR |= RCC_CFGR_SW_PLL;
 800434e:	4b11      	ldr	r3, [pc, #68]	@ (8004394 <MCU_Clock_Setup+0x110>)
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	4a10      	ldr	r2, [pc, #64]	@ (8004394 <MCU_Clock_Setup+0x110>)
 8004354:	f043 0302 	orr.w	r3, r3, #2
 8004358:	6093      	str	r3, [r2, #8]
	while((RCC -> CFGR & RCC_CFGR_SWS_PLL) != RCC_CFGR_SWS_PLL);
 800435a:	bf00      	nop
 800435c:	4b0d      	ldr	r3, [pc, #52]	@ (8004394 <MCU_Clock_Setup+0x110>)
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f003 0308 	and.w	r3, r3, #8
 8004364:	2b08      	cmp	r3, #8
 8004366:	d1f9      	bne.n	800435c <MCU_Clock_Setup+0xd8>
	SystemCoreClockUpdate();
 8004368:	f000 f904 	bl	8004574 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock/168);
 800436c:	4b0c      	ldr	r3, [pc, #48]	@ (80043a0 <MCU_Clock_Setup+0x11c>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	08db      	lsrs	r3, r3, #3
 8004372:	4a0c      	ldr	r2, [pc, #48]	@ (80043a4 <MCU_Clock_Setup+0x120>)
 8004374:	fba2 2303 	umull	r2, r3, r2, r3
 8004378:	085b      	lsrs	r3, r3, #1
 800437a:	4618      	mov	r0, r3
 800437c:	f7ff ff60 	bl	8004240 <SysTick_Config>
	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8004380:	4b04      	ldr	r3, [pc, #16]	@ (8004394 <MCU_Clock_Setup+0x110>)
 8004382:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004384:	4a03      	ldr	r2, [pc, #12]	@ (8004394 <MCU_Clock_Setup+0x110>)
 8004386:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800438a:	6453      	str	r3, [r2, #68]	@ 0x44
}
 800438c:	bf00      	nop
 800438e:	3708      	adds	r7, #8
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	40023800 	.word	0x40023800
 8004398:	40007000 	.word	0x40007000
 800439c:	40023c00 	.word	0x40023c00
 80043a0:	20000000 	.word	0x20000000
 80043a4:	18618619 	.word	0x18618619

080043a8 <Delay_Config>:
{
 80043a8:	b480      	push	{r7}
 80043aa:	af00      	add	r7, sp, #0
	SysTick->CTRL = 0;
 80043ac:	4b09      	ldr	r3, [pc, #36]	@ (80043d4 <Delay_Config+0x2c>)
 80043ae:	2200      	movs	r2, #0
 80043b0:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0x00FFFFFF;
 80043b2:	4b08      	ldr	r3, [pc, #32]	@ (80043d4 <Delay_Config+0x2c>)
 80043b4:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 80043b8:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 80043ba:	4b06      	ldr	r3, [pc, #24]	@ (80043d4 <Delay_Config+0x2c>)
 80043bc:	2200      	movs	r2, #0
 80043be:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5;
 80043c0:	4b04      	ldr	r3, [pc, #16]	@ (80043d4 <Delay_Config+0x2c>)
 80043c2:	2205      	movs	r2, #5
 80043c4:	601a      	str	r2, [r3, #0]
	return (0UL);                                                     /* Function successful */
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	e000e010 	.word	0xe000e010

080043d8 <Delay_ms>:

__STATIC_INLINE uint32_t Delay_ms(volatile float ms)
{
 80043d8:	b480      	push	{r7}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
 80043de:	ed87 0a01 	vstr	s0, [r7, #4]
	unsigned long x =0x29040 * (ms);
 80043e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80043e6:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 800442c <Delay_ms+0x54>
 80043ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043f2:	ee17 3a90 	vmov	r3, s15
 80043f6:	60fb      	str	r3, [r7, #12]
	SysTick->LOAD =  x ;
 80043f8:	4a0d      	ldr	r2, [pc, #52]	@ (8004430 <Delay_ms+0x58>)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0;
 80043fe:	4b0c      	ldr	r3, [pc, #48]	@ (8004430 <Delay_ms+0x58>)
 8004400:	2200      	movs	r2, #0
 8004402:	609a      	str	r2, [r3, #8]
	SysTick->CTRL |= 1;
 8004404:	4b0a      	ldr	r3, [pc, #40]	@ (8004430 <Delay_ms+0x58>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a09      	ldr	r2, [pc, #36]	@ (8004430 <Delay_ms+0x58>)
 800440a:	f043 0301 	orr.w	r3, r3, #1
 800440e:	6013      	str	r3, [r2, #0]
	while((SysTick->CTRL & 0x00010000) == 0);
 8004410:	bf00      	nop
 8004412:	4b07      	ldr	r3, [pc, #28]	@ (8004430 <Delay_ms+0x58>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d0f9      	beq.n	8004412 <Delay_ms+0x3a>
	return (0UL);                                                     /* Function successful */
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3714      	adds	r7, #20
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr
 800442c:	48241000 	.word	0x48241000
 8004430:	e000e010 	.word	0xe000e010

08004434 <Delay_milli>:


__STATIC_INLINE uint32_t Delay_milli(float ms)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	ed87 0a01 	vstr	s0, [r7, #4]
	for (; ms>0; ms--)
 800443e:	e00b      	b.n	8004458 <Delay_milli+0x24>
	{
		Delay_ms(1);
 8004440:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8004444:	f7ff ffc8 	bl	80043d8 <Delay_ms>
	for (; ms>0; ms--)
 8004448:	edd7 7a01 	vldr	s15, [r7, #4]
 800444c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004450:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004454:	edc7 7a01 	vstr	s15, [r7, #4]
 8004458:	edd7 7a01 	vldr	s15, [r7, #4]
 800445c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004464:	dcec      	bgt.n	8004440 <Delay_milli+0xc>
	}
	return ms;
 8004466:	edd7 7a01 	vldr	s15, [r7, #4]
 800446a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800446e:	ee17 3a90 	vmov	r3, s15
}
 8004472:	4618      	mov	r0, r3
 8004474:	3708      	adds	r7, #8
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
	...

0800447c <main>:




int main(void)
{
 800447c:	b590      	push	{r4, r7, lr}
 800447e:	b087      	sub	sp, #28
 8004480:	af02      	add	r7, sp, #8
	MCU_Clock_Setup();
 8004482:	f7ff feff 	bl	8004284 <MCU_Clock_Setup>
	Delay_Config();
 8004486:	f7ff ff8f 	bl	80043a8 <Delay_Config>


	flash.NSS_Pin = 4;
 800448a:	4b2c      	ldr	r3, [pc, #176]	@ (800453c <main+0xc0>)
 800448c:	2204      	movs	r2, #4
 800448e:	731a      	strb	r2, [r3, #12]
	flash.NSS_Port = GPIOA;
 8004490:	4b2a      	ldr	r3, [pc, #168]	@ (800453c <main+0xc0>)
 8004492:	4a2b      	ldr	r2, [pc, #172]	@ (8004540 <main+0xc4>)
 8004494:	609a      	str	r2, [r3, #8]
	flash.clock_pin = SPI_Configurations.Pin._SPI1_.CLK1.PA5;
 8004496:	220f      	movs	r2, #15
 8004498:	4b28      	ldr	r3, [pc, #160]	@ (800453c <main+0xc0>)
 800449a:	711a      	strb	r2, [r3, #4]
	flash.miso_pin = SPI_Configurations.Pin._SPI1_.MISO1.PA6;
 800449c:	2210      	movs	r2, #16
 800449e:	4b27      	ldr	r3, [pc, #156]	@ (800453c <main+0xc0>)
 80044a0:	719a      	strb	r2, [r3, #6]
	flash.mosi_pin = SPI_Configurations.Pin._SPI1_.MOSI1.PA7;
 80044a2:	2211      	movs	r2, #17
 80044a4:	4b25      	ldr	r3, [pc, #148]	@ (800453c <main+0xc0>)
 80044a6:	715a      	strb	r2, [r3, #5]


	flash.Port = SPI1;
 80044a8:	4b24      	ldr	r3, [pc, #144]	@ (800453c <main+0xc0>)
 80044aa:	4a26      	ldr	r2, [pc, #152]	@ (8004544 <main+0xc8>)
 80044ac:	601a      	str	r2, [r3, #0]
	flash.clock_phase = SPI_Configurations.Clock_Phase.High_1;
 80044ae:	2316      	movs	r3, #22
 80044b0:	461a      	mov	r2, r3
 80044b2:	4b22      	ldr	r3, [pc, #136]	@ (800453c <main+0xc0>)
 80044b4:	839a      	strh	r2, [r3, #28]
	flash.clock_polarity = SPI_Configurations.Clock_Polarity.High_1;
 80044b6:	2320      	movs	r3, #32
 80044b8:	461a      	mov	r2, r3
 80044ba:	4b20      	ldr	r3, [pc, #128]	@ (800453c <main+0xc0>)
 80044bc:	835a      	strh	r2, [r3, #26]
	flash.type = SPI_Configurations.Type.Master;
 80044be:	2332      	movs	r3, #50	@ 0x32
 80044c0:	461a      	mov	r2, r3
 80044c2:	4b1e      	ldr	r3, [pc, #120]	@ (800453c <main+0xc0>)
 80044c4:	831a      	strh	r2, [r3, #24]
	flash.prescaler = SPI_Configurations.Prescaler.CLK_div_16;
 80044c6:	232b      	movs	r3, #43	@ 0x2b
 80044c8:	461a      	mov	r2, r3
 80044ca:	4b1c      	ldr	r3, [pc, #112]	@ (800453c <main+0xc0>)
 80044cc:	82da      	strh	r2, [r3, #22]
	flash.mode = SPI_Configurations.Mode.Full_Duplex_Master;
 80044ce:	230b      	movs	r3, #11
 80044d0:	461a      	mov	r2, r3
 80044d2:	4b1a      	ldr	r3, [pc, #104]	@ (800453c <main+0xc0>)
 80044d4:	81da      	strh	r2, [r3, #14]
	flash.frame_format = SPI_Configurations.Frame_Format.MSB_First;
 80044d6:	2317      	movs	r3, #23
 80044d8:	461a      	mov	r2, r3
 80044da:	4b18      	ldr	r3, [pc, #96]	@ (800453c <main+0xc0>)
 80044dc:	829a      	strh	r2, [r3, #20]
	flash.dma = SPI_Configurations.DMA_Type.TX_DMA_Enable;
 80044de:	233d      	movs	r3, #61	@ 0x3d
 80044e0:	461a      	mov	r2, r3
 80044e2:	4b16      	ldr	r3, [pc, #88]	@ (800453c <main+0xc0>)
 80044e4:	841a      	strh	r2, [r3, #32]
	flash.data_format = SPI_Configurations.Data_Format.Bit8;
 80044e6:	230b      	movs	r3, #11
 80044e8:	461a      	mov	r2, r3
 80044ea:	4b14      	ldr	r3, [pc, #80]	@ (800453c <main+0xc0>)
 80044ec:	825a      	strh	r2, [r3, #18]
	flash.crc = SPI_Configurations.CRC_Enable.Disable;
 80044ee:	2300      	movs	r3, #0
 80044f0:	461a      	mov	r2, r3
 80044f2:	4b12      	ldr	r3, [pc, #72]	@ (800453c <main+0xc0>)
 80044f4:	821a      	strh	r2, [r3, #16]
	flash.interrupt = SPI_Configurations.Interrupts.Disable;
 80044f6:	2346      	movs	r3, #70	@ 0x46
 80044f8:	461a      	mov	r2, r3
 80044fa:	4b10      	ldr	r3, [pc, #64]	@ (800453c <main+0xc0>)
 80044fc:	83da      	strh	r2, [r3, #30]


	SPI_Init(&flash);
 80044fe:	480f      	ldr	r0, [pc, #60]	@ (800453c <main+0xc0>)
 8004500:	f7fe fc38 	bl	8002d74 <SPI_Init>
	SPI_Enable(&flash);
 8004504:	480d      	ldr	r0, [pc, #52]	@ (800453c <main+0xc0>)
 8004506:	f7fe fe69 	bl	80031dc <SPI_Enable>



	uint8_t buffer[] = {0,1,2,3,4,5,6,7,8,9,10,11,12};
 800450a:	4b0f      	ldr	r3, [pc, #60]	@ (8004548 <main+0xcc>)
 800450c:	463c      	mov	r4, r7
 800450e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004510:	c407      	stmia	r4!, {r0, r1, r2}
 8004512:	7023      	strb	r3, [r4, #0]

	for(;;)
	{

		SPI_NSS_Low(&flash);
 8004514:	4809      	ldr	r0, [pc, #36]	@ (800453c <main+0xc0>)
 8004516:	f7ff f877 	bl	8003608 <SPI_NSS_Low>
		SPI_TRX_Buffer(&flash, buffer, buffer, 13, 13);
 800451a:	463a      	mov	r2, r7
 800451c:	4639      	mov	r1, r7
 800451e:	230d      	movs	r3, #13
 8004520:	9300      	str	r3, [sp, #0]
 8004522:	230d      	movs	r3, #13
 8004524:	4805      	ldr	r0, [pc, #20]	@ (800453c <main+0xc0>)
 8004526:	f7fe fea5 	bl	8003274 <SPI_TRX_Buffer>

		SPI_NSS_High(&flash);
 800452a:	4804      	ldr	r0, [pc, #16]	@ (800453c <main+0xc0>)
 800452c:	f7ff f85c 	bl	80035e8 <SPI_NSS_High>
		Delay_milli(1000);
 8004530:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 800454c <main+0xd0>
 8004534:	f7ff ff7e 	bl	8004434 <Delay_milli>
		SPI_NSS_Low(&flash);
 8004538:	bf00      	nop
 800453a:	e7eb      	b.n	8004514 <main+0x98>
 800453c:	20000300 	.word	0x20000300
 8004540:	40020000 	.word	0x40020000
 8004544:	40013000 	.word	0x40013000
 8004548:	08004728 	.word	0x08004728
 800454c:	447a0000 	.word	0x447a0000

08004550 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004550:	b480      	push	{r7}
 8004552:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004554:	4b06      	ldr	r3, [pc, #24]	@ (8004570 <SystemInit+0x20>)
 8004556:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800455a:	4a05      	ldr	r2, [pc, #20]	@ (8004570 <SystemInit+0x20>)
 800455c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004560:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004564:	bf00      	nop
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop
 8004570:	e000ed00 	.word	0xe000ed00

08004574 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8004574:	b480      	push	{r7}
 8004576:	b087      	sub	sp, #28
 8004578:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800457a:	2300      	movs	r3, #0
 800457c:	613b      	str	r3, [r7, #16]
 800457e:	2300      	movs	r3, #0
 8004580:	617b      	str	r3, [r7, #20]
 8004582:	2302      	movs	r3, #2
 8004584:	60fb      	str	r3, [r7, #12]
 8004586:	2300      	movs	r3, #0
 8004588:	60bb      	str	r3, [r7, #8]
 800458a:	2302      	movs	r3, #2
 800458c:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800458e:	4b34      	ldr	r3, [pc, #208]	@ (8004660 <SystemCoreClockUpdate+0xec>)
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f003 030c 	and.w	r3, r3, #12
 8004596:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	2b08      	cmp	r3, #8
 800459c:	d011      	beq.n	80045c2 <SystemCoreClockUpdate+0x4e>
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	2b08      	cmp	r3, #8
 80045a2:	d844      	bhi.n	800462e <SystemCoreClockUpdate+0xba>
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d003      	beq.n	80045b2 <SystemCoreClockUpdate+0x3e>
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	2b04      	cmp	r3, #4
 80045ae:	d004      	beq.n	80045ba <SystemCoreClockUpdate+0x46>
 80045b0:	e03d      	b.n	800462e <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80045b2:	4b2c      	ldr	r3, [pc, #176]	@ (8004664 <SystemCoreClockUpdate+0xf0>)
 80045b4:	4a2c      	ldr	r2, [pc, #176]	@ (8004668 <SystemCoreClockUpdate+0xf4>)
 80045b6:	601a      	str	r2, [r3, #0]
      break;
 80045b8:	e03d      	b.n	8004636 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80045ba:	4b2a      	ldr	r3, [pc, #168]	@ (8004664 <SystemCoreClockUpdate+0xf0>)
 80045bc:	4a2b      	ldr	r2, [pc, #172]	@ (800466c <SystemCoreClockUpdate+0xf8>)
 80045be:	601a      	str	r2, [r3, #0]
      break;
 80045c0:	e039      	b.n	8004636 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80045c2:	4b27      	ldr	r3, [pc, #156]	@ (8004660 <SystemCoreClockUpdate+0xec>)
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	0d9b      	lsrs	r3, r3, #22
 80045c8:	f003 0301 	and.w	r3, r3, #1
 80045cc:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045ce:	4b24      	ldr	r3, [pc, #144]	@ (8004660 <SystemCoreClockUpdate+0xec>)
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80045d6:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d00c      	beq.n	80045f8 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80045de:	4a23      	ldr	r2, [pc, #140]	@ (800466c <SystemCoreClockUpdate+0xf8>)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80045e6:	4a1e      	ldr	r2, [pc, #120]	@ (8004660 <SystemCoreClockUpdate+0xec>)
 80045e8:	6852      	ldr	r2, [r2, #4]
 80045ea:	0992      	lsrs	r2, r2, #6
 80045ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045f0:	fb02 f303 	mul.w	r3, r2, r3
 80045f4:	617b      	str	r3, [r7, #20]
 80045f6:	e00b      	b.n	8004610 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80045f8:	4a1b      	ldr	r2, [pc, #108]	@ (8004668 <SystemCoreClockUpdate+0xf4>)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004600:	4a17      	ldr	r2, [pc, #92]	@ (8004660 <SystemCoreClockUpdate+0xec>)
 8004602:	6852      	ldr	r2, [r2, #4]
 8004604:	0992      	lsrs	r2, r2, #6
 8004606:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800460a:	fb02 f303 	mul.w	r3, r2, r3
 800460e:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8004610:	4b13      	ldr	r3, [pc, #76]	@ (8004660 <SystemCoreClockUpdate+0xec>)
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	0c1b      	lsrs	r3, r3, #16
 8004616:	f003 0303 	and.w	r3, r3, #3
 800461a:	3301      	adds	r3, #1
 800461c:	005b      	lsls	r3, r3, #1
 800461e:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8004620:	697a      	ldr	r2, [r7, #20]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	fbb2 f3f3 	udiv	r3, r2, r3
 8004628:	4a0e      	ldr	r2, [pc, #56]	@ (8004664 <SystemCoreClockUpdate+0xf0>)
 800462a:	6013      	str	r3, [r2, #0]
      break;
 800462c:	e003      	b.n	8004636 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 800462e:	4b0d      	ldr	r3, [pc, #52]	@ (8004664 <SystemCoreClockUpdate+0xf0>)
 8004630:	4a0d      	ldr	r2, [pc, #52]	@ (8004668 <SystemCoreClockUpdate+0xf4>)
 8004632:	601a      	str	r2, [r3, #0]
      break;
 8004634:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8004636:	4b0a      	ldr	r3, [pc, #40]	@ (8004660 <SystemCoreClockUpdate+0xec>)
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	091b      	lsrs	r3, r3, #4
 800463c:	f003 030f 	and.w	r3, r3, #15
 8004640:	4a0b      	ldr	r2, [pc, #44]	@ (8004670 <SystemCoreClockUpdate+0xfc>)
 8004642:	5cd3      	ldrb	r3, [r2, r3]
 8004644:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8004646:	4b07      	ldr	r3, [pc, #28]	@ (8004664 <SystemCoreClockUpdate+0xf0>)
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	fa22 f303 	lsr.w	r3, r2, r3
 8004650:	4a04      	ldr	r2, [pc, #16]	@ (8004664 <SystemCoreClockUpdate+0xf0>)
 8004652:	6013      	str	r3, [r2, #0]
}
 8004654:	bf00      	nop
 8004656:	371c      	adds	r7, #28
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr
 8004660:	40023800 	.word	0x40023800
 8004664:	20000000 	.word	0x20000000
 8004668:	00f42400 	.word	0x00f42400
 800466c:	017d7840 	.word	0x017d7840
 8004670:	08004b44 	.word	0x08004b44

08004674 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004674:	480d      	ldr	r0, [pc, #52]	@ (80046ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004676:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004678:	f7ff ff6a 	bl	8004550 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800467c:	480c      	ldr	r0, [pc, #48]	@ (80046b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800467e:	490d      	ldr	r1, [pc, #52]	@ (80046b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004680:	4a0d      	ldr	r2, [pc, #52]	@ (80046b8 <LoopForever+0xe>)
  movs r3, #0
 8004682:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004684:	e002      	b.n	800468c <LoopCopyDataInit>

08004686 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004686:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004688:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800468a:	3304      	adds	r3, #4

0800468c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800468c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800468e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004690:	d3f9      	bcc.n	8004686 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004692:	4a0a      	ldr	r2, [pc, #40]	@ (80046bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8004694:	4c0a      	ldr	r4, [pc, #40]	@ (80046c0 <LoopForever+0x16>)
  movs r3, #0
 8004696:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004698:	e001      	b.n	800469e <LoopFillZerobss>

0800469a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800469a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800469c:	3204      	adds	r2, #4

0800469e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800469e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80046a0:	d3fb      	bcc.n	800469a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80046a2:	f000 f811 	bl	80046c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80046a6:	f7ff fee9 	bl	800447c <main>

080046aa <LoopForever>:

LoopForever:
  b LoopForever
 80046aa:	e7fe      	b.n	80046aa <LoopForever>
  ldr   r0, =_estack
 80046ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80046b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80046b4:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80046b8:	08004b5c 	.word	0x08004b5c
  ldr r2, =_sbss
 80046bc:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80046c0:	20000324 	.word	0x20000324

080046c4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80046c4:	e7fe      	b.n	80046c4 <ADC_IRQHandler>
	...

080046c8 <__libc_init_array>:
 80046c8:	b570      	push	{r4, r5, r6, lr}
 80046ca:	4d0d      	ldr	r5, [pc, #52]	@ (8004700 <__libc_init_array+0x38>)
 80046cc:	4c0d      	ldr	r4, [pc, #52]	@ (8004704 <__libc_init_array+0x3c>)
 80046ce:	1b64      	subs	r4, r4, r5
 80046d0:	10a4      	asrs	r4, r4, #2
 80046d2:	2600      	movs	r6, #0
 80046d4:	42a6      	cmp	r6, r4
 80046d6:	d109      	bne.n	80046ec <__libc_init_array+0x24>
 80046d8:	4d0b      	ldr	r5, [pc, #44]	@ (8004708 <__libc_init_array+0x40>)
 80046da:	4c0c      	ldr	r4, [pc, #48]	@ (800470c <__libc_init_array+0x44>)
 80046dc:	f000 f818 	bl	8004710 <_init>
 80046e0:	1b64      	subs	r4, r4, r5
 80046e2:	10a4      	asrs	r4, r4, #2
 80046e4:	2600      	movs	r6, #0
 80046e6:	42a6      	cmp	r6, r4
 80046e8:	d105      	bne.n	80046f6 <__libc_init_array+0x2e>
 80046ea:	bd70      	pop	{r4, r5, r6, pc}
 80046ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80046f0:	4798      	blx	r3
 80046f2:	3601      	adds	r6, #1
 80046f4:	e7ee      	b.n	80046d4 <__libc_init_array+0xc>
 80046f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80046fa:	4798      	blx	r3
 80046fc:	3601      	adds	r6, #1
 80046fe:	e7f2      	b.n	80046e6 <__libc_init_array+0x1e>
 8004700:	08004b54 	.word	0x08004b54
 8004704:	08004b54 	.word	0x08004b54
 8004708:	08004b54 	.word	0x08004b54
 800470c:	08004b58 	.word	0x08004b58

08004710 <_init>:
 8004710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004712:	bf00      	nop
 8004714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004716:	bc08      	pop	{r3}
 8004718:	469e      	mov	lr, r3
 800471a:	4770      	bx	lr

0800471c <_fini>:
 800471c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800471e:	bf00      	nop
 8004720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004722:	bc08      	pop	{r3}
 8004724:	469e      	mov	lr, r3
 8004726:	4770      	bx	lr
