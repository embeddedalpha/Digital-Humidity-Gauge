
Digital-Humidity-Gauge.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005224  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  080053ac  080053ac  000063ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057c8  080057c8  00007004  2**0
                  CONTENTS
  4 .ARM          00000000  080057c8  080057c8  00007004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080057c8  080057c8  00007004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057c8  080057c8  000067c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080057cc  080057cc  000067cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080057d0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007004  2**0
                  CONTENTS
 10 .bss          0000034c  20000008  20000008  00007008  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000354  20000354  00007008  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007004  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d826  00000000  00000000  00007034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000015a3  00000000  00000000  0001485a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000005a0  00000000  00000000  00015e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000456  00000000  00000000  000163a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000136d  00000000  00000000  000167f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000af7e  00000000  00000000  00017b63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00090d46  00000000  00000000  00022ae1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000b3827  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000015f8  00000000  00000000  000b386c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000056  00000000  00000000  000b4e64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000008 	.word	0x20000008
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005394 	.word	0x08005394

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000000c 	.word	0x2000000c
 80001c4:	08005394 	.word	0x08005394

080001c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	db0b      	blt.n	80001f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001da:	79fb      	ldrb	r3, [r7, #7]
 80001dc:	f003 021f 	and.w	r2, r3, #31
 80001e0:	4907      	ldr	r1, [pc, #28]	@ (8000200 <__NVIC_EnableIRQ+0x38>)
 80001e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e6:	095b      	lsrs	r3, r3, #5
 80001e8:	2001      	movs	r0, #1
 80001ea:	fa00 f202 	lsl.w	r2, r0, r2
 80001ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80001f2:	bf00      	nop
 80001f4:	370c      	adds	r7, #12
 80001f6:	46bd      	mov	sp, r7
 80001f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	e000e100 	.word	0xe000e100

08000204 <DMA1_Stream0_IRQHandler>:
volatile uint32_t DMA_LISR = 0;
volatile uint32_t DMA_HISR = 0;


void DMA1_Stream0_IRQHandler(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
	DMA_LISR = DMA1 -> LISR;
 8000208:	4b60      	ldr	r3, [pc, #384]	@ (800038c <DMA1_Stream0_IRQHandler+0x188>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	4a60      	ldr	r2, [pc, #384]	@ (8000390 <DMA1_Stream0_IRQHandler+0x18c>)
 800020e:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF0)
 8000210:	4b5f      	ldr	r3, [pc, #380]	@ (8000390 <DMA1_Stream0_IRQHandler+0x18c>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	f003 0301 	and.w	r3, r3, #1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d015      	beq.n	8000248 <DMA1_Stream0_IRQHandler+0x44>
	{
		if(__DMA1_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 800021c:	4b5d      	ldr	r3, [pc, #372]	@ (8000394 <DMA1_Stream0_IRQHandler+0x190>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	69db      	ldr	r3, [r3, #28]
 8000222:	2280      	movs	r2, #128	@ 0x80
 8000224:	4013      	ands	r3, r2
 8000226:	2b00      	cmp	r3, #0
 8000228:	d00e      	beq.n	8000248 <DMA1_Stream0_IRQHandler+0x44>
		{
		    if (__DMA1_Stream0_Config__ -> ISR_Routines.FIFO_Error_ISR)
 800022a:	4b5a      	ldr	r3, [pc, #360]	@ (8000394 <DMA1_Stream0_IRQHandler+0x190>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000230:	2b00      	cmp	r3, #0
 8000232:	d009      	beq.n	8000248 <DMA1_Stream0_IRQHandler+0x44>
		    {
		    	__DMA1_Stream0_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8000234:	4b57      	ldr	r3, [pc, #348]	@ (8000394 <DMA1_Stream0_IRQHandler+0x190>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800023a:	4798      	blx	r3
		    	DMA1 -> LIFCR |= DMA_LIFCR_CFEIF0;
 800023c:	4b53      	ldr	r3, [pc, #332]	@ (800038c <DMA1_Stream0_IRQHandler+0x188>)
 800023e:	689b      	ldr	r3, [r3, #8]
 8000240:	4a52      	ldr	r2, [pc, #328]	@ (800038c <DMA1_Stream0_IRQHandler+0x188>)
 8000242:	f043 0301 	orr.w	r3, r3, #1
 8000246:	6093      	str	r3, [r2, #8]
		    }
		}
	}

	if(DMA_LISR & DMA_LISR_DMEIF0)
 8000248:	4b51      	ldr	r3, [pc, #324]	@ (8000390 <DMA1_Stream0_IRQHandler+0x18c>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	f003 0304 	and.w	r3, r3, #4
 8000250:	2b00      	cmp	r3, #0
 8000252:	d015      	beq.n	8000280 <DMA1_Stream0_IRQHandler+0x7c>
	{
		if(__DMA1_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 8000254:	4b4f      	ldr	r3, [pc, #316]	@ (8000394 <DMA1_Stream0_IRQHandler+0x190>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	69db      	ldr	r3, [r3, #28]
 800025a:	2202      	movs	r2, #2
 800025c:	4013      	ands	r3, r2
 800025e:	2b00      	cmp	r3, #0
 8000260:	d00e      	beq.n	8000280 <DMA1_Stream0_IRQHandler+0x7c>
		{
		    if (__DMA1_Stream0_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8000262:	4b4c      	ldr	r3, [pc, #304]	@ (8000394 <DMA1_Stream0_IRQHandler+0x190>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000268:	2b00      	cmp	r3, #0
 800026a:	d009      	beq.n	8000280 <DMA1_Stream0_IRQHandler+0x7c>
		    {
		    	__DMA1_Stream0_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 800026c:	4b49      	ldr	r3, [pc, #292]	@ (8000394 <DMA1_Stream0_IRQHandler+0x190>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000272:	4798      	blx	r3
		    	DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF0;
 8000274:	4b45      	ldr	r3, [pc, #276]	@ (800038c <DMA1_Stream0_IRQHandler+0x188>)
 8000276:	689b      	ldr	r3, [r3, #8]
 8000278:	4a44      	ldr	r2, [pc, #272]	@ (800038c <DMA1_Stream0_IRQHandler+0x188>)
 800027a:	f043 0304 	orr.w	r3, r3, #4
 800027e:	6093      	str	r3, [r2, #8]
		    }
		}
	}

	if(DMA_LISR & DMA_LISR_TEIF0)
 8000280:	4b43      	ldr	r3, [pc, #268]	@ (8000390 <DMA1_Stream0_IRQHandler+0x18c>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	f003 0308 	and.w	r3, r3, #8
 8000288:	2b00      	cmp	r3, #0
 800028a:	d015      	beq.n	80002b8 <DMA1_Stream0_IRQHandler+0xb4>
	{
		if(__DMA1_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 800028c:	4b41      	ldr	r3, [pc, #260]	@ (8000394 <DMA1_Stream0_IRQHandler+0x190>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	69db      	ldr	r3, [r3, #28]
 8000292:	2204      	movs	r2, #4
 8000294:	4013      	ands	r3, r2
 8000296:	2b00      	cmp	r3, #0
 8000298:	d00e      	beq.n	80002b8 <DMA1_Stream0_IRQHandler+0xb4>
		{
		    if (__DMA1_Stream0_Config__ -> ISR_Routines.Transfer_Error_ISR)
 800029a:	4b3e      	ldr	r3, [pc, #248]	@ (8000394 <DMA1_Stream0_IRQHandler+0x190>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d009      	beq.n	80002b8 <DMA1_Stream0_IRQHandler+0xb4>
		    {
		    	__DMA1_Stream0_Config__ ->ISR_Routines.Transfer_Error_ISR();
 80002a4:	4b3b      	ldr	r3, [pc, #236]	@ (8000394 <DMA1_Stream0_IRQHandler+0x190>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80002aa:	4798      	blx	r3
		    	DMA1 -> LIFCR |= DMA_LIFCR_CTEIF0;
 80002ac:	4b37      	ldr	r3, [pc, #220]	@ (800038c <DMA1_Stream0_IRQHandler+0x188>)
 80002ae:	689b      	ldr	r3, [r3, #8]
 80002b0:	4a36      	ldr	r2, [pc, #216]	@ (800038c <DMA1_Stream0_IRQHandler+0x188>)
 80002b2:	f043 0308 	orr.w	r3, r3, #8
 80002b6:	6093      	str	r3, [r2, #8]
		    }
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF0)
 80002b8:	4b35      	ldr	r3, [pc, #212]	@ (8000390 <DMA1_Stream0_IRQHandler+0x18c>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	f003 0310 	and.w	r3, r3, #16
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d02d      	beq.n	8000320 <DMA1_Stream0_IRQHandler+0x11c>
	{
		if(__DMA1_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 80002c4:	4b33      	ldr	r3, [pc, #204]	@ (8000394 <DMA1_Stream0_IRQHandler+0x190>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	69db      	ldr	r3, [r3, #28]
 80002ca:	2208      	movs	r2, #8
 80002cc:	4013      	ands	r3, r2
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d026      	beq.n	8000320 <DMA1_Stream0_IRQHandler+0x11c>
		{
		    if (__DMA1_Stream0_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 80002d2:	4b30      	ldr	r3, [pc, #192]	@ (8000394 <DMA1_Stream0_IRQHandler+0x190>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d021      	beq.n	8000320 <DMA1_Stream0_IRQHandler+0x11c>
		    {
		    	__DMA1_Stream0_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80002dc:	4b2d      	ldr	r3, [pc, #180]	@ (8000394 <DMA1_Stream0_IRQHandler+0x190>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80002e2:	4798      	blx	r3
		    	DMA1 -> LIFCR |= DMA_LIFCR_CHTIF0;
 80002e4:	4b29      	ldr	r3, [pc, #164]	@ (800038c <DMA1_Stream0_IRQHandler+0x188>)
 80002e6:	689b      	ldr	r3, [r3, #8]
 80002e8:	4a28      	ldr	r2, [pc, #160]	@ (800038c <DMA1_Stream0_IRQHandler+0x188>)
 80002ea:	f043 0310 	orr.w	r3, r3, #16
 80002ee:	6093      	str	r3, [r2, #8]

		    	if(__DMA1_Stream0_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80002f0:	4b28      	ldr	r3, [pc, #160]	@ (8000394 <DMA1_Stream0_IRQHandler+0x190>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80002f6:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80002fa:	4293      	cmp	r3, r2
 80002fc:	d110      	bne.n	8000320 <DMA1_Stream0_IRQHandler+0x11c>
		    	{
		    		if((__DMA1_Stream0_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80002fe:	4b25      	ldr	r3, [pc, #148]	@ (8000394 <DMA1_Stream0_IRQHandler+0x190>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	685b      	ldr	r3, [r3, #4]
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800030a:	2b00      	cmp	r3, #0
 800030c:	d004      	beq.n	8000318 <DMA1_Stream0_IRQHandler+0x114>
		    		{
		    			__DMA1_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800030e:	4b21      	ldr	r3, [pc, #132]	@ (8000394 <DMA1_Stream0_IRQHandler+0x190>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000314:	4798      	blx	r3
 8000316:	e003      	b.n	8000320 <DMA1_Stream0_IRQHandler+0x11c>
		    		}
		    		else
		    		{
		    			__DMA1_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000318:	4b1e      	ldr	r3, [pc, #120]	@ (8000394 <DMA1_Stream0_IRQHandler+0x190>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800031e:	4798      	blx	r3
		    	}
		    }
		}
	}

	if(DMA_LISR & DMA_LISR_TCIF0)
 8000320:	4b1b      	ldr	r3, [pc, #108]	@ (8000390 <DMA1_Stream0_IRQHandler+0x18c>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	f003 0320 	and.w	r3, r3, #32
 8000328:	2b00      	cmp	r3, #0
 800032a:	d02d      	beq.n	8000388 <DMA1_Stream0_IRQHandler+0x184>
	{
		if(__DMA1_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 800032c:	4b19      	ldr	r3, [pc, #100]	@ (8000394 <DMA1_Stream0_IRQHandler+0x190>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	69db      	ldr	r3, [r3, #28]
 8000332:	2210      	movs	r2, #16
 8000334:	4013      	ands	r3, r2
 8000336:	2b00      	cmp	r3, #0
 8000338:	d026      	beq.n	8000388 <DMA1_Stream0_IRQHandler+0x184>
		{
		    if (__DMA1_Stream0_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 800033a:	4b16      	ldr	r3, [pc, #88]	@ (8000394 <DMA1_Stream0_IRQHandler+0x190>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000340:	2b00      	cmp	r3, #0
 8000342:	d021      	beq.n	8000388 <DMA1_Stream0_IRQHandler+0x184>
		    {
		    	__DMA1_Stream0_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000344:	4b13      	ldr	r3, [pc, #76]	@ (8000394 <DMA1_Stream0_IRQHandler+0x190>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800034a:	4798      	blx	r3
		    	DMA1 -> LIFCR |= DMA_LIFCR_CTCIF0;
 800034c:	4b0f      	ldr	r3, [pc, #60]	@ (800038c <DMA1_Stream0_IRQHandler+0x188>)
 800034e:	689b      	ldr	r3, [r3, #8]
 8000350:	4a0e      	ldr	r2, [pc, #56]	@ (800038c <DMA1_Stream0_IRQHandler+0x188>)
 8000352:	f043 0320 	orr.w	r3, r3, #32
 8000356:	6093      	str	r3, [r2, #8]

		    	if(__DMA1_Stream0_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000358:	4b0e      	ldr	r3, [pc, #56]	@ (8000394 <DMA1_Stream0_IRQHandler+0x190>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800035e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000362:	4293      	cmp	r3, r2
 8000364:	d110      	bne.n	8000388 <DMA1_Stream0_IRQHandler+0x184>
		    	{
		    		if((__DMA1_Stream0_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000366:	4b0b      	ldr	r3, [pc, #44]	@ (8000394 <DMA1_Stream0_IRQHandler+0x190>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	685b      	ldr	r3, [r3, #4]
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000372:	2b00      	cmp	r3, #0
 8000374:	d004      	beq.n	8000380 <DMA1_Stream0_IRQHandler+0x17c>
		    		{
		    			__DMA1_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000376:	4b07      	ldr	r3, [pc, #28]	@ (8000394 <DMA1_Stream0_IRQHandler+0x190>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800037c:	4798      	blx	r3
		    	}
		    }
		}

	}
}
 800037e:	e003      	b.n	8000388 <DMA1_Stream0_IRQHandler+0x184>
		    			__DMA1_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000380:	4b04      	ldr	r3, [pc, #16]	@ (8000394 <DMA1_Stream0_IRQHandler+0x190>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000386:	4798      	blx	r3
}
 8000388:	bf00      	nop
 800038a:	bd80      	pop	{r7, pc}
 800038c:	40026000 	.word	0x40026000
 8000390:	20000064 	.word	0x20000064
 8000394:	20000024 	.word	0x20000024

08000398 <DMA1_Stream1_IRQHandler>:

void DMA1_Stream1_IRQHandler(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
	DMA_LISR = DMA1 -> LISR;
 800039c:	4b4f      	ldr	r3, [pc, #316]	@ (80004dc <DMA1_Stream1_IRQHandler+0x144>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	4a4f      	ldr	r2, [pc, #316]	@ (80004e0 <DMA1_Stream1_IRQHandler+0x148>)
 80003a2:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF1)
 80003a4:	4b4e      	ldr	r3, [pc, #312]	@ (80004e0 <DMA1_Stream1_IRQHandler+0x148>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d00e      	beq.n	80003ce <DMA1_Stream1_IRQHandler+0x36>
	{
	    if (__DMA1_Stream1_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80003b0:	4b4c      	ldr	r3, [pc, #304]	@ (80004e4 <DMA1_Stream1_IRQHandler+0x14c>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d009      	beq.n	80003ce <DMA1_Stream1_IRQHandler+0x36>
	    {
	    	__DMA1_Stream1_Config__ ->ISR_Routines.FIFO_Error_ISR();
 80003ba:	4b4a      	ldr	r3, [pc, #296]	@ (80004e4 <DMA1_Stream1_IRQHandler+0x14c>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80003c0:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CFEIF1;
 80003c2:	4b46      	ldr	r3, [pc, #280]	@ (80004dc <DMA1_Stream1_IRQHandler+0x144>)
 80003c4:	689b      	ldr	r3, [r3, #8]
 80003c6:	4a45      	ldr	r2, [pc, #276]	@ (80004dc <DMA1_Stream1_IRQHandler+0x144>)
 80003c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80003cc:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_DMEIF1)
 80003ce:	4b44      	ldr	r3, [pc, #272]	@ (80004e0 <DMA1_Stream1_IRQHandler+0x148>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d00e      	beq.n	80003f8 <DMA1_Stream1_IRQHandler+0x60>
	{
	    if (__DMA1_Stream1_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 80003da:	4b42      	ldr	r3, [pc, #264]	@ (80004e4 <DMA1_Stream1_IRQHandler+0x14c>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d009      	beq.n	80003f8 <DMA1_Stream1_IRQHandler+0x60>
	    {
	    	__DMA1_Stream1_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 80003e4:	4b3f      	ldr	r3, [pc, #252]	@ (80004e4 <DMA1_Stream1_IRQHandler+0x14c>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003ea:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF1;
 80003ec:	4b3b      	ldr	r3, [pc, #236]	@ (80004dc <DMA1_Stream1_IRQHandler+0x144>)
 80003ee:	689b      	ldr	r3, [r3, #8]
 80003f0:	4a3a      	ldr	r2, [pc, #232]	@ (80004dc <DMA1_Stream1_IRQHandler+0x144>)
 80003f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80003f6:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_TEIF1)
 80003f8:	4b39      	ldr	r3, [pc, #228]	@ (80004e0 <DMA1_Stream1_IRQHandler+0x148>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000400:	2b00      	cmp	r3, #0
 8000402:	d00e      	beq.n	8000422 <DMA1_Stream1_IRQHandler+0x8a>
	{
	    if (__DMA1_Stream1_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8000404:	4b37      	ldr	r3, [pc, #220]	@ (80004e4 <DMA1_Stream1_IRQHandler+0x14c>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800040a:	2b00      	cmp	r3, #0
 800040c:	d009      	beq.n	8000422 <DMA1_Stream1_IRQHandler+0x8a>
	    {
	    	__DMA1_Stream1_Config__ ->ISR_Routines.Transfer_Error_ISR();
 800040e:	4b35      	ldr	r3, [pc, #212]	@ (80004e4 <DMA1_Stream1_IRQHandler+0x14c>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000414:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CTEIF1;
 8000416:	4b31      	ldr	r3, [pc, #196]	@ (80004dc <DMA1_Stream1_IRQHandler+0x144>)
 8000418:	689b      	ldr	r3, [r3, #8]
 800041a:	4a30      	ldr	r2, [pc, #192]	@ (80004dc <DMA1_Stream1_IRQHandler+0x144>)
 800041c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000420:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_HTIF1)
 8000422:	4b2f      	ldr	r3, [pc, #188]	@ (80004e0 <DMA1_Stream1_IRQHandler+0x148>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800042a:	2b00      	cmp	r3, #0
 800042c:	d026      	beq.n	800047c <DMA1_Stream1_IRQHandler+0xe4>
	{
	    if (__DMA1_Stream1_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 800042e:	4b2d      	ldr	r3, [pc, #180]	@ (80004e4 <DMA1_Stream1_IRQHandler+0x14c>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000434:	2b00      	cmp	r3, #0
 8000436:	d021      	beq.n	800047c <DMA1_Stream1_IRQHandler+0xe4>
	    {
	    	__DMA1_Stream1_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000438:	4b2a      	ldr	r3, [pc, #168]	@ (80004e4 <DMA1_Stream1_IRQHandler+0x14c>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800043e:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CHTIF1;
 8000440:	4b26      	ldr	r3, [pc, #152]	@ (80004dc <DMA1_Stream1_IRQHandler+0x144>)
 8000442:	689b      	ldr	r3, [r3, #8]
 8000444:	4a25      	ldr	r2, [pc, #148]	@ (80004dc <DMA1_Stream1_IRQHandler+0x144>)
 8000446:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800044a:	6093      	str	r3, [r2, #8]

	    	if(__DMA1_Stream1_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800044c:	4b25      	ldr	r3, [pc, #148]	@ (80004e4 <DMA1_Stream1_IRQHandler+0x14c>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000452:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000456:	4293      	cmp	r3, r2
 8000458:	d110      	bne.n	800047c <DMA1_Stream1_IRQHandler+0xe4>
	    	{
	    		if((__DMA1_Stream1_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800045a:	4b22      	ldr	r3, [pc, #136]	@ (80004e4 <DMA1_Stream1_IRQHandler+0x14c>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	685b      	ldr	r3, [r3, #4]
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000466:	2b00      	cmp	r3, #0
 8000468:	d004      	beq.n	8000474 <DMA1_Stream1_IRQHandler+0xdc>
	    		{
	    			__DMA1_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800046a:	4b1e      	ldr	r3, [pc, #120]	@ (80004e4 <DMA1_Stream1_IRQHandler+0x14c>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000470:	4798      	blx	r3
 8000472:	e003      	b.n	800047c <DMA1_Stream1_IRQHandler+0xe4>
	    		}
	    		else
	    		{
	    			__DMA1_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000474:	4b1b      	ldr	r3, [pc, #108]	@ (80004e4 <DMA1_Stream1_IRQHandler+0x14c>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800047a:	4798      	blx	r3
	    		}
	    	}
	    }
	}

	if(DMA_LISR & DMA_LISR_TCIF1)
 800047c:	4b18      	ldr	r3, [pc, #96]	@ (80004e0 <DMA1_Stream1_IRQHandler+0x148>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000484:	2b00      	cmp	r3, #0
 8000486:	d026      	beq.n	80004d6 <DMA1_Stream1_IRQHandler+0x13e>
	{
	    if (__DMA1_Stream1_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8000488:	4b16      	ldr	r3, [pc, #88]	@ (80004e4 <DMA1_Stream1_IRQHandler+0x14c>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800048e:	2b00      	cmp	r3, #0
 8000490:	d021      	beq.n	80004d6 <DMA1_Stream1_IRQHandler+0x13e>
	    {
	    	__DMA1_Stream1_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000492:	4b14      	ldr	r3, [pc, #80]	@ (80004e4 <DMA1_Stream1_IRQHandler+0x14c>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000498:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CTCIF1;
 800049a:	4b10      	ldr	r3, [pc, #64]	@ (80004dc <DMA1_Stream1_IRQHandler+0x144>)
 800049c:	689b      	ldr	r3, [r3, #8]
 800049e:	4a0f      	ldr	r2, [pc, #60]	@ (80004dc <DMA1_Stream1_IRQHandler+0x144>)
 80004a0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80004a4:	6093      	str	r3, [r2, #8]

	    	if(__DMA1_Stream1_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80004a6:	4b0f      	ldr	r3, [pc, #60]	@ (80004e4 <DMA1_Stream1_IRQHandler+0x14c>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80004ac:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80004b0:	4293      	cmp	r3, r2
 80004b2:	d110      	bne.n	80004d6 <DMA1_Stream1_IRQHandler+0x13e>
	    	{
	    		if((__DMA1_Stream1_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80004b4:	4b0b      	ldr	r3, [pc, #44]	@ (80004e4 <DMA1_Stream1_IRQHandler+0x14c>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	685b      	ldr	r3, [r3, #4]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d004      	beq.n	80004ce <DMA1_Stream1_IRQHandler+0x136>
	    		{
	    			__DMA1_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80004c4:	4b07      	ldr	r3, [pc, #28]	@ (80004e4 <DMA1_Stream1_IRQHandler+0x14c>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80004ca:	4798      	blx	r3
	    			__DMA1_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
	    		}
	    	}
	    }
	}
}
 80004cc:	e003      	b.n	80004d6 <DMA1_Stream1_IRQHandler+0x13e>
	    			__DMA1_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80004ce:	4b05      	ldr	r3, [pc, #20]	@ (80004e4 <DMA1_Stream1_IRQHandler+0x14c>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80004d4:	4798      	blx	r3
}
 80004d6:	bf00      	nop
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	40026000 	.word	0x40026000
 80004e0:	20000064 	.word	0x20000064
 80004e4:	20000028 	.word	0x20000028

080004e8 <DMA1_Stream2_IRQHandler>:


void DMA1_Stream2_IRQHandler(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
	DMA_LISR = DMA1 -> LISR;
 80004ec:	4b4f      	ldr	r3, [pc, #316]	@ (800062c <DMA1_Stream2_IRQHandler+0x144>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a4f      	ldr	r2, [pc, #316]	@ (8000630 <DMA1_Stream2_IRQHandler+0x148>)
 80004f2:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF2)
 80004f4:	4b4e      	ldr	r3, [pc, #312]	@ (8000630 <DMA1_Stream2_IRQHandler+0x148>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d00e      	beq.n	800051e <DMA1_Stream2_IRQHandler+0x36>
	{
	    if (__DMA1_Stream2_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8000500:	4b4c      	ldr	r3, [pc, #304]	@ (8000634 <DMA1_Stream2_IRQHandler+0x14c>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000506:	2b00      	cmp	r3, #0
 8000508:	d009      	beq.n	800051e <DMA1_Stream2_IRQHandler+0x36>
	    {
	    	__DMA1_Stream2_Config__ ->ISR_Routines.FIFO_Error_ISR();
 800050a:	4b4a      	ldr	r3, [pc, #296]	@ (8000634 <DMA1_Stream2_IRQHandler+0x14c>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000510:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CFEIF2;
 8000512:	4b46      	ldr	r3, [pc, #280]	@ (800062c <DMA1_Stream2_IRQHandler+0x144>)
 8000514:	689b      	ldr	r3, [r3, #8]
 8000516:	4a45      	ldr	r2, [pc, #276]	@ (800062c <DMA1_Stream2_IRQHandler+0x144>)
 8000518:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800051c:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_DMEIF2)
 800051e:	4b44      	ldr	r3, [pc, #272]	@ (8000630 <DMA1_Stream2_IRQHandler+0x148>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000526:	2b00      	cmp	r3, #0
 8000528:	d00e      	beq.n	8000548 <DMA1_Stream2_IRQHandler+0x60>
	{
	    if (__DMA1_Stream2_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 800052a:	4b42      	ldr	r3, [pc, #264]	@ (8000634 <DMA1_Stream2_IRQHandler+0x14c>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000530:	2b00      	cmp	r3, #0
 8000532:	d009      	beq.n	8000548 <DMA1_Stream2_IRQHandler+0x60>
	    {
	    	__DMA1_Stream2_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8000534:	4b3f      	ldr	r3, [pc, #252]	@ (8000634 <DMA1_Stream2_IRQHandler+0x14c>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800053a:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF2;
 800053c:	4b3b      	ldr	r3, [pc, #236]	@ (800062c <DMA1_Stream2_IRQHandler+0x144>)
 800053e:	689b      	ldr	r3, [r3, #8]
 8000540:	4a3a      	ldr	r2, [pc, #232]	@ (800062c <DMA1_Stream2_IRQHandler+0x144>)
 8000542:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000546:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_TEIF2)
 8000548:	4b39      	ldr	r3, [pc, #228]	@ (8000630 <DMA1_Stream2_IRQHandler+0x148>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000550:	2b00      	cmp	r3, #0
 8000552:	d00e      	beq.n	8000572 <DMA1_Stream2_IRQHandler+0x8a>
	{
	    if (__DMA1_Stream2_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8000554:	4b37      	ldr	r3, [pc, #220]	@ (8000634 <DMA1_Stream2_IRQHandler+0x14c>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800055a:	2b00      	cmp	r3, #0
 800055c:	d009      	beq.n	8000572 <DMA1_Stream2_IRQHandler+0x8a>
	    {
	    	__DMA1_Stream2_Config__ ->ISR_Routines.Transfer_Error_ISR();
 800055e:	4b35      	ldr	r3, [pc, #212]	@ (8000634 <DMA1_Stream2_IRQHandler+0x14c>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000564:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CTEIF2;
 8000566:	4b31      	ldr	r3, [pc, #196]	@ (800062c <DMA1_Stream2_IRQHandler+0x144>)
 8000568:	689b      	ldr	r3, [r3, #8]
 800056a:	4a30      	ldr	r2, [pc, #192]	@ (800062c <DMA1_Stream2_IRQHandler+0x144>)
 800056c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000570:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_HTIF2)
 8000572:	4b2f      	ldr	r3, [pc, #188]	@ (8000630 <DMA1_Stream2_IRQHandler+0x148>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800057a:	2b00      	cmp	r3, #0
 800057c:	d026      	beq.n	80005cc <DMA1_Stream2_IRQHandler+0xe4>
	{
	    if (__DMA1_Stream2_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 800057e:	4b2d      	ldr	r3, [pc, #180]	@ (8000634 <DMA1_Stream2_IRQHandler+0x14c>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000584:	2b00      	cmp	r3, #0
 8000586:	d021      	beq.n	80005cc <DMA1_Stream2_IRQHandler+0xe4>
	    {
	    	__DMA1_Stream2_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000588:	4b2a      	ldr	r3, [pc, #168]	@ (8000634 <DMA1_Stream2_IRQHandler+0x14c>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800058e:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CHTIF2;
 8000590:	4b26      	ldr	r3, [pc, #152]	@ (800062c <DMA1_Stream2_IRQHandler+0x144>)
 8000592:	689b      	ldr	r3, [r3, #8]
 8000594:	4a25      	ldr	r2, [pc, #148]	@ (800062c <DMA1_Stream2_IRQHandler+0x144>)
 8000596:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800059a:	6093      	str	r3, [r2, #8]

	    	if(__DMA1_Stream2_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800059c:	4b25      	ldr	r3, [pc, #148]	@ (8000634 <DMA1_Stream2_IRQHandler+0x14c>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80005a2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d110      	bne.n	80005cc <DMA1_Stream2_IRQHandler+0xe4>
	    	{
	    		if((__DMA1_Stream2_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80005aa:	4b22      	ldr	r3, [pc, #136]	@ (8000634 <DMA1_Stream2_IRQHandler+0x14c>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	685b      	ldr	r3, [r3, #4]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d004      	beq.n	80005c4 <DMA1_Stream2_IRQHandler+0xdc>
	    		{
	    			__DMA1_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80005ba:	4b1e      	ldr	r3, [pc, #120]	@ (8000634 <DMA1_Stream2_IRQHandler+0x14c>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80005c0:	4798      	blx	r3
 80005c2:	e003      	b.n	80005cc <DMA1_Stream2_IRQHandler+0xe4>
	    		}
	    		else
	    		{
	    			__DMA1_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80005c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000634 <DMA1_Stream2_IRQHandler+0x14c>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80005ca:	4798      	blx	r3
	    		}
	    	}
	    }
	}

	if(DMA_LISR & DMA_LISR_TCIF2)
 80005cc:	4b18      	ldr	r3, [pc, #96]	@ (8000630 <DMA1_Stream2_IRQHandler+0x148>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d026      	beq.n	8000626 <DMA1_Stream2_IRQHandler+0x13e>
	{
	    if (__DMA1_Stream2_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 80005d8:	4b16      	ldr	r3, [pc, #88]	@ (8000634 <DMA1_Stream2_IRQHandler+0x14c>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d021      	beq.n	8000626 <DMA1_Stream2_IRQHandler+0x13e>
	    {
	    	__DMA1_Stream2_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80005e2:	4b14      	ldr	r3, [pc, #80]	@ (8000634 <DMA1_Stream2_IRQHandler+0x14c>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005e8:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CTCIF2;
 80005ea:	4b10      	ldr	r3, [pc, #64]	@ (800062c <DMA1_Stream2_IRQHandler+0x144>)
 80005ec:	689b      	ldr	r3, [r3, #8]
 80005ee:	4a0f      	ldr	r2, [pc, #60]	@ (800062c <DMA1_Stream2_IRQHandler+0x144>)
 80005f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80005f4:	6093      	str	r3, [r2, #8]

	    	if(__DMA1_Stream2_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80005f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000634 <DMA1_Stream2_IRQHandler+0x14c>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80005fc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000600:	4293      	cmp	r3, r2
 8000602:	d110      	bne.n	8000626 <DMA1_Stream2_IRQHandler+0x13e>
	    	{
	    		if((__DMA1_Stream2_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000604:	4b0b      	ldr	r3, [pc, #44]	@ (8000634 <DMA1_Stream2_IRQHandler+0x14c>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	685b      	ldr	r3, [r3, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000610:	2b00      	cmp	r3, #0
 8000612:	d004      	beq.n	800061e <DMA1_Stream2_IRQHandler+0x136>
	    		{
	    			__DMA1_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000614:	4b07      	ldr	r3, [pc, #28]	@ (8000634 <DMA1_Stream2_IRQHandler+0x14c>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800061a:	4798      	blx	r3
	    			__DMA1_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
	    		}
	    	}
	    }
	}
}
 800061c:	e003      	b.n	8000626 <DMA1_Stream2_IRQHandler+0x13e>
	    			__DMA1_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800061e:	4b05      	ldr	r3, [pc, #20]	@ (8000634 <DMA1_Stream2_IRQHandler+0x14c>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000624:	4798      	blx	r3
}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40026000 	.word	0x40026000
 8000630:	20000064 	.word	0x20000064
 8000634:	2000002c 	.word	0x2000002c

08000638 <DMA1_Stream3_IRQHandler>:

void DMA1_Stream3_IRQHandler(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
	DMA_LISR = DMA1 -> LISR;
 800063c:	4b4f      	ldr	r3, [pc, #316]	@ (800077c <DMA1_Stream3_IRQHandler+0x144>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a4f      	ldr	r2, [pc, #316]	@ (8000780 <DMA1_Stream3_IRQHandler+0x148>)
 8000642:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF3)
 8000644:	4b4e      	ldr	r3, [pc, #312]	@ (8000780 <DMA1_Stream3_IRQHandler+0x148>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800064c:	2b00      	cmp	r3, #0
 800064e:	d00e      	beq.n	800066e <DMA1_Stream3_IRQHandler+0x36>
	{
	    if (__DMA1_Stream3_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8000650:	4b4c      	ldr	r3, [pc, #304]	@ (8000784 <DMA1_Stream3_IRQHandler+0x14c>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000656:	2b00      	cmp	r3, #0
 8000658:	d009      	beq.n	800066e <DMA1_Stream3_IRQHandler+0x36>
	    {
	    	__DMA1_Stream3_Config__ ->ISR_Routines.FIFO_Error_ISR();
 800065a:	4b4a      	ldr	r3, [pc, #296]	@ (8000784 <DMA1_Stream3_IRQHandler+0x14c>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000660:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CFEIF3;
 8000662:	4b46      	ldr	r3, [pc, #280]	@ (800077c <DMA1_Stream3_IRQHandler+0x144>)
 8000664:	689b      	ldr	r3, [r3, #8]
 8000666:	4a45      	ldr	r2, [pc, #276]	@ (800077c <DMA1_Stream3_IRQHandler+0x144>)
 8000668:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800066c:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_DMEIF3)
 800066e:	4b44      	ldr	r3, [pc, #272]	@ (8000780 <DMA1_Stream3_IRQHandler+0x148>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000676:	2b00      	cmp	r3, #0
 8000678:	d00e      	beq.n	8000698 <DMA1_Stream3_IRQHandler+0x60>
	{
	    if (__DMA1_Stream3_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 800067a:	4b42      	ldr	r3, [pc, #264]	@ (8000784 <DMA1_Stream3_IRQHandler+0x14c>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000680:	2b00      	cmp	r3, #0
 8000682:	d009      	beq.n	8000698 <DMA1_Stream3_IRQHandler+0x60>
	    {
	    	__DMA1_Stream3_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8000684:	4b3f      	ldr	r3, [pc, #252]	@ (8000784 <DMA1_Stream3_IRQHandler+0x14c>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800068a:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF3;
 800068c:	4b3b      	ldr	r3, [pc, #236]	@ (800077c <DMA1_Stream3_IRQHandler+0x144>)
 800068e:	689b      	ldr	r3, [r3, #8]
 8000690:	4a3a      	ldr	r2, [pc, #232]	@ (800077c <DMA1_Stream3_IRQHandler+0x144>)
 8000692:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000696:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_TEIF3)
 8000698:	4b39      	ldr	r3, [pc, #228]	@ (8000780 <DMA1_Stream3_IRQHandler+0x148>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d00e      	beq.n	80006c2 <DMA1_Stream3_IRQHandler+0x8a>
	{
	    if (__DMA1_Stream3_Config__ -> ISR_Routines.Transfer_Error_ISR)
 80006a4:	4b37      	ldr	r3, [pc, #220]	@ (8000784 <DMA1_Stream3_IRQHandler+0x14c>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d009      	beq.n	80006c2 <DMA1_Stream3_IRQHandler+0x8a>
	    {
	    	__DMA1_Stream3_Config__ ->ISR_Routines.Transfer_Error_ISR();
 80006ae:	4b35      	ldr	r3, [pc, #212]	@ (8000784 <DMA1_Stream3_IRQHandler+0x14c>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006b4:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CTEIF3;
 80006b6:	4b31      	ldr	r3, [pc, #196]	@ (800077c <DMA1_Stream3_IRQHandler+0x144>)
 80006b8:	689b      	ldr	r3, [r3, #8]
 80006ba:	4a30      	ldr	r2, [pc, #192]	@ (800077c <DMA1_Stream3_IRQHandler+0x144>)
 80006bc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80006c0:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_HTIF3)
 80006c2:	4b2f      	ldr	r3, [pc, #188]	@ (8000780 <DMA1_Stream3_IRQHandler+0x148>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d026      	beq.n	800071c <DMA1_Stream3_IRQHandler+0xe4>
	{
	    if (__DMA1_Stream3_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 80006ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000784 <DMA1_Stream3_IRQHandler+0x14c>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d021      	beq.n	800071c <DMA1_Stream3_IRQHandler+0xe4>
	    {
	    	__DMA1_Stream3_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80006d8:	4b2a      	ldr	r3, [pc, #168]	@ (8000784 <DMA1_Stream3_IRQHandler+0x14c>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80006de:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CHTIF3;
 80006e0:	4b26      	ldr	r3, [pc, #152]	@ (800077c <DMA1_Stream3_IRQHandler+0x144>)
 80006e2:	689b      	ldr	r3, [r3, #8]
 80006e4:	4a25      	ldr	r2, [pc, #148]	@ (800077c <DMA1_Stream3_IRQHandler+0x144>)
 80006e6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80006ea:	6093      	str	r3, [r2, #8]

	    	if(__DMA1_Stream3_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80006ec:	4b25      	ldr	r3, [pc, #148]	@ (8000784 <DMA1_Stream3_IRQHandler+0x14c>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80006f2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80006f6:	4293      	cmp	r3, r2
 80006f8:	d110      	bne.n	800071c <DMA1_Stream3_IRQHandler+0xe4>
	    	{
	    		if((__DMA1_Stream3_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80006fa:	4b22      	ldr	r3, [pc, #136]	@ (8000784 <DMA1_Stream3_IRQHandler+0x14c>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	685b      	ldr	r3, [r3, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000706:	2b00      	cmp	r3, #0
 8000708:	d004      	beq.n	8000714 <DMA1_Stream3_IRQHandler+0xdc>
	    		{
	    			__DMA1_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800070a:	4b1e      	ldr	r3, [pc, #120]	@ (8000784 <DMA1_Stream3_IRQHandler+0x14c>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000710:	4798      	blx	r3
 8000712:	e003      	b.n	800071c <DMA1_Stream3_IRQHandler+0xe4>
	    		}
	    		else
	    		{
	    			__DMA1_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000714:	4b1b      	ldr	r3, [pc, #108]	@ (8000784 <DMA1_Stream3_IRQHandler+0x14c>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800071a:	4798      	blx	r3
	    		}
	    	}
	    }
	}

	if(DMA_LISR & DMA_LISR_TCIF3)
 800071c:	4b18      	ldr	r3, [pc, #96]	@ (8000780 <DMA1_Stream3_IRQHandler+0x148>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000724:	2b00      	cmp	r3, #0
 8000726:	d026      	beq.n	8000776 <DMA1_Stream3_IRQHandler+0x13e>
	{
	    if (__DMA1_Stream3_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8000728:	4b16      	ldr	r3, [pc, #88]	@ (8000784 <DMA1_Stream3_IRQHandler+0x14c>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800072e:	2b00      	cmp	r3, #0
 8000730:	d021      	beq.n	8000776 <DMA1_Stream3_IRQHandler+0x13e>
	    {
	    	__DMA1_Stream3_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000732:	4b14      	ldr	r3, [pc, #80]	@ (8000784 <DMA1_Stream3_IRQHandler+0x14c>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000738:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CTCIF3;
 800073a:	4b10      	ldr	r3, [pc, #64]	@ (800077c <DMA1_Stream3_IRQHandler+0x144>)
 800073c:	689b      	ldr	r3, [r3, #8]
 800073e:	4a0f      	ldr	r2, [pc, #60]	@ (800077c <DMA1_Stream3_IRQHandler+0x144>)
 8000740:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000744:	6093      	str	r3, [r2, #8]

	    	if(__DMA1_Stream3_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000746:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <DMA1_Stream3_IRQHandler+0x14c>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800074c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000750:	4293      	cmp	r3, r2
 8000752:	d110      	bne.n	8000776 <DMA1_Stream3_IRQHandler+0x13e>
	    	{
	    		if((__DMA1_Stream3_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000754:	4b0b      	ldr	r3, [pc, #44]	@ (8000784 <DMA1_Stream3_IRQHandler+0x14c>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	685b      	ldr	r3, [r3, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000760:	2b00      	cmp	r3, #0
 8000762:	d004      	beq.n	800076e <DMA1_Stream3_IRQHandler+0x136>
	    		{
	    			__DMA1_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000764:	4b07      	ldr	r3, [pc, #28]	@ (8000784 <DMA1_Stream3_IRQHandler+0x14c>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800076a:	4798      	blx	r3
	    			__DMA1_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
	    		}
	    	}
	    }
	}
}
 800076c:	e003      	b.n	8000776 <DMA1_Stream3_IRQHandler+0x13e>
	    			__DMA1_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800076e:	4b05      	ldr	r3, [pc, #20]	@ (8000784 <DMA1_Stream3_IRQHandler+0x14c>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000774:	4798      	blx	r3
}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40026000 	.word	0x40026000
 8000780:	20000064 	.word	0x20000064
 8000784:	20000030 	.word	0x20000030

08000788 <DMA1_Stream4_IRQHandler>:

void DMA1_Stream4_IRQHandler(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
	DMA_HISR = DMA1 -> HISR;
 800078c:	4b4f      	ldr	r3, [pc, #316]	@ (80008cc <DMA1_Stream4_IRQHandler+0x144>)
 800078e:	685b      	ldr	r3, [r3, #4]
 8000790:	4a4f      	ldr	r2, [pc, #316]	@ (80008d0 <DMA1_Stream4_IRQHandler+0x148>)
 8000792:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF4)
 8000794:	4b4e      	ldr	r3, [pc, #312]	@ (80008d0 <DMA1_Stream4_IRQHandler+0x148>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f003 0301 	and.w	r3, r3, #1
 800079c:	2b00      	cmp	r3, #0
 800079e:	d00e      	beq.n	80007be <DMA1_Stream4_IRQHandler+0x36>
	{
	    if (__DMA1_Stream4_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80007a0:	4b4c      	ldr	r3, [pc, #304]	@ (80008d4 <DMA1_Stream4_IRQHandler+0x14c>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d009      	beq.n	80007be <DMA1_Stream4_IRQHandler+0x36>
	    {
	    	__DMA1_Stream4_Config__ ->ISR_Routines.FIFO_Error_ISR();
 80007aa:	4b4a      	ldr	r3, [pc, #296]	@ (80008d4 <DMA1_Stream4_IRQHandler+0x14c>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80007b0:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_HIFCR_CFEIF5;
 80007b2:	4b46      	ldr	r3, [pc, #280]	@ (80008cc <DMA1_Stream4_IRQHandler+0x144>)
 80007b4:	689b      	ldr	r3, [r3, #8]
 80007b6:	4a45      	ldr	r2, [pc, #276]	@ (80008cc <DMA1_Stream4_IRQHandler+0x144>)
 80007b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007bc:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_HISR & DMA_HISR_DMEIF4)
 80007be:	4b44      	ldr	r3, [pc, #272]	@ (80008d0 <DMA1_Stream4_IRQHandler+0x148>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	f003 0304 	and.w	r3, r3, #4
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d00e      	beq.n	80007e8 <DMA1_Stream4_IRQHandler+0x60>
	{
	    if (__DMA1_Stream4_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 80007ca:	4b42      	ldr	r3, [pc, #264]	@ (80008d4 <DMA1_Stream4_IRQHandler+0x14c>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d009      	beq.n	80007e8 <DMA1_Stream4_IRQHandler+0x60>
	    {
	    	__DMA1_Stream4_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 80007d4:	4b3f      	ldr	r3, [pc, #252]	@ (80008d4 <DMA1_Stream4_IRQHandler+0x14c>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007da:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF4;
 80007dc:	4b3b      	ldr	r3, [pc, #236]	@ (80008cc <DMA1_Stream4_IRQHandler+0x144>)
 80007de:	68db      	ldr	r3, [r3, #12]
 80007e0:	4a3a      	ldr	r2, [pc, #232]	@ (80008cc <DMA1_Stream4_IRQHandler+0x144>)
 80007e2:	f043 0304 	orr.w	r3, r3, #4
 80007e6:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_TEIF4)
 80007e8:	4b39      	ldr	r3, [pc, #228]	@ (80008d0 <DMA1_Stream4_IRQHandler+0x148>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	f003 0308 	and.w	r3, r3, #8
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d00e      	beq.n	8000812 <DMA1_Stream4_IRQHandler+0x8a>
	{
	    if (__DMA1_Stream4_Config__ -> ISR_Routines.Transfer_Error_ISR)
 80007f4:	4b37      	ldr	r3, [pc, #220]	@ (80008d4 <DMA1_Stream4_IRQHandler+0x14c>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d009      	beq.n	8000812 <DMA1_Stream4_IRQHandler+0x8a>
	    {
	    	__DMA1_Stream4_Config__ ->ISR_Routines.Transfer_Error_ISR();
 80007fe:	4b35      	ldr	r3, [pc, #212]	@ (80008d4 <DMA1_Stream4_IRQHandler+0x14c>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000804:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CTEIF4;
 8000806:	4b31      	ldr	r3, [pc, #196]	@ (80008cc <DMA1_Stream4_IRQHandler+0x144>)
 8000808:	68db      	ldr	r3, [r3, #12]
 800080a:	4a30      	ldr	r2, [pc, #192]	@ (80008cc <DMA1_Stream4_IRQHandler+0x144>)
 800080c:	f043 0308 	orr.w	r3, r3, #8
 8000810:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_HTIF4)
 8000812:	4b2f      	ldr	r3, [pc, #188]	@ (80008d0 <DMA1_Stream4_IRQHandler+0x148>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	f003 0310 	and.w	r3, r3, #16
 800081a:	2b00      	cmp	r3, #0
 800081c:	d026      	beq.n	800086c <DMA1_Stream4_IRQHandler+0xe4>
	{
	    if (__DMA1_Stream4_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 800081e:	4b2d      	ldr	r3, [pc, #180]	@ (80008d4 <DMA1_Stream4_IRQHandler+0x14c>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000824:	2b00      	cmp	r3, #0
 8000826:	d021      	beq.n	800086c <DMA1_Stream4_IRQHandler+0xe4>
	    {
	    	__DMA1_Stream4_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000828:	4b2a      	ldr	r3, [pc, #168]	@ (80008d4 <DMA1_Stream4_IRQHandler+0x14c>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800082e:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CHTIF4;
 8000830:	4b26      	ldr	r3, [pc, #152]	@ (80008cc <DMA1_Stream4_IRQHandler+0x144>)
 8000832:	68db      	ldr	r3, [r3, #12]
 8000834:	4a25      	ldr	r2, [pc, #148]	@ (80008cc <DMA1_Stream4_IRQHandler+0x144>)
 8000836:	f043 0310 	orr.w	r3, r3, #16
 800083a:	60d3      	str	r3, [r2, #12]

	    	if(__DMA1_Stream4_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800083c:	4b25      	ldr	r3, [pc, #148]	@ (80008d4 <DMA1_Stream4_IRQHandler+0x14c>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000842:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000846:	4293      	cmp	r3, r2
 8000848:	d110      	bne.n	800086c <DMA1_Stream4_IRQHandler+0xe4>
	    	{
	    		if((__DMA1_Stream4_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800084a:	4b22      	ldr	r3, [pc, #136]	@ (80008d4 <DMA1_Stream4_IRQHandler+0x14c>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	685b      	ldr	r3, [r3, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000856:	2b00      	cmp	r3, #0
 8000858:	d004      	beq.n	8000864 <DMA1_Stream4_IRQHandler+0xdc>
	    		{
	    			__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800085a:	4b1e      	ldr	r3, [pc, #120]	@ (80008d4 <DMA1_Stream4_IRQHandler+0x14c>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000860:	4798      	blx	r3
 8000862:	e003      	b.n	800086c <DMA1_Stream4_IRQHandler+0xe4>
	    		}
	    		else
	    		{
	    			__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000864:	4b1b      	ldr	r3, [pc, #108]	@ (80008d4 <DMA1_Stream4_IRQHandler+0x14c>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800086a:	4798      	blx	r3
	    		}
	    	}
	    }
	}

	if(DMA_HISR & DMA_HISR_TCIF4)
 800086c:	4b18      	ldr	r3, [pc, #96]	@ (80008d0 <DMA1_Stream4_IRQHandler+0x148>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	f003 0320 	and.w	r3, r3, #32
 8000874:	2b00      	cmp	r3, #0
 8000876:	d026      	beq.n	80008c6 <DMA1_Stream4_IRQHandler+0x13e>
	{
	    if (__DMA1_Stream4_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8000878:	4b16      	ldr	r3, [pc, #88]	@ (80008d4 <DMA1_Stream4_IRQHandler+0x14c>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800087e:	2b00      	cmp	r3, #0
 8000880:	d021      	beq.n	80008c6 <DMA1_Stream4_IRQHandler+0x13e>
	    {
	    	__DMA1_Stream4_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000882:	4b14      	ldr	r3, [pc, #80]	@ (80008d4 <DMA1_Stream4_IRQHandler+0x14c>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000888:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CTCIF4;
 800088a:	4b10      	ldr	r3, [pc, #64]	@ (80008cc <DMA1_Stream4_IRQHandler+0x144>)
 800088c:	68db      	ldr	r3, [r3, #12]
 800088e:	4a0f      	ldr	r2, [pc, #60]	@ (80008cc <DMA1_Stream4_IRQHandler+0x144>)
 8000890:	f043 0320 	orr.w	r3, r3, #32
 8000894:	60d3      	str	r3, [r2, #12]

	    	if(__DMA1_Stream4_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000896:	4b0f      	ldr	r3, [pc, #60]	@ (80008d4 <DMA1_Stream4_IRQHandler+0x14c>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800089c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d110      	bne.n	80008c6 <DMA1_Stream4_IRQHandler+0x13e>
	    	{
	    		if((__DMA1_Stream4_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80008a4:	4b0b      	ldr	r3, [pc, #44]	@ (80008d4 <DMA1_Stream4_IRQHandler+0x14c>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	685b      	ldr	r3, [r3, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d004      	beq.n	80008be <DMA1_Stream4_IRQHandler+0x136>
	    		{
	    			__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80008b4:	4b07      	ldr	r3, [pc, #28]	@ (80008d4 <DMA1_Stream4_IRQHandler+0x14c>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80008ba:	4798      	blx	r3
	    			__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
	    		}
	    	}
	    }
	}
}
 80008bc:	e003      	b.n	80008c6 <DMA1_Stream4_IRQHandler+0x13e>
	    			__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80008be:	4b05      	ldr	r3, [pc, #20]	@ (80008d4 <DMA1_Stream4_IRQHandler+0x14c>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80008c4:	4798      	blx	r3
}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40026000 	.word	0x40026000
 80008d0:	20000068 	.word	0x20000068
 80008d4:	20000034 	.word	0x20000034

080008d8 <DMA1_Stream5_IRQHandler>:




void DMA1_Stream5_IRQHandler(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
	DMA_HISR = DMA1 -> HISR;
 80008dc:	4b4f      	ldr	r3, [pc, #316]	@ (8000a1c <DMA1_Stream5_IRQHandler+0x144>)
 80008de:	685b      	ldr	r3, [r3, #4]
 80008e0:	4a4f      	ldr	r2, [pc, #316]	@ (8000a20 <DMA1_Stream5_IRQHandler+0x148>)
 80008e2:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF5)
 80008e4:	4b4e      	ldr	r3, [pc, #312]	@ (8000a20 <DMA1_Stream5_IRQHandler+0x148>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d00e      	beq.n	800090e <DMA1_Stream5_IRQHandler+0x36>
	{
	    if (__DMA1_Stream5_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80008f0:	4b4c      	ldr	r3, [pc, #304]	@ (8000a24 <DMA1_Stream5_IRQHandler+0x14c>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d009      	beq.n	800090e <DMA1_Stream5_IRQHandler+0x36>
	    {
	    	__DMA1_Stream5_Config__ ->ISR_Routines.FIFO_Error_ISR();
 80008fa:	4b4a      	ldr	r3, [pc, #296]	@ (8000a24 <DMA1_Stream5_IRQHandler+0x14c>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000900:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CFEIF5;
 8000902:	4b46      	ldr	r3, [pc, #280]	@ (8000a1c <DMA1_Stream5_IRQHandler+0x144>)
 8000904:	68db      	ldr	r3, [r3, #12]
 8000906:	4a45      	ldr	r2, [pc, #276]	@ (8000a1c <DMA1_Stream5_IRQHandler+0x144>)
 8000908:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800090c:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_DMEIF5)
 800090e:	4b44      	ldr	r3, [pc, #272]	@ (8000a20 <DMA1_Stream5_IRQHandler+0x148>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000916:	2b00      	cmp	r3, #0
 8000918:	d00e      	beq.n	8000938 <DMA1_Stream5_IRQHandler+0x60>
	{
	    if (__DMA1_Stream5_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 800091a:	4b42      	ldr	r3, [pc, #264]	@ (8000a24 <DMA1_Stream5_IRQHandler+0x14c>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000920:	2b00      	cmp	r3, #0
 8000922:	d009      	beq.n	8000938 <DMA1_Stream5_IRQHandler+0x60>
	    {
	    	__DMA1_Stream5_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8000924:	4b3f      	ldr	r3, [pc, #252]	@ (8000a24 <DMA1_Stream5_IRQHandler+0x14c>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800092a:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF5;
 800092c:	4b3b      	ldr	r3, [pc, #236]	@ (8000a1c <DMA1_Stream5_IRQHandler+0x144>)
 800092e:	68db      	ldr	r3, [r3, #12]
 8000930:	4a3a      	ldr	r2, [pc, #232]	@ (8000a1c <DMA1_Stream5_IRQHandler+0x144>)
 8000932:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000936:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_TEIF5)
 8000938:	4b39      	ldr	r3, [pc, #228]	@ (8000a20 <DMA1_Stream5_IRQHandler+0x148>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000940:	2b00      	cmp	r3, #0
 8000942:	d00e      	beq.n	8000962 <DMA1_Stream5_IRQHandler+0x8a>
	{
	    if (__DMA1_Stream5_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8000944:	4b37      	ldr	r3, [pc, #220]	@ (8000a24 <DMA1_Stream5_IRQHandler+0x14c>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800094a:	2b00      	cmp	r3, #0
 800094c:	d009      	beq.n	8000962 <DMA1_Stream5_IRQHandler+0x8a>
	    {
	    	__DMA1_Stream5_Config__ ->ISR_Routines.Transfer_Error_ISR();
 800094e:	4b35      	ldr	r3, [pc, #212]	@ (8000a24 <DMA1_Stream5_IRQHandler+0x14c>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000954:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CTEIF5;
 8000956:	4b31      	ldr	r3, [pc, #196]	@ (8000a1c <DMA1_Stream5_IRQHandler+0x144>)
 8000958:	68db      	ldr	r3, [r3, #12]
 800095a:	4a30      	ldr	r2, [pc, #192]	@ (8000a1c <DMA1_Stream5_IRQHandler+0x144>)
 800095c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000960:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_HTIF5)
 8000962:	4b2f      	ldr	r3, [pc, #188]	@ (8000a20 <DMA1_Stream5_IRQHandler+0x148>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800096a:	2b00      	cmp	r3, #0
 800096c:	d026      	beq.n	80009bc <DMA1_Stream5_IRQHandler+0xe4>
	{
	    if (__DMA1_Stream5_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 800096e:	4b2d      	ldr	r3, [pc, #180]	@ (8000a24 <DMA1_Stream5_IRQHandler+0x14c>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000974:	2b00      	cmp	r3, #0
 8000976:	d021      	beq.n	80009bc <DMA1_Stream5_IRQHandler+0xe4>
	    {
	    	__DMA1_Stream5_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000978:	4b2a      	ldr	r3, [pc, #168]	@ (8000a24 <DMA1_Stream5_IRQHandler+0x14c>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800097e:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CHTIF5;
 8000980:	4b26      	ldr	r3, [pc, #152]	@ (8000a1c <DMA1_Stream5_IRQHandler+0x144>)
 8000982:	68db      	ldr	r3, [r3, #12]
 8000984:	4a25      	ldr	r2, [pc, #148]	@ (8000a1c <DMA1_Stream5_IRQHandler+0x144>)
 8000986:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800098a:	60d3      	str	r3, [r2, #12]

	    	if(__DMA1_Stream5_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800098c:	4b25      	ldr	r3, [pc, #148]	@ (8000a24 <DMA1_Stream5_IRQHandler+0x14c>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000992:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000996:	4293      	cmp	r3, r2
 8000998:	d110      	bne.n	80009bc <DMA1_Stream5_IRQHandler+0xe4>
	    	{
	    		if((__DMA1_Stream5_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800099a:	4b22      	ldr	r3, [pc, #136]	@ (8000a24 <DMA1_Stream5_IRQHandler+0x14c>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d004      	beq.n	80009b4 <DMA1_Stream5_IRQHandler+0xdc>
	    		{
	    			__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80009aa:	4b1e      	ldr	r3, [pc, #120]	@ (8000a24 <DMA1_Stream5_IRQHandler+0x14c>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80009b0:	4798      	blx	r3
 80009b2:	e003      	b.n	80009bc <DMA1_Stream5_IRQHandler+0xe4>
	    		}
	    		else
	    		{
	    			__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80009b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a24 <DMA1_Stream5_IRQHandler+0x14c>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80009ba:	4798      	blx	r3
	    		}
	    	}
	    }
	}

	if(DMA_HISR & DMA_HISR_TCIF5)
 80009bc:	4b18      	ldr	r3, [pc, #96]	@ (8000a20 <DMA1_Stream5_IRQHandler+0x148>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d026      	beq.n	8000a16 <DMA1_Stream5_IRQHandler+0x13e>
	{
	    if (__DMA1_Stream5_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 80009c8:	4b16      	ldr	r3, [pc, #88]	@ (8000a24 <DMA1_Stream5_IRQHandler+0x14c>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d021      	beq.n	8000a16 <DMA1_Stream5_IRQHandler+0x13e>
	    {
	    	__DMA1_Stream5_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80009d2:	4b14      	ldr	r3, [pc, #80]	@ (8000a24 <DMA1_Stream5_IRQHandler+0x14c>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80009d8:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CTCIF5;
 80009da:	4b10      	ldr	r3, [pc, #64]	@ (8000a1c <DMA1_Stream5_IRQHandler+0x144>)
 80009dc:	68db      	ldr	r3, [r3, #12]
 80009de:	4a0f      	ldr	r2, [pc, #60]	@ (8000a1c <DMA1_Stream5_IRQHandler+0x144>)
 80009e0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80009e4:	60d3      	str	r3, [r2, #12]

	    	if(__DMA1_Stream5_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80009e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000a24 <DMA1_Stream5_IRQHandler+0x14c>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80009ec:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d110      	bne.n	8000a16 <DMA1_Stream5_IRQHandler+0x13e>
	    	{
	    		if((__DMA1_Stream5_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80009f4:	4b0b      	ldr	r3, [pc, #44]	@ (8000a24 <DMA1_Stream5_IRQHandler+0x14c>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d004      	beq.n	8000a0e <DMA1_Stream5_IRQHandler+0x136>
	    		{
	    			__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000a04:	4b07      	ldr	r3, [pc, #28]	@ (8000a24 <DMA1_Stream5_IRQHandler+0x14c>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000a0a:	4798      	blx	r3
	    			__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
	    		}
	    	}
	    }
	}
}
 8000a0c:	e003      	b.n	8000a16 <DMA1_Stream5_IRQHandler+0x13e>
	    			__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000a0e:	4b05      	ldr	r3, [pc, #20]	@ (8000a24 <DMA1_Stream5_IRQHandler+0x14c>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000a14:	4798      	blx	r3
}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40026000 	.word	0x40026000
 8000a20:	20000068 	.word	0x20000068
 8000a24:	20000038 	.word	0x20000038

08000a28 <DMA1_Stream6_IRQHandler>:



void DMA1_Stream6_IRQHandler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
	DMA_HISR = DMA1 -> HISR;
 8000a2c:	4b4f      	ldr	r3, [pc, #316]	@ (8000b6c <DMA1_Stream6_IRQHandler+0x144>)
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	4a4f      	ldr	r2, [pc, #316]	@ (8000b70 <DMA1_Stream6_IRQHandler+0x148>)
 8000a32:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF6)
 8000a34:	4b4e      	ldr	r3, [pc, #312]	@ (8000b70 <DMA1_Stream6_IRQHandler+0x148>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d00e      	beq.n	8000a5e <DMA1_Stream6_IRQHandler+0x36>
	{
	    if (__DMA1_Stream6_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8000a40:	4b4c      	ldr	r3, [pc, #304]	@ (8000b74 <DMA1_Stream6_IRQHandler+0x14c>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d009      	beq.n	8000a5e <DMA1_Stream6_IRQHandler+0x36>
	    {
	    	__DMA1_Stream6_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8000a4a:	4b4a      	ldr	r3, [pc, #296]	@ (8000b74 <DMA1_Stream6_IRQHandler+0x14c>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000a50:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CFEIF6;
 8000a52:	4b46      	ldr	r3, [pc, #280]	@ (8000b6c <DMA1_Stream6_IRQHandler+0x144>)
 8000a54:	68db      	ldr	r3, [r3, #12]
 8000a56:	4a45      	ldr	r2, [pc, #276]	@ (8000b6c <DMA1_Stream6_IRQHandler+0x144>)
 8000a58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000a5c:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_DMEIF6)
 8000a5e:	4b44      	ldr	r3, [pc, #272]	@ (8000b70 <DMA1_Stream6_IRQHandler+0x148>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d00e      	beq.n	8000a88 <DMA1_Stream6_IRQHandler+0x60>
	{
	    if (__DMA1_Stream6_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8000a6a:	4b42      	ldr	r3, [pc, #264]	@ (8000b74 <DMA1_Stream6_IRQHandler+0x14c>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d009      	beq.n	8000a88 <DMA1_Stream6_IRQHandler+0x60>
	    {
	    	__DMA1_Stream6_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8000a74:	4b3f      	ldr	r3, [pc, #252]	@ (8000b74 <DMA1_Stream6_IRQHandler+0x14c>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a7a:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF6;
 8000a7c:	4b3b      	ldr	r3, [pc, #236]	@ (8000b6c <DMA1_Stream6_IRQHandler+0x144>)
 8000a7e:	68db      	ldr	r3, [r3, #12]
 8000a80:	4a3a      	ldr	r2, [pc, #232]	@ (8000b6c <DMA1_Stream6_IRQHandler+0x144>)
 8000a82:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a86:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_TEIF6)
 8000a88:	4b39      	ldr	r3, [pc, #228]	@ (8000b70 <DMA1_Stream6_IRQHandler+0x148>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d00e      	beq.n	8000ab2 <DMA1_Stream6_IRQHandler+0x8a>
	{
	    if (__DMA1_Stream6_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8000a94:	4b37      	ldr	r3, [pc, #220]	@ (8000b74 <DMA1_Stream6_IRQHandler+0x14c>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d009      	beq.n	8000ab2 <DMA1_Stream6_IRQHandler+0x8a>
	    {
	    	__DMA1_Stream6_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8000a9e:	4b35      	ldr	r3, [pc, #212]	@ (8000b74 <DMA1_Stream6_IRQHandler+0x14c>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aa4:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CTEIF6;
 8000aa6:	4b31      	ldr	r3, [pc, #196]	@ (8000b6c <DMA1_Stream6_IRQHandler+0x144>)
 8000aa8:	68db      	ldr	r3, [r3, #12]
 8000aaa:	4a30      	ldr	r2, [pc, #192]	@ (8000b6c <DMA1_Stream6_IRQHandler+0x144>)
 8000aac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000ab0:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_HTIF6)
 8000ab2:	4b2f      	ldr	r3, [pc, #188]	@ (8000b70 <DMA1_Stream6_IRQHandler+0x148>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d026      	beq.n	8000b0c <DMA1_Stream6_IRQHandler+0xe4>
	{
	    if (__DMA1_Stream6_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8000abe:	4b2d      	ldr	r3, [pc, #180]	@ (8000b74 <DMA1_Stream6_IRQHandler+0x14c>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d021      	beq.n	8000b0c <DMA1_Stream6_IRQHandler+0xe4>
	    {
	    	__DMA1_Stream6_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000ac8:	4b2a      	ldr	r3, [pc, #168]	@ (8000b74 <DMA1_Stream6_IRQHandler+0x14c>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ace:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CHTIF6;
 8000ad0:	4b26      	ldr	r3, [pc, #152]	@ (8000b6c <DMA1_Stream6_IRQHandler+0x144>)
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	4a25      	ldr	r2, [pc, #148]	@ (8000b6c <DMA1_Stream6_IRQHandler+0x144>)
 8000ad6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000ada:	60d3      	str	r3, [r2, #12]

	    	if(__DMA1_Stream6_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000adc:	4b25      	ldr	r3, [pc, #148]	@ (8000b74 <DMA1_Stream6_IRQHandler+0x14c>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ae2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d110      	bne.n	8000b0c <DMA1_Stream6_IRQHandler+0xe4>
	    	{
	    		if((__DMA1_Stream6_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000aea:	4b22      	ldr	r3, [pc, #136]	@ (8000b74 <DMA1_Stream6_IRQHandler+0x14c>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d004      	beq.n	8000b04 <DMA1_Stream6_IRQHandler+0xdc>
	    		{
	    			__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000afa:	4b1e      	ldr	r3, [pc, #120]	@ (8000b74 <DMA1_Stream6_IRQHandler+0x14c>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000b00:	4798      	blx	r3
 8000b02:	e003      	b.n	8000b0c <DMA1_Stream6_IRQHandler+0xe4>
	    		}
	    		else
	    		{
	    			__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000b04:	4b1b      	ldr	r3, [pc, #108]	@ (8000b74 <DMA1_Stream6_IRQHandler+0x14c>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000b0a:	4798      	blx	r3
	    		}
	    	}
	    }
	}

	if(DMA_HISR & DMA_HISR_TCIF6)
 8000b0c:	4b18      	ldr	r3, [pc, #96]	@ (8000b70 <DMA1_Stream6_IRQHandler+0x148>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d026      	beq.n	8000b66 <DMA1_Stream6_IRQHandler+0x13e>
	{
	    if (__DMA1_Stream6_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8000b18:	4b16      	ldr	r3, [pc, #88]	@ (8000b74 <DMA1_Stream6_IRQHandler+0x14c>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d021      	beq.n	8000b66 <DMA1_Stream6_IRQHandler+0x13e>
	    {
	    	__DMA1_Stream6_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000b22:	4b14      	ldr	r3, [pc, #80]	@ (8000b74 <DMA1_Stream6_IRQHandler+0x14c>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b28:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CTCIF6;
 8000b2a:	4b10      	ldr	r3, [pc, #64]	@ (8000b6c <DMA1_Stream6_IRQHandler+0x144>)
 8000b2c:	68db      	ldr	r3, [r3, #12]
 8000b2e:	4a0f      	ldr	r2, [pc, #60]	@ (8000b6c <DMA1_Stream6_IRQHandler+0x144>)
 8000b30:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b34:	60d3      	str	r3, [r2, #12]

	    	if(__DMA1_Stream6_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000b36:	4b0f      	ldr	r3, [pc, #60]	@ (8000b74 <DMA1_Stream6_IRQHandler+0x14c>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000b3c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d110      	bne.n	8000b66 <DMA1_Stream6_IRQHandler+0x13e>
	    	{
	    		if((__DMA1_Stream6_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000b44:	4b0b      	ldr	r3, [pc, #44]	@ (8000b74 <DMA1_Stream6_IRQHandler+0x14c>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d004      	beq.n	8000b5e <DMA1_Stream6_IRQHandler+0x136>
	    		{
	    			__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000b54:	4b07      	ldr	r3, [pc, #28]	@ (8000b74 <DMA1_Stream6_IRQHandler+0x14c>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000b5a:	4798      	blx	r3
	    			__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
	    		}
	    	}
	    }
	}
}
 8000b5c:	e003      	b.n	8000b66 <DMA1_Stream6_IRQHandler+0x13e>
	    			__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000b5e:	4b05      	ldr	r3, [pc, #20]	@ (8000b74 <DMA1_Stream6_IRQHandler+0x14c>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000b64:	4798      	blx	r3
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40026000 	.word	0x40026000
 8000b70:	20000068 	.word	0x20000068
 8000b74:	2000003c 	.word	0x2000003c

08000b78 <DMA1_Stream7_IRQHandler>:


void DMA1_Stream7_IRQHandler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
	DMA_HISR = DMA1 -> HISR;
 8000b7c:	4b4f      	ldr	r3, [pc, #316]	@ (8000cbc <DMA1_Stream7_IRQHandler+0x144>)
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	4a4f      	ldr	r2, [pc, #316]	@ (8000cc0 <DMA1_Stream7_IRQHandler+0x148>)
 8000b82:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF7)
 8000b84:	4b4e      	ldr	r3, [pc, #312]	@ (8000cc0 <DMA1_Stream7_IRQHandler+0x148>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d00e      	beq.n	8000bae <DMA1_Stream7_IRQHandler+0x36>
	{
	    if (__DMA1_Stream7_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8000b90:	4b4c      	ldr	r3, [pc, #304]	@ (8000cc4 <DMA1_Stream7_IRQHandler+0x14c>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d009      	beq.n	8000bae <DMA1_Stream7_IRQHandler+0x36>
	    {
	    	__DMA1_Stream7_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8000b9a:	4b4a      	ldr	r3, [pc, #296]	@ (8000cc4 <DMA1_Stream7_IRQHandler+0x14c>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ba0:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CFEIF7;
 8000ba2:	4b46      	ldr	r3, [pc, #280]	@ (8000cbc <DMA1_Stream7_IRQHandler+0x144>)
 8000ba4:	68db      	ldr	r3, [r3, #12]
 8000ba6:	4a45      	ldr	r2, [pc, #276]	@ (8000cbc <DMA1_Stream7_IRQHandler+0x144>)
 8000ba8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000bac:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_DMEIF7)
 8000bae:	4b44      	ldr	r3, [pc, #272]	@ (8000cc0 <DMA1_Stream7_IRQHandler+0x148>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d00e      	beq.n	8000bd8 <DMA1_Stream7_IRQHandler+0x60>
	{
	    if (__DMA1_Stream7_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8000bba:	4b42      	ldr	r3, [pc, #264]	@ (8000cc4 <DMA1_Stream7_IRQHandler+0x14c>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d009      	beq.n	8000bd8 <DMA1_Stream7_IRQHandler+0x60>
	    {
	    	__DMA1_Stream7_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8000bc4:	4b3f      	ldr	r3, [pc, #252]	@ (8000cc4 <DMA1_Stream7_IRQHandler+0x14c>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bca:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF7;
 8000bcc:	4b3b      	ldr	r3, [pc, #236]	@ (8000cbc <DMA1_Stream7_IRQHandler+0x144>)
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	4a3a      	ldr	r2, [pc, #232]	@ (8000cbc <DMA1_Stream7_IRQHandler+0x144>)
 8000bd2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000bd6:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_TEIF7)
 8000bd8:	4b39      	ldr	r3, [pc, #228]	@ (8000cc0 <DMA1_Stream7_IRQHandler+0x148>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d00e      	beq.n	8000c02 <DMA1_Stream7_IRQHandler+0x8a>
	{
	    if (__DMA1_Stream7_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8000be4:	4b37      	ldr	r3, [pc, #220]	@ (8000cc4 <DMA1_Stream7_IRQHandler+0x14c>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d009      	beq.n	8000c02 <DMA1_Stream7_IRQHandler+0x8a>
	    {
	    	__DMA1_Stream7_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8000bee:	4b35      	ldr	r3, [pc, #212]	@ (8000cc4 <DMA1_Stream7_IRQHandler+0x14c>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bf4:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CTEIF7;
 8000bf6:	4b31      	ldr	r3, [pc, #196]	@ (8000cbc <DMA1_Stream7_IRQHandler+0x144>)
 8000bf8:	68db      	ldr	r3, [r3, #12]
 8000bfa:	4a30      	ldr	r2, [pc, #192]	@ (8000cbc <DMA1_Stream7_IRQHandler+0x144>)
 8000bfc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c00:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_HTIF7)
 8000c02:	4b2f      	ldr	r3, [pc, #188]	@ (8000cc0 <DMA1_Stream7_IRQHandler+0x148>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d026      	beq.n	8000c5c <DMA1_Stream7_IRQHandler+0xe4>
	{
	    if (__DMA1_Stream7_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8000c0e:	4b2d      	ldr	r3, [pc, #180]	@ (8000cc4 <DMA1_Stream7_IRQHandler+0x14c>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d021      	beq.n	8000c5c <DMA1_Stream7_IRQHandler+0xe4>
	    {
	    	__DMA1_Stream7_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000c18:	4b2a      	ldr	r3, [pc, #168]	@ (8000cc4 <DMA1_Stream7_IRQHandler+0x14c>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c1e:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CHTIF7;
 8000c20:	4b26      	ldr	r3, [pc, #152]	@ (8000cbc <DMA1_Stream7_IRQHandler+0x144>)
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	4a25      	ldr	r2, [pc, #148]	@ (8000cbc <DMA1_Stream7_IRQHandler+0x144>)
 8000c26:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000c2a:	60d3      	str	r3, [r2, #12]

	    	if(__DMA1_Stream7_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000c2c:	4b25      	ldr	r3, [pc, #148]	@ (8000cc4 <DMA1_Stream7_IRQHandler+0x14c>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c32:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d110      	bne.n	8000c5c <DMA1_Stream7_IRQHandler+0xe4>
	    	{
	    		if((__DMA1_Stream7_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000c3a:	4b22      	ldr	r3, [pc, #136]	@ (8000cc4 <DMA1_Stream7_IRQHandler+0x14c>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d004      	beq.n	8000c54 <DMA1_Stream7_IRQHandler+0xdc>
	    		{
	    			__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000c4a:	4b1e      	ldr	r3, [pc, #120]	@ (8000cc4 <DMA1_Stream7_IRQHandler+0x14c>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000c50:	4798      	blx	r3
 8000c52:	e003      	b.n	8000c5c <DMA1_Stream7_IRQHandler+0xe4>
	    		}
	    		else
	    		{
	    			__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000c54:	4b1b      	ldr	r3, [pc, #108]	@ (8000cc4 <DMA1_Stream7_IRQHandler+0x14c>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000c5a:	4798      	blx	r3
	    		}
	    	}
	    }
	}

	if(DMA_HISR & DMA_HISR_TCIF7)
 8000c5c:	4b18      	ldr	r3, [pc, #96]	@ (8000cc0 <DMA1_Stream7_IRQHandler+0x148>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d026      	beq.n	8000cb6 <DMA1_Stream7_IRQHandler+0x13e>
	{
	    if (__DMA1_Stream7_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8000c68:	4b16      	ldr	r3, [pc, #88]	@ (8000cc4 <DMA1_Stream7_IRQHandler+0x14c>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d021      	beq.n	8000cb6 <DMA1_Stream7_IRQHandler+0x13e>
	    {
	    	__DMA1_Stream7_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000c72:	4b14      	ldr	r3, [pc, #80]	@ (8000cc4 <DMA1_Stream7_IRQHandler+0x14c>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c78:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CTCIF7;
 8000c7a:	4b10      	ldr	r3, [pc, #64]	@ (8000cbc <DMA1_Stream7_IRQHandler+0x144>)
 8000c7c:	68db      	ldr	r3, [r3, #12]
 8000c7e:	4a0f      	ldr	r2, [pc, #60]	@ (8000cbc <DMA1_Stream7_IRQHandler+0x144>)
 8000c80:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000c84:	60d3      	str	r3, [r2, #12]

	    	if(__DMA1_Stream7_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000c86:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc4 <DMA1_Stream7_IRQHandler+0x14c>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c8c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d110      	bne.n	8000cb6 <DMA1_Stream7_IRQHandler+0x13e>
	    	{
	    		if((__DMA1_Stream7_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000c94:	4b0b      	ldr	r3, [pc, #44]	@ (8000cc4 <DMA1_Stream7_IRQHandler+0x14c>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d004      	beq.n	8000cae <DMA1_Stream7_IRQHandler+0x136>
	    		{
	    			__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000ca4:	4b07      	ldr	r3, [pc, #28]	@ (8000cc4 <DMA1_Stream7_IRQHandler+0x14c>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000caa:	4798      	blx	r3
	    			__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
	    		}
	    	}
	    }
	}
}
 8000cac:	e003      	b.n	8000cb6 <DMA1_Stream7_IRQHandler+0x13e>
	    			__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000cae:	4b05      	ldr	r3, [pc, #20]	@ (8000cc4 <DMA1_Stream7_IRQHandler+0x14c>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000cb4:	4798      	blx	r3
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40026000 	.word	0x40026000
 8000cc0:	20000068 	.word	0x20000068
 8000cc4:	20000040 	.word	0x20000040

08000cc8 <DMA2_Stream0_IRQHandler>:

void DMA2_Stream0_IRQHandler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
	DMA_LISR = DMA2 -> LISR;
 8000ccc:	4b60      	ldr	r3, [pc, #384]	@ (8000e50 <DMA2_Stream0_IRQHandler+0x188>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a60      	ldr	r2, [pc, #384]	@ (8000e54 <DMA2_Stream0_IRQHandler+0x18c>)
 8000cd2:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF0)
 8000cd4:	4b5f      	ldr	r3, [pc, #380]	@ (8000e54 <DMA2_Stream0_IRQHandler+0x18c>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f003 0301 	and.w	r3, r3, #1
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d015      	beq.n	8000d0c <DMA2_Stream0_IRQHandler+0x44>
	{
		if(__DMA2_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 8000ce0:	4b5d      	ldr	r3, [pc, #372]	@ (8000e58 <DMA2_Stream0_IRQHandler+0x190>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	69db      	ldr	r3, [r3, #28]
 8000ce6:	2280      	movs	r2, #128	@ 0x80
 8000ce8:	4013      	ands	r3, r2
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d00e      	beq.n	8000d0c <DMA2_Stream0_IRQHandler+0x44>
		{
		    if (__DMA2_Stream0_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8000cee:	4b5a      	ldr	r3, [pc, #360]	@ (8000e58 <DMA2_Stream0_IRQHandler+0x190>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d009      	beq.n	8000d0c <DMA2_Stream0_IRQHandler+0x44>
		    {
		    	__DMA2_Stream0_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8000cf8:	4b57      	ldr	r3, [pc, #348]	@ (8000e58 <DMA2_Stream0_IRQHandler+0x190>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000cfe:	4798      	blx	r3
		    	DMA2 -> LIFCR |= DMA_LIFCR_CFEIF0;
 8000d00:	4b53      	ldr	r3, [pc, #332]	@ (8000e50 <DMA2_Stream0_IRQHandler+0x188>)
 8000d02:	689b      	ldr	r3, [r3, #8]
 8000d04:	4a52      	ldr	r2, [pc, #328]	@ (8000e50 <DMA2_Stream0_IRQHandler+0x188>)
 8000d06:	f043 0301 	orr.w	r3, r3, #1
 8000d0a:	6093      	str	r3, [r2, #8]
		    }
		}

	}

	if(DMA_LISR & DMA_LISR_DMEIF0)
 8000d0c:	4b51      	ldr	r3, [pc, #324]	@ (8000e54 <DMA2_Stream0_IRQHandler+0x18c>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f003 0304 	and.w	r3, r3, #4
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d015      	beq.n	8000d44 <DMA2_Stream0_IRQHandler+0x7c>
	{
		if(__DMA2_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 8000d18:	4b4f      	ldr	r3, [pc, #316]	@ (8000e58 <DMA2_Stream0_IRQHandler+0x190>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	69db      	ldr	r3, [r3, #28]
 8000d1e:	2202      	movs	r2, #2
 8000d20:	4013      	ands	r3, r2
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d00e      	beq.n	8000d44 <DMA2_Stream0_IRQHandler+0x7c>
		{
		    if (__DMA2_Stream0_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8000d26:	4b4c      	ldr	r3, [pc, #304]	@ (8000e58 <DMA2_Stream0_IRQHandler+0x190>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d009      	beq.n	8000d44 <DMA2_Stream0_IRQHandler+0x7c>
		    {
		    	__DMA2_Stream0_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8000d30:	4b49      	ldr	r3, [pc, #292]	@ (8000e58 <DMA2_Stream0_IRQHandler+0x190>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d36:	4798      	blx	r3
		    	DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF0;
 8000d38:	4b45      	ldr	r3, [pc, #276]	@ (8000e50 <DMA2_Stream0_IRQHandler+0x188>)
 8000d3a:	689b      	ldr	r3, [r3, #8]
 8000d3c:	4a44      	ldr	r2, [pc, #272]	@ (8000e50 <DMA2_Stream0_IRQHandler+0x188>)
 8000d3e:	f043 0304 	orr.w	r3, r3, #4
 8000d42:	6093      	str	r3, [r2, #8]
		    }
		}

	}

	if(DMA_LISR & DMA_LISR_TEIF0)
 8000d44:	4b43      	ldr	r3, [pc, #268]	@ (8000e54 <DMA2_Stream0_IRQHandler+0x18c>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f003 0308 	and.w	r3, r3, #8
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d015      	beq.n	8000d7c <DMA2_Stream0_IRQHandler+0xb4>
	{
		if(__DMA2_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 8000d50:	4b41      	ldr	r3, [pc, #260]	@ (8000e58 <DMA2_Stream0_IRQHandler+0x190>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	69db      	ldr	r3, [r3, #28]
 8000d56:	2204      	movs	r2, #4
 8000d58:	4013      	ands	r3, r2
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d00e      	beq.n	8000d7c <DMA2_Stream0_IRQHandler+0xb4>
		{
		    if (__DMA2_Stream0_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8000d5e:	4b3e      	ldr	r3, [pc, #248]	@ (8000e58 <DMA2_Stream0_IRQHandler+0x190>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d009      	beq.n	8000d7c <DMA2_Stream0_IRQHandler+0xb4>
		    {
		    	__DMA2_Stream0_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8000d68:	4b3b      	ldr	r3, [pc, #236]	@ (8000e58 <DMA2_Stream0_IRQHandler+0x190>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d6e:	4798      	blx	r3
		    	DMA2 -> LIFCR |= DMA_LIFCR_CTEIF0;
 8000d70:	4b37      	ldr	r3, [pc, #220]	@ (8000e50 <DMA2_Stream0_IRQHandler+0x188>)
 8000d72:	689b      	ldr	r3, [r3, #8]
 8000d74:	4a36      	ldr	r2, [pc, #216]	@ (8000e50 <DMA2_Stream0_IRQHandler+0x188>)
 8000d76:	f043 0308 	orr.w	r3, r3, #8
 8000d7a:	6093      	str	r3, [r2, #8]
		    }
		}

	}

	if(DMA_LISR & DMA_LISR_HTIF0)
 8000d7c:	4b35      	ldr	r3, [pc, #212]	@ (8000e54 <DMA2_Stream0_IRQHandler+0x18c>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f003 0310 	and.w	r3, r3, #16
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d02d      	beq.n	8000de4 <DMA2_Stream0_IRQHandler+0x11c>
	{
		if(__DMA2_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 8000d88:	4b33      	ldr	r3, [pc, #204]	@ (8000e58 <DMA2_Stream0_IRQHandler+0x190>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	69db      	ldr	r3, [r3, #28]
 8000d8e:	2208      	movs	r2, #8
 8000d90:	4013      	ands	r3, r2
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d026      	beq.n	8000de4 <DMA2_Stream0_IRQHandler+0x11c>
		{
		    if (__DMA2_Stream0_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8000d96:	4b30      	ldr	r3, [pc, #192]	@ (8000e58 <DMA2_Stream0_IRQHandler+0x190>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d021      	beq.n	8000de4 <DMA2_Stream0_IRQHandler+0x11c>
		    {
		    	__DMA2_Stream0_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000da0:	4b2d      	ldr	r3, [pc, #180]	@ (8000e58 <DMA2_Stream0_IRQHandler+0x190>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000da6:	4798      	blx	r3
		    	DMA2 -> LIFCR |= DMA_LIFCR_CHTIF0;
 8000da8:	4b29      	ldr	r3, [pc, #164]	@ (8000e50 <DMA2_Stream0_IRQHandler+0x188>)
 8000daa:	689b      	ldr	r3, [r3, #8]
 8000dac:	4a28      	ldr	r2, [pc, #160]	@ (8000e50 <DMA2_Stream0_IRQHandler+0x188>)
 8000dae:	f043 0310 	orr.w	r3, r3, #16
 8000db2:	6093      	str	r3, [r2, #8]

		    	if(__DMA2_Stream0_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000db4:	4b28      	ldr	r3, [pc, #160]	@ (8000e58 <DMA2_Stream0_IRQHandler+0x190>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000dba:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d110      	bne.n	8000de4 <DMA2_Stream0_IRQHandler+0x11c>
		    	{
		    		if((__DMA2_Stream0_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000dc2:	4b25      	ldr	r3, [pc, #148]	@ (8000e58 <DMA2_Stream0_IRQHandler+0x190>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d004      	beq.n	8000ddc <DMA2_Stream0_IRQHandler+0x114>
		    		{
		    			__DMA2_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000dd2:	4b21      	ldr	r3, [pc, #132]	@ (8000e58 <DMA2_Stream0_IRQHandler+0x190>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000dd8:	4798      	blx	r3
 8000dda:	e003      	b.n	8000de4 <DMA2_Stream0_IRQHandler+0x11c>
		    		}
		    		else
		    		{
		    			__DMA2_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000ddc:	4b1e      	ldr	r3, [pc, #120]	@ (8000e58 <DMA2_Stream0_IRQHandler+0x190>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000de2:	4798      	blx	r3
		    }
		}

	}

	if(DMA_LISR & DMA_LISR_TCIF0)
 8000de4:	4b1b      	ldr	r3, [pc, #108]	@ (8000e54 <DMA2_Stream0_IRQHandler+0x18c>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f003 0320 	and.w	r3, r3, #32
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d02d      	beq.n	8000e4c <DMA2_Stream0_IRQHandler+0x184>
	{
		if(__DMA2_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 8000df0:	4b19      	ldr	r3, [pc, #100]	@ (8000e58 <DMA2_Stream0_IRQHandler+0x190>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	69db      	ldr	r3, [r3, #28]
 8000df6:	2210      	movs	r2, #16
 8000df8:	4013      	ands	r3, r2
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d026      	beq.n	8000e4c <DMA2_Stream0_IRQHandler+0x184>
		{
		    if (__DMA2_Stream0_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8000dfe:	4b16      	ldr	r3, [pc, #88]	@ (8000e58 <DMA2_Stream0_IRQHandler+0x190>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d021      	beq.n	8000e4c <DMA2_Stream0_IRQHandler+0x184>
		    {
		    	__DMA2_Stream0_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 8000e08:	4b13      	ldr	r3, [pc, #76]	@ (8000e58 <DMA2_Stream0_IRQHandler+0x190>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e0e:	4798      	blx	r3
		    	DMA2 -> LIFCR |= DMA_LIFCR_CTCIF0;
 8000e10:	4b0f      	ldr	r3, [pc, #60]	@ (8000e50 <DMA2_Stream0_IRQHandler+0x188>)
 8000e12:	689b      	ldr	r3, [r3, #8]
 8000e14:	4a0e      	ldr	r2, [pc, #56]	@ (8000e50 <DMA2_Stream0_IRQHandler+0x188>)
 8000e16:	f043 0320 	orr.w	r3, r3, #32
 8000e1a:	6093      	str	r3, [r2, #8]

		    	if(__DMA2_Stream0_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000e1c:	4b0e      	ldr	r3, [pc, #56]	@ (8000e58 <DMA2_Stream0_IRQHandler+0x190>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e22:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d110      	bne.n	8000e4c <DMA2_Stream0_IRQHandler+0x184>
		    	{
		    		if((__DMA2_Stream0_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000e2a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e58 <DMA2_Stream0_IRQHandler+0x190>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d004      	beq.n	8000e44 <DMA2_Stream0_IRQHandler+0x17c>
		    		{
		    			__DMA2_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000e3a:	4b07      	ldr	r3, [pc, #28]	@ (8000e58 <DMA2_Stream0_IRQHandler+0x190>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000e40:	4798      	blx	r3
		    	}
		    }
		}

	}
}
 8000e42:	e003      	b.n	8000e4c <DMA2_Stream0_IRQHandler+0x184>
		    			__DMA2_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000e44:	4b04      	ldr	r3, [pc, #16]	@ (8000e58 <DMA2_Stream0_IRQHandler+0x190>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e4a:	4798      	blx	r3
}
 8000e4c:	bf00      	nop
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40026400 	.word	0x40026400
 8000e54:	20000064 	.word	0x20000064
 8000e58:	20000044 	.word	0x20000044

08000e5c <DMA2_Stream1_IRQHandler>:

void DMA2_Stream1_IRQHandler(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
	DMA_LISR = DMA2 -> LISR;
 8000e60:	4b4f      	ldr	r3, [pc, #316]	@ (8000fa0 <DMA2_Stream1_IRQHandler+0x144>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a4f      	ldr	r2, [pc, #316]	@ (8000fa4 <DMA2_Stream1_IRQHandler+0x148>)
 8000e66:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF1)
 8000e68:	4b4e      	ldr	r3, [pc, #312]	@ (8000fa4 <DMA2_Stream1_IRQHandler+0x148>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d00e      	beq.n	8000e92 <DMA2_Stream1_IRQHandler+0x36>
	{
	    if (__DMA2_Stream1_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8000e74:	4b4c      	ldr	r3, [pc, #304]	@ (8000fa8 <DMA2_Stream1_IRQHandler+0x14c>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d009      	beq.n	8000e92 <DMA2_Stream1_IRQHandler+0x36>
	    {
	    	__DMA2_Stream1_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8000e7e:	4b4a      	ldr	r3, [pc, #296]	@ (8000fa8 <DMA2_Stream1_IRQHandler+0x14c>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e84:	4798      	blx	r3
	    	DMA2 -> LIFCR |= DMA_LIFCR_CFEIF1;
 8000e86:	4b46      	ldr	r3, [pc, #280]	@ (8000fa0 <DMA2_Stream1_IRQHandler+0x144>)
 8000e88:	689b      	ldr	r3, [r3, #8]
 8000e8a:	4a45      	ldr	r2, [pc, #276]	@ (8000fa0 <DMA2_Stream1_IRQHandler+0x144>)
 8000e8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e90:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_DMEIF1)
 8000e92:	4b44      	ldr	r3, [pc, #272]	@ (8000fa4 <DMA2_Stream1_IRQHandler+0x148>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d00e      	beq.n	8000ebc <DMA2_Stream1_IRQHandler+0x60>
	{
	    if (__DMA2_Stream1_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8000e9e:	4b42      	ldr	r3, [pc, #264]	@ (8000fa8 <DMA2_Stream1_IRQHandler+0x14c>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d009      	beq.n	8000ebc <DMA2_Stream1_IRQHandler+0x60>
	    {
	    	__DMA2_Stream1_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8000ea8:	4b3f      	ldr	r3, [pc, #252]	@ (8000fa8 <DMA2_Stream1_IRQHandler+0x14c>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eae:	4798      	blx	r3
	    	DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF1;
 8000eb0:	4b3b      	ldr	r3, [pc, #236]	@ (8000fa0 <DMA2_Stream1_IRQHandler+0x144>)
 8000eb2:	689b      	ldr	r3, [r3, #8]
 8000eb4:	4a3a      	ldr	r2, [pc, #232]	@ (8000fa0 <DMA2_Stream1_IRQHandler+0x144>)
 8000eb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000eba:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_TEIF1)
 8000ebc:	4b39      	ldr	r3, [pc, #228]	@ (8000fa4 <DMA2_Stream1_IRQHandler+0x148>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d00e      	beq.n	8000ee6 <DMA2_Stream1_IRQHandler+0x8a>
	{
	    if (__DMA2_Stream1_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8000ec8:	4b37      	ldr	r3, [pc, #220]	@ (8000fa8 <DMA2_Stream1_IRQHandler+0x14c>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d009      	beq.n	8000ee6 <DMA2_Stream1_IRQHandler+0x8a>
	    {
	    	__DMA2_Stream1_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8000ed2:	4b35      	ldr	r3, [pc, #212]	@ (8000fa8 <DMA2_Stream1_IRQHandler+0x14c>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ed8:	4798      	blx	r3
	    	DMA2 -> LIFCR |= DMA_LIFCR_CTEIF1;
 8000eda:	4b31      	ldr	r3, [pc, #196]	@ (8000fa0 <DMA2_Stream1_IRQHandler+0x144>)
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	4a30      	ldr	r2, [pc, #192]	@ (8000fa0 <DMA2_Stream1_IRQHandler+0x144>)
 8000ee0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ee4:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_HTIF1)
 8000ee6:	4b2f      	ldr	r3, [pc, #188]	@ (8000fa4 <DMA2_Stream1_IRQHandler+0x148>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d026      	beq.n	8000f40 <DMA2_Stream1_IRQHandler+0xe4>
	{
	    if (__DMA2_Stream1_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8000ef2:	4b2d      	ldr	r3, [pc, #180]	@ (8000fa8 <DMA2_Stream1_IRQHandler+0x14c>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d021      	beq.n	8000f40 <DMA2_Stream1_IRQHandler+0xe4>
	    {
	    	__DMA2_Stream1_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000efc:	4b2a      	ldr	r3, [pc, #168]	@ (8000fa8 <DMA2_Stream1_IRQHandler+0x14c>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f02:	4798      	blx	r3
	    	DMA2 -> LIFCR |= DMA_LIFCR_CHTIF1;
 8000f04:	4b26      	ldr	r3, [pc, #152]	@ (8000fa0 <DMA2_Stream1_IRQHandler+0x144>)
 8000f06:	689b      	ldr	r3, [r3, #8]
 8000f08:	4a25      	ldr	r2, [pc, #148]	@ (8000fa0 <DMA2_Stream1_IRQHandler+0x144>)
 8000f0a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f0e:	6093      	str	r3, [r2, #8]

	    	if(__DMA2_Stream1_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000f10:	4b25      	ldr	r3, [pc, #148]	@ (8000fa8 <DMA2_Stream1_IRQHandler+0x14c>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f16:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d110      	bne.n	8000f40 <DMA2_Stream1_IRQHandler+0xe4>
	    	{
	    		if((__DMA2_Stream1_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000f1e:	4b22      	ldr	r3, [pc, #136]	@ (8000fa8 <DMA2_Stream1_IRQHandler+0x14c>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d004      	beq.n	8000f38 <DMA2_Stream1_IRQHandler+0xdc>
	    		{
	    			__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000f2e:	4b1e      	ldr	r3, [pc, #120]	@ (8000fa8 <DMA2_Stream1_IRQHandler+0x14c>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000f34:	4798      	blx	r3
 8000f36:	e003      	b.n	8000f40 <DMA2_Stream1_IRQHandler+0xe4>
	    		}
	    		else
	    		{
	    			__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000f38:	4b1b      	ldr	r3, [pc, #108]	@ (8000fa8 <DMA2_Stream1_IRQHandler+0x14c>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f3e:	4798      	blx	r3
	    		}
	    	}
	    }
	}

	if(DMA_LISR & DMA_LISR_TCIF1)
 8000f40:	4b18      	ldr	r3, [pc, #96]	@ (8000fa4 <DMA2_Stream1_IRQHandler+0x148>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d026      	beq.n	8000f9a <DMA2_Stream1_IRQHandler+0x13e>
	{
	    if (__DMA2_Stream1_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8000f4c:	4b16      	ldr	r3, [pc, #88]	@ (8000fa8 <DMA2_Stream1_IRQHandler+0x14c>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d021      	beq.n	8000f9a <DMA2_Stream1_IRQHandler+0x13e>
	    {
	    	__DMA2_Stream1_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000f56:	4b14      	ldr	r3, [pc, #80]	@ (8000fa8 <DMA2_Stream1_IRQHandler+0x14c>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f5c:	4798      	blx	r3
	    	DMA2 -> LIFCR |= DMA_LIFCR_CTCIF1;
 8000f5e:	4b10      	ldr	r3, [pc, #64]	@ (8000fa0 <DMA2_Stream1_IRQHandler+0x144>)
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	4a0f      	ldr	r2, [pc, #60]	@ (8000fa0 <DMA2_Stream1_IRQHandler+0x144>)
 8000f64:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000f68:	6093      	str	r3, [r2, #8]

	    	if(__DMA2_Stream1_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000f6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa8 <DMA2_Stream1_IRQHandler+0x14c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f70:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d110      	bne.n	8000f9a <DMA2_Stream1_IRQHandler+0x13e>
	    	{
	    		if((__DMA2_Stream1_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000f78:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa8 <DMA2_Stream1_IRQHandler+0x14c>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d004      	beq.n	8000f92 <DMA2_Stream1_IRQHandler+0x136>
	    		{
	    			__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000f88:	4b07      	ldr	r3, [pc, #28]	@ (8000fa8 <DMA2_Stream1_IRQHandler+0x14c>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000f8e:	4798      	blx	r3
	    			__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
	    		}
	    	}
	    }
	}
}
 8000f90:	e003      	b.n	8000f9a <DMA2_Stream1_IRQHandler+0x13e>
	    			__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000f92:	4b05      	ldr	r3, [pc, #20]	@ (8000fa8 <DMA2_Stream1_IRQHandler+0x14c>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f98:	4798      	blx	r3
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40026400 	.word	0x40026400
 8000fa4:	20000064 	.word	0x20000064
 8000fa8:	20000048 	.word	0x20000048

08000fac <DMA2_Stream2_IRQHandler>:


void DMA2_Stream2_IRQHandler(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
	DMA_LISR = DMA2 -> LISR;
 8000fb0:	4b4f      	ldr	r3, [pc, #316]	@ (80010f0 <DMA2_Stream2_IRQHandler+0x144>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a4f      	ldr	r2, [pc, #316]	@ (80010f4 <DMA2_Stream2_IRQHandler+0x148>)
 8000fb6:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF2)
 8000fb8:	4b4e      	ldr	r3, [pc, #312]	@ (80010f4 <DMA2_Stream2_IRQHandler+0x148>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d00e      	beq.n	8000fe2 <DMA2_Stream2_IRQHandler+0x36>
	{
	    if (__DMA2_Stream2_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8000fc4:	4b4c      	ldr	r3, [pc, #304]	@ (80010f8 <DMA2_Stream2_IRQHandler+0x14c>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d009      	beq.n	8000fe2 <DMA2_Stream2_IRQHandler+0x36>
	    {
	    	__DMA2_Stream2_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8000fce:	4b4a      	ldr	r3, [pc, #296]	@ (80010f8 <DMA2_Stream2_IRQHandler+0x14c>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000fd4:	4798      	blx	r3
	    	DMA2 -> LIFCR |= DMA_LIFCR_CFEIF2;
 8000fd6:	4b46      	ldr	r3, [pc, #280]	@ (80010f0 <DMA2_Stream2_IRQHandler+0x144>)
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	4a45      	ldr	r2, [pc, #276]	@ (80010f0 <DMA2_Stream2_IRQHandler+0x144>)
 8000fdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fe0:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_DMEIF2)
 8000fe2:	4b44      	ldr	r3, [pc, #272]	@ (80010f4 <DMA2_Stream2_IRQHandler+0x148>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d00e      	beq.n	800100c <DMA2_Stream2_IRQHandler+0x60>
	{
	    if (__DMA2_Stream2_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8000fee:	4b42      	ldr	r3, [pc, #264]	@ (80010f8 <DMA2_Stream2_IRQHandler+0x14c>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d009      	beq.n	800100c <DMA2_Stream2_IRQHandler+0x60>
	    {
	    	__DMA2_Stream2_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8000ff8:	4b3f      	ldr	r3, [pc, #252]	@ (80010f8 <DMA2_Stream2_IRQHandler+0x14c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ffe:	4798      	blx	r3
	    	DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF2;
 8001000:	4b3b      	ldr	r3, [pc, #236]	@ (80010f0 <DMA2_Stream2_IRQHandler+0x144>)
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	4a3a      	ldr	r2, [pc, #232]	@ (80010f0 <DMA2_Stream2_IRQHandler+0x144>)
 8001006:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800100a:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_TEIF2)
 800100c:	4b39      	ldr	r3, [pc, #228]	@ (80010f4 <DMA2_Stream2_IRQHandler+0x148>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001014:	2b00      	cmp	r3, #0
 8001016:	d00e      	beq.n	8001036 <DMA2_Stream2_IRQHandler+0x8a>
	{
	    if (__DMA2_Stream2_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001018:	4b37      	ldr	r3, [pc, #220]	@ (80010f8 <DMA2_Stream2_IRQHandler+0x14c>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800101e:	2b00      	cmp	r3, #0
 8001020:	d009      	beq.n	8001036 <DMA2_Stream2_IRQHandler+0x8a>
	    {
	    	__DMA2_Stream2_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8001022:	4b35      	ldr	r3, [pc, #212]	@ (80010f8 <DMA2_Stream2_IRQHandler+0x14c>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001028:	4798      	blx	r3
	    	DMA2 -> LIFCR |= DMA_LIFCR_CTEIF2;
 800102a:	4b31      	ldr	r3, [pc, #196]	@ (80010f0 <DMA2_Stream2_IRQHandler+0x144>)
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	4a30      	ldr	r2, [pc, #192]	@ (80010f0 <DMA2_Stream2_IRQHandler+0x144>)
 8001030:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001034:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_HTIF2)
 8001036:	4b2f      	ldr	r3, [pc, #188]	@ (80010f4 <DMA2_Stream2_IRQHandler+0x148>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d026      	beq.n	8001090 <DMA2_Stream2_IRQHandler+0xe4>
	{
	    if (__DMA2_Stream2_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001042:	4b2d      	ldr	r3, [pc, #180]	@ (80010f8 <DMA2_Stream2_IRQHandler+0x14c>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001048:	2b00      	cmp	r3, #0
 800104a:	d021      	beq.n	8001090 <DMA2_Stream2_IRQHandler+0xe4>
	    {
	    	__DMA2_Stream2_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 800104c:	4b2a      	ldr	r3, [pc, #168]	@ (80010f8 <DMA2_Stream2_IRQHandler+0x14c>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001052:	4798      	blx	r3
	    	DMA2 -> LIFCR |= DMA_LIFCR_CHTIF2;
 8001054:	4b26      	ldr	r3, [pc, #152]	@ (80010f0 <DMA2_Stream2_IRQHandler+0x144>)
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	4a25      	ldr	r2, [pc, #148]	@ (80010f0 <DMA2_Stream2_IRQHandler+0x144>)
 800105a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800105e:	6093      	str	r3, [r2, #8]

	    	if(__DMA2_Stream2_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001060:	4b25      	ldr	r3, [pc, #148]	@ (80010f8 <DMA2_Stream2_IRQHandler+0x14c>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001066:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800106a:	4293      	cmp	r3, r2
 800106c:	d110      	bne.n	8001090 <DMA2_Stream2_IRQHandler+0xe4>
	    	{
	    		if((__DMA2_Stream2_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800106e:	4b22      	ldr	r3, [pc, #136]	@ (80010f8 <DMA2_Stream2_IRQHandler+0x14c>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800107a:	2b00      	cmp	r3, #0
 800107c:	d004      	beq.n	8001088 <DMA2_Stream2_IRQHandler+0xdc>
	    		{
	    			__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800107e:	4b1e      	ldr	r3, [pc, #120]	@ (80010f8 <DMA2_Stream2_IRQHandler+0x14c>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001084:	4798      	blx	r3
 8001086:	e003      	b.n	8001090 <DMA2_Stream2_IRQHandler+0xe4>
	    		}
	    		else
	    		{
	    			__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001088:	4b1b      	ldr	r3, [pc, #108]	@ (80010f8 <DMA2_Stream2_IRQHandler+0x14c>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800108e:	4798      	blx	r3
	    		}
	    	}
	    }
	}

	if(DMA_LISR & DMA_LISR_TCIF2)
 8001090:	4b18      	ldr	r3, [pc, #96]	@ (80010f4 <DMA2_Stream2_IRQHandler+0x148>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001098:	2b00      	cmp	r3, #0
 800109a:	d026      	beq.n	80010ea <DMA2_Stream2_IRQHandler+0x13e>
	{
	    if (__DMA2_Stream2_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 800109c:	4b16      	ldr	r3, [pc, #88]	@ (80010f8 <DMA2_Stream2_IRQHandler+0x14c>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d021      	beq.n	80010ea <DMA2_Stream2_IRQHandler+0x13e>
	    {
	    	__DMA2_Stream2_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80010a6:	4b14      	ldr	r3, [pc, #80]	@ (80010f8 <DMA2_Stream2_IRQHandler+0x14c>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010ac:	4798      	blx	r3
	    	DMA2 -> LIFCR |= DMA_LIFCR_CTCIF2;
 80010ae:	4b10      	ldr	r3, [pc, #64]	@ (80010f0 <DMA2_Stream2_IRQHandler+0x144>)
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	4a0f      	ldr	r2, [pc, #60]	@ (80010f0 <DMA2_Stream2_IRQHandler+0x144>)
 80010b4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010b8:	6093      	str	r3, [r2, #8]

	    	if(__DMA2_Stream2_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80010ba:	4b0f      	ldr	r3, [pc, #60]	@ (80010f8 <DMA2_Stream2_IRQHandler+0x14c>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010c0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d110      	bne.n	80010ea <DMA2_Stream2_IRQHandler+0x13e>
	    	{
	    		if((__DMA2_Stream2_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80010c8:	4b0b      	ldr	r3, [pc, #44]	@ (80010f8 <DMA2_Stream2_IRQHandler+0x14c>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d004      	beq.n	80010e2 <DMA2_Stream2_IRQHandler+0x136>
	    		{
	    			__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80010d8:	4b07      	ldr	r3, [pc, #28]	@ (80010f8 <DMA2_Stream2_IRQHandler+0x14c>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80010de:	4798      	blx	r3
	    			__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
	    		}
	    	}
	    }
	}
}
 80010e0:	e003      	b.n	80010ea <DMA2_Stream2_IRQHandler+0x13e>
	    			__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80010e2:	4b05      	ldr	r3, [pc, #20]	@ (80010f8 <DMA2_Stream2_IRQHandler+0x14c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010e8:	4798      	blx	r3
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40026400 	.word	0x40026400
 80010f4:	20000064 	.word	0x20000064
 80010f8:	2000004c 	.word	0x2000004c

080010fc <DMA2_Stream3_IRQHandler>:

void DMA2_Stream3_IRQHandler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
	DMA_LISR = DMA2 -> LISR;
 8001100:	4b60      	ldr	r3, [pc, #384]	@ (8001284 <DMA2_Stream3_IRQHandler+0x188>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a60      	ldr	r2, [pc, #384]	@ (8001288 <DMA2_Stream3_IRQHandler+0x18c>)
 8001106:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF3)
 8001108:	4b5f      	ldr	r3, [pc, #380]	@ (8001288 <DMA2_Stream3_IRQHandler+0x18c>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001110:	2b00      	cmp	r3, #0
 8001112:	d015      	beq.n	8001140 <DMA2_Stream3_IRQHandler+0x44>
	{
		if(__DMA2_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 8001114:	4b5d      	ldr	r3, [pc, #372]	@ (800128c <DMA2_Stream3_IRQHandler+0x190>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	69db      	ldr	r3, [r3, #28]
 800111a:	2280      	movs	r2, #128	@ 0x80
 800111c:	4013      	ands	r3, r2
 800111e:	2b00      	cmp	r3, #0
 8001120:	d00e      	beq.n	8001140 <DMA2_Stream3_IRQHandler+0x44>
		{
		    if (__DMA2_Stream3_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001122:	4b5a      	ldr	r3, [pc, #360]	@ (800128c <DMA2_Stream3_IRQHandler+0x190>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001128:	2b00      	cmp	r3, #0
 800112a:	d009      	beq.n	8001140 <DMA2_Stream3_IRQHandler+0x44>
		    {
		    	__DMA2_Stream3_Config__ ->ISR_Routines.FIFO_Error_ISR();
 800112c:	4b57      	ldr	r3, [pc, #348]	@ (800128c <DMA2_Stream3_IRQHandler+0x190>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001132:	4798      	blx	r3
		    	DMA2 -> LIFCR |= DMA_LIFCR_CFEIF3;
 8001134:	4b53      	ldr	r3, [pc, #332]	@ (8001284 <DMA2_Stream3_IRQHandler+0x188>)
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	4a52      	ldr	r2, [pc, #328]	@ (8001284 <DMA2_Stream3_IRQHandler+0x188>)
 800113a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800113e:	6093      	str	r3, [r2, #8]
		    }
		}
	}

	if(DMA_LISR & DMA_LISR_DMEIF3)
 8001140:	4b51      	ldr	r3, [pc, #324]	@ (8001288 <DMA2_Stream3_IRQHandler+0x18c>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d015      	beq.n	8001178 <DMA2_Stream3_IRQHandler+0x7c>
	{
		if(__DMA2_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 800114c:	4b4f      	ldr	r3, [pc, #316]	@ (800128c <DMA2_Stream3_IRQHandler+0x190>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	69db      	ldr	r3, [r3, #28]
 8001152:	2202      	movs	r2, #2
 8001154:	4013      	ands	r3, r2
 8001156:	2b00      	cmp	r3, #0
 8001158:	d00e      	beq.n	8001178 <DMA2_Stream3_IRQHandler+0x7c>
		{
		    if (__DMA2_Stream3_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 800115a:	4b4c      	ldr	r3, [pc, #304]	@ (800128c <DMA2_Stream3_IRQHandler+0x190>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001160:	2b00      	cmp	r3, #0
 8001162:	d009      	beq.n	8001178 <DMA2_Stream3_IRQHandler+0x7c>
		    {
		    	__DMA2_Stream3_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001164:	4b49      	ldr	r3, [pc, #292]	@ (800128c <DMA2_Stream3_IRQHandler+0x190>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800116a:	4798      	blx	r3
		    	DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF3;
 800116c:	4b45      	ldr	r3, [pc, #276]	@ (8001284 <DMA2_Stream3_IRQHandler+0x188>)
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	4a44      	ldr	r2, [pc, #272]	@ (8001284 <DMA2_Stream3_IRQHandler+0x188>)
 8001172:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001176:	6093      	str	r3, [r2, #8]
		    }
		}
	}

	if(DMA_LISR & DMA_LISR_TEIF3)
 8001178:	4b43      	ldr	r3, [pc, #268]	@ (8001288 <DMA2_Stream3_IRQHandler+0x18c>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001180:	2b00      	cmp	r3, #0
 8001182:	d015      	beq.n	80011b0 <DMA2_Stream3_IRQHandler+0xb4>
	{
		if(__DMA2_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 8001184:	4b41      	ldr	r3, [pc, #260]	@ (800128c <DMA2_Stream3_IRQHandler+0x190>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	69db      	ldr	r3, [r3, #28]
 800118a:	2204      	movs	r2, #4
 800118c:	4013      	ands	r3, r2
 800118e:	2b00      	cmp	r3, #0
 8001190:	d00e      	beq.n	80011b0 <DMA2_Stream3_IRQHandler+0xb4>
		{
		    if (__DMA2_Stream3_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001192:	4b3e      	ldr	r3, [pc, #248]	@ (800128c <DMA2_Stream3_IRQHandler+0x190>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001198:	2b00      	cmp	r3, #0
 800119a:	d009      	beq.n	80011b0 <DMA2_Stream3_IRQHandler+0xb4>
		    {
		    	__DMA2_Stream3_Config__ ->ISR_Routines.Transfer_Error_ISR();
 800119c:	4b3b      	ldr	r3, [pc, #236]	@ (800128c <DMA2_Stream3_IRQHandler+0x190>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011a2:	4798      	blx	r3
		    	DMA2 -> LIFCR |= DMA_LIFCR_CTEIF3;
 80011a4:	4b37      	ldr	r3, [pc, #220]	@ (8001284 <DMA2_Stream3_IRQHandler+0x188>)
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	4a36      	ldr	r2, [pc, #216]	@ (8001284 <DMA2_Stream3_IRQHandler+0x188>)
 80011aa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80011ae:	6093      	str	r3, [r2, #8]
		    }
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF3)
 80011b0:	4b35      	ldr	r3, [pc, #212]	@ (8001288 <DMA2_Stream3_IRQHandler+0x18c>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d02d      	beq.n	8001218 <DMA2_Stream3_IRQHandler+0x11c>
	{
		if(__DMA2_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 80011bc:	4b33      	ldr	r3, [pc, #204]	@ (800128c <DMA2_Stream3_IRQHandler+0x190>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	69db      	ldr	r3, [r3, #28]
 80011c2:	2208      	movs	r2, #8
 80011c4:	4013      	ands	r3, r2
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d026      	beq.n	8001218 <DMA2_Stream3_IRQHandler+0x11c>
		{
		    if (__DMA2_Stream3_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 80011ca:	4b30      	ldr	r3, [pc, #192]	@ (800128c <DMA2_Stream3_IRQHandler+0x190>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d021      	beq.n	8001218 <DMA2_Stream3_IRQHandler+0x11c>
		    {
		    	__DMA2_Stream3_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80011d4:	4b2d      	ldr	r3, [pc, #180]	@ (800128c <DMA2_Stream3_IRQHandler+0x190>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011da:	4798      	blx	r3
		    	DMA2 -> LIFCR |= DMA_LIFCR_CHTIF3;
 80011dc:	4b29      	ldr	r3, [pc, #164]	@ (8001284 <DMA2_Stream3_IRQHandler+0x188>)
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	4a28      	ldr	r2, [pc, #160]	@ (8001284 <DMA2_Stream3_IRQHandler+0x188>)
 80011e2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80011e6:	6093      	str	r3, [r2, #8]

		    	if(__DMA2_Stream3_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80011e8:	4b28      	ldr	r3, [pc, #160]	@ (800128c <DMA2_Stream3_IRQHandler+0x190>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011ee:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d110      	bne.n	8001218 <DMA2_Stream3_IRQHandler+0x11c>
		    	{
		    		if((__DMA2_Stream3_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80011f6:	4b25      	ldr	r3, [pc, #148]	@ (800128c <DMA2_Stream3_IRQHandler+0x190>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d004      	beq.n	8001210 <DMA2_Stream3_IRQHandler+0x114>
		    		{
		    			__DMA2_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001206:	4b21      	ldr	r3, [pc, #132]	@ (800128c <DMA2_Stream3_IRQHandler+0x190>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800120c:	4798      	blx	r3
 800120e:	e003      	b.n	8001218 <DMA2_Stream3_IRQHandler+0x11c>
		    		}
		    		else
		    		{
		    			__DMA2_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001210:	4b1e      	ldr	r3, [pc, #120]	@ (800128c <DMA2_Stream3_IRQHandler+0x190>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001216:	4798      	blx	r3
		    }
		}

	}

	if(DMA_LISR & DMA_LISR_TCIF3)
 8001218:	4b1b      	ldr	r3, [pc, #108]	@ (8001288 <DMA2_Stream3_IRQHandler+0x18c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d02d      	beq.n	8001280 <DMA2_Stream3_IRQHandler+0x184>
	{
		if(__DMA2_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 8001224:	4b19      	ldr	r3, [pc, #100]	@ (800128c <DMA2_Stream3_IRQHandler+0x190>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	69db      	ldr	r3, [r3, #28]
 800122a:	2210      	movs	r2, #16
 800122c:	4013      	ands	r3, r2
 800122e:	2b00      	cmp	r3, #0
 8001230:	d026      	beq.n	8001280 <DMA2_Stream3_IRQHandler+0x184>
		{
		    if (__DMA2_Stream3_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001232:	4b16      	ldr	r3, [pc, #88]	@ (800128c <DMA2_Stream3_IRQHandler+0x190>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001238:	2b00      	cmp	r3, #0
 800123a:	d021      	beq.n	8001280 <DMA2_Stream3_IRQHandler+0x184>
		    {
		    	__DMA2_Stream3_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 800123c:	4b13      	ldr	r3, [pc, #76]	@ (800128c <DMA2_Stream3_IRQHandler+0x190>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001242:	4798      	blx	r3
		    	DMA2 -> LIFCR |= DMA_LIFCR_CTCIF3;
 8001244:	4b0f      	ldr	r3, [pc, #60]	@ (8001284 <DMA2_Stream3_IRQHandler+0x188>)
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	4a0e      	ldr	r2, [pc, #56]	@ (8001284 <DMA2_Stream3_IRQHandler+0x188>)
 800124a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800124e:	6093      	str	r3, [r2, #8]

		    	if(__DMA2_Stream3_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001250:	4b0e      	ldr	r3, [pc, #56]	@ (800128c <DMA2_Stream3_IRQHandler+0x190>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001256:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800125a:	4293      	cmp	r3, r2
 800125c:	d110      	bne.n	8001280 <DMA2_Stream3_IRQHandler+0x184>
		    	{
		    		if((__DMA2_Stream3_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800125e:	4b0b      	ldr	r3, [pc, #44]	@ (800128c <DMA2_Stream3_IRQHandler+0x190>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d004      	beq.n	8001278 <DMA2_Stream3_IRQHandler+0x17c>
		    		{
		    			__DMA2_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800126e:	4b07      	ldr	r3, [pc, #28]	@ (800128c <DMA2_Stream3_IRQHandler+0x190>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001274:	4798      	blx	r3
		    		}
		    	}
		    }
		}
	}
}
 8001276:	e003      	b.n	8001280 <DMA2_Stream3_IRQHandler+0x184>
		    			__DMA2_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001278:	4b04      	ldr	r3, [pc, #16]	@ (800128c <DMA2_Stream3_IRQHandler+0x190>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800127e:	4798      	blx	r3
}
 8001280:	bf00      	nop
 8001282:	bd80      	pop	{r7, pc}
 8001284:	40026400 	.word	0x40026400
 8001288:	20000064 	.word	0x20000064
 800128c:	20000050 	.word	0x20000050

08001290 <DMA2_Stream4_IRQHandler>:

void DMA2_Stream4_IRQHandler(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
	DMA_HISR = DMA2 -> HISR;
 8001294:	4b4f      	ldr	r3, [pc, #316]	@ (80013d4 <DMA2_Stream4_IRQHandler+0x144>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	4a4f      	ldr	r2, [pc, #316]	@ (80013d8 <DMA2_Stream4_IRQHandler+0x148>)
 800129a:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF4)
 800129c:	4b4e      	ldr	r3, [pc, #312]	@ (80013d8 <DMA2_Stream4_IRQHandler+0x148>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 0301 	and.w	r3, r3, #1
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d00e      	beq.n	80012c6 <DMA2_Stream4_IRQHandler+0x36>
	{
	    if (__DMA2_Stream4_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80012a8:	4b4c      	ldr	r3, [pc, #304]	@ (80013dc <DMA2_Stream4_IRQHandler+0x14c>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d009      	beq.n	80012c6 <DMA2_Stream4_IRQHandler+0x36>
	    {
	    	__DMA2_Stream4_Config__ ->ISR_Routines.FIFO_Error_ISR();
 80012b2:	4b4a      	ldr	r3, [pc, #296]	@ (80013dc <DMA2_Stream4_IRQHandler+0x14c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012b8:	4798      	blx	r3
	    	DMA2 -> LIFCR |= DMA_HIFCR_CFEIF5;
 80012ba:	4b46      	ldr	r3, [pc, #280]	@ (80013d4 <DMA2_Stream4_IRQHandler+0x144>)
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	4a45      	ldr	r2, [pc, #276]	@ (80013d4 <DMA2_Stream4_IRQHandler+0x144>)
 80012c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012c4:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_HISR & DMA_HISR_DMEIF4)
 80012c6:	4b44      	ldr	r3, [pc, #272]	@ (80013d8 <DMA2_Stream4_IRQHandler+0x148>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0304 	and.w	r3, r3, #4
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d00e      	beq.n	80012f0 <DMA2_Stream4_IRQHandler+0x60>
	{
	    if (__DMA2_Stream4_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 80012d2:	4b42      	ldr	r3, [pc, #264]	@ (80013dc <DMA2_Stream4_IRQHandler+0x14c>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d009      	beq.n	80012f0 <DMA2_Stream4_IRQHandler+0x60>
	    {
	    	__DMA2_Stream4_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 80012dc:	4b3f      	ldr	r3, [pc, #252]	@ (80013dc <DMA2_Stream4_IRQHandler+0x14c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e2:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF4;
 80012e4:	4b3b      	ldr	r3, [pc, #236]	@ (80013d4 <DMA2_Stream4_IRQHandler+0x144>)
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	4a3a      	ldr	r2, [pc, #232]	@ (80013d4 <DMA2_Stream4_IRQHandler+0x144>)
 80012ea:	f043 0304 	orr.w	r3, r3, #4
 80012ee:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_TEIF4)
 80012f0:	4b39      	ldr	r3, [pc, #228]	@ (80013d8 <DMA2_Stream4_IRQHandler+0x148>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 0308 	and.w	r3, r3, #8
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d00e      	beq.n	800131a <DMA2_Stream4_IRQHandler+0x8a>
	{
	    if (__DMA2_Stream4_Config__ -> ISR_Routines.Transfer_Error_ISR)
 80012fc:	4b37      	ldr	r3, [pc, #220]	@ (80013dc <DMA2_Stream4_IRQHandler+0x14c>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001302:	2b00      	cmp	r3, #0
 8001304:	d009      	beq.n	800131a <DMA2_Stream4_IRQHandler+0x8a>
	    {
	    	__DMA2_Stream4_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8001306:	4b35      	ldr	r3, [pc, #212]	@ (80013dc <DMA2_Stream4_IRQHandler+0x14c>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800130c:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CTEIF4;
 800130e:	4b31      	ldr	r3, [pc, #196]	@ (80013d4 <DMA2_Stream4_IRQHandler+0x144>)
 8001310:	68db      	ldr	r3, [r3, #12]
 8001312:	4a30      	ldr	r2, [pc, #192]	@ (80013d4 <DMA2_Stream4_IRQHandler+0x144>)
 8001314:	f043 0308 	orr.w	r3, r3, #8
 8001318:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_HTIF4)
 800131a:	4b2f      	ldr	r3, [pc, #188]	@ (80013d8 <DMA2_Stream4_IRQHandler+0x148>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0310 	and.w	r3, r3, #16
 8001322:	2b00      	cmp	r3, #0
 8001324:	d026      	beq.n	8001374 <DMA2_Stream4_IRQHandler+0xe4>
	{
	    if (__DMA2_Stream4_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001326:	4b2d      	ldr	r3, [pc, #180]	@ (80013dc <DMA2_Stream4_IRQHandler+0x14c>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800132c:	2b00      	cmp	r3, #0
 800132e:	d021      	beq.n	8001374 <DMA2_Stream4_IRQHandler+0xe4>
	    {
	    	__DMA2_Stream4_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001330:	4b2a      	ldr	r3, [pc, #168]	@ (80013dc <DMA2_Stream4_IRQHandler+0x14c>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001336:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CHTIF4;
 8001338:	4b26      	ldr	r3, [pc, #152]	@ (80013d4 <DMA2_Stream4_IRQHandler+0x144>)
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	4a25      	ldr	r2, [pc, #148]	@ (80013d4 <DMA2_Stream4_IRQHandler+0x144>)
 800133e:	f043 0310 	orr.w	r3, r3, #16
 8001342:	60d3      	str	r3, [r2, #12]

	    	if(__DMA2_Stream4_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001344:	4b25      	ldr	r3, [pc, #148]	@ (80013dc <DMA2_Stream4_IRQHandler+0x14c>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800134a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800134e:	4293      	cmp	r3, r2
 8001350:	d110      	bne.n	8001374 <DMA2_Stream4_IRQHandler+0xe4>
	    	{
	    		if((__DMA2_Stream4_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001352:	4b22      	ldr	r3, [pc, #136]	@ (80013dc <DMA2_Stream4_IRQHandler+0x14c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d004      	beq.n	800136c <DMA2_Stream4_IRQHandler+0xdc>
	    		{
	    			__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001362:	4b1e      	ldr	r3, [pc, #120]	@ (80013dc <DMA2_Stream4_IRQHandler+0x14c>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001368:	4798      	blx	r3
 800136a:	e003      	b.n	8001374 <DMA2_Stream4_IRQHandler+0xe4>
	    		}
	    		else
	    		{
	    			__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800136c:	4b1b      	ldr	r3, [pc, #108]	@ (80013dc <DMA2_Stream4_IRQHandler+0x14c>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001372:	4798      	blx	r3
	    		}
	    	}
	    }
	}

	if(DMA_HISR & DMA_HISR_TCIF4)
 8001374:	4b18      	ldr	r3, [pc, #96]	@ (80013d8 <DMA2_Stream4_IRQHandler+0x148>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 0320 	and.w	r3, r3, #32
 800137c:	2b00      	cmp	r3, #0
 800137e:	d026      	beq.n	80013ce <DMA2_Stream4_IRQHandler+0x13e>
	{
	    if (__DMA2_Stream4_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001380:	4b16      	ldr	r3, [pc, #88]	@ (80013dc <DMA2_Stream4_IRQHandler+0x14c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001386:	2b00      	cmp	r3, #0
 8001388:	d021      	beq.n	80013ce <DMA2_Stream4_IRQHandler+0x13e>
	    {
	    	__DMA2_Stream4_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 800138a:	4b14      	ldr	r3, [pc, #80]	@ (80013dc <DMA2_Stream4_IRQHandler+0x14c>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001390:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CTCIF4;
 8001392:	4b10      	ldr	r3, [pc, #64]	@ (80013d4 <DMA2_Stream4_IRQHandler+0x144>)
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	4a0f      	ldr	r2, [pc, #60]	@ (80013d4 <DMA2_Stream4_IRQHandler+0x144>)
 8001398:	f043 0320 	orr.w	r3, r3, #32
 800139c:	60d3      	str	r3, [r2, #12]

	    	if(__DMA2_Stream4_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800139e:	4b0f      	ldr	r3, [pc, #60]	@ (80013dc <DMA2_Stream4_IRQHandler+0x14c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013a4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d110      	bne.n	80013ce <DMA2_Stream4_IRQHandler+0x13e>
	    	{
	    		if((__DMA2_Stream4_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80013ac:	4b0b      	ldr	r3, [pc, #44]	@ (80013dc <DMA2_Stream4_IRQHandler+0x14c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d004      	beq.n	80013c6 <DMA2_Stream4_IRQHandler+0x136>
	    		{
	    			__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80013bc:	4b07      	ldr	r3, [pc, #28]	@ (80013dc <DMA2_Stream4_IRQHandler+0x14c>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80013c2:	4798      	blx	r3
	    			__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
	    		}
	    	}
	    }
	}
}
 80013c4:	e003      	b.n	80013ce <DMA2_Stream4_IRQHandler+0x13e>
	    			__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80013c6:	4b05      	ldr	r3, [pc, #20]	@ (80013dc <DMA2_Stream4_IRQHandler+0x14c>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013cc:	4798      	blx	r3
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40026400 	.word	0x40026400
 80013d8:	20000068 	.word	0x20000068
 80013dc:	20000054 	.word	0x20000054

080013e0 <DMA2_Stream5_IRQHandler>:




void DMA2_Stream5_IRQHandler(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
	DMA_HISR = DMA2 -> HISR;
 80013e4:	4b4f      	ldr	r3, [pc, #316]	@ (8001524 <DMA2_Stream5_IRQHandler+0x144>)
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	4a4f      	ldr	r2, [pc, #316]	@ (8001528 <DMA2_Stream5_IRQHandler+0x148>)
 80013ea:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF5)
 80013ec:	4b4e      	ldr	r3, [pc, #312]	@ (8001528 <DMA2_Stream5_IRQHandler+0x148>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d00e      	beq.n	8001416 <DMA2_Stream5_IRQHandler+0x36>
	{
	    if (__DMA2_Stream5_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80013f8:	4b4c      	ldr	r3, [pc, #304]	@ (800152c <DMA2_Stream5_IRQHandler+0x14c>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d009      	beq.n	8001416 <DMA2_Stream5_IRQHandler+0x36>
	    {
	    	__DMA2_Stream5_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8001402:	4b4a      	ldr	r3, [pc, #296]	@ (800152c <DMA2_Stream5_IRQHandler+0x14c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001408:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CFEIF5;
 800140a:	4b46      	ldr	r3, [pc, #280]	@ (8001524 <DMA2_Stream5_IRQHandler+0x144>)
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	4a45      	ldr	r2, [pc, #276]	@ (8001524 <DMA2_Stream5_IRQHandler+0x144>)
 8001410:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001414:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_DMEIF5)
 8001416:	4b44      	ldr	r3, [pc, #272]	@ (8001528 <DMA2_Stream5_IRQHandler+0x148>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800141e:	2b00      	cmp	r3, #0
 8001420:	d00e      	beq.n	8001440 <DMA2_Stream5_IRQHandler+0x60>
	{
	    if (__DMA2_Stream5_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8001422:	4b42      	ldr	r3, [pc, #264]	@ (800152c <DMA2_Stream5_IRQHandler+0x14c>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001428:	2b00      	cmp	r3, #0
 800142a:	d009      	beq.n	8001440 <DMA2_Stream5_IRQHandler+0x60>
	    {
	    	__DMA2_Stream5_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 800142c:	4b3f      	ldr	r3, [pc, #252]	@ (800152c <DMA2_Stream5_IRQHandler+0x14c>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001432:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF5;
 8001434:	4b3b      	ldr	r3, [pc, #236]	@ (8001524 <DMA2_Stream5_IRQHandler+0x144>)
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	4a3a      	ldr	r2, [pc, #232]	@ (8001524 <DMA2_Stream5_IRQHandler+0x144>)
 800143a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800143e:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_TEIF5)
 8001440:	4b39      	ldr	r3, [pc, #228]	@ (8001528 <DMA2_Stream5_IRQHandler+0x148>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001448:	2b00      	cmp	r3, #0
 800144a:	d00e      	beq.n	800146a <DMA2_Stream5_IRQHandler+0x8a>
	{
	    if (__DMA2_Stream5_Config__ -> ISR_Routines.Transfer_Error_ISR)
 800144c:	4b37      	ldr	r3, [pc, #220]	@ (800152c <DMA2_Stream5_IRQHandler+0x14c>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001452:	2b00      	cmp	r3, #0
 8001454:	d009      	beq.n	800146a <DMA2_Stream5_IRQHandler+0x8a>
	    {
	    	__DMA2_Stream5_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8001456:	4b35      	ldr	r3, [pc, #212]	@ (800152c <DMA2_Stream5_IRQHandler+0x14c>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800145c:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CTEIF5;
 800145e:	4b31      	ldr	r3, [pc, #196]	@ (8001524 <DMA2_Stream5_IRQHandler+0x144>)
 8001460:	68db      	ldr	r3, [r3, #12]
 8001462:	4a30      	ldr	r2, [pc, #192]	@ (8001524 <DMA2_Stream5_IRQHandler+0x144>)
 8001464:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001468:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_HTIF5)
 800146a:	4b2f      	ldr	r3, [pc, #188]	@ (8001528 <DMA2_Stream5_IRQHandler+0x148>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001472:	2b00      	cmp	r3, #0
 8001474:	d026      	beq.n	80014c4 <DMA2_Stream5_IRQHandler+0xe4>
	{
	    if (__DMA2_Stream5_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001476:	4b2d      	ldr	r3, [pc, #180]	@ (800152c <DMA2_Stream5_IRQHandler+0x14c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800147c:	2b00      	cmp	r3, #0
 800147e:	d021      	beq.n	80014c4 <DMA2_Stream5_IRQHandler+0xe4>
	    {
	    	__DMA2_Stream5_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001480:	4b2a      	ldr	r3, [pc, #168]	@ (800152c <DMA2_Stream5_IRQHandler+0x14c>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001486:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CHTIF5;
 8001488:	4b26      	ldr	r3, [pc, #152]	@ (8001524 <DMA2_Stream5_IRQHandler+0x144>)
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	4a25      	ldr	r2, [pc, #148]	@ (8001524 <DMA2_Stream5_IRQHandler+0x144>)
 800148e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001492:	60d3      	str	r3, [r2, #12]

	    	if(__DMA2_Stream5_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001494:	4b25      	ldr	r3, [pc, #148]	@ (800152c <DMA2_Stream5_IRQHandler+0x14c>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800149a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800149e:	4293      	cmp	r3, r2
 80014a0:	d110      	bne.n	80014c4 <DMA2_Stream5_IRQHandler+0xe4>
	    	{
	    		if((__DMA2_Stream5_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80014a2:	4b22      	ldr	r3, [pc, #136]	@ (800152c <DMA2_Stream5_IRQHandler+0x14c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d004      	beq.n	80014bc <DMA2_Stream5_IRQHandler+0xdc>
	    		{
	    			__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80014b2:	4b1e      	ldr	r3, [pc, #120]	@ (800152c <DMA2_Stream5_IRQHandler+0x14c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80014b8:	4798      	blx	r3
 80014ba:	e003      	b.n	80014c4 <DMA2_Stream5_IRQHandler+0xe4>
	    		}
	    		else
	    		{
	    			__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80014bc:	4b1b      	ldr	r3, [pc, #108]	@ (800152c <DMA2_Stream5_IRQHandler+0x14c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014c2:	4798      	blx	r3
	    		}
	    	}
	    }
	}

	if(DMA_HISR & DMA_HISR_TCIF5)
 80014c4:	4b18      	ldr	r3, [pc, #96]	@ (8001528 <DMA2_Stream5_IRQHandler+0x148>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d026      	beq.n	800151e <DMA2_Stream5_IRQHandler+0x13e>
	{
	    if (__DMA2_Stream5_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 80014d0:	4b16      	ldr	r3, [pc, #88]	@ (800152c <DMA2_Stream5_IRQHandler+0x14c>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d021      	beq.n	800151e <DMA2_Stream5_IRQHandler+0x13e>
	    {
	    	__DMA2_Stream5_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80014da:	4b14      	ldr	r3, [pc, #80]	@ (800152c <DMA2_Stream5_IRQHandler+0x14c>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014e0:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CTCIF5;
 80014e2:	4b10      	ldr	r3, [pc, #64]	@ (8001524 <DMA2_Stream5_IRQHandler+0x144>)
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	4a0f      	ldr	r2, [pc, #60]	@ (8001524 <DMA2_Stream5_IRQHandler+0x144>)
 80014e8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80014ec:	60d3      	str	r3, [r2, #12]

	    	if(__DMA2_Stream5_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80014ee:	4b0f      	ldr	r3, [pc, #60]	@ (800152c <DMA2_Stream5_IRQHandler+0x14c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014f4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d110      	bne.n	800151e <DMA2_Stream5_IRQHandler+0x13e>
	    	{
	    		if((__DMA2_Stream5_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80014fc:	4b0b      	ldr	r3, [pc, #44]	@ (800152c <DMA2_Stream5_IRQHandler+0x14c>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d004      	beq.n	8001516 <DMA2_Stream5_IRQHandler+0x136>
	    		{
	    			__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800150c:	4b07      	ldr	r3, [pc, #28]	@ (800152c <DMA2_Stream5_IRQHandler+0x14c>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001512:	4798      	blx	r3
	    			__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
	    		}
	    	}
	    }
	}
}
 8001514:	e003      	b.n	800151e <DMA2_Stream5_IRQHandler+0x13e>
	    			__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001516:	4b05      	ldr	r3, [pc, #20]	@ (800152c <DMA2_Stream5_IRQHandler+0x14c>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800151c:	4798      	blx	r3
}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40026400 	.word	0x40026400
 8001528:	20000068 	.word	0x20000068
 800152c:	20000058 	.word	0x20000058

08001530 <DMA2_Stream6_IRQHandler>:



void DMA2_Stream6_IRQHandler(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
	DMA_HISR = DMA2 -> HISR;
 8001534:	4b4f      	ldr	r3, [pc, #316]	@ (8001674 <DMA2_Stream6_IRQHandler+0x144>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	4a4f      	ldr	r2, [pc, #316]	@ (8001678 <DMA2_Stream6_IRQHandler+0x148>)
 800153a:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF6)
 800153c:	4b4e      	ldr	r3, [pc, #312]	@ (8001678 <DMA2_Stream6_IRQHandler+0x148>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d00e      	beq.n	8001566 <DMA2_Stream6_IRQHandler+0x36>
	{
	    if (__DMA2_Stream6_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001548:	4b4c      	ldr	r3, [pc, #304]	@ (800167c <DMA2_Stream6_IRQHandler+0x14c>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800154e:	2b00      	cmp	r3, #0
 8001550:	d009      	beq.n	8001566 <DMA2_Stream6_IRQHandler+0x36>
	    {
	    	__DMA2_Stream6_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8001552:	4b4a      	ldr	r3, [pc, #296]	@ (800167c <DMA2_Stream6_IRQHandler+0x14c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001558:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CFEIF6;
 800155a:	4b46      	ldr	r3, [pc, #280]	@ (8001674 <DMA2_Stream6_IRQHandler+0x144>)
 800155c:	68db      	ldr	r3, [r3, #12]
 800155e:	4a45      	ldr	r2, [pc, #276]	@ (8001674 <DMA2_Stream6_IRQHandler+0x144>)
 8001560:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001564:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_DMEIF6)
 8001566:	4b44      	ldr	r3, [pc, #272]	@ (8001678 <DMA2_Stream6_IRQHandler+0x148>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d00e      	beq.n	8001590 <DMA2_Stream6_IRQHandler+0x60>
	{
	    if (__DMA2_Stream6_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8001572:	4b42      	ldr	r3, [pc, #264]	@ (800167c <DMA2_Stream6_IRQHandler+0x14c>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001578:	2b00      	cmp	r3, #0
 800157a:	d009      	beq.n	8001590 <DMA2_Stream6_IRQHandler+0x60>
	    {
	    	__DMA2_Stream6_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 800157c:	4b3f      	ldr	r3, [pc, #252]	@ (800167c <DMA2_Stream6_IRQHandler+0x14c>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001582:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF6;
 8001584:	4b3b      	ldr	r3, [pc, #236]	@ (8001674 <DMA2_Stream6_IRQHandler+0x144>)
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	4a3a      	ldr	r2, [pc, #232]	@ (8001674 <DMA2_Stream6_IRQHandler+0x144>)
 800158a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800158e:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_TEIF6)
 8001590:	4b39      	ldr	r3, [pc, #228]	@ (8001678 <DMA2_Stream6_IRQHandler+0x148>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d00e      	beq.n	80015ba <DMA2_Stream6_IRQHandler+0x8a>
	{
	    if (__DMA2_Stream6_Config__ -> ISR_Routines.Transfer_Error_ISR)
 800159c:	4b37      	ldr	r3, [pc, #220]	@ (800167c <DMA2_Stream6_IRQHandler+0x14c>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d009      	beq.n	80015ba <DMA2_Stream6_IRQHandler+0x8a>
	    {
	    	__DMA2_Stream6_Config__ ->ISR_Routines.Transfer_Error_ISR();
 80015a6:	4b35      	ldr	r3, [pc, #212]	@ (800167c <DMA2_Stream6_IRQHandler+0x14c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ac:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CTEIF6;
 80015ae:	4b31      	ldr	r3, [pc, #196]	@ (8001674 <DMA2_Stream6_IRQHandler+0x144>)
 80015b0:	68db      	ldr	r3, [r3, #12]
 80015b2:	4a30      	ldr	r2, [pc, #192]	@ (8001674 <DMA2_Stream6_IRQHandler+0x144>)
 80015b4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80015b8:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_HTIF6)
 80015ba:	4b2f      	ldr	r3, [pc, #188]	@ (8001678 <DMA2_Stream6_IRQHandler+0x148>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d026      	beq.n	8001614 <DMA2_Stream6_IRQHandler+0xe4>
	{
	    if (__DMA2_Stream6_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 80015c6:	4b2d      	ldr	r3, [pc, #180]	@ (800167c <DMA2_Stream6_IRQHandler+0x14c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d021      	beq.n	8001614 <DMA2_Stream6_IRQHandler+0xe4>
	    {
	    	__DMA2_Stream6_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80015d0:	4b2a      	ldr	r3, [pc, #168]	@ (800167c <DMA2_Stream6_IRQHandler+0x14c>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015d6:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CHTIF6;
 80015d8:	4b26      	ldr	r3, [pc, #152]	@ (8001674 <DMA2_Stream6_IRQHandler+0x144>)
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	4a25      	ldr	r2, [pc, #148]	@ (8001674 <DMA2_Stream6_IRQHandler+0x144>)
 80015de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80015e2:	60d3      	str	r3, [r2, #12]

	    	if(__DMA2_Stream6_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80015e4:	4b25      	ldr	r3, [pc, #148]	@ (800167c <DMA2_Stream6_IRQHandler+0x14c>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015ea:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d110      	bne.n	8001614 <DMA2_Stream6_IRQHandler+0xe4>
	    	{
	    		if((__DMA2_Stream6_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80015f2:	4b22      	ldr	r3, [pc, #136]	@ (800167c <DMA2_Stream6_IRQHandler+0x14c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d004      	beq.n	800160c <DMA2_Stream6_IRQHandler+0xdc>
	    		{
	    			__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001602:	4b1e      	ldr	r3, [pc, #120]	@ (800167c <DMA2_Stream6_IRQHandler+0x14c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001608:	4798      	blx	r3
 800160a:	e003      	b.n	8001614 <DMA2_Stream6_IRQHandler+0xe4>
	    		}
	    		else
	    		{
	    			__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800160c:	4b1b      	ldr	r3, [pc, #108]	@ (800167c <DMA2_Stream6_IRQHandler+0x14c>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001612:	4798      	blx	r3
	    		}
	    	}
	    }
	}

	if(DMA_HISR & DMA_HISR_TCIF6)
 8001614:	4b18      	ldr	r3, [pc, #96]	@ (8001678 <DMA2_Stream6_IRQHandler+0x148>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d026      	beq.n	800166e <DMA2_Stream6_IRQHandler+0x13e>
	{
	    if (__DMA2_Stream6_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001620:	4b16      	ldr	r3, [pc, #88]	@ (800167c <DMA2_Stream6_IRQHandler+0x14c>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001626:	2b00      	cmp	r3, #0
 8001628:	d021      	beq.n	800166e <DMA2_Stream6_IRQHandler+0x13e>
	    {
	    	__DMA2_Stream6_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 800162a:	4b14      	ldr	r3, [pc, #80]	@ (800167c <DMA2_Stream6_IRQHandler+0x14c>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001630:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CTCIF6;
 8001632:	4b10      	ldr	r3, [pc, #64]	@ (8001674 <DMA2_Stream6_IRQHandler+0x144>)
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	4a0f      	ldr	r2, [pc, #60]	@ (8001674 <DMA2_Stream6_IRQHandler+0x144>)
 8001638:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800163c:	60d3      	str	r3, [r2, #12]

	    	if(__DMA2_Stream6_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800163e:	4b0f      	ldr	r3, [pc, #60]	@ (800167c <DMA2_Stream6_IRQHandler+0x14c>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001644:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001648:	4293      	cmp	r3, r2
 800164a:	d110      	bne.n	800166e <DMA2_Stream6_IRQHandler+0x13e>
	    	{
	    		if((__DMA2_Stream6_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800164c:	4b0b      	ldr	r3, [pc, #44]	@ (800167c <DMA2_Stream6_IRQHandler+0x14c>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d004      	beq.n	8001666 <DMA2_Stream6_IRQHandler+0x136>
	    		{
	    			__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800165c:	4b07      	ldr	r3, [pc, #28]	@ (800167c <DMA2_Stream6_IRQHandler+0x14c>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001662:	4798      	blx	r3
	    			__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
	    		}
	    	}
	    }
	}
}
 8001664:	e003      	b.n	800166e <DMA2_Stream6_IRQHandler+0x13e>
	    			__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001666:	4b05      	ldr	r3, [pc, #20]	@ (800167c <DMA2_Stream6_IRQHandler+0x14c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800166c:	4798      	blx	r3
}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40026400 	.word	0x40026400
 8001678:	20000068 	.word	0x20000068
 800167c:	2000005c 	.word	0x2000005c

08001680 <DMA2_Stream7_IRQHandler>:


void DMA2_Stream7_IRQHandler(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
	DMA_HISR = DMA2 -> HISR;
 8001684:	4b4f      	ldr	r3, [pc, #316]	@ (80017c4 <DMA2_Stream7_IRQHandler+0x144>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	4a4f      	ldr	r2, [pc, #316]	@ (80017c8 <DMA2_Stream7_IRQHandler+0x148>)
 800168a:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF7)
 800168c:	4b4e      	ldr	r3, [pc, #312]	@ (80017c8 <DMA2_Stream7_IRQHandler+0x148>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d00e      	beq.n	80016b6 <DMA2_Stream7_IRQHandler+0x36>
	{
	    if (__DMA2_Stream7_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001698:	4b4c      	ldr	r3, [pc, #304]	@ (80017cc <DMA2_Stream7_IRQHandler+0x14c>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d009      	beq.n	80016b6 <DMA2_Stream7_IRQHandler+0x36>
	    {
	    	__DMA2_Stream7_Config__ ->ISR_Routines.FIFO_Error_ISR();
 80016a2:	4b4a      	ldr	r3, [pc, #296]	@ (80017cc <DMA2_Stream7_IRQHandler+0x14c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016a8:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CFEIF7;
 80016aa:	4b46      	ldr	r3, [pc, #280]	@ (80017c4 <DMA2_Stream7_IRQHandler+0x144>)
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	4a45      	ldr	r2, [pc, #276]	@ (80017c4 <DMA2_Stream7_IRQHandler+0x144>)
 80016b0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80016b4:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_DMEIF7)
 80016b6:	4b44      	ldr	r3, [pc, #272]	@ (80017c8 <DMA2_Stream7_IRQHandler+0x148>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d00e      	beq.n	80016e0 <DMA2_Stream7_IRQHandler+0x60>
	{
	    if (__DMA2_Stream7_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 80016c2:	4b42      	ldr	r3, [pc, #264]	@ (80017cc <DMA2_Stream7_IRQHandler+0x14c>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d009      	beq.n	80016e0 <DMA2_Stream7_IRQHandler+0x60>
	    {
	    	__DMA2_Stream7_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 80016cc:	4b3f      	ldr	r3, [pc, #252]	@ (80017cc <DMA2_Stream7_IRQHandler+0x14c>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d2:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF7;
 80016d4:	4b3b      	ldr	r3, [pc, #236]	@ (80017c4 <DMA2_Stream7_IRQHandler+0x144>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	4a3a      	ldr	r2, [pc, #232]	@ (80017c4 <DMA2_Stream7_IRQHandler+0x144>)
 80016da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80016de:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_TEIF7)
 80016e0:	4b39      	ldr	r3, [pc, #228]	@ (80017c8 <DMA2_Stream7_IRQHandler+0x148>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d00e      	beq.n	800170a <DMA2_Stream7_IRQHandler+0x8a>
	{
	    if (__DMA2_Stream7_Config__ -> ISR_Routines.Transfer_Error_ISR)
 80016ec:	4b37      	ldr	r3, [pc, #220]	@ (80017cc <DMA2_Stream7_IRQHandler+0x14c>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d009      	beq.n	800170a <DMA2_Stream7_IRQHandler+0x8a>
	    {
	    	__DMA2_Stream7_Config__ ->ISR_Routines.Transfer_Error_ISR();
 80016f6:	4b35      	ldr	r3, [pc, #212]	@ (80017cc <DMA2_Stream7_IRQHandler+0x14c>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016fc:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CTEIF7;
 80016fe:	4b31      	ldr	r3, [pc, #196]	@ (80017c4 <DMA2_Stream7_IRQHandler+0x144>)
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	4a30      	ldr	r2, [pc, #192]	@ (80017c4 <DMA2_Stream7_IRQHandler+0x144>)
 8001704:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001708:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_HTIF7)
 800170a:	4b2f      	ldr	r3, [pc, #188]	@ (80017c8 <DMA2_Stream7_IRQHandler+0x148>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d026      	beq.n	8001764 <DMA2_Stream7_IRQHandler+0xe4>
	{
	    if (__DMA2_Stream7_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001716:	4b2d      	ldr	r3, [pc, #180]	@ (80017cc <DMA2_Stream7_IRQHandler+0x14c>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800171c:	2b00      	cmp	r3, #0
 800171e:	d021      	beq.n	8001764 <DMA2_Stream7_IRQHandler+0xe4>
	    {
	    	__DMA2_Stream7_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001720:	4b2a      	ldr	r3, [pc, #168]	@ (80017cc <DMA2_Stream7_IRQHandler+0x14c>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001726:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CHTIF7;
 8001728:	4b26      	ldr	r3, [pc, #152]	@ (80017c4 <DMA2_Stream7_IRQHandler+0x144>)
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	4a25      	ldr	r2, [pc, #148]	@ (80017c4 <DMA2_Stream7_IRQHandler+0x144>)
 800172e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001732:	60d3      	str	r3, [r2, #12]

	    	if(__DMA2_Stream7_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001734:	4b25      	ldr	r3, [pc, #148]	@ (80017cc <DMA2_Stream7_IRQHandler+0x14c>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800173a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800173e:	4293      	cmp	r3, r2
 8001740:	d110      	bne.n	8001764 <DMA2_Stream7_IRQHandler+0xe4>
	    	{
	    		if((__DMA2_Stream7_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001742:	4b22      	ldr	r3, [pc, #136]	@ (80017cc <DMA2_Stream7_IRQHandler+0x14c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d004      	beq.n	800175c <DMA2_Stream7_IRQHandler+0xdc>
	    		{
	    			__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001752:	4b1e      	ldr	r3, [pc, #120]	@ (80017cc <DMA2_Stream7_IRQHandler+0x14c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001758:	4798      	blx	r3
 800175a:	e003      	b.n	8001764 <DMA2_Stream7_IRQHandler+0xe4>
	    		}
	    		else
	    		{
	    			__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800175c:	4b1b      	ldr	r3, [pc, #108]	@ (80017cc <DMA2_Stream7_IRQHandler+0x14c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001762:	4798      	blx	r3
	    		}
	    	}
	    }
	}

	if(DMA_HISR & DMA_HISR_TCIF7)
 8001764:	4b18      	ldr	r3, [pc, #96]	@ (80017c8 <DMA2_Stream7_IRQHandler+0x148>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d026      	beq.n	80017be <DMA2_Stream7_IRQHandler+0x13e>
	{
	    if (__DMA2_Stream7_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001770:	4b16      	ldr	r3, [pc, #88]	@ (80017cc <DMA2_Stream7_IRQHandler+0x14c>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001776:	2b00      	cmp	r3, #0
 8001778:	d021      	beq.n	80017be <DMA2_Stream7_IRQHandler+0x13e>
	    {
	    	__DMA2_Stream7_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 800177a:	4b14      	ldr	r3, [pc, #80]	@ (80017cc <DMA2_Stream7_IRQHandler+0x14c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001780:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CTCIF7;
 8001782:	4b10      	ldr	r3, [pc, #64]	@ (80017c4 <DMA2_Stream7_IRQHandler+0x144>)
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	4a0f      	ldr	r2, [pc, #60]	@ (80017c4 <DMA2_Stream7_IRQHandler+0x144>)
 8001788:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800178c:	60d3      	str	r3, [r2, #12]

	    	if(__DMA2_Stream7_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800178e:	4b0f      	ldr	r3, [pc, #60]	@ (80017cc <DMA2_Stream7_IRQHandler+0x14c>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001794:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001798:	4293      	cmp	r3, r2
 800179a:	d110      	bne.n	80017be <DMA2_Stream7_IRQHandler+0x13e>
	    	{
	    		if((__DMA2_Stream7_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800179c:	4b0b      	ldr	r3, [pc, #44]	@ (80017cc <DMA2_Stream7_IRQHandler+0x14c>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d004      	beq.n	80017b6 <DMA2_Stream7_IRQHandler+0x136>
	    		{
	    			__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80017ac:	4b07      	ldr	r3, [pc, #28]	@ (80017cc <DMA2_Stream7_IRQHandler+0x14c>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80017b2:	4798      	blx	r3
	    			__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
	    		}
	    	}
	    }
	}
}
 80017b4:	e003      	b.n	80017be <DMA2_Stream7_IRQHandler+0x13e>
	    			__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80017b6:	4b05      	ldr	r3, [pc, #20]	@ (80017cc <DMA2_Stream7_IRQHandler+0x14c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017bc:	4798      	blx	r3
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40026400 	.word	0x40026400
 80017c8:	20000068 	.word	0x20000068
 80017cc:	20000060 	.word	0x20000060

080017d0 <DMA_Clock_Enable>:
 * the RCC AHB1 peripheral clock enable register.
 *
 * @param[in] config Pointer to the `DMA_Config` structure that contains the DMA controller configuration.
 */
void DMA_Clock_Enable(DMA_Config *config)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
	if(config -> Request.Controller == DMA1){
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a0c      	ldr	r2, [pc, #48]	@ (8001810 <DMA_Clock_Enable+0x40>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d105      	bne.n	80017ee <DMA_Clock_Enable+0x1e>
		RCC -> AHB1ENR |= RCC_AHB1ENR_DMA1EN;
 80017e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001814 <DMA_Clock_Enable+0x44>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e6:	4a0b      	ldr	r2, [pc, #44]	@ (8001814 <DMA_Clock_Enable+0x44>)
 80017e8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80017ec:	6313      	str	r3, [r2, #48]	@ 0x30
	}
	if(config -> Request.Controller == DMA2)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a09      	ldr	r2, [pc, #36]	@ (8001818 <DMA_Clock_Enable+0x48>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d105      	bne.n	8001804 <DMA_Clock_Enable+0x34>
		{
		RCC -> AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 80017f8:	4b06      	ldr	r3, [pc, #24]	@ (8001814 <DMA_Clock_Enable+0x44>)
 80017fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fc:	4a05      	ldr	r2, [pc, #20]	@ (8001814 <DMA_Clock_Enable+0x44>)
 80017fe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001802:	6313      	str	r3, [r2, #48]	@ 0x30
		}
}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	40026000 	.word	0x40026000
 8001814:	40023800 	.word	0x40023800
 8001818:	40026400 	.word	0x40026400

0800181c <DMA_Init>:
 * @param[in] config Pointer to the `DMA_Config` structure containing the configuration parameters.
 *
 * @return int8_t Returns 1 on successful initialization, or -1 if an error occurs.
 */
int8_t DMA_Init(DMA_Config *config)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
//	DMA_Clock_Disable(config);
    DMA_Clock_Enable(config);  // Enable the clock for the specified DMA controller
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f7ff ffd3 	bl	80017d0 <DMA_Clock_Enable>

    if (config->Request.Stream->CR & DMA_SxCR_EN)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 0301 	and.w	r3, r3, #1
 8001834:	2b00      	cmp	r3, #0
 8001836:	d00f      	beq.n	8001858 <DMA_Init+0x3c>
    {
    	config->Request.Stream->CR &= ~DMA_SxCR_EN;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f022 0201 	bic.w	r2, r2, #1
 8001846:	601a      	str	r2, [r3, #0]
        while (config->Request.Stream->CR & DMA_SxCR_EN);  // Wait until disabled
 8001848:	bf00      	nop
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0301 	and.w	r3, r3, #1
 8001854:	2b00      	cmp	r3, #0
 8001856:	d1f8      	bne.n	800184a <DMA_Init+0x2e>
    }


    config->Request.Stream->CR |= config->Request.channel << DMA_SxCR_CHSEL_Pos;  // Set the DMA channel
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	6819      	ldr	r1, [r3, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	7a1b      	ldrb	r3, [r3, #8]
 8001862:	065a      	lsls	r2, r3, #25
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	430a      	orrs	r2, r1
 800186a:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->circular_mode;  // Configure circular mode
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	6819      	ldr	r1, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	699a      	ldr	r2, [r3, #24]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	430a      	orrs	r2, r1
 800187c:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->flow_control;  // Set flow control
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	6819      	ldr	r1, [r3, #0]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	68da      	ldr	r2, [r3, #12]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	430a      	orrs	r2, r1
 800188e:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->priority_level;  // Set priority level
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	6819      	ldr	r1, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	695a      	ldr	r2, [r3, #20]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	430a      	orrs	r2, r1
 80018a0:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->memory_data_size;  // Set memory data size
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	6819      	ldr	r1, [r3, #0]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	430a      	orrs	r2, r1
 80018b2:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->peripheral_data_size;  // Set peripheral data size
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	6819      	ldr	r1, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	430a      	orrs	r2, r1
 80018c4:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->transfer_direction;  // Set transfer direction
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	6819      	ldr	r1, [r3, #0]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	691a      	ldr	r2, [r3, #16]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	430a      	orrs	r2, r1
 80018d6:	601a      	str	r2, [r3, #0]

    // Configure DMA interrupts if enabled


     if(config->interrupts != DMA_Configuration.DMA_Interrupts.Disable)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	69db      	ldr	r3, [r3, #28]
 80018dc:	2200      	movs	r2, #0
 80018de:	4293      	cmp	r3, r2
 80018e0:	f000 8110 	beq.w	8001b04 <DMA_Init+0x2e8>
    {

        if(config->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	69db      	ldr	r3, [r3, #28]
 80018e8:	2280      	movs	r2, #128	@ 0x80
 80018ea:	4013      	ands	r3, r2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d008      	beq.n	8001902 <DMA_Init+0xe6>
        {
        	config->Request.Stream->FCR |= config->interrupts;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	6959      	ldr	r1, [r3, #20]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	69da      	ldr	r2, [r3, #28]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	430a      	orrs	r2, r1
 8001900:	615a      	str	r2, [r3, #20]
        }

        if(config->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	69db      	ldr	r3, [r3, #28]
 8001906:	2210      	movs	r2, #16
 8001908:	4013      	ands	r3, r2
 800190a:	2b00      	cmp	r3, #0
 800190c:	d007      	beq.n	800191e <DMA_Init+0x102>
        {
        	config->Request.Stream->CR |= DMA_SxCR_TCIE;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f042 0210 	orr.w	r2, r2, #16
 800191c:	601a      	str	r2, [r3, #0]
        }

        if(config->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	69db      	ldr	r3, [r3, #28]
 8001922:	2208      	movs	r2, #8
 8001924:	4013      	ands	r3, r2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d007      	beq.n	800193a <DMA_Init+0x11e>
        {
        	config->Request.Stream->CR |= DMA_SxCR_HTIE;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f042 0208 	orr.w	r2, r2, #8
 8001938:	601a      	str	r2, [r3, #0]
        }

        if(config->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	69db      	ldr	r3, [r3, #28]
 800193e:	2204      	movs	r2, #4
 8001940:	4013      	ands	r3, r2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d007      	beq.n	8001956 <DMA_Init+0x13a>
        {
        	config->Request.Stream->CR |= DMA_SxCR_TEIE;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f042 0204 	orr.w	r2, r2, #4
 8001954:	601a      	str	r2, [r3, #0]
        }
        if(config->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	69db      	ldr	r3, [r3, #28]
 800195a:	2202      	movs	r2, #2
 800195c:	4013      	ands	r3, r2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d007      	beq.n	8001972 <DMA_Init+0x156>
        {
        	config->Request.Stream->CR |= DMA_SxCR_DMEIE;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f042 0202 	orr.w	r2, r2, #2
 8001970:	601a      	str	r2, [r3, #0]
        }

        // Enable the corresponding NVIC interrupt for the DMA stream
        if(config->Request.Controller == DMA1)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a80      	ldr	r2, [pc, #512]	@ (8001b78 <DMA_Init+0x35c>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d15f      	bne.n	8001a3c <DMA_Init+0x220>
        {
            if(config->Request.Stream == DMA1_Stream0){
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	4a7e      	ldr	r2, [pc, #504]	@ (8001b7c <DMA_Init+0x360>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d106      	bne.n	8001994 <DMA_Init+0x178>
            	__DMA1_Stream0_Config__ = config;
 8001986:	4a7e      	ldr	r2, [pc, #504]	@ (8001b80 <DMA_Init+0x364>)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6013      	str	r3, [r2, #0]
            	NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800198c:	200b      	movs	r0, #11
 800198e:	f7fe fc1b 	bl	80001c8 <__NVIC_EnableIRQ>
 8001992:	e0b7      	b.n	8001b04 <DMA_Init+0x2e8>
            }
            else if(config->Request.Stream == DMA1_Stream1){
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	4a7a      	ldr	r2, [pc, #488]	@ (8001b84 <DMA_Init+0x368>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d106      	bne.n	80019ac <DMA_Init+0x190>
            	__DMA1_Stream1_Config__ = config;
 800199e:	4a7a      	ldr	r2, [pc, #488]	@ (8001b88 <DMA_Init+0x36c>)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6013      	str	r3, [r2, #0]
            	NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80019a4:	200c      	movs	r0, #12
 80019a6:	f7fe fc0f 	bl	80001c8 <__NVIC_EnableIRQ>
 80019aa:	e0ab      	b.n	8001b04 <DMA_Init+0x2e8>
            }
            else if(config->Request.Stream == DMA1_Stream2){
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	4a76      	ldr	r2, [pc, #472]	@ (8001b8c <DMA_Init+0x370>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d106      	bne.n	80019c4 <DMA_Init+0x1a8>
            	__DMA1_Stream2_Config__ = config;
 80019b6:	4a76      	ldr	r2, [pc, #472]	@ (8001b90 <DMA_Init+0x374>)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6013      	str	r3, [r2, #0]
            	NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80019bc:	200d      	movs	r0, #13
 80019be:	f7fe fc03 	bl	80001c8 <__NVIC_EnableIRQ>
 80019c2:	e09f      	b.n	8001b04 <DMA_Init+0x2e8>
            }
            else if(config->Request.Stream == DMA1_Stream3){
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	4a72      	ldr	r2, [pc, #456]	@ (8001b94 <DMA_Init+0x378>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d106      	bne.n	80019dc <DMA_Init+0x1c0>
            	__DMA1_Stream3_Config__ = config;
 80019ce:	4a72      	ldr	r2, [pc, #456]	@ (8001b98 <DMA_Init+0x37c>)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6013      	str	r3, [r2, #0]
            	NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80019d4:	200e      	movs	r0, #14
 80019d6:	f7fe fbf7 	bl	80001c8 <__NVIC_EnableIRQ>
 80019da:	e093      	b.n	8001b04 <DMA_Init+0x2e8>
            }
            else if(config->Request.Stream == DMA1_Stream4){
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	4a6e      	ldr	r2, [pc, #440]	@ (8001b9c <DMA_Init+0x380>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d106      	bne.n	80019f4 <DMA_Init+0x1d8>
            	__DMA1_Stream4_Config__ = config;
 80019e6:	4a6e      	ldr	r2, [pc, #440]	@ (8001ba0 <DMA_Init+0x384>)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6013      	str	r3, [r2, #0]
            	NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80019ec:	200f      	movs	r0, #15
 80019ee:	f7fe fbeb 	bl	80001c8 <__NVIC_EnableIRQ>
 80019f2:	e087      	b.n	8001b04 <DMA_Init+0x2e8>
            }
            else if(config->Request.Stream == DMA1_Stream5){
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	4a6a      	ldr	r2, [pc, #424]	@ (8001ba4 <DMA_Init+0x388>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d106      	bne.n	8001a0c <DMA_Init+0x1f0>
            	__DMA1_Stream5_Config__ = config;
 80019fe:	4a6a      	ldr	r2, [pc, #424]	@ (8001ba8 <DMA_Init+0x38c>)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6013      	str	r3, [r2, #0]
            	NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001a04:	2010      	movs	r0, #16
 8001a06:	f7fe fbdf 	bl	80001c8 <__NVIC_EnableIRQ>
 8001a0a:	e07b      	b.n	8001b04 <DMA_Init+0x2e8>
            }
            else if(config->Request.Stream == DMA1_Stream6) {
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	4a66      	ldr	r2, [pc, #408]	@ (8001bac <DMA_Init+0x390>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d106      	bne.n	8001a24 <DMA_Init+0x208>
            	__DMA1_Stream6_Config__ = config;
 8001a16:	4a66      	ldr	r2, [pc, #408]	@ (8001bb0 <DMA_Init+0x394>)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6013      	str	r3, [r2, #0]
            	NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001a1c:	2011      	movs	r0, #17
 8001a1e:	f7fe fbd3 	bl	80001c8 <__NVIC_EnableIRQ>
 8001a22:	e06f      	b.n	8001b04 <DMA_Init+0x2e8>
            }
            else if(config->Request.Stream == DMA1_Stream7){
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	4a62      	ldr	r2, [pc, #392]	@ (8001bb4 <DMA_Init+0x398>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d16a      	bne.n	8001b04 <DMA_Init+0x2e8>
            	__DMA1_Stream7_Config__ = config;
 8001a2e:	4a62      	ldr	r2, [pc, #392]	@ (8001bb8 <DMA_Init+0x39c>)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6013      	str	r3, [r2, #0]
            	NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001a34:	202f      	movs	r0, #47	@ 0x2f
 8001a36:	f7fe fbc7 	bl	80001c8 <__NVIC_EnableIRQ>
 8001a3a:	e063      	b.n	8001b04 <DMA_Init+0x2e8>
            }
        }
        else if(config->Request.Controller == DMA2)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a5e      	ldr	r2, [pc, #376]	@ (8001bbc <DMA_Init+0x3a0>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d15e      	bne.n	8001b04 <DMA_Init+0x2e8>
        {
            if(config->Request.Stream == DMA2_Stream0){
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	4a5d      	ldr	r2, [pc, #372]	@ (8001bc0 <DMA_Init+0x3a4>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d106      	bne.n	8001a5e <DMA_Init+0x242>
            	__DMA2_Stream0_Config__ = config;
 8001a50:	4a5c      	ldr	r2, [pc, #368]	@ (8001bc4 <DMA_Init+0x3a8>)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6013      	str	r3, [r2, #0]
            	NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001a56:	2038      	movs	r0, #56	@ 0x38
 8001a58:	f7fe fbb6 	bl	80001c8 <__NVIC_EnableIRQ>
 8001a5c:	e052      	b.n	8001b04 <DMA_Init+0x2e8>
            }
            else if(config->Request.Stream == DMA2_Stream1){
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	4a59      	ldr	r2, [pc, #356]	@ (8001bc8 <DMA_Init+0x3ac>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d106      	bne.n	8001a76 <DMA_Init+0x25a>
            	__DMA2_Stream1_Config__ = config;
 8001a68:	4a58      	ldr	r2, [pc, #352]	@ (8001bcc <DMA_Init+0x3b0>)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6013      	str	r3, [r2, #0]
            	NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001a6e:	2039      	movs	r0, #57	@ 0x39
 8001a70:	f7fe fbaa 	bl	80001c8 <__NVIC_EnableIRQ>
 8001a74:	e046      	b.n	8001b04 <DMA_Init+0x2e8>
            }
            else if(config->Request.Stream == DMA2_Stream2){
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	4a55      	ldr	r2, [pc, #340]	@ (8001bd0 <DMA_Init+0x3b4>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d106      	bne.n	8001a8e <DMA_Init+0x272>
            	__DMA2_Stream2_Config__ = config;
 8001a80:	4a54      	ldr	r2, [pc, #336]	@ (8001bd4 <DMA_Init+0x3b8>)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6013      	str	r3, [r2, #0]
            	NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001a86:	203a      	movs	r0, #58	@ 0x3a
 8001a88:	f7fe fb9e 	bl	80001c8 <__NVIC_EnableIRQ>
 8001a8c:	e03a      	b.n	8001b04 <DMA_Init+0x2e8>
            }
            else if(config->Request.Stream == DMA2_Stream3){
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	4a51      	ldr	r2, [pc, #324]	@ (8001bd8 <DMA_Init+0x3bc>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d106      	bne.n	8001aa6 <DMA_Init+0x28a>
            	__DMA2_Stream3_Config__ = config;
 8001a98:	4a50      	ldr	r2, [pc, #320]	@ (8001bdc <DMA_Init+0x3c0>)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6013      	str	r3, [r2, #0]
            	NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001a9e:	203b      	movs	r0, #59	@ 0x3b
 8001aa0:	f7fe fb92 	bl	80001c8 <__NVIC_EnableIRQ>
 8001aa4:	e02e      	b.n	8001b04 <DMA_Init+0x2e8>
            }
            else if(config->Request.Stream == DMA2_Stream4){
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	4a4d      	ldr	r2, [pc, #308]	@ (8001be0 <DMA_Init+0x3c4>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d106      	bne.n	8001abe <DMA_Init+0x2a2>
            	__DMA2_Stream4_Config__ = config;
 8001ab0:	4a4c      	ldr	r2, [pc, #304]	@ (8001be4 <DMA_Init+0x3c8>)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6013      	str	r3, [r2, #0]
            	NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8001ab6:	203c      	movs	r0, #60	@ 0x3c
 8001ab8:	f7fe fb86 	bl	80001c8 <__NVIC_EnableIRQ>
 8001abc:	e022      	b.n	8001b04 <DMA_Init+0x2e8>
            }
            else if(config->Request.Stream == DMA2_Stream5){
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	4a49      	ldr	r2, [pc, #292]	@ (8001be8 <DMA_Init+0x3cc>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d106      	bne.n	8001ad6 <DMA_Init+0x2ba>
            	__DMA2_Stream5_Config__ = config;
 8001ac8:	4a48      	ldr	r2, [pc, #288]	@ (8001bec <DMA_Init+0x3d0>)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6013      	str	r3, [r2, #0]
            	NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8001ace:	2044      	movs	r0, #68	@ 0x44
 8001ad0:	f7fe fb7a 	bl	80001c8 <__NVIC_EnableIRQ>
 8001ad4:	e016      	b.n	8001b04 <DMA_Init+0x2e8>
            }
            else if(config->Request.Stream == DMA2_Stream6){
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	4a45      	ldr	r2, [pc, #276]	@ (8001bf0 <DMA_Init+0x3d4>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d106      	bne.n	8001aee <DMA_Init+0x2d2>
            	__DMA2_Stream6_Config__ = config;
 8001ae0:	4a44      	ldr	r2, [pc, #272]	@ (8001bf4 <DMA_Init+0x3d8>)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6013      	str	r3, [r2, #0]
            	NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001ae6:	2045      	movs	r0, #69	@ 0x45
 8001ae8:	f7fe fb6e 	bl	80001c8 <__NVIC_EnableIRQ>
 8001aec:	e00a      	b.n	8001b04 <DMA_Init+0x2e8>
            }
            else if(config->Request.Stream == DMA2_Stream7){
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	4a41      	ldr	r2, [pc, #260]	@ (8001bf8 <DMA_Init+0x3dc>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d105      	bne.n	8001b04 <DMA_Init+0x2e8>
            	__DMA2_Stream7_Config__ = config;
 8001af8:	4a40      	ldr	r2, [pc, #256]	@ (8001bfc <DMA_Init+0x3e0>)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6013      	str	r3, [r2, #0]
//            	NVIC_SetPriority(DMA2_Stream7_IRQn,0);
            	NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001afe:	2046      	movs	r0, #70	@ 0x46
 8001b00:	f7fe fb62 	bl	80001c8 <__NVIC_EnableIRQ>
            }
        }
    }

    // Configure memory and peripheral pointer increments
    config->Request.Stream->CR |= config->memory_pointer_increment;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	8c1b      	ldrh	r3, [r3, #32]
 8001b0e:	4619      	mov	r1, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	430a      	orrs	r2, r1
 8001b16:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->peripheral_pointer_increment;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8001b22:	4619      	mov	r1, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	601a      	str	r2, [r3, #0]

    // Configure circular mode
    if(config->circular_mode == DMA_Configuration.Circular_Mode.Enable)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d108      	bne.n	8001b4a <DMA_Init+0x32e>
    {
        config->Request.Stream->CR |= DMA_SxCR_CIRC;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	e010      	b.n	8001b6c <DMA_Init+0x350>
    }
    else if(config->circular_mode == DMA_Configuration.Circular_Mode.Disable)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	699b      	ldr	r3, [r3, #24]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d108      	bne.n	8001b66 <DMA_Init+0x34a>
    {
        config->Request.Stream->CR &= ~DMA_SxCR_CIRC;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	e002      	b.n	8001b6c <DMA_Init+0x350>
    }
    else
    {
        return -1;  // Return -1 if circular mode configuration is invalid
 8001b66:	f04f 33ff 	mov.w	r3, #4294967295
 8001b6a:	e000      	b.n	8001b6e <DMA_Init+0x352>
    }

    return 1;  // Return 1 on successful initialization
 8001b6c:	2301      	movs	r3, #1
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	40026000 	.word	0x40026000
 8001b7c:	40026010 	.word	0x40026010
 8001b80:	20000024 	.word	0x20000024
 8001b84:	40026028 	.word	0x40026028
 8001b88:	20000028 	.word	0x20000028
 8001b8c:	40026040 	.word	0x40026040
 8001b90:	2000002c 	.word	0x2000002c
 8001b94:	40026058 	.word	0x40026058
 8001b98:	20000030 	.word	0x20000030
 8001b9c:	40026070 	.word	0x40026070
 8001ba0:	20000034 	.word	0x20000034
 8001ba4:	40026088 	.word	0x40026088
 8001ba8:	20000038 	.word	0x20000038
 8001bac:	400260a0 	.word	0x400260a0
 8001bb0:	2000003c 	.word	0x2000003c
 8001bb4:	400260b8 	.word	0x400260b8
 8001bb8:	20000040 	.word	0x20000040
 8001bbc:	40026400 	.word	0x40026400
 8001bc0:	40026410 	.word	0x40026410
 8001bc4:	20000044 	.word	0x20000044
 8001bc8:	40026428 	.word	0x40026428
 8001bcc:	20000048 	.word	0x20000048
 8001bd0:	40026440 	.word	0x40026440
 8001bd4:	2000004c 	.word	0x2000004c
 8001bd8:	40026458 	.word	0x40026458
 8001bdc:	20000050 	.word	0x20000050
 8001be0:	40026470 	.word	0x40026470
 8001be4:	20000054 	.word	0x20000054
 8001be8:	40026488 	.word	0x40026488
 8001bec:	20000058 	.word	0x20000058
 8001bf0:	400264a0 	.word	0x400264a0
 8001bf4:	2000005c 	.word	0x2000005c
 8001bf8:	400264b8 	.word	0x400264b8
 8001bfc:	20000060 	.word	0x20000060

08001c00 <DMA_Set_Target>:
 * memory increment before applying the new settings.
 *
 * @param[in] config Pointer to the `DMA_Config` structure containing the target configuration.
 */
void DMA_Set_Target(DMA_Config *config)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
	config -> Request.Stream -> CR &= ~DMA_SxCR_EN;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f022 0201 	bic.w	r2, r2, #1
 8001c16:	601a      	str	r2, [r3, #0]



	if(config -> circular_mode == DMA_Configuration.Circular_Mode.Disable)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	699b      	ldr	r3, [r3, #24]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d108      	bne.n	8001c34 <DMA_Set_Target+0x34>
	{
		config -> Request.Stream -> CR &= ~DMA_SxCR_CIRC;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	e00d      	b.n	8001c50 <DMA_Set_Target+0x50>
	}
	else if(config -> circular_mode == DMA_Configuration.Circular_Mode.Enable)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	699b      	ldr	r3, [r3, #24]
 8001c38:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d107      	bne.n	8001c50 <DMA_Set_Target+0x50>
	{
		config -> Request.Stream -> CR |= DMA_SxCR_CIRC;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001c4e:	601a      	str	r2, [r3, #0]
	}

    // Clear previous data size and memory increment settings
    config -> Request.Stream -> CR &= ~(DMA_SxCR_MSIZE | DMA_SxCR_PSIZE | DMA_SxCR_MINC);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f422 42f8 	bic.w	r2, r2, #31744	@ 0x7c00
 8001c5e:	601a      	str	r2, [r3, #0]

    // Set the peripheral data size
    config -> Request.Stream -> CR |= config -> peripheral_data_size;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	6819      	ldr	r1, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	601a      	str	r2, [r3, #0]

    // Set the memory data size
    config -> Request.Stream -> CR |= config -> memory_data_size;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	6819      	ldr	r1, [r3, #0]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	430a      	orrs	r2, r1
 8001c82:	601a      	str	r2, [r3, #0]

    // Set the number of data items to be transferred
    config -> Request.Stream -> NDTR = config -> buffer_length;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	605a      	str	r2, [r3, #4]

    // Set memory pointer increment mode
    config -> Request.Stream -> CR |= DMA_SxCR_MINC;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001c9c:	601a      	str	r2, [r3, #0]

    // Set the memory address
    config -> Request.Stream -> M0AR = (uint32_t)config->memory_address;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001ca6:	60da      	str	r2, [r3, #12]

    // Set the peripheral address
    config -> Request.Stream -> PAR = (uint32_t)config->peripheral_address;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001cb0:	609a      	str	r2, [r3, #8]
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
	...

08001cc0 <DMA_Set_Trigger>:
 * number and the DMA controller (DMA1 or DMA2).
 *
 * @param[in] config Pointer to the `DMA_Config` structure that contains the configuration settings.
 */
void DMA_Set_Trigger(DMA_Config *config)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b087      	sub	sp, #28
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
    // Bit shift values for streams 0 to 7
    static const uint8_t LIFCR_Shifts[4] = {0, 6, 16, 22};
    static const uint8_t HIFCR_Shifts[4] = {0, 6, 16, 22};

    DMA_TypeDef *controller = config->Request.Controller;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	617b      	str	r3, [r7, #20]
    DMA_Stream_TypeDef *stream = config->Request.Stream;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	613b      	str	r3, [r7, #16]
    uint32_t shift;

    if (controller == DMA1 || controller == DMA2)
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	4a43      	ldr	r2, [pc, #268]	@ (8001de4 <DMA_Set_Trigger+0x124>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d003      	beq.n	8001ce4 <DMA_Set_Trigger+0x24>
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	4a42      	ldr	r2, [pc, #264]	@ (8001de8 <DMA_Set_Trigger+0x128>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d178      	bne.n	8001dd6 <DMA_Set_Trigger+0x116>
    {
        // Determine the correct shift value and clear the corresponding flags in LIFCR or HIFCR
        if (stream >= DMA1_Stream0 && stream <= DMA1_Stream3)
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	4a41      	ldr	r2, [pc, #260]	@ (8001dec <DMA_Set_Trigger+0x12c>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d918      	bls.n	8001d1e <DMA_Set_Trigger+0x5e>
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	4a40      	ldr	r2, [pc, #256]	@ (8001df0 <DMA_Set_Trigger+0x130>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d814      	bhi.n	8001d1e <DMA_Set_Trigger+0x5e>
        {
            shift = LIFCR_Shifts[stream - DMA1_Stream0];
 8001cf4:	693a      	ldr	r2, [r7, #16]
 8001cf6:	4b3f      	ldr	r3, [pc, #252]	@ (8001df4 <DMA_Set_Trigger+0x134>)
 8001cf8:	4413      	add	r3, r2
 8001cfa:	10db      	asrs	r3, r3, #3
 8001cfc:	4a3e      	ldr	r2, [pc, #248]	@ (8001df8 <DMA_Set_Trigger+0x138>)
 8001cfe:	fb02 f303 	mul.w	r3, r2, r3
 8001d02:	461a      	mov	r2, r3
 8001d04:	4b3d      	ldr	r3, [pc, #244]	@ (8001dfc <DMA_Set_Trigger+0x13c>)
 8001d06:	5c9b      	ldrb	r3, [r3, r2]
 8001d08:	60fb      	str	r3, [r7, #12]
            controller->LIFCR |= 0x3F << shift;  // Clear interrupt flags for the stream
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	213f      	movs	r1, #63	@ 0x3f
 8001d10:	68fa      	ldr	r2, [r7, #12]
 8001d12:	fa01 f202 	lsl.w	r2, r1, r2
 8001d16:	431a      	orrs	r2, r3
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	609a      	str	r2, [r3, #8]
 8001d1c:	e055      	b.n	8001dca <DMA_Set_Trigger+0x10a>
        }
        else if (stream >= DMA1_Stream4 && stream <= DMA1_Stream7)
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	4a37      	ldr	r2, [pc, #220]	@ (8001e00 <DMA_Set_Trigger+0x140>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d918      	bls.n	8001d58 <DMA_Set_Trigger+0x98>
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	4a36      	ldr	r2, [pc, #216]	@ (8001e04 <DMA_Set_Trigger+0x144>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d814      	bhi.n	8001d58 <DMA_Set_Trigger+0x98>
        {
            shift = HIFCR_Shifts[stream - DMA1_Stream4];
 8001d2e:	693a      	ldr	r2, [r7, #16]
 8001d30:	4b35      	ldr	r3, [pc, #212]	@ (8001e08 <DMA_Set_Trigger+0x148>)
 8001d32:	4413      	add	r3, r2
 8001d34:	10db      	asrs	r3, r3, #3
 8001d36:	4a30      	ldr	r2, [pc, #192]	@ (8001df8 <DMA_Set_Trigger+0x138>)
 8001d38:	fb02 f303 	mul.w	r3, r2, r3
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	4b33      	ldr	r3, [pc, #204]	@ (8001e0c <DMA_Set_Trigger+0x14c>)
 8001d40:	5c9b      	ldrb	r3, [r3, r2]
 8001d42:	60fb      	str	r3, [r7, #12]
            controller->HIFCR |= 0x3F << shift;  // Clear interrupt flags for the stream
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	213f      	movs	r1, #63	@ 0x3f
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d50:	431a      	orrs	r2, r3
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	60da      	str	r2, [r3, #12]
 8001d56:	e038      	b.n	8001dca <DMA_Set_Trigger+0x10a>
        }
        else if (stream >= DMA2_Stream0 && stream <= DMA2_Stream3)
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	4a2d      	ldr	r2, [pc, #180]	@ (8001e10 <DMA_Set_Trigger+0x150>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d918      	bls.n	8001d92 <DMA_Set_Trigger+0xd2>
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	4a2c      	ldr	r2, [pc, #176]	@ (8001e14 <DMA_Set_Trigger+0x154>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d814      	bhi.n	8001d92 <DMA_Set_Trigger+0xd2>
        {
            shift = LIFCR_Shifts[stream - DMA2_Stream0];
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	4b2b      	ldr	r3, [pc, #172]	@ (8001e18 <DMA_Set_Trigger+0x158>)
 8001d6c:	4413      	add	r3, r2
 8001d6e:	10db      	asrs	r3, r3, #3
 8001d70:	4a21      	ldr	r2, [pc, #132]	@ (8001df8 <DMA_Set_Trigger+0x138>)
 8001d72:	fb02 f303 	mul.w	r3, r2, r3
 8001d76:	461a      	mov	r2, r3
 8001d78:	4b20      	ldr	r3, [pc, #128]	@ (8001dfc <DMA_Set_Trigger+0x13c>)
 8001d7a:	5c9b      	ldrb	r3, [r3, r2]
 8001d7c:	60fb      	str	r3, [r7, #12]
            controller->LIFCR |= 0x3F << shift;  // Clear interrupt flags for the stream
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	213f      	movs	r1, #63	@ 0x3f
 8001d84:	68fa      	ldr	r2, [r7, #12]
 8001d86:	fa01 f202 	lsl.w	r2, r1, r2
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	609a      	str	r2, [r3, #8]
 8001d90:	e01b      	b.n	8001dca <DMA_Set_Trigger+0x10a>
        }
        else if (stream >= DMA2_Stream4 && stream <= DMA2_Stream7)
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	4a21      	ldr	r2, [pc, #132]	@ (8001e1c <DMA_Set_Trigger+0x15c>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d917      	bls.n	8001dca <DMA_Set_Trigger+0x10a>
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	4a20      	ldr	r2, [pc, #128]	@ (8001e20 <DMA_Set_Trigger+0x160>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d813      	bhi.n	8001dca <DMA_Set_Trigger+0x10a>
        {
            shift = HIFCR_Shifts[stream - DMA2_Stream4];
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	4b1f      	ldr	r3, [pc, #124]	@ (8001e24 <DMA_Set_Trigger+0x164>)
 8001da6:	4413      	add	r3, r2
 8001da8:	10db      	asrs	r3, r3, #3
 8001daa:	4a13      	ldr	r2, [pc, #76]	@ (8001df8 <DMA_Set_Trigger+0x138>)
 8001dac:	fb02 f303 	mul.w	r3, r2, r3
 8001db0:	461a      	mov	r2, r3
 8001db2:	4b16      	ldr	r3, [pc, #88]	@ (8001e0c <DMA_Set_Trigger+0x14c>)
 8001db4:	5c9b      	ldrb	r3, [r3, r2]
 8001db6:	60fb      	str	r3, [r7, #12]
            controller->HIFCR |= 0x3F << shift;  // Clear interrupt flags for the stream
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	213f      	movs	r1, #63	@ 0x3f
 8001dbe:	68fa      	ldr	r2, [r7, #12]
 8001dc0:	fa01 f202 	lsl.w	r2, r1, r2
 8001dc4:	431a      	orrs	r2, r3
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	60da      	str	r2, [r3, #12]
        }

        stream->CR |= DMA_SxCR_EN;  // Enable the DMA stream
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f043 0201 	orr.w	r2, r3, #1
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	601a      	str	r2, [r3, #0]
    }
}
 8001dd6:	bf00      	nop
 8001dd8:	371c      	adds	r7, #28
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	40026000 	.word	0x40026000
 8001de8:	40026400 	.word	0x40026400
 8001dec:	4002600f 	.word	0x4002600f
 8001df0:	40026058 	.word	0x40026058
 8001df4:	bffd9ff0 	.word	0xbffd9ff0
 8001df8:	aaaaaaab 	.word	0xaaaaaaab
 8001dfc:	080053ac 	.word	0x080053ac
 8001e00:	4002606f 	.word	0x4002606f
 8001e04:	400260b8 	.word	0x400260b8
 8001e08:	bffd9f90 	.word	0xbffd9f90
 8001e0c:	080053b0 	.word	0x080053b0
 8001e10:	4002640f 	.word	0x4002640f
 8001e14:	40026458 	.word	0x40026458
 8001e18:	bffd9bf0 	.word	0xbffd9bf0
 8001e1c:	4002646f 	.word	0x4002646f
 8001e20:	400264b8 	.word	0x400264b8
 8001e24:	bffd9b90 	.word	0xbffd9b90

08001e28 <EXTI0_IRQHandler>:
 * @brief Interrupt handler for EXTI line 0.
 *
 * This ISR handles interrupts for pin 0, invoking the associated callback
 * function if one is registered.
 */
void EXTI0_IRQHandler(void) {
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
    if (EXTI_ISR[0]) EXTI_ISR[0](); // Invoke registered callback
 8001e2c:	4b07      	ldr	r3, [pc, #28]	@ (8001e4c <EXTI0_IRQHandler+0x24>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d002      	beq.n	8001e3a <EXTI0_IRQHandler+0x12>
 8001e34:	4b05      	ldr	r3, [pc, #20]	@ (8001e4c <EXTI0_IRQHandler+0x24>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR0;        // Clear interrupt flag
 8001e3a:	4b05      	ldr	r3, [pc, #20]	@ (8001e50 <EXTI0_IRQHandler+0x28>)
 8001e3c:	695b      	ldr	r3, [r3, #20]
 8001e3e:	4a04      	ldr	r2, [pc, #16]	@ (8001e50 <EXTI0_IRQHandler+0x28>)
 8001e40:	f043 0301 	orr.w	r3, r3, #1
 8001e44:	6153      	str	r3, [r2, #20]
}
 8001e46:	bf00      	nop
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	2000006c 	.word	0x2000006c
 8001e50:	40013c00 	.word	0x40013c00

08001e54 <EXTI1_IRQHandler>:

/**
 * @brief Interrupt handler for EXTI line 1.
 */
void EXTI1_IRQHandler(void) {
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
    if (EXTI_ISR[1]) EXTI_ISR[1]();
 8001e58:	4b07      	ldr	r3, [pc, #28]	@ (8001e78 <EXTI1_IRQHandler+0x24>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d002      	beq.n	8001e66 <EXTI1_IRQHandler+0x12>
 8001e60:	4b05      	ldr	r3, [pc, #20]	@ (8001e78 <EXTI1_IRQHandler+0x24>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR1;
 8001e66:	4b05      	ldr	r3, [pc, #20]	@ (8001e7c <EXTI1_IRQHandler+0x28>)
 8001e68:	695b      	ldr	r3, [r3, #20]
 8001e6a:	4a04      	ldr	r2, [pc, #16]	@ (8001e7c <EXTI1_IRQHandler+0x28>)
 8001e6c:	f043 0302 	orr.w	r3, r3, #2
 8001e70:	6153      	str	r3, [r2, #20]
}
 8001e72:	bf00      	nop
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	2000006c 	.word	0x2000006c
 8001e7c:	40013c00 	.word	0x40013c00

08001e80 <EXTI2_IRQHandler>:

/**
 * @brief Interrupt handler for EXTI line 2.
 */
void EXTI2_IRQHandler(void) {
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
    if (EXTI_ISR[2]) EXTI_ISR[2]();
 8001e84:	4b07      	ldr	r3, [pc, #28]	@ (8001ea4 <EXTI2_IRQHandler+0x24>)
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d002      	beq.n	8001e92 <EXTI2_IRQHandler+0x12>
 8001e8c:	4b05      	ldr	r3, [pc, #20]	@ (8001ea4 <EXTI2_IRQHandler+0x24>)
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR2;
 8001e92:	4b05      	ldr	r3, [pc, #20]	@ (8001ea8 <EXTI2_IRQHandler+0x28>)
 8001e94:	695b      	ldr	r3, [r3, #20]
 8001e96:	4a04      	ldr	r2, [pc, #16]	@ (8001ea8 <EXTI2_IRQHandler+0x28>)
 8001e98:	f043 0304 	orr.w	r3, r3, #4
 8001e9c:	6153      	str	r3, [r2, #20]
}
 8001e9e:	bf00      	nop
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	2000006c 	.word	0x2000006c
 8001ea8:	40013c00 	.word	0x40013c00

08001eac <EXTI3_IRQHandler>:

/**
 * @brief Interrupt handler for EXTI line 3.
 */
void EXTI3_IRQHandler(void) {
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
    if (EXTI_ISR[3]) EXTI_ISR[3]();
 8001eb0:	4b07      	ldr	r3, [pc, #28]	@ (8001ed0 <EXTI3_IRQHandler+0x24>)
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d002      	beq.n	8001ebe <EXTI3_IRQHandler+0x12>
 8001eb8:	4b05      	ldr	r3, [pc, #20]	@ (8001ed0 <EXTI3_IRQHandler+0x24>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR3;
 8001ebe:	4b05      	ldr	r3, [pc, #20]	@ (8001ed4 <EXTI3_IRQHandler+0x28>)
 8001ec0:	695b      	ldr	r3, [r3, #20]
 8001ec2:	4a04      	ldr	r2, [pc, #16]	@ (8001ed4 <EXTI3_IRQHandler+0x28>)
 8001ec4:	f043 0308 	orr.w	r3, r3, #8
 8001ec8:	6153      	str	r3, [r2, #20]
}
 8001eca:	bf00      	nop
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	2000006c 	.word	0x2000006c
 8001ed4:	40013c00 	.word	0x40013c00

08001ed8 <EXTI4_IRQHandler>:

/**
 * @brief Interrupt handler for EXTI line 4.
 */
void EXTI4_IRQHandler(void) {
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
    if (EXTI_ISR[4]) EXTI_ISR[4]();
 8001edc:	4b07      	ldr	r3, [pc, #28]	@ (8001efc <EXTI4_IRQHandler+0x24>)
 8001ede:	691b      	ldr	r3, [r3, #16]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d002      	beq.n	8001eea <EXTI4_IRQHandler+0x12>
 8001ee4:	4b05      	ldr	r3, [pc, #20]	@ (8001efc <EXTI4_IRQHandler+0x24>)
 8001ee6:	691b      	ldr	r3, [r3, #16]
 8001ee8:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR4;
 8001eea:	4b05      	ldr	r3, [pc, #20]	@ (8001f00 <EXTI4_IRQHandler+0x28>)
 8001eec:	695b      	ldr	r3, [r3, #20]
 8001eee:	4a04      	ldr	r2, [pc, #16]	@ (8001f00 <EXTI4_IRQHandler+0x28>)
 8001ef0:	f043 0310 	orr.w	r3, r3, #16
 8001ef4:	6153      	str	r3, [r2, #20]
}
 8001ef6:	bf00      	nop
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	2000006c 	.word	0x2000006c
 8001f00:	40013c00 	.word	0x40013c00

08001f04 <EXTI9_5_IRQHandler>:
/**
 * @brief Interrupt handler for EXTI lines 5 to 9.
 *
 * Handles interrupts for pins 5 to 9, checking each pin for active flags.
 */
void EXTI9_5_IRQHandler(void) {
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
    for (int i = 5; i <= 9; ++i) {
 8001f0a:	2305      	movs	r3, #5
 8001f0c:	607b      	str	r3, [r7, #4]
 8001f0e:	e020      	b.n	8001f52 <EXTI9_5_IRQHandler+0x4e>
        if ((EXTI->PR & (1 << i)) && EXTI_ISR[i]) {
 8001f10:	4b14      	ldr	r3, [pc, #80]	@ (8001f64 <EXTI9_5_IRQHandler+0x60>)
 8001f12:	695b      	ldr	r3, [r3, #20]
 8001f14:	2101      	movs	r1, #1
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	fa01 f202 	lsl.w	r2, r1, r2
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d014      	beq.n	8001f4c <EXTI9_5_IRQHandler+0x48>
 8001f22:	4a11      	ldr	r2, [pc, #68]	@ (8001f68 <EXTI9_5_IRQHandler+0x64>)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d00e      	beq.n	8001f4c <EXTI9_5_IRQHandler+0x48>
            EXTI_ISR[i]();        // Invoke callback for pin `i`
 8001f2e:	4a0e      	ldr	r2, [pc, #56]	@ (8001f68 <EXTI9_5_IRQHandler+0x64>)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f36:	4798      	blx	r3
            EXTI->PR |= (1 << i); // Clear interrupt flag
 8001f38:	4b0a      	ldr	r3, [pc, #40]	@ (8001f64 <EXTI9_5_IRQHandler+0x60>)
 8001f3a:	695b      	ldr	r3, [r3, #20]
 8001f3c:	2101      	movs	r1, #1
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	fa01 f202 	lsl.w	r2, r1, r2
 8001f44:	4611      	mov	r1, r2
 8001f46:	4a07      	ldr	r2, [pc, #28]	@ (8001f64 <EXTI9_5_IRQHandler+0x60>)
 8001f48:	430b      	orrs	r3, r1
 8001f4a:	6153      	str	r3, [r2, #20]
    for (int i = 5; i <= 9; ++i) {
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	3301      	adds	r3, #1
 8001f50:	607b      	str	r3, [r7, #4]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2b09      	cmp	r3, #9
 8001f56:	dddb      	ble.n	8001f10 <EXTI9_5_IRQHandler+0xc>
        }
    }
}
 8001f58:	bf00      	nop
 8001f5a:	bf00      	nop
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	40013c00 	.word	0x40013c00
 8001f68:	2000006c 	.word	0x2000006c

08001f6c <EXTI15_10_IRQHandler>:
/**
 * @brief Interrupt handler for EXTI lines 10 to 15.
 *
 * Handles interrupts for pins 10 to 15, checking each pin for active flags.
 */
void EXTI15_10_IRQHandler(void) {
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
    for (int i = 10; i <= 15; ++i) {
 8001f72:	230a      	movs	r3, #10
 8001f74:	607b      	str	r3, [r7, #4]
 8001f76:	e020      	b.n	8001fba <EXTI15_10_IRQHandler+0x4e>
        if ((EXTI->PR & (1 << i)) && EXTI_ISR[i]) {
 8001f78:	4b14      	ldr	r3, [pc, #80]	@ (8001fcc <EXTI15_10_IRQHandler+0x60>)
 8001f7a:	695b      	ldr	r3, [r3, #20]
 8001f7c:	2101      	movs	r1, #1
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	fa01 f202 	lsl.w	r2, r1, r2
 8001f84:	4013      	ands	r3, r2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d014      	beq.n	8001fb4 <EXTI15_10_IRQHandler+0x48>
 8001f8a:	4a11      	ldr	r2, [pc, #68]	@ (8001fd0 <EXTI15_10_IRQHandler+0x64>)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d00e      	beq.n	8001fb4 <EXTI15_10_IRQHandler+0x48>
            EXTI_ISR[i]();        // Invoke callback for pin `i`
 8001f96:	4a0e      	ldr	r2, [pc, #56]	@ (8001fd0 <EXTI15_10_IRQHandler+0x64>)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f9e:	4798      	blx	r3
            EXTI->PR |= (1 << i); // Clear interrupt flag
 8001fa0:	4b0a      	ldr	r3, [pc, #40]	@ (8001fcc <EXTI15_10_IRQHandler+0x60>)
 8001fa2:	695b      	ldr	r3, [r3, #20]
 8001fa4:	2101      	movs	r1, #1
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	fa01 f202 	lsl.w	r2, r1, r2
 8001fac:	4611      	mov	r1, r2
 8001fae:	4a07      	ldr	r2, [pc, #28]	@ (8001fcc <EXTI15_10_IRQHandler+0x60>)
 8001fb0:	430b      	orrs	r3, r1
 8001fb2:	6153      	str	r3, [r2, #20]
    for (int i = 10; i <= 15; ++i) {
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	607b      	str	r3, [r7, #4]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2b0f      	cmp	r3, #15
 8001fbe:	dddb      	ble.n	8001f78 <EXTI15_10_IRQHandler+0xc>
        }
    }
}
 8001fc0:	bf00      	nop
 8001fc2:	bf00      	nop
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40013c00 	.word	0x40013c00
 8001fd0:	2000006c 	.word	0x2000006c

08001fd4 <GPIO_Clock_Enable>:
 * @brief Enables the clock for a specific GPIO port.
 *
 * @param PORT Pointer to GPIO port base address.
 * @return GPIO_SUCCESS on success, GPIO_INVALID_PORT on failure.
 */
int GPIO_Clock_Enable(GPIO_TypeDef *PORT) {
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)PORT) {
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a30      	ldr	r2, [pc, #192]	@ (80020a0 <GPIO_Clock_Enable+0xcc>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d04b      	beq.n	800207c <GPIO_Clock_Enable+0xa8>
 8001fe4:	4a2e      	ldr	r2, [pc, #184]	@ (80020a0 <GPIO_Clock_Enable+0xcc>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d84f      	bhi.n	800208a <GPIO_Clock_Enable+0xb6>
 8001fea:	4a2e      	ldr	r2, [pc, #184]	@ (80020a4 <GPIO_Clock_Enable+0xd0>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d03e      	beq.n	800206e <GPIO_Clock_Enable+0x9a>
 8001ff0:	4a2c      	ldr	r2, [pc, #176]	@ (80020a4 <GPIO_Clock_Enable+0xd0>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d849      	bhi.n	800208a <GPIO_Clock_Enable+0xb6>
 8001ff6:	4a2c      	ldr	r2, [pc, #176]	@ (80020a8 <GPIO_Clock_Enable+0xd4>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d031      	beq.n	8002060 <GPIO_Clock_Enable+0x8c>
 8001ffc:	4a2a      	ldr	r2, [pc, #168]	@ (80020a8 <GPIO_Clock_Enable+0xd4>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d843      	bhi.n	800208a <GPIO_Clock_Enable+0xb6>
 8002002:	4a2a      	ldr	r2, [pc, #168]	@ (80020ac <GPIO_Clock_Enable+0xd8>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d024      	beq.n	8002052 <GPIO_Clock_Enable+0x7e>
 8002008:	4a28      	ldr	r2, [pc, #160]	@ (80020ac <GPIO_Clock_Enable+0xd8>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d83d      	bhi.n	800208a <GPIO_Clock_Enable+0xb6>
 800200e:	4a28      	ldr	r2, [pc, #160]	@ (80020b0 <GPIO_Clock_Enable+0xdc>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d017      	beq.n	8002044 <GPIO_Clock_Enable+0x70>
 8002014:	4a26      	ldr	r2, [pc, #152]	@ (80020b0 <GPIO_Clock_Enable+0xdc>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d837      	bhi.n	800208a <GPIO_Clock_Enable+0xb6>
 800201a:	4a26      	ldr	r2, [pc, #152]	@ (80020b4 <GPIO_Clock_Enable+0xe0>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d003      	beq.n	8002028 <GPIO_Clock_Enable+0x54>
 8002020:	4a25      	ldr	r2, [pc, #148]	@ (80020b8 <GPIO_Clock_Enable+0xe4>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d007      	beq.n	8002036 <GPIO_Clock_Enable+0x62>
 8002026:	e030      	b.n	800208a <GPIO_Clock_Enable+0xb6>
        case (uint32_t)GPIOA: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN; break;
 8002028:	4b24      	ldr	r3, [pc, #144]	@ (80020bc <GPIO_Clock_Enable+0xe8>)
 800202a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800202c:	4a23      	ldr	r2, [pc, #140]	@ (80020bc <GPIO_Clock_Enable+0xe8>)
 800202e:	f043 0301 	orr.w	r3, r3, #1
 8002032:	6313      	str	r3, [r2, #48]	@ 0x30
 8002034:	e02c      	b.n	8002090 <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOB: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN; break;
 8002036:	4b21      	ldr	r3, [pc, #132]	@ (80020bc <GPIO_Clock_Enable+0xe8>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800203a:	4a20      	ldr	r2, [pc, #128]	@ (80020bc <GPIO_Clock_Enable+0xe8>)
 800203c:	f043 0302 	orr.w	r3, r3, #2
 8002040:	6313      	str	r3, [r2, #48]	@ 0x30
 8002042:	e025      	b.n	8002090 <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOC: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN; break;
 8002044:	4b1d      	ldr	r3, [pc, #116]	@ (80020bc <GPIO_Clock_Enable+0xe8>)
 8002046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002048:	4a1c      	ldr	r2, [pc, #112]	@ (80020bc <GPIO_Clock_Enable+0xe8>)
 800204a:	f043 0304 	orr.w	r3, r3, #4
 800204e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002050:	e01e      	b.n	8002090 <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOD: RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN; break;
 8002052:	4b1a      	ldr	r3, [pc, #104]	@ (80020bc <GPIO_Clock_Enable+0xe8>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002056:	4a19      	ldr	r2, [pc, #100]	@ (80020bc <GPIO_Clock_Enable+0xe8>)
 8002058:	f043 0308 	orr.w	r3, r3, #8
 800205c:	6313      	str	r3, [r2, #48]	@ 0x30
 800205e:	e017      	b.n	8002090 <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOE: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN; break;
 8002060:	4b16      	ldr	r3, [pc, #88]	@ (80020bc <GPIO_Clock_Enable+0xe8>)
 8002062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002064:	4a15      	ldr	r2, [pc, #84]	@ (80020bc <GPIO_Clock_Enable+0xe8>)
 8002066:	f043 0310 	orr.w	r3, r3, #16
 800206a:	6313      	str	r3, [r2, #48]	@ 0x30
 800206c:	e010      	b.n	8002090 <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOF: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOFEN; break;
 800206e:	4b13      	ldr	r3, [pc, #76]	@ (80020bc <GPIO_Clock_Enable+0xe8>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002072:	4a12      	ldr	r2, [pc, #72]	@ (80020bc <GPIO_Clock_Enable+0xe8>)
 8002074:	f043 0320 	orr.w	r3, r3, #32
 8002078:	6313      	str	r3, [r2, #48]	@ 0x30
 800207a:	e009      	b.n	8002090 <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOH: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN; break;
 800207c:	4b0f      	ldr	r3, [pc, #60]	@ (80020bc <GPIO_Clock_Enable+0xe8>)
 800207e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002080:	4a0e      	ldr	r2, [pc, #56]	@ (80020bc <GPIO_Clock_Enable+0xe8>)
 8002082:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002086:	6313      	str	r3, [r2, #48]	@ 0x30
 8002088:	e002      	b.n	8002090 <GPIO_Clock_Enable+0xbc>
        default: return GPIO_INVALID_PORT;
 800208a:	f04f 33ff 	mov.w	r3, #4294967295
 800208e:	e000      	b.n	8002092 <GPIO_Clock_Enable+0xbe>
    }
    return GPIO_SUCCESS;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	40021c00 	.word	0x40021c00
 80020a4:	40021400 	.word	0x40021400
 80020a8:	40021000 	.word	0x40021000
 80020ac:	40020c00 	.word	0x40020c00
 80020b0:	40020800 	.word	0x40020800
 80020b4:	40020000 	.word	0x40020000
 80020b8:	40020400 	.word	0x40020400
 80020bc:	40023800 	.word	0x40023800

080020c0 <GPIO_Pin_Init>:


GPIO_Status GPIO_Pin_Init(GPIO_TypeDef *Port, uint8_t pin, uint8_t mode, uint8_t output_type, uint8_t speed, uint8_t pull, uint8_t alternate_function) {
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	4608      	mov	r0, r1
 80020ca:	4611      	mov	r1, r2
 80020cc:	461a      	mov	r2, r3
 80020ce:	4603      	mov	r3, r0
 80020d0:	70fb      	strb	r3, [r7, #3]
 80020d2:	460b      	mov	r3, r1
 80020d4:	70bb      	strb	r3, [r7, #2]
 80020d6:	4613      	mov	r3, r2
 80020d8:	707b      	strb	r3, [r7, #1]
//    if (pin > 15 || mode > 3 || speed > 3 || pull > 2) return GPIO_INVALID_PIN;

    GPIO_Clock_Enable(Port);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f7ff ff7a 	bl	8001fd4 <GPIO_Clock_Enable>

    // Reset and set mode
    Port->MODER &= ~(3 << PIN_POS(pin));
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	78fa      	ldrb	r2, [r7, #3]
 80020e6:	0052      	lsls	r2, r2, #1
 80020e8:	2103      	movs	r1, #3
 80020ea:	fa01 f202 	lsl.w	r2, r1, r2
 80020ee:	43d2      	mvns	r2, r2
 80020f0:	401a      	ands	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	601a      	str	r2, [r3, #0]
    Port->MODER |= mode << PIN_POS(pin);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	78b9      	ldrb	r1, [r7, #2]
 80020fc:	78fa      	ldrb	r2, [r7, #3]
 80020fe:	0052      	lsls	r2, r2, #1
 8002100:	fa01 f202 	lsl.w	r2, r1, r2
 8002104:	431a      	orrs	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	601a      	str	r2, [r3, #0]

    // Reset and set output type
    Port->OTYPER &= ~(1 << pin);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	78fa      	ldrb	r2, [r7, #3]
 8002110:	2101      	movs	r1, #1
 8002112:	fa01 f202 	lsl.w	r2, r1, r2
 8002116:	43d2      	mvns	r2, r2
 8002118:	401a      	ands	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	605a      	str	r2, [r3, #4]
    if (output_type != GPIO_Configuration.Output_Type.None) {
 800211e:	2202      	movs	r2, #2
 8002120:	787b      	ldrb	r3, [r7, #1]
 8002122:	4293      	cmp	r3, r2
 8002124:	d008      	beq.n	8002138 <GPIO_Pin_Init+0x78>
        Port->OTYPER |= output_type << pin;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	7879      	ldrb	r1, [r7, #1]
 800212c:	78fa      	ldrb	r2, [r7, #3]
 800212e:	fa01 f202 	lsl.w	r2, r1, r2
 8002132:	431a      	orrs	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	605a      	str	r2, [r3, #4]
    }

    // Reset and set speed
    Port->OSPEEDR &= ~(3 << PIN_POS(pin));
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	78fa      	ldrb	r2, [r7, #3]
 800213e:	0052      	lsls	r2, r2, #1
 8002140:	2103      	movs	r1, #3
 8002142:	fa01 f202 	lsl.w	r2, r1, r2
 8002146:	43d2      	mvns	r2, r2
 8002148:	401a      	ands	r2, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	609a      	str	r2, [r3, #8]
    if (speed != GPIO_Configuration.Speed.None) {
 800214e:	2204      	movs	r2, #4
 8002150:	7c3b      	ldrb	r3, [r7, #16]
 8002152:	4293      	cmp	r3, r2
 8002154:	d009      	beq.n	800216a <GPIO_Pin_Init+0xaa>
        Port->OSPEEDR |= speed << PIN_POS(pin);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	7c39      	ldrb	r1, [r7, #16]
 800215c:	78fa      	ldrb	r2, [r7, #3]
 800215e:	0052      	lsls	r2, r2, #1
 8002160:	fa01 f202 	lsl.w	r2, r1, r2
 8002164:	431a      	orrs	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	609a      	str	r2, [r3, #8]
    }

    // Reset and set pull-up/pull-down
    Port->PUPDR &= ~(3 << PIN_POS(pin));
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	78fa      	ldrb	r2, [r7, #3]
 8002170:	0052      	lsls	r2, r2, #1
 8002172:	2103      	movs	r1, #3
 8002174:	fa01 f202 	lsl.w	r2, r1, r2
 8002178:	43d2      	mvns	r2, r2
 800217a:	401a      	ands	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	60da      	str	r2, [r3, #12]
    if (pull != GPIO_Configuration.Pull.None) {
 8002180:	2204      	movs	r2, #4
 8002182:	7d3b      	ldrb	r3, [r7, #20]
 8002184:	4293      	cmp	r3, r2
 8002186:	d009      	beq.n	800219c <GPIO_Pin_Init+0xdc>
        Port->PUPDR |= pull << PIN_POS(pin);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	7d39      	ldrb	r1, [r7, #20]
 800218e:	78fa      	ldrb	r2, [r7, #3]
 8002190:	0052      	lsls	r2, r2, #1
 8002192:	fa01 f202 	lsl.w	r2, r1, r2
 8002196:	431a      	orrs	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	60da      	str	r2, [r3, #12]
    }

    // Set alternate function
    if (mode == GPIO_Configuration.Mode.Alternate_Function) {
 800219c:	2202      	movs	r2, #2
 800219e:	78bb      	ldrb	r3, [r7, #2]
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d12f      	bne.n	8002204 <GPIO_Pin_Init+0x144>
        if (pin < GPIO_AF_SPLIT_POINT) {
 80021a4:	78fb      	ldrb	r3, [r7, #3]
 80021a6:	2b07      	cmp	r3, #7
 80021a8:	d815      	bhi.n	80021d6 <GPIO_Pin_Init+0x116>
            Port->AFR[0] &= ~(0xF << (pin * 4));
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a1b      	ldr	r3, [r3, #32]
 80021ae:	78fa      	ldrb	r2, [r7, #3]
 80021b0:	0092      	lsls	r2, r2, #2
 80021b2:	210f      	movs	r1, #15
 80021b4:	fa01 f202 	lsl.w	r2, r1, r2
 80021b8:	43d2      	mvns	r2, r2
 80021ba:	401a      	ands	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	621a      	str	r2, [r3, #32]
            Port->AFR[0] |= alternate_function << (pin * 4);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a1b      	ldr	r3, [r3, #32]
 80021c4:	7e39      	ldrb	r1, [r7, #24]
 80021c6:	78fa      	ldrb	r2, [r7, #3]
 80021c8:	0092      	lsls	r2, r2, #2
 80021ca:	fa01 f202 	lsl.w	r2, r1, r2
 80021ce:	431a      	orrs	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	621a      	str	r2, [r3, #32]
 80021d4:	e016      	b.n	8002204 <GPIO_Pin_Init+0x144>
        } else {
            Port->AFR[1] &= ~(0xF << ((pin - GPIO_AF_SPLIT_POINT) * 4));
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021da:	78fa      	ldrb	r2, [r7, #3]
 80021dc:	3a08      	subs	r2, #8
 80021de:	0092      	lsls	r2, r2, #2
 80021e0:	210f      	movs	r1, #15
 80021e2:	fa01 f202 	lsl.w	r2, r1, r2
 80021e6:	43d2      	mvns	r2, r2
 80021e8:	401a      	ands	r2, r3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	625a      	str	r2, [r3, #36]	@ 0x24
            Port->AFR[1] |= alternate_function << ((pin - GPIO_AF_SPLIT_POINT) * 4);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f2:	7e39      	ldrb	r1, [r7, #24]
 80021f4:	78fa      	ldrb	r2, [r7, #3]
 80021f6:	3a08      	subs	r2, #8
 80021f8:	0092      	lsls	r2, r2, #2
 80021fa:	fa01 f202 	lsl.w	r2, r1, r2
 80021fe:	431a      	orrs	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    }

    return GPIO_SUCCESS;
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
	...

08002210 <Delay_us>:
	SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
}


__STATIC_INLINE uint32_t Delay_us(volatile float us)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	ed87 0a01 	vstr	s0, [r7, #4]

	SysTick->LOAD = 168 * us;
 800221a:	edd7 7a01 	vldr	s15, [r7, #4]
 800221e:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8002254 <Delay_us+0x44>
 8002222:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002226:	4b0c      	ldr	r3, [pc, #48]	@ (8002258 <Delay_us+0x48>)
 8002228:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800222c:	ee17 2a90 	vmov	r2, s15
 8002230:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8002232:	4b09      	ldr	r3, [pc, #36]	@ (8002258 <Delay_us+0x48>)
 8002234:	2200      	movs	r2, #0
 8002236:	609a      	str	r2, [r3, #8]
	while((SysTick->CTRL & 0x00010000) == 0);
 8002238:	bf00      	nop
 800223a:	4b07      	ldr	r3, [pc, #28]	@ (8002258 <Delay_us+0x48>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d0f9      	beq.n	800223a <Delay_us+0x2a>
	return (0UL);                                                     /* Function successful */
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr
 8002254:	43280000 	.word	0x43280000
 8002258:	e000e010 	.word	0xe000e010

0800225c <GPIO_Pin_Low>:
 * @brief  Sets a specific pin low.
 * @param  Port: Pointer to GPIO port base address.
 * @param  pin: Pin number to set low (0-15).
 */
__STATIC_INLINE  void GPIO_Pin_Low(GPIO_TypeDef *Port, int pin)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
	Port -> ODR &= ~(1 << pin);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	695b      	ldr	r3, [r3, #20]
 800226a:	2101      	movs	r1, #1
 800226c:	683a      	ldr	r2, [r7, #0]
 800226e:	fa01 f202 	lsl.w	r2, r1, r2
 8002272:	43d2      	mvns	r2, r2
 8002274:	401a      	ands	r2, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	615a      	str	r2, [r3, #20]
}
 800227a:	bf00      	nop
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <GPIO_Pin_High>:
 * @brief  Sets a specific pin high.
 * @param  Port: Pointer to GPIO port base address.
 * @param  pin: Pin number to set high (0-15).
 */
__STATIC_INLINE  void GPIO_Pin_High(GPIO_TypeDef *Port, int pin)
{
 8002286:	b480      	push	{r7}
 8002288:	b083      	sub	sp, #12
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
 800228e:	6039      	str	r1, [r7, #0]
	Port -> ODR |= 1 << pin;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	695b      	ldr	r3, [r3, #20]
 8002294:	2101      	movs	r1, #1
 8002296:	683a      	ldr	r2, [r7, #0]
 8002298:	fa01 f202 	lsl.w	r2, r1, r2
 800229c:	431a      	orrs	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	615a      	str	r2, [r3, #20]
}
 80022a2:	bf00      	nop
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
	...

080022b0 <SPI1_TX_ISR>:

volatile bool TX_Complete = 0;
volatile bool RX_Complete = 0;

void SPI1_TX_ISR()
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
	TX_Complete = 1;
 80022b4:	4b03      	ldr	r3, [pc, #12]	@ (80022c4 <SPI1_TX_ISR+0x14>)
 80022b6:	2201      	movs	r2, #1
 80022b8:	701a      	strb	r2, [r3, #0]
}
 80022ba:	bf00      	nop
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	200000ac 	.word	0x200000ac

080022c8 <SPI1_RX_ISR>:

void SPI1_RX_ISR()
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
	RX_Complete = 1;
 80022cc:	4b03      	ldr	r3, [pc, #12]	@ (80022dc <SPI1_RX_ISR+0x14>)
 80022ce:	2201      	movs	r2, #1
 80022d0:	701a      	strb	r2, [r3, #0]
}
 80022d2:	bf00      	nop
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr
 80022dc:	200000ad 	.word	0x200000ad

080022e0 <xDMA1_TX_Init>:
 * @brief Initializes the DMA for SPI1 TX.
 *
 * Configures and initializes the DMA channel for transmitting data via SPI1.
 */
static void xDMA1_TX_Init()
{
 80022e0:	b598      	push	{r3, r4, r7, lr}
 80022e2:	af00      	add	r7, sp, #0
	xDMA1_TX.Request = DMA_Configuration.Request.SPI1_TX;
 80022e4:	4a14      	ldr	r2, [pc, #80]	@ (8002338 <xDMA1_TX_Init+0x58>)
 80022e6:	4b15      	ldr	r3, [pc, #84]	@ (800233c <xDMA1_TX_Init+0x5c>)
 80022e8:	4614      	mov	r4, r2
 80022ea:	333c      	adds	r3, #60	@ 0x3c
 80022ec:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80022f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	xDMA1_TX.transfer_direction = DMA_Configuration.Transfer_Direction.Memory_to_peripheral;
 80022f4:	2240      	movs	r2, #64	@ 0x40
 80022f6:	4b10      	ldr	r3, [pc, #64]	@ (8002338 <xDMA1_TX_Init+0x58>)
 80022f8:	611a      	str	r2, [r3, #16]
	xDMA1_TX.circular_mode = DMA_Configuration.Circular_Mode.Disable;
 80022fa:	2200      	movs	r2, #0
 80022fc:	4b0e      	ldr	r3, [pc, #56]	@ (8002338 <xDMA1_TX_Init+0x58>)
 80022fe:	619a      	str	r2, [r3, #24]
	xDMA1_TX.flow_control = DMA_Configuration.Flow_Control.DMA_Control;
 8002300:	2200      	movs	r2, #0
 8002302:	4b0d      	ldr	r3, [pc, #52]	@ (8002338 <xDMA1_TX_Init+0x58>)
 8002304:	60da      	str	r2, [r3, #12]
	xDMA1_TX.interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 8002306:	2210      	movs	r2, #16
 8002308:	4b0b      	ldr	r3, [pc, #44]	@ (8002338 <xDMA1_TX_Init+0x58>)
 800230a:	61da      	str	r2, [r3, #28]
	xDMA1_TX.peripheral_pointer_increment = DMA_Configuration.Peripheral_Pointer_Increment.Disable;
 800230c:	2300      	movs	r3, #0
 800230e:	b29a      	uxth	r2, r3
 8002310:	4b09      	ldr	r3, [pc, #36]	@ (8002338 <xDMA1_TX_Init+0x58>)
 8002312:	845a      	strh	r2, [r3, #34]	@ 0x22
	xDMA1_TX.memory_pointer_increment = DMA_Configuration.Memory_Pointer_Increment.Enable;
 8002314:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002318:	b29a      	uxth	r2, r3
 800231a:	4b07      	ldr	r3, [pc, #28]	@ (8002338 <xDMA1_TX_Init+0x58>)
 800231c:	841a      	strh	r2, [r3, #32]
	xDMA1_TX.priority_level = DMA_Configuration.Priority_Level.Very_high;
 800231e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002322:	4b05      	ldr	r3, [pc, #20]	@ (8002338 <xDMA1_TX_Init+0x58>)
 8002324:	615a      	str	r2, [r3, #20]
	xDMA1_TX.ISR_Routines.Full_Transfer_Commplete_ISR = SPI1_TX_ISR;
 8002326:	4b04      	ldr	r3, [pc, #16]	@ (8002338 <xDMA1_TX_Init+0x58>)
 8002328:	4a05      	ldr	r2, [pc, #20]	@ (8002340 <xDMA1_TX_Init+0x60>)
 800232a:	64da      	str	r2, [r3, #76]	@ 0x4c
	DMA_Init(&xDMA1_TX);
 800232c:	4802      	ldr	r0, [pc, #8]	@ (8002338 <xDMA1_TX_Init+0x58>)
 800232e:	f7ff fa75 	bl	800181c <DMA_Init>
}
 8002332:	bf00      	nop
 8002334:	bd98      	pop	{r3, r4, r7, pc}
 8002336:	bf00      	nop
 8002338:	200000b0 	.word	0x200000b0
 800233c:	080053b4 	.word	0x080053b4
 8002340:	080022b1 	.word	0x080022b1

08002344 <xDMA2_TX_Init>:
 * @brief Initializes the DMA for SPI2 TX.
 *
 * Configures and initializes the DMA channel for transmitting data via SPI2.
 */
static void xDMA2_TX_Init()
{
 8002344:	b598      	push	{r3, r4, r7, lr}
 8002346:	af00      	add	r7, sp, #0
	xDMA2_TX.Request = DMA_Configuration.Request.SPI2_TX;
 8002348:	4a12      	ldr	r2, [pc, #72]	@ (8002394 <xDMA2_TX_Init+0x50>)
 800234a:	4b13      	ldr	r3, [pc, #76]	@ (8002398 <xDMA2_TX_Init+0x54>)
 800234c:	4614      	mov	r4, r2
 800234e:	3324      	adds	r3, #36	@ 0x24
 8002350:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002354:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	xDMA2_TX.transfer_direction = DMA_Configuration.Transfer_Direction.Memory_to_peripheral;
 8002358:	2240      	movs	r2, #64	@ 0x40
 800235a:	4b0e      	ldr	r3, [pc, #56]	@ (8002394 <xDMA2_TX_Init+0x50>)
 800235c:	611a      	str	r2, [r3, #16]
	xDMA2_TX.circular_mode = DMA_Configuration.Circular_Mode.Disable;
 800235e:	2200      	movs	r2, #0
 8002360:	4b0c      	ldr	r3, [pc, #48]	@ (8002394 <xDMA2_TX_Init+0x50>)
 8002362:	619a      	str	r2, [r3, #24]
	xDMA2_TX.flow_control = DMA_Configuration.Flow_Control.DMA_Control;
 8002364:	2200      	movs	r2, #0
 8002366:	4b0b      	ldr	r3, [pc, #44]	@ (8002394 <xDMA2_TX_Init+0x50>)
 8002368:	60da      	str	r2, [r3, #12]
	xDMA2_TX.interrupts = DMA_Configuration.DMA_Interrupts.Disable;
 800236a:	2200      	movs	r2, #0
 800236c:	4b09      	ldr	r3, [pc, #36]	@ (8002394 <xDMA2_TX_Init+0x50>)
 800236e:	61da      	str	r2, [r3, #28]
	xDMA2_TX.peripheral_pointer_increment = DMA_Configuration.Peripheral_Pointer_Increment.Disable;
 8002370:	2300      	movs	r3, #0
 8002372:	b29a      	uxth	r2, r3
 8002374:	4b07      	ldr	r3, [pc, #28]	@ (8002394 <xDMA2_TX_Init+0x50>)
 8002376:	845a      	strh	r2, [r3, #34]	@ 0x22
	xDMA2_TX.memory_pointer_increment = DMA_Configuration.Memory_Pointer_Increment.Enable;
 8002378:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800237c:	b29a      	uxth	r2, r3
 800237e:	4b05      	ldr	r3, [pc, #20]	@ (8002394 <xDMA2_TX_Init+0x50>)
 8002380:	841a      	strh	r2, [r3, #32]
	xDMA2_TX.priority_level = DMA_Configuration.Priority_Level.Very_high;
 8002382:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002386:	4b03      	ldr	r3, [pc, #12]	@ (8002394 <xDMA2_TX_Init+0x50>)
 8002388:	615a      	str	r2, [r3, #20]

	DMA_Init(&xDMA2_TX);
 800238a:	4802      	ldr	r0, [pc, #8]	@ (8002394 <xDMA2_TX_Init+0x50>)
 800238c:	f7ff fa46 	bl	800181c <DMA_Init>
}
 8002390:	bf00      	nop
 8002392:	bd98      	pop	{r3, r4, r7, pc}
 8002394:	20000160 	.word	0x20000160
 8002398:	080053b4 	.word	0x080053b4

0800239c <xDMA3_TX_Init>:

static void xDMA3_TX_Init()
{
 800239c:	b598      	push	{r3, r4, r7, lr}
 800239e:	af00      	add	r7, sp, #0
	xDMA3_TX.Request = DMA_Configuration.Request.SPI3_TX;
 80023a0:	4a12      	ldr	r2, [pc, #72]	@ (80023ec <xDMA3_TX_Init+0x50>)
 80023a2:	4b13      	ldr	r3, [pc, #76]	@ (80023f0 <xDMA3_TX_Init+0x54>)
 80023a4:	4614      	mov	r4, r2
 80023a6:	330c      	adds	r3, #12
 80023a8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80023ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	xDMA3_TX.transfer_direction = DMA_Configuration.Transfer_Direction.Memory_to_peripheral;
 80023b0:	2240      	movs	r2, #64	@ 0x40
 80023b2:	4b0e      	ldr	r3, [pc, #56]	@ (80023ec <xDMA3_TX_Init+0x50>)
 80023b4:	611a      	str	r2, [r3, #16]
	xDMA3_TX.circular_mode = DMA_Configuration.Circular_Mode.Disable;
 80023b6:	2200      	movs	r2, #0
 80023b8:	4b0c      	ldr	r3, [pc, #48]	@ (80023ec <xDMA3_TX_Init+0x50>)
 80023ba:	619a      	str	r2, [r3, #24]
	xDMA3_TX.flow_control = DMA_Configuration.Flow_Control.DMA_Control;
 80023bc:	2200      	movs	r2, #0
 80023be:	4b0b      	ldr	r3, [pc, #44]	@ (80023ec <xDMA3_TX_Init+0x50>)
 80023c0:	60da      	str	r2, [r3, #12]
	xDMA3_TX.interrupts = DMA_Configuration.DMA_Interrupts.Disable;
 80023c2:	2200      	movs	r2, #0
 80023c4:	4b09      	ldr	r3, [pc, #36]	@ (80023ec <xDMA3_TX_Init+0x50>)
 80023c6:	61da      	str	r2, [r3, #28]
	xDMA3_TX.peripheral_pointer_increment = DMA_Configuration.Peripheral_Pointer_Increment.Disable;
 80023c8:	2300      	movs	r3, #0
 80023ca:	b29a      	uxth	r2, r3
 80023cc:	4b07      	ldr	r3, [pc, #28]	@ (80023ec <xDMA3_TX_Init+0x50>)
 80023ce:	845a      	strh	r2, [r3, #34]	@ 0x22
	xDMA3_TX.memory_pointer_increment = DMA_Configuration.Memory_Pointer_Increment.Enable;
 80023d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80023d4:	b29a      	uxth	r2, r3
 80023d6:	4b05      	ldr	r3, [pc, #20]	@ (80023ec <xDMA3_TX_Init+0x50>)
 80023d8:	841a      	strh	r2, [r3, #32]
	xDMA3_TX.priority_level = DMA_Configuration.Priority_Level.Very_high;
 80023da:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80023de:	4b03      	ldr	r3, [pc, #12]	@ (80023ec <xDMA3_TX_Init+0x50>)
 80023e0:	615a      	str	r2, [r3, #20]
	DMA_Init(&xDMA3_TX);
 80023e2:	4802      	ldr	r0, [pc, #8]	@ (80023ec <xDMA3_TX_Init+0x50>)
 80023e4:	f7ff fa1a 	bl	800181c <DMA_Init>
}
 80023e8:	bf00      	nop
 80023ea:	bd98      	pop	{r3, r4, r7, pc}
 80023ec:	20000210 	.word	0x20000210
 80023f0:	080053b4 	.word	0x080053b4

080023f4 <xDMA1_RX_Init>:
 * @brief Initializes the DMA for SPI3 TX.
 *
 * Configures and initializes the DMA channel for transmitting data via SPI3.
 */
static void xDMA1_RX_Init()
{
 80023f4:	b598      	push	{r3, r4, r7, lr}
 80023f6:	af00      	add	r7, sp, #0
	xDMA1_RX.Request = DMA_Configuration.Request.SPI1_RX;
 80023f8:	4a14      	ldr	r2, [pc, #80]	@ (800244c <xDMA1_RX_Init+0x58>)
 80023fa:	4b15      	ldr	r3, [pc, #84]	@ (8002450 <xDMA1_RX_Init+0x5c>)
 80023fc:	4614      	mov	r4, r2
 80023fe:	3330      	adds	r3, #48	@ 0x30
 8002400:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002404:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	xDMA1_RX.transfer_direction = DMA_Configuration.Transfer_Direction.Peripheral_to_memory;
 8002408:	2200      	movs	r2, #0
 800240a:	4b10      	ldr	r3, [pc, #64]	@ (800244c <xDMA1_RX_Init+0x58>)
 800240c:	611a      	str	r2, [r3, #16]
	xDMA1_RX.circular_mode = DMA_Configuration.Circular_Mode.Disable;
 800240e:	2200      	movs	r2, #0
 8002410:	4b0e      	ldr	r3, [pc, #56]	@ (800244c <xDMA1_RX_Init+0x58>)
 8002412:	619a      	str	r2, [r3, #24]
	xDMA1_RX.flow_control = DMA_Configuration.Flow_Control.DMA_Control;
 8002414:	2200      	movs	r2, #0
 8002416:	4b0d      	ldr	r3, [pc, #52]	@ (800244c <xDMA1_RX_Init+0x58>)
 8002418:	60da      	str	r2, [r3, #12]
	xDMA1_RX.interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 800241a:	2210      	movs	r2, #16
 800241c:	4b0b      	ldr	r3, [pc, #44]	@ (800244c <xDMA1_RX_Init+0x58>)
 800241e:	61da      	str	r2, [r3, #28]
	xDMA1_RX.peripheral_pointer_increment = DMA_Configuration.Peripheral_Pointer_Increment.Disable;
 8002420:	2300      	movs	r3, #0
 8002422:	b29a      	uxth	r2, r3
 8002424:	4b09      	ldr	r3, [pc, #36]	@ (800244c <xDMA1_RX_Init+0x58>)
 8002426:	845a      	strh	r2, [r3, #34]	@ 0x22
	xDMA1_RX.memory_pointer_increment = DMA_Configuration.Memory_Pointer_Increment.Enable;
 8002428:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800242c:	b29a      	uxth	r2, r3
 800242e:	4b07      	ldr	r3, [pc, #28]	@ (800244c <xDMA1_RX_Init+0x58>)
 8002430:	841a      	strh	r2, [r3, #32]
	xDMA1_RX.priority_level = DMA_Configuration.Priority_Level.Very_high;
 8002432:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002436:	4b05      	ldr	r3, [pc, #20]	@ (800244c <xDMA1_RX_Init+0x58>)
 8002438:	615a      	str	r2, [r3, #20]
	xDMA1_RX.ISR_Routines.Full_Transfer_Commplete_ISR = SPI1_RX_ISR;
 800243a:	4b04      	ldr	r3, [pc, #16]	@ (800244c <xDMA1_RX_Init+0x58>)
 800243c:	4a05      	ldr	r2, [pc, #20]	@ (8002454 <xDMA1_RX_Init+0x60>)
 800243e:	64da      	str	r2, [r3, #76]	@ 0x4c
	DMA_Init(&xDMA1_RX);
 8002440:	4802      	ldr	r0, [pc, #8]	@ (800244c <xDMA1_RX_Init+0x58>)
 8002442:	f7ff f9eb 	bl	800181c <DMA_Init>
}
 8002446:	bf00      	nop
 8002448:	bd98      	pop	{r3, r4, r7, pc}
 800244a:	bf00      	nop
 800244c:	20000108 	.word	0x20000108
 8002450:	080053b4 	.word	0x080053b4
 8002454:	080022c9 	.word	0x080022c9

08002458 <xDMA2_RX_Init>:
 * @brief Initializes the DMA for SPI1 RX.
 *
 * Configures and initializes the DMA channel for receiving data via SPI1.
 */
static void xDMA2_RX_Init()
{
 8002458:	b598      	push	{r3, r4, r7, lr}
 800245a:	af00      	add	r7, sp, #0
	xDMA2_RX.Request = DMA_Configuration.Request.SPI2_RX;
 800245c:	4a12      	ldr	r2, [pc, #72]	@ (80024a8 <xDMA2_RX_Init+0x50>)
 800245e:	4b13      	ldr	r3, [pc, #76]	@ (80024ac <xDMA2_RX_Init+0x54>)
 8002460:	4614      	mov	r4, r2
 8002462:	3318      	adds	r3, #24
 8002464:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002468:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	xDMA2_RX.transfer_direction = DMA_Configuration.Transfer_Direction.Memory_to_peripheral;
 800246c:	2240      	movs	r2, #64	@ 0x40
 800246e:	4b0e      	ldr	r3, [pc, #56]	@ (80024a8 <xDMA2_RX_Init+0x50>)
 8002470:	611a      	str	r2, [r3, #16]
	xDMA2_RX.circular_mode = DMA_Configuration.Circular_Mode.Disable;
 8002472:	2200      	movs	r2, #0
 8002474:	4b0c      	ldr	r3, [pc, #48]	@ (80024a8 <xDMA2_RX_Init+0x50>)
 8002476:	619a      	str	r2, [r3, #24]
	xDMA2_RX.flow_control = DMA_Configuration.Flow_Control.DMA_Control;
 8002478:	2200      	movs	r2, #0
 800247a:	4b0b      	ldr	r3, [pc, #44]	@ (80024a8 <xDMA2_RX_Init+0x50>)
 800247c:	60da      	str	r2, [r3, #12]
	xDMA2_RX.interrupts = DMA_Configuration.DMA_Interrupts.Disable;
 800247e:	2200      	movs	r2, #0
 8002480:	4b09      	ldr	r3, [pc, #36]	@ (80024a8 <xDMA2_RX_Init+0x50>)
 8002482:	61da      	str	r2, [r3, #28]
	xDMA2_RX.peripheral_pointer_increment = DMA_Configuration.Peripheral_Pointer_Increment.Disable;
 8002484:	2300      	movs	r3, #0
 8002486:	b29a      	uxth	r2, r3
 8002488:	4b07      	ldr	r3, [pc, #28]	@ (80024a8 <xDMA2_RX_Init+0x50>)
 800248a:	845a      	strh	r2, [r3, #34]	@ 0x22
	xDMA2_RX.memory_pointer_increment = DMA_Configuration.Memory_Pointer_Increment.Enable;
 800248c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002490:	b29a      	uxth	r2, r3
 8002492:	4b05      	ldr	r3, [pc, #20]	@ (80024a8 <xDMA2_RX_Init+0x50>)
 8002494:	841a      	strh	r2, [r3, #32]
	xDMA2_RX.priority_level = DMA_Configuration.Priority_Level.Very_high;
 8002496:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800249a:	4b03      	ldr	r3, [pc, #12]	@ (80024a8 <xDMA2_RX_Init+0x50>)
 800249c:	615a      	str	r2, [r3, #20]
	DMA_Init(&xDMA2_RX);
 800249e:	4802      	ldr	r0, [pc, #8]	@ (80024a8 <xDMA2_RX_Init+0x50>)
 80024a0:	f7ff f9bc 	bl	800181c <DMA_Init>
}
 80024a4:	bf00      	nop
 80024a6:	bd98      	pop	{r3, r4, r7, pc}
 80024a8:	200001b8 	.word	0x200001b8
 80024ac:	080053b4 	.word	0x080053b4

080024b0 <xDMA3_RX_Init>:
 * @brief Initializes the DMA for SPI2 RX.
 *
 * Configures and initializes the DMA channel for receiving data via SPI2.
 */
static void xDMA3_RX_Init()
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
	xDMA3_RX.Request = DMA_Configuration.Request.SPI3_RX;
 80024b4:	4b11      	ldr	r3, [pc, #68]	@ (80024fc <xDMA3_RX_Init+0x4c>)
 80024b6:	4a12      	ldr	r2, [pc, #72]	@ (8002500 <xDMA3_RX_Init+0x50>)
 80024b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80024ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	xDMA3_RX.transfer_direction = DMA_Configuration.Transfer_Direction.Memory_to_peripheral;
 80024be:	2240      	movs	r2, #64	@ 0x40
 80024c0:	4b0e      	ldr	r3, [pc, #56]	@ (80024fc <xDMA3_RX_Init+0x4c>)
 80024c2:	611a      	str	r2, [r3, #16]
	xDMA3_RX.circular_mode = DMA_Configuration.Circular_Mode.Disable;
 80024c4:	2200      	movs	r2, #0
 80024c6:	4b0d      	ldr	r3, [pc, #52]	@ (80024fc <xDMA3_RX_Init+0x4c>)
 80024c8:	619a      	str	r2, [r3, #24]
	xDMA3_RX.flow_control = DMA_Configuration.Flow_Control.DMA_Control;
 80024ca:	2200      	movs	r2, #0
 80024cc:	4b0b      	ldr	r3, [pc, #44]	@ (80024fc <xDMA3_RX_Init+0x4c>)
 80024ce:	60da      	str	r2, [r3, #12]
	xDMA3_RX.interrupts = DMA_Configuration.DMA_Interrupts.Disable;
 80024d0:	2200      	movs	r2, #0
 80024d2:	4b0a      	ldr	r3, [pc, #40]	@ (80024fc <xDMA3_RX_Init+0x4c>)
 80024d4:	61da      	str	r2, [r3, #28]
	xDMA3_RX.peripheral_pointer_increment = DMA_Configuration.Peripheral_Pointer_Increment.Disable;
 80024d6:	2300      	movs	r3, #0
 80024d8:	b29a      	uxth	r2, r3
 80024da:	4b08      	ldr	r3, [pc, #32]	@ (80024fc <xDMA3_RX_Init+0x4c>)
 80024dc:	845a      	strh	r2, [r3, #34]	@ 0x22
	xDMA3_RX.memory_pointer_increment = DMA_Configuration.Memory_Pointer_Increment.Enable;
 80024de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	4b05      	ldr	r3, [pc, #20]	@ (80024fc <xDMA3_RX_Init+0x4c>)
 80024e6:	841a      	strh	r2, [r3, #32]
	xDMA3_RX.priority_level = DMA_Configuration.Priority_Level.Very_high;
 80024e8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80024ec:	4b03      	ldr	r3, [pc, #12]	@ (80024fc <xDMA3_RX_Init+0x4c>)
 80024ee:	615a      	str	r2, [r3, #20]
	DMA_Init(&xDMA3_RX);
 80024f0:	4802      	ldr	r0, [pc, #8]	@ (80024fc <xDMA3_RX_Init+0x4c>)
 80024f2:	f7ff f993 	bl	800181c <DMA_Init>
}
 80024f6:	bf00      	nop
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	20000268 	.word	0x20000268
 8002500:	080053b4 	.word	0x080053b4

08002504 <SPI_Clock_Enable>:
 *
 * @param[in] config Pointer to the SPI configuration structure.
 * @return int8_t Returns 0 on success, -1 on failure.
 */
int8_t SPI_Clock_Enable(SPI_Config *config)
{
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
	int8_t retval = 0;
 800250c:	2300      	movs	r3, #0
 800250e:	73fb      	strb	r3, [r7, #15]
	if(config ->Port == SPI1)RCC -> APB2ENR |= RCC_APB2ENR_SPI1EN;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a14      	ldr	r2, [pc, #80]	@ (8002568 <SPI_Clock_Enable+0x64>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d105      	bne.n	8002526 <SPI_Clock_Enable+0x22>
 800251a:	4b14      	ldr	r3, [pc, #80]	@ (800256c <SPI_Clock_Enable+0x68>)
 800251c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800251e:	4a13      	ldr	r2, [pc, #76]	@ (800256c <SPI_Clock_Enable+0x68>)
 8002520:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002524:	6453      	str	r3, [r2, #68]	@ 0x44
	if(config ->Port == SPI2)RCC -> APB1ENR |= RCC_APB1ENR_SPI2EN;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a11      	ldr	r2, [pc, #68]	@ (8002570 <SPI_Clock_Enable+0x6c>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d105      	bne.n	800253c <SPI_Clock_Enable+0x38>
 8002530:	4b0e      	ldr	r3, [pc, #56]	@ (800256c <SPI_Clock_Enable+0x68>)
 8002532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002534:	4a0d      	ldr	r2, [pc, #52]	@ (800256c <SPI_Clock_Enable+0x68>)
 8002536:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800253a:	6413      	str	r3, [r2, #64]	@ 0x40
	if(config ->Port == SPI3)RCC -> APB1ENR |= RCC_APB1ENR_SPI3EN;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a0c      	ldr	r2, [pc, #48]	@ (8002574 <SPI_Clock_Enable+0x70>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d106      	bne.n	8002554 <SPI_Clock_Enable+0x50>
 8002546:	4b09      	ldr	r3, [pc, #36]	@ (800256c <SPI_Clock_Enable+0x68>)
 8002548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800254a:	4a08      	ldr	r2, [pc, #32]	@ (800256c <SPI_Clock_Enable+0x68>)
 800254c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002550:	6413      	str	r3, [r2, #64]	@ 0x40
 8002552:	e001      	b.n	8002558 <SPI_Clock_Enable+0x54>
	else
		retval = -1;
 8002554:	23ff      	movs	r3, #255	@ 0xff
 8002556:	73fb      	strb	r3, [r7, #15]
	return retval;
 8002558:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800255c:	4618      	mov	r0, r3
 800255e:	3714      	adds	r7, #20
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr
 8002568:	40013000 	.word	0x40013000
 800256c:	40023800 	.word	0x40023800
 8002570:	40003800 	.word	0x40003800
 8002574:	40003c00 	.word	0x40003c00

08002578 <SPI_Pin_Init>:
 * This function configures the necessary GPIO pins for the specified SPI port.
 *
 * @param[in] config Pointer to the SPI configuration structure.
 */
static void SPI_Pin_Init(SPI_Config *config)
{
 8002578:	b590      	push	{r4, r7, lr}
 800257a:	b087      	sub	sp, #28
 800257c:	af04      	add	r7, sp, #16
 800257e:	6078      	str	r0, [r7, #4]
	if(config -> Port == SPI1)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4aa2      	ldr	r2, [pc, #648]	@ (8002810 <SPI_Pin_Init+0x298>)
 8002586:	4293      	cmp	r3, r2
 8002588:	f040 816c 	bne.w	8002864 <SPI_Pin_Init+0x2ec>
	{
		if((config->mode == SPI_Configurations.Mode.Full_Duplex_Master) || (config->mode == SPI_Configurations.Mode.Full_Duplex_Slave))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	89db      	ldrh	r3, [r3, #14]
 8002590:	220b      	movs	r2, #11
 8002592:	4293      	cmp	r3, r2
 8002594:	d004      	beq.n	80025a0 <SPI_Pin_Init+0x28>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	89db      	ldrh	r3, [r3, #14]
 800259a:	220c      	movs	r2, #12
 800259c:	4293      	cmp	r3, r2
 800259e:	d17d      	bne.n	800269c <SPI_Pin_Init+0x124>
		{
			if(config->clock_pin == SPI_Configurations.Pin._SPI1_.CLK1.PA5) GPIO_Pin_Init(GPIOA, 5, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_1);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	791b      	ldrb	r3, [r3, #4]
 80025a4:	220f      	movs	r2, #15
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d10e      	bne.n	80025c8 <SPI_Pin_Init+0x50>
 80025aa:	2002      	movs	r0, #2
 80025ac:	2400      	movs	r4, #0
 80025ae:	2303      	movs	r3, #3
 80025b0:	2200      	movs	r2, #0
 80025b2:	2105      	movs	r1, #5
 80025b4:	9102      	str	r1, [sp, #8]
 80025b6:	9201      	str	r2, [sp, #4]
 80025b8:	9300      	str	r3, [sp, #0]
 80025ba:	4623      	mov	r3, r4
 80025bc:	4602      	mov	r2, r0
 80025be:	2105      	movs	r1, #5
 80025c0:	4894      	ldr	r0, [pc, #592]	@ (8002814 <SPI_Pin_Init+0x29c>)
 80025c2:	f7ff fd7d 	bl	80020c0 <GPIO_Pin_Init>
 80025c6:	e012      	b.n	80025ee <SPI_Pin_Init+0x76>
			else if(config->clock_pin == SPI_Configurations.Pin._SPI1_.CLK1.PB3) GPIO_Pin_Init(GPIOB, 3, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_1);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	791b      	ldrb	r3, [r3, #4]
 80025cc:	2221      	movs	r2, #33	@ 0x21
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d10d      	bne.n	80025ee <SPI_Pin_Init+0x76>
 80025d2:	2002      	movs	r0, #2
 80025d4:	2400      	movs	r4, #0
 80025d6:	2303      	movs	r3, #3
 80025d8:	2200      	movs	r2, #0
 80025da:	2105      	movs	r1, #5
 80025dc:	9102      	str	r1, [sp, #8]
 80025de:	9201      	str	r2, [sp, #4]
 80025e0:	9300      	str	r3, [sp, #0]
 80025e2:	4623      	mov	r3, r4
 80025e4:	4602      	mov	r2, r0
 80025e6:	2103      	movs	r1, #3
 80025e8:	488b      	ldr	r0, [pc, #556]	@ (8002818 <SPI_Pin_Init+0x2a0>)
 80025ea:	f7ff fd69 	bl	80020c0 <GPIO_Pin_Init>

			if(config->miso_pin == SPI_Configurations.Pin._SPI1_.MISO1.PA6) GPIO_Pin_Init(GPIOA, 6, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_1);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	799b      	ldrb	r3, [r3, #6]
 80025f2:	2210      	movs	r2, #16
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d10e      	bne.n	8002616 <SPI_Pin_Init+0x9e>
 80025f8:	2002      	movs	r0, #2
 80025fa:	2400      	movs	r4, #0
 80025fc:	2303      	movs	r3, #3
 80025fe:	2200      	movs	r2, #0
 8002600:	2105      	movs	r1, #5
 8002602:	9102      	str	r1, [sp, #8]
 8002604:	9201      	str	r2, [sp, #4]
 8002606:	9300      	str	r3, [sp, #0]
 8002608:	4623      	mov	r3, r4
 800260a:	4602      	mov	r2, r0
 800260c:	2106      	movs	r1, #6
 800260e:	4881      	ldr	r0, [pc, #516]	@ (8002814 <SPI_Pin_Init+0x29c>)
 8002610:	f7ff fd56 	bl	80020c0 <GPIO_Pin_Init>
 8002614:	e012      	b.n	800263c <SPI_Pin_Init+0xc4>
			else if(config->miso_pin == SPI_Configurations.Pin._SPI1_.MISO1.PB4) GPIO_Pin_Init(GPIOB, 4, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_1);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	799b      	ldrb	r3, [r3, #6]
 800261a:	2222      	movs	r2, #34	@ 0x22
 800261c:	4293      	cmp	r3, r2
 800261e:	d10d      	bne.n	800263c <SPI_Pin_Init+0xc4>
 8002620:	2002      	movs	r0, #2
 8002622:	2400      	movs	r4, #0
 8002624:	2303      	movs	r3, #3
 8002626:	2200      	movs	r2, #0
 8002628:	2105      	movs	r1, #5
 800262a:	9102      	str	r1, [sp, #8]
 800262c:	9201      	str	r2, [sp, #4]
 800262e:	9300      	str	r3, [sp, #0]
 8002630:	4623      	mov	r3, r4
 8002632:	4602      	mov	r2, r0
 8002634:	2104      	movs	r1, #4
 8002636:	4878      	ldr	r0, [pc, #480]	@ (8002818 <SPI_Pin_Init+0x2a0>)
 8002638:	f7ff fd42 	bl	80020c0 <GPIO_Pin_Init>

			if(config->mosi_pin == SPI_Configurations.Pin._SPI1_.MOSI1.PA7) GPIO_Pin_Init(GPIOA, 7, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_1);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	795b      	ldrb	r3, [r3, #5]
 8002640:	2211      	movs	r2, #17
 8002642:	4293      	cmp	r3, r2
 8002644:	d10e      	bne.n	8002664 <SPI_Pin_Init+0xec>
 8002646:	2002      	movs	r0, #2
 8002648:	2400      	movs	r4, #0
 800264a:	2303      	movs	r3, #3
 800264c:	2200      	movs	r2, #0
 800264e:	2105      	movs	r1, #5
 8002650:	9102      	str	r1, [sp, #8]
 8002652:	9201      	str	r2, [sp, #4]
 8002654:	9300      	str	r3, [sp, #0]
 8002656:	4623      	mov	r3, r4
 8002658:	4602      	mov	r2, r0
 800265a:	2107      	movs	r1, #7
 800265c:	486d      	ldr	r0, [pc, #436]	@ (8002814 <SPI_Pin_Init+0x29c>)
 800265e:	f7ff fd2f 	bl	80020c0 <GPIO_Pin_Init>
 8002662:	e012      	b.n	800268a <SPI_Pin_Init+0x112>
			else if(config->mosi_pin == SPI_Configurations.Pin._SPI1_.MOSI1.PB5) GPIO_Pin_Init(GPIOB, 5, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_1);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	795b      	ldrb	r3, [r3, #5]
 8002668:	2223      	movs	r2, #35	@ 0x23
 800266a:	4293      	cmp	r3, r2
 800266c:	d10d      	bne.n	800268a <SPI_Pin_Init+0x112>
 800266e:	2002      	movs	r0, #2
 8002670:	2400      	movs	r4, #0
 8002672:	2303      	movs	r3, #3
 8002674:	2200      	movs	r2, #0
 8002676:	2105      	movs	r1, #5
 8002678:	9102      	str	r1, [sp, #8]
 800267a:	9201      	str	r2, [sp, #4]
 800267c:	9300      	str	r3, [sp, #0]
 800267e:	4623      	mov	r3, r4
 8002680:	4602      	mov	r2, r0
 8002682:	2105      	movs	r1, #5
 8002684:	4864      	ldr	r0, [pc, #400]	@ (8002818 <SPI_Pin_Init+0x2a0>)
 8002686:	f7ff fd1b 	bl	80020c0 <GPIO_Pin_Init>

			config->Port -> CR1 &= ~SPI_CR1_BIDIMODE;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002698:	601a      	str	r2, [r3, #0]
 800269a:	e3b9      	b.n	8002e10 <SPI_Pin_Init+0x898>
		}
		else if((config->mode == SPI_Configurations.Mode.Half_Duplex_Master) || (config->mode == SPI_Configurations.Mode.TX_Only_Master) || (config->mode == SPI_Configurations.Mode.RX_Only_Slave))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	89db      	ldrh	r3, [r3, #14]
 80026a0:	220d      	movs	r2, #13
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d009      	beq.n	80026ba <SPI_Pin_Init+0x142>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	89db      	ldrh	r3, [r3, #14]
 80026aa:	2211      	movs	r2, #17
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d004      	beq.n	80026ba <SPI_Pin_Init+0x142>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	89db      	ldrh	r3, [r3, #14]
 80026b4:	2210      	movs	r2, #16
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d15e      	bne.n	8002778 <SPI_Pin_Init+0x200>
		{
			if(config->clock_pin == SPI_Configurations.Pin._SPI1_.CLK1.PA5) GPIO_Pin_Init(GPIOA, 5, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_1);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	791b      	ldrb	r3, [r3, #4]
 80026be:	220f      	movs	r2, #15
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d10e      	bne.n	80026e2 <SPI_Pin_Init+0x16a>
 80026c4:	2002      	movs	r0, #2
 80026c6:	2400      	movs	r4, #0
 80026c8:	2303      	movs	r3, #3
 80026ca:	2200      	movs	r2, #0
 80026cc:	2105      	movs	r1, #5
 80026ce:	9102      	str	r1, [sp, #8]
 80026d0:	9201      	str	r2, [sp, #4]
 80026d2:	9300      	str	r3, [sp, #0]
 80026d4:	4623      	mov	r3, r4
 80026d6:	4602      	mov	r2, r0
 80026d8:	2105      	movs	r1, #5
 80026da:	484e      	ldr	r0, [pc, #312]	@ (8002814 <SPI_Pin_Init+0x29c>)
 80026dc:	f7ff fcf0 	bl	80020c0 <GPIO_Pin_Init>
 80026e0:	e012      	b.n	8002708 <SPI_Pin_Init+0x190>
			else if(config->clock_pin == SPI_Configurations.Pin._SPI1_.CLK1.PB3) GPIO_Pin_Init(GPIOB, 3, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_1);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	791b      	ldrb	r3, [r3, #4]
 80026e6:	2221      	movs	r2, #33	@ 0x21
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d10d      	bne.n	8002708 <SPI_Pin_Init+0x190>
 80026ec:	2002      	movs	r0, #2
 80026ee:	2400      	movs	r4, #0
 80026f0:	2303      	movs	r3, #3
 80026f2:	2200      	movs	r2, #0
 80026f4:	2105      	movs	r1, #5
 80026f6:	9102      	str	r1, [sp, #8]
 80026f8:	9201      	str	r2, [sp, #4]
 80026fa:	9300      	str	r3, [sp, #0]
 80026fc:	4623      	mov	r3, r4
 80026fe:	4602      	mov	r2, r0
 8002700:	2103      	movs	r1, #3
 8002702:	4845      	ldr	r0, [pc, #276]	@ (8002818 <SPI_Pin_Init+0x2a0>)
 8002704:	f7ff fcdc 	bl	80020c0 <GPIO_Pin_Init>

			if(config->mosi_pin == SPI_Configurations.Pin._SPI1_.MOSI1.PA7) GPIO_Pin_Init(GPIOA, 7, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_1);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	795b      	ldrb	r3, [r3, #5]
 800270c:	2211      	movs	r2, #17
 800270e:	4293      	cmp	r3, r2
 8002710:	d10e      	bne.n	8002730 <SPI_Pin_Init+0x1b8>
 8002712:	2002      	movs	r0, #2
 8002714:	2400      	movs	r4, #0
 8002716:	2303      	movs	r3, #3
 8002718:	2200      	movs	r2, #0
 800271a:	2105      	movs	r1, #5
 800271c:	9102      	str	r1, [sp, #8]
 800271e:	9201      	str	r2, [sp, #4]
 8002720:	9300      	str	r3, [sp, #0]
 8002722:	4623      	mov	r3, r4
 8002724:	4602      	mov	r2, r0
 8002726:	2107      	movs	r1, #7
 8002728:	483a      	ldr	r0, [pc, #232]	@ (8002814 <SPI_Pin_Init+0x29c>)
 800272a:	f7ff fcc9 	bl	80020c0 <GPIO_Pin_Init>
 800272e:	e012      	b.n	8002756 <SPI_Pin_Init+0x1de>
			else if(config->mosi_pin == SPI_Configurations.Pin._SPI1_.MOSI1.PB5) GPIO_Pin_Init(GPIOB, 5, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_1);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	795b      	ldrb	r3, [r3, #5]
 8002734:	2223      	movs	r2, #35	@ 0x23
 8002736:	4293      	cmp	r3, r2
 8002738:	d10d      	bne.n	8002756 <SPI_Pin_Init+0x1de>
 800273a:	2002      	movs	r0, #2
 800273c:	2400      	movs	r4, #0
 800273e:	2303      	movs	r3, #3
 8002740:	2200      	movs	r2, #0
 8002742:	2105      	movs	r1, #5
 8002744:	9102      	str	r1, [sp, #8]
 8002746:	9201      	str	r2, [sp, #4]
 8002748:	9300      	str	r3, [sp, #0]
 800274a:	4623      	mov	r3, r4
 800274c:	4602      	mov	r2, r0
 800274e:	2105      	movs	r1, #5
 8002750:	4831      	ldr	r0, [pc, #196]	@ (8002818 <SPI_Pin_Init+0x2a0>)
 8002752:	f7ff fcb5 	bl	80020c0 <GPIO_Pin_Init>

			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002764:	601a      	str	r2, [r3, #0]
			config->Port -> CR1 |= SPI_CR1_BIDIOE;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002774:	601a      	str	r2, [r3, #0]
 8002776:	e34b      	b.n	8002e10 <SPI_Pin_Init+0x898>
		}
		else if((config->mode == SPI_Configurations.Mode.Half_Duplex_Slave) || (config->mode == SPI_Configurations.Mode.RX_Only_Master) || (config->mode == SPI_Configurations.Mode.TX_Only_Slave))
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	89db      	ldrh	r3, [r3, #14]
 800277c:	220e      	movs	r2, #14
 800277e:	4293      	cmp	r3, r2
 8002780:	d00a      	beq.n	8002798 <SPI_Pin_Init+0x220>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	89db      	ldrh	r3, [r3, #14]
 8002786:	220f      	movs	r2, #15
 8002788:	4293      	cmp	r3, r2
 800278a:	d005      	beq.n	8002798 <SPI_Pin_Init+0x220>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	89db      	ldrh	r3, [r3, #14]
 8002790:	2212      	movs	r2, #18
 8002792:	4293      	cmp	r3, r2
 8002794:	f040 833c 	bne.w	8002e10 <SPI_Pin_Init+0x898>
		{
			if(config->clock_pin == SPI_Configurations.Pin._SPI1_.CLK1.PA5) GPIO_Pin_Init(GPIOA, 5, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_1);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	791b      	ldrb	r3, [r3, #4]
 800279c:	220f      	movs	r2, #15
 800279e:	4293      	cmp	r3, r2
 80027a0:	d10e      	bne.n	80027c0 <SPI_Pin_Init+0x248>
 80027a2:	2002      	movs	r0, #2
 80027a4:	2400      	movs	r4, #0
 80027a6:	2303      	movs	r3, #3
 80027a8:	2200      	movs	r2, #0
 80027aa:	2105      	movs	r1, #5
 80027ac:	9102      	str	r1, [sp, #8]
 80027ae:	9201      	str	r2, [sp, #4]
 80027b0:	9300      	str	r3, [sp, #0]
 80027b2:	4623      	mov	r3, r4
 80027b4:	4602      	mov	r2, r0
 80027b6:	2105      	movs	r1, #5
 80027b8:	4816      	ldr	r0, [pc, #88]	@ (8002814 <SPI_Pin_Init+0x29c>)
 80027ba:	f7ff fc81 	bl	80020c0 <GPIO_Pin_Init>
 80027be:	e012      	b.n	80027e6 <SPI_Pin_Init+0x26e>
			else if(config->clock_pin == SPI_Configurations.Pin._SPI1_.CLK1.PB3) GPIO_Pin_Init(GPIOB, 3, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_1);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	791b      	ldrb	r3, [r3, #4]
 80027c4:	2221      	movs	r2, #33	@ 0x21
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d10d      	bne.n	80027e6 <SPI_Pin_Init+0x26e>
 80027ca:	2002      	movs	r0, #2
 80027cc:	2400      	movs	r4, #0
 80027ce:	2303      	movs	r3, #3
 80027d0:	2200      	movs	r2, #0
 80027d2:	2105      	movs	r1, #5
 80027d4:	9102      	str	r1, [sp, #8]
 80027d6:	9201      	str	r2, [sp, #4]
 80027d8:	9300      	str	r3, [sp, #0]
 80027da:	4623      	mov	r3, r4
 80027dc:	4602      	mov	r2, r0
 80027de:	2103      	movs	r1, #3
 80027e0:	480d      	ldr	r0, [pc, #52]	@ (8002818 <SPI_Pin_Init+0x2a0>)
 80027e2:	f7ff fc6d 	bl	80020c0 <GPIO_Pin_Init>

			if(config->miso_pin == SPI_Configurations.Pin._SPI1_.MISO1.PA6) GPIO_Pin_Init(GPIOA, 6, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_1);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	799b      	ldrb	r3, [r3, #6]
 80027ea:	2210      	movs	r2, #16
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d115      	bne.n	800281c <SPI_Pin_Init+0x2a4>
 80027f0:	2002      	movs	r0, #2
 80027f2:	2400      	movs	r4, #0
 80027f4:	2303      	movs	r3, #3
 80027f6:	2200      	movs	r2, #0
 80027f8:	2105      	movs	r1, #5
 80027fa:	9102      	str	r1, [sp, #8]
 80027fc:	9201      	str	r2, [sp, #4]
 80027fe:	9300      	str	r3, [sp, #0]
 8002800:	4623      	mov	r3, r4
 8002802:	4602      	mov	r2, r0
 8002804:	2106      	movs	r1, #6
 8002806:	4803      	ldr	r0, [pc, #12]	@ (8002814 <SPI_Pin_Init+0x29c>)
 8002808:	f7ff fc5a 	bl	80020c0 <GPIO_Pin_Init>
 800280c:	e019      	b.n	8002842 <SPI_Pin_Init+0x2ca>
 800280e:	bf00      	nop
 8002810:	40013000 	.word	0x40013000
 8002814:	40020000 	.word	0x40020000
 8002818:	40020400 	.word	0x40020400
			else if(config->miso_pin == SPI_Configurations.Pin._SPI1_.MISO1.PB4) GPIO_Pin_Init(GPIOB, 4, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_1);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	799b      	ldrb	r3, [r3, #6]
 8002820:	2222      	movs	r2, #34	@ 0x22
 8002822:	4293      	cmp	r3, r2
 8002824:	d10d      	bne.n	8002842 <SPI_Pin_Init+0x2ca>
 8002826:	2002      	movs	r0, #2
 8002828:	2400      	movs	r4, #0
 800282a:	2303      	movs	r3, #3
 800282c:	2200      	movs	r2, #0
 800282e:	2105      	movs	r1, #5
 8002830:	9102      	str	r1, [sp, #8]
 8002832:	9201      	str	r2, [sp, #4]
 8002834:	9300      	str	r3, [sp, #0]
 8002836:	4623      	mov	r3, r4
 8002838:	4602      	mov	r2, r0
 800283a:	2104      	movs	r1, #4
 800283c:	489f      	ldr	r0, [pc, #636]	@ (8002abc <SPI_Pin_Init+0x544>)
 800283e:	f7ff fc3f 	bl	80020c0 <GPIO_Pin_Init>

			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002850:	601a      	str	r2, [r3, #0]
			config->Port -> CR1 &= ~SPI_CR1_BIDIOE;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002860:	601a      	str	r2, [r3, #0]

			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
			config->Port -> CR1 &= ~SPI_CR1_BIDIOE;
		}
	}
}
 8002862:	e2d5      	b.n	8002e10 <SPI_Pin_Init+0x898>
	else if(config -> Port == SPI2)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a95      	ldr	r2, [pc, #596]	@ (8002ac0 <SPI_Pin_Init+0x548>)
 800286a:	4293      	cmp	r3, r2
 800286c:	f040 8151 	bne.w	8002b12 <SPI_Pin_Init+0x59a>
		if((config->mode == SPI_Configurations.Mode.Full_Duplex_Master) || (config->mode == SPI_Configurations.Mode.Full_Duplex_Slave))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	89db      	ldrh	r3, [r3, #14]
 8002874:	220b      	movs	r2, #11
 8002876:	4293      	cmp	r3, r2
 8002878:	d005      	beq.n	8002886 <SPI_Pin_Init+0x30e>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	89db      	ldrh	r3, [r3, #14]
 800287e:	220c      	movs	r2, #12
 8002880:	4293      	cmp	r3, r2
 8002882:	f040 8084 	bne.w	800298e <SPI_Pin_Init+0x416>
			if(config->clock_pin == SPI_Configurations.Pin._SPI2_.CLK2.PB10) GPIO_Pin_Init(GPIOB, 10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_2);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	791b      	ldrb	r3, [r3, #4]
 800288a:	461a      	mov	r2, r3
 800288c:	2313      	movs	r3, #19
 800288e:	429a      	cmp	r2, r3
 8002890:	d10e      	bne.n	80028b0 <SPI_Pin_Init+0x338>
 8002892:	2002      	movs	r0, #2
 8002894:	2400      	movs	r4, #0
 8002896:	2303      	movs	r3, #3
 8002898:	2200      	movs	r2, #0
 800289a:	2105      	movs	r1, #5
 800289c:	9102      	str	r1, [sp, #8]
 800289e:	9201      	str	r2, [sp, #4]
 80028a0:	9300      	str	r3, [sp, #0]
 80028a2:	4623      	mov	r3, r4
 80028a4:	4602      	mov	r2, r0
 80028a6:	210a      	movs	r1, #10
 80028a8:	4884      	ldr	r0, [pc, #528]	@ (8002abc <SPI_Pin_Init+0x544>)
 80028aa:	f7ff fc09 	bl	80020c0 <GPIO_Pin_Init>
 80028ae:	e013      	b.n	80028d8 <SPI_Pin_Init+0x360>
			else if(config->clock_pin == SPI_Configurations.Pin._SPI2_.CLK2.PB13) GPIO_Pin_Init(GPIOB, 13, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_2);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	791b      	ldrb	r3, [r3, #4]
 80028b4:	461a      	mov	r2, r3
 80028b6:	2317      	movs	r3, #23
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d10d      	bne.n	80028d8 <SPI_Pin_Init+0x360>
 80028bc:	2002      	movs	r0, #2
 80028be:	2400      	movs	r4, #0
 80028c0:	2303      	movs	r3, #3
 80028c2:	2200      	movs	r2, #0
 80028c4:	2105      	movs	r1, #5
 80028c6:	9102      	str	r1, [sp, #8]
 80028c8:	9201      	str	r2, [sp, #4]
 80028ca:	9300      	str	r3, [sp, #0]
 80028cc:	4623      	mov	r3, r4
 80028ce:	4602      	mov	r2, r0
 80028d0:	210d      	movs	r1, #13
 80028d2:	487a      	ldr	r0, [pc, #488]	@ (8002abc <SPI_Pin_Init+0x544>)
 80028d4:	f7ff fbf4 	bl	80020c0 <GPIO_Pin_Init>
			if(config->miso_pin == SPI_Configurations.Pin._SPI2_.MISO2.PB14) GPIO_Pin_Init(GPIOB, 14, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_2);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	799b      	ldrb	r3, [r3, #6]
 80028dc:	461a      	mov	r2, r3
 80028de:	231b      	movs	r3, #27
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d10e      	bne.n	8002902 <SPI_Pin_Init+0x38a>
 80028e4:	2002      	movs	r0, #2
 80028e6:	2400      	movs	r4, #0
 80028e8:	2303      	movs	r3, #3
 80028ea:	2200      	movs	r2, #0
 80028ec:	2105      	movs	r1, #5
 80028ee:	9102      	str	r1, [sp, #8]
 80028f0:	9201      	str	r2, [sp, #4]
 80028f2:	9300      	str	r3, [sp, #0]
 80028f4:	4623      	mov	r3, r4
 80028f6:	4602      	mov	r2, r0
 80028f8:	210e      	movs	r1, #14
 80028fa:	4870      	ldr	r0, [pc, #448]	@ (8002abc <SPI_Pin_Init+0x544>)
 80028fc:	f7ff fbe0 	bl	80020c0 <GPIO_Pin_Init>
 8002900:	e013      	b.n	800292a <SPI_Pin_Init+0x3b2>
			else if(config->miso_pin == SPI_Configurations.Pin._SPI2_.MISO2.PC2) GPIO_Pin_Init(GPIOC, 2, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_2);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	799b      	ldrb	r3, [r3, #6]
 8002906:	461a      	mov	r2, r3
 8002908:	2320      	movs	r3, #32
 800290a:	429a      	cmp	r2, r3
 800290c:	d10d      	bne.n	800292a <SPI_Pin_Init+0x3b2>
 800290e:	2002      	movs	r0, #2
 8002910:	2400      	movs	r4, #0
 8002912:	2303      	movs	r3, #3
 8002914:	2200      	movs	r2, #0
 8002916:	2105      	movs	r1, #5
 8002918:	9102      	str	r1, [sp, #8]
 800291a:	9201      	str	r2, [sp, #4]
 800291c:	9300      	str	r3, [sp, #0]
 800291e:	4623      	mov	r3, r4
 8002920:	4602      	mov	r2, r0
 8002922:	2102      	movs	r1, #2
 8002924:	4867      	ldr	r0, [pc, #412]	@ (8002ac4 <SPI_Pin_Init+0x54c>)
 8002926:	f7ff fbcb 	bl	80020c0 <GPIO_Pin_Init>
			if(config->mosi_pin == SPI_Configurations.Pin._SPI2_.MOSI2.PB15) GPIO_Pin_Init(GPIOB, 15, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_2);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	795b      	ldrb	r3, [r3, #5]
 800292e:	461a      	mov	r2, r3
 8002930:	231d      	movs	r3, #29
 8002932:	429a      	cmp	r2, r3
 8002934:	d10e      	bne.n	8002954 <SPI_Pin_Init+0x3dc>
 8002936:	2002      	movs	r0, #2
 8002938:	2400      	movs	r4, #0
 800293a:	2303      	movs	r3, #3
 800293c:	2200      	movs	r2, #0
 800293e:	2105      	movs	r1, #5
 8002940:	9102      	str	r1, [sp, #8]
 8002942:	9201      	str	r2, [sp, #4]
 8002944:	9300      	str	r3, [sp, #0]
 8002946:	4623      	mov	r3, r4
 8002948:	4602      	mov	r2, r0
 800294a:	210f      	movs	r1, #15
 800294c:	485b      	ldr	r0, [pc, #364]	@ (8002abc <SPI_Pin_Init+0x544>)
 800294e:	f7ff fbb7 	bl	80020c0 <GPIO_Pin_Init>
 8002952:	e013      	b.n	800297c <SPI_Pin_Init+0x404>
			else if(config->mosi_pin == SPI_Configurations.Pin._SPI2_.MOSI2.PC3) GPIO_Pin_Init(GPIOC, 3, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_2);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	795b      	ldrb	r3, [r3, #5]
 8002958:	461a      	mov	r2, r3
 800295a:	2311      	movs	r3, #17
 800295c:	429a      	cmp	r2, r3
 800295e:	d10d      	bne.n	800297c <SPI_Pin_Init+0x404>
 8002960:	2002      	movs	r0, #2
 8002962:	2400      	movs	r4, #0
 8002964:	2303      	movs	r3, #3
 8002966:	2200      	movs	r2, #0
 8002968:	2105      	movs	r1, #5
 800296a:	9102      	str	r1, [sp, #8]
 800296c:	9201      	str	r2, [sp, #4]
 800296e:	9300      	str	r3, [sp, #0]
 8002970:	4623      	mov	r3, r4
 8002972:	4602      	mov	r2, r0
 8002974:	2103      	movs	r1, #3
 8002976:	4853      	ldr	r0, [pc, #332]	@ (8002ac4 <SPI_Pin_Init+0x54c>)
 8002978:	f7ff fba2 	bl	80020c0 <GPIO_Pin_Init>
			config->Port -> CR1 &= ~SPI_CR1_BIDIMODE;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800298a:	601a      	str	r2, [r3, #0]
 800298c:	e240      	b.n	8002e10 <SPI_Pin_Init+0x898>
		else if((config->mode == SPI_Configurations.Mode.Half_Duplex_Master) || (config->mode == SPI_Configurations.Mode.TX_Only_Master) || (config->mode == SPI_Configurations.Mode.RX_Only_Slave))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	89db      	ldrh	r3, [r3, #14]
 8002992:	220d      	movs	r2, #13
 8002994:	4293      	cmp	r3, r2
 8002996:	d009      	beq.n	80029ac <SPI_Pin_Init+0x434>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	89db      	ldrh	r3, [r3, #14]
 800299c:	2211      	movs	r2, #17
 800299e:	4293      	cmp	r3, r2
 80029a0:	d004      	beq.n	80029ac <SPI_Pin_Init+0x434>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	89db      	ldrh	r3, [r3, #14]
 80029a6:	2210      	movs	r2, #16
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d139      	bne.n	8002a20 <SPI_Pin_Init+0x4a8>
			if(config->clock_pin == SPI_Configurations.Pin._SPI2_.CLK2.PB10) GPIO_Pin_Init(GPIOB, 10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_2);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	791b      	ldrb	r3, [r3, #4]
 80029b0:	461a      	mov	r2, r3
 80029b2:	2313      	movs	r3, #19
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d10e      	bne.n	80029d6 <SPI_Pin_Init+0x45e>
 80029b8:	2002      	movs	r0, #2
 80029ba:	2400      	movs	r4, #0
 80029bc:	2303      	movs	r3, #3
 80029be:	2200      	movs	r2, #0
 80029c0:	2105      	movs	r1, #5
 80029c2:	9102      	str	r1, [sp, #8]
 80029c4:	9201      	str	r2, [sp, #4]
 80029c6:	9300      	str	r3, [sp, #0]
 80029c8:	4623      	mov	r3, r4
 80029ca:	4602      	mov	r2, r0
 80029cc:	210a      	movs	r1, #10
 80029ce:	483b      	ldr	r0, [pc, #236]	@ (8002abc <SPI_Pin_Init+0x544>)
 80029d0:	f7ff fb76 	bl	80020c0 <GPIO_Pin_Init>
 80029d4:	e013      	b.n	80029fe <SPI_Pin_Init+0x486>
			else if(config->clock_pin == SPI_Configurations.Pin._SPI2_.CLK2.PB13) GPIO_Pin_Init(GPIOB, 13, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_2);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	791b      	ldrb	r3, [r3, #4]
 80029da:	461a      	mov	r2, r3
 80029dc:	2317      	movs	r3, #23
 80029de:	429a      	cmp	r2, r3
 80029e0:	d10d      	bne.n	80029fe <SPI_Pin_Init+0x486>
 80029e2:	2002      	movs	r0, #2
 80029e4:	2400      	movs	r4, #0
 80029e6:	2303      	movs	r3, #3
 80029e8:	2200      	movs	r2, #0
 80029ea:	2105      	movs	r1, #5
 80029ec:	9102      	str	r1, [sp, #8]
 80029ee:	9201      	str	r2, [sp, #4]
 80029f0:	9300      	str	r3, [sp, #0]
 80029f2:	4623      	mov	r3, r4
 80029f4:	4602      	mov	r2, r0
 80029f6:	210d      	movs	r1, #13
 80029f8:	4830      	ldr	r0, [pc, #192]	@ (8002abc <SPI_Pin_Init+0x544>)
 80029fa:	f7ff fb61 	bl	80020c0 <GPIO_Pin_Init>
			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a0c:	601a      	str	r2, [r3, #0]
			config->Port -> CR1 |= SPI_CR1_BIDIOE;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002a1c:	601a      	str	r2, [r3, #0]
 8002a1e:	e1f7      	b.n	8002e10 <SPI_Pin_Init+0x898>
		else if((config->mode == SPI_Configurations.Mode.Half_Duplex_Slave) || (config->mode == SPI_Configurations.Mode.RX_Only_Master) || (config->mode == SPI_Configurations.Mode.TX_Only_Slave))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	89db      	ldrh	r3, [r3, #14]
 8002a24:	220e      	movs	r2, #14
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d00a      	beq.n	8002a40 <SPI_Pin_Init+0x4c8>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	89db      	ldrh	r3, [r3, #14]
 8002a2e:	220f      	movs	r2, #15
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d005      	beq.n	8002a40 <SPI_Pin_Init+0x4c8>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	89db      	ldrh	r3, [r3, #14]
 8002a38:	2212      	movs	r2, #18
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	f040 81e8 	bne.w	8002e10 <SPI_Pin_Init+0x898>
			if(config->clock_pin == SPI_Configurations.Pin._SPI2_.CLK2.PB10) GPIO_Pin_Init(GPIOB, 10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_2);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	791b      	ldrb	r3, [r3, #4]
 8002a44:	461a      	mov	r2, r3
 8002a46:	2313      	movs	r3, #19
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d10e      	bne.n	8002a6a <SPI_Pin_Init+0x4f2>
 8002a4c:	2002      	movs	r0, #2
 8002a4e:	2400      	movs	r4, #0
 8002a50:	2303      	movs	r3, #3
 8002a52:	2200      	movs	r2, #0
 8002a54:	2105      	movs	r1, #5
 8002a56:	9102      	str	r1, [sp, #8]
 8002a58:	9201      	str	r2, [sp, #4]
 8002a5a:	9300      	str	r3, [sp, #0]
 8002a5c:	4623      	mov	r3, r4
 8002a5e:	4602      	mov	r2, r0
 8002a60:	210a      	movs	r1, #10
 8002a62:	4816      	ldr	r0, [pc, #88]	@ (8002abc <SPI_Pin_Init+0x544>)
 8002a64:	f7ff fb2c 	bl	80020c0 <GPIO_Pin_Init>
 8002a68:	e013      	b.n	8002a92 <SPI_Pin_Init+0x51a>
			else if(config->clock_pin == SPI_Configurations.Pin._SPI2_.CLK2.PB13) GPIO_Pin_Init(GPIOB, 13, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_2);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	791b      	ldrb	r3, [r3, #4]
 8002a6e:	461a      	mov	r2, r3
 8002a70:	2317      	movs	r3, #23
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d10d      	bne.n	8002a92 <SPI_Pin_Init+0x51a>
 8002a76:	2002      	movs	r0, #2
 8002a78:	2400      	movs	r4, #0
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	2105      	movs	r1, #5
 8002a80:	9102      	str	r1, [sp, #8]
 8002a82:	9201      	str	r2, [sp, #4]
 8002a84:	9300      	str	r3, [sp, #0]
 8002a86:	4623      	mov	r3, r4
 8002a88:	4602      	mov	r2, r0
 8002a8a:	210d      	movs	r1, #13
 8002a8c:	480b      	ldr	r0, [pc, #44]	@ (8002abc <SPI_Pin_Init+0x544>)
 8002a8e:	f7ff fb17 	bl	80020c0 <GPIO_Pin_Init>
			if(config->miso_pin == SPI_Configurations.Pin._SPI2_.MISO2.PB14) GPIO_Pin_Init(GPIOB, 14, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_2);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	799b      	ldrb	r3, [r3, #6]
 8002a96:	461a      	mov	r2, r3
 8002a98:	231b      	movs	r3, #27
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d114      	bne.n	8002ac8 <SPI_Pin_Init+0x550>
 8002a9e:	2002      	movs	r0, #2
 8002aa0:	2400      	movs	r4, #0
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	2105      	movs	r1, #5
 8002aa8:	9102      	str	r1, [sp, #8]
 8002aaa:	9201      	str	r2, [sp, #4]
 8002aac:	9300      	str	r3, [sp, #0]
 8002aae:	4623      	mov	r3, r4
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	210e      	movs	r1, #14
 8002ab4:	4801      	ldr	r0, [pc, #4]	@ (8002abc <SPI_Pin_Init+0x544>)
 8002ab6:	f7ff fb03 	bl	80020c0 <GPIO_Pin_Init>
 8002aba:	e019      	b.n	8002af0 <SPI_Pin_Init+0x578>
 8002abc:	40020400 	.word	0x40020400
 8002ac0:	40003800 	.word	0x40003800
 8002ac4:	40020800 	.word	0x40020800
			else if(config->miso_pin == SPI_Configurations.Pin._SPI2_.MISO2.PC2) GPIO_Pin_Init(GPIOC, 2, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_2);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	799b      	ldrb	r3, [r3, #6]
 8002acc:	461a      	mov	r2, r3
 8002ace:	2320      	movs	r3, #32
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d10d      	bne.n	8002af0 <SPI_Pin_Init+0x578>
 8002ad4:	2002      	movs	r0, #2
 8002ad6:	2400      	movs	r4, #0
 8002ad8:	2303      	movs	r3, #3
 8002ada:	2200      	movs	r2, #0
 8002adc:	2105      	movs	r1, #5
 8002ade:	9102      	str	r1, [sp, #8]
 8002ae0:	9201      	str	r2, [sp, #4]
 8002ae2:	9300      	str	r3, [sp, #0]
 8002ae4:	4623      	mov	r3, r4
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	2102      	movs	r1, #2
 8002aea:	489f      	ldr	r0, [pc, #636]	@ (8002d68 <SPI_Pin_Init+0x7f0>)
 8002aec:	f7ff fae8 	bl	80020c0 <GPIO_Pin_Init>
			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002afe:	601a      	str	r2, [r3, #0]
			config->Port -> CR1 &= ~SPI_CR1_BIDIOE;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002b0e:	601a      	str	r2, [r3, #0]
}
 8002b10:	e17e      	b.n	8002e10 <SPI_Pin_Init+0x898>
	else if(config -> Port == SPI3)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a95      	ldr	r2, [pc, #596]	@ (8002d6c <SPI_Pin_Init+0x7f4>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	f040 8179 	bne.w	8002e10 <SPI_Pin_Init+0x898>
		if((config->mode == SPI_Configurations.Mode.Full_Duplex_Master) || (config->mode == SPI_Configurations.Mode.Full_Duplex_Slave))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	89db      	ldrh	r3, [r3, #14]
 8002b22:	220b      	movs	r2, #11
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d005      	beq.n	8002b34 <SPI_Pin_Init+0x5bc>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	89db      	ldrh	r3, [r3, #14]
 8002b2c:	220c      	movs	r2, #12
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	f040 8084 	bne.w	8002c3c <SPI_Pin_Init+0x6c4>
			if(config->clock_pin == SPI_Configurations.Pin._SPI3_.CLK3.PB3) GPIO_Pin_Init(GPIOB, 3, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_3);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	791b      	ldrb	r3, [r3, #4]
 8002b38:	461a      	mov	r2, r3
 8002b3a:	2317      	movs	r3, #23
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d10e      	bne.n	8002b5e <SPI_Pin_Init+0x5e6>
 8002b40:	2002      	movs	r0, #2
 8002b42:	2400      	movs	r4, #0
 8002b44:	2303      	movs	r3, #3
 8002b46:	2200      	movs	r2, #0
 8002b48:	2106      	movs	r1, #6
 8002b4a:	9102      	str	r1, [sp, #8]
 8002b4c:	9201      	str	r2, [sp, #4]
 8002b4e:	9300      	str	r3, [sp, #0]
 8002b50:	4623      	mov	r3, r4
 8002b52:	4602      	mov	r2, r0
 8002b54:	2103      	movs	r1, #3
 8002b56:	4886      	ldr	r0, [pc, #536]	@ (8002d70 <SPI_Pin_Init+0x7f8>)
 8002b58:	f7ff fab2 	bl	80020c0 <GPIO_Pin_Init>
 8002b5c:	e013      	b.n	8002b86 <SPI_Pin_Init+0x60e>
			else if(config->clock_pin == SPI_Configurations.Pin._SPI3_.CLK3.PC10) GPIO_Pin_Init(GPIOC, 10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_3);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	791b      	ldrb	r3, [r3, #4]
 8002b62:	461a      	mov	r2, r3
 8002b64:	2325      	movs	r3, #37	@ 0x25
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d10d      	bne.n	8002b86 <SPI_Pin_Init+0x60e>
 8002b6a:	2002      	movs	r0, #2
 8002b6c:	2400      	movs	r4, #0
 8002b6e:	2303      	movs	r3, #3
 8002b70:	2200      	movs	r2, #0
 8002b72:	2106      	movs	r1, #6
 8002b74:	9102      	str	r1, [sp, #8]
 8002b76:	9201      	str	r2, [sp, #4]
 8002b78:	9300      	str	r3, [sp, #0]
 8002b7a:	4623      	mov	r3, r4
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	210a      	movs	r1, #10
 8002b80:	4879      	ldr	r0, [pc, #484]	@ (8002d68 <SPI_Pin_Init+0x7f0>)
 8002b82:	f7ff fa9d 	bl	80020c0 <GPIO_Pin_Init>
			if(config->miso_pin == SPI_Configurations.Pin._SPI3_.MISO3.PB4) GPIO_Pin_Init(GPIOB, 4, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_3);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	799b      	ldrb	r3, [r3, #6]
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	2318      	movs	r3, #24
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d10e      	bne.n	8002bb0 <SPI_Pin_Init+0x638>
 8002b92:	2002      	movs	r0, #2
 8002b94:	2400      	movs	r4, #0
 8002b96:	2303      	movs	r3, #3
 8002b98:	2200      	movs	r2, #0
 8002b9a:	2106      	movs	r1, #6
 8002b9c:	9102      	str	r1, [sp, #8]
 8002b9e:	9201      	str	r2, [sp, #4]
 8002ba0:	9300      	str	r3, [sp, #0]
 8002ba2:	4623      	mov	r3, r4
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	2104      	movs	r1, #4
 8002ba8:	4871      	ldr	r0, [pc, #452]	@ (8002d70 <SPI_Pin_Init+0x7f8>)
 8002baa:	f7ff fa89 	bl	80020c0 <GPIO_Pin_Init>
 8002bae:	e013      	b.n	8002bd8 <SPI_Pin_Init+0x660>
			else if(config->miso_pin == SPI_Configurations.Pin._SPI3_.MISO3.PC11) GPIO_Pin_Init(GPIOC,11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_3);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	799b      	ldrb	r3, [r3, #6]
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	2327      	movs	r3, #39	@ 0x27
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d10d      	bne.n	8002bd8 <SPI_Pin_Init+0x660>
 8002bbc:	2002      	movs	r0, #2
 8002bbe:	2400      	movs	r4, #0
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	2106      	movs	r1, #6
 8002bc6:	9102      	str	r1, [sp, #8]
 8002bc8:	9201      	str	r2, [sp, #4]
 8002bca:	9300      	str	r3, [sp, #0]
 8002bcc:	4623      	mov	r3, r4
 8002bce:	4602      	mov	r2, r0
 8002bd0:	210b      	movs	r1, #11
 8002bd2:	4865      	ldr	r0, [pc, #404]	@ (8002d68 <SPI_Pin_Init+0x7f0>)
 8002bd4:	f7ff fa74 	bl	80020c0 <GPIO_Pin_Init>
			if(config->mosi_pin == SPI_Configurations.Pin._SPI3_.MOSI3.PB5) GPIO_Pin_Init(GPIOB, 5, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_3);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	795b      	ldrb	r3, [r3, #5]
 8002bdc:	461a      	mov	r2, r3
 8002bde:	2319      	movs	r3, #25
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d10e      	bne.n	8002c02 <SPI_Pin_Init+0x68a>
 8002be4:	2002      	movs	r0, #2
 8002be6:	2400      	movs	r4, #0
 8002be8:	2303      	movs	r3, #3
 8002bea:	2200      	movs	r2, #0
 8002bec:	2106      	movs	r1, #6
 8002bee:	9102      	str	r1, [sp, #8]
 8002bf0:	9201      	str	r2, [sp, #4]
 8002bf2:	9300      	str	r3, [sp, #0]
 8002bf4:	4623      	mov	r3, r4
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	2105      	movs	r1, #5
 8002bfa:	485d      	ldr	r0, [pc, #372]	@ (8002d70 <SPI_Pin_Init+0x7f8>)
 8002bfc:	f7ff fa60 	bl	80020c0 <GPIO_Pin_Init>
 8002c00:	e013      	b.n	8002c2a <SPI_Pin_Init+0x6b2>
			else if(config->mosi_pin == SPI_Configurations.Pin._SPI3_.MOSI3.PC12) GPIO_Pin_Init(GPIOC, 12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_3);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	795b      	ldrb	r3, [r3, #5]
 8002c06:	461a      	mov	r2, r3
 8002c08:	2327      	movs	r3, #39	@ 0x27
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d10d      	bne.n	8002c2a <SPI_Pin_Init+0x6b2>
 8002c0e:	2002      	movs	r0, #2
 8002c10:	2400      	movs	r4, #0
 8002c12:	2303      	movs	r3, #3
 8002c14:	2200      	movs	r2, #0
 8002c16:	2106      	movs	r1, #6
 8002c18:	9102      	str	r1, [sp, #8]
 8002c1a:	9201      	str	r2, [sp, #4]
 8002c1c:	9300      	str	r3, [sp, #0]
 8002c1e:	4623      	mov	r3, r4
 8002c20:	4602      	mov	r2, r0
 8002c22:	210c      	movs	r1, #12
 8002c24:	4850      	ldr	r0, [pc, #320]	@ (8002d68 <SPI_Pin_Init+0x7f0>)
 8002c26:	f7ff fa4b 	bl	80020c0 <GPIO_Pin_Init>
			config->Port -> CR1 &= ~SPI_CR1_BIDIMODE;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c38:	601a      	str	r2, [r3, #0]
 8002c3a:	e0e9      	b.n	8002e10 <SPI_Pin_Init+0x898>
		else if((config->mode == SPI_Configurations.Mode.Half_Duplex_Master) || (config->mode == SPI_Configurations.Mode.TX_Only_Master) || (config->mode == SPI_Configurations.Mode.RX_Only_Slave))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	89db      	ldrh	r3, [r3, #14]
 8002c40:	220d      	movs	r2, #13
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d009      	beq.n	8002c5a <SPI_Pin_Init+0x6e2>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	89db      	ldrh	r3, [r3, #14]
 8002c4a:	2211      	movs	r2, #17
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d004      	beq.n	8002c5a <SPI_Pin_Init+0x6e2>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	89db      	ldrh	r3, [r3, #14]
 8002c54:	2210      	movs	r2, #16
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d162      	bne.n	8002d20 <SPI_Pin_Init+0x7a8>
			if(config->clock_pin == SPI_Configurations.Pin._SPI3_.CLK3.PB3) GPIO_Pin_Init(GPIOB, 3, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_3);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	791b      	ldrb	r3, [r3, #4]
 8002c5e:	461a      	mov	r2, r3
 8002c60:	2317      	movs	r3, #23
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d10e      	bne.n	8002c84 <SPI_Pin_Init+0x70c>
 8002c66:	2002      	movs	r0, #2
 8002c68:	2400      	movs	r4, #0
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	2106      	movs	r1, #6
 8002c70:	9102      	str	r1, [sp, #8]
 8002c72:	9201      	str	r2, [sp, #4]
 8002c74:	9300      	str	r3, [sp, #0]
 8002c76:	4623      	mov	r3, r4
 8002c78:	4602      	mov	r2, r0
 8002c7a:	2103      	movs	r1, #3
 8002c7c:	483c      	ldr	r0, [pc, #240]	@ (8002d70 <SPI_Pin_Init+0x7f8>)
 8002c7e:	f7ff fa1f 	bl	80020c0 <GPIO_Pin_Init>
 8002c82:	e013      	b.n	8002cac <SPI_Pin_Init+0x734>
			else if(config->clock_pin == SPI_Configurations.Pin._SPI3_.CLK3.PC10) GPIO_Pin_Init(GPIOC, 10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_3);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	791b      	ldrb	r3, [r3, #4]
 8002c88:	461a      	mov	r2, r3
 8002c8a:	2325      	movs	r3, #37	@ 0x25
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d10d      	bne.n	8002cac <SPI_Pin_Init+0x734>
 8002c90:	2002      	movs	r0, #2
 8002c92:	2400      	movs	r4, #0
 8002c94:	2303      	movs	r3, #3
 8002c96:	2200      	movs	r2, #0
 8002c98:	2106      	movs	r1, #6
 8002c9a:	9102      	str	r1, [sp, #8]
 8002c9c:	9201      	str	r2, [sp, #4]
 8002c9e:	9300      	str	r3, [sp, #0]
 8002ca0:	4623      	mov	r3, r4
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	210a      	movs	r1, #10
 8002ca6:	4830      	ldr	r0, [pc, #192]	@ (8002d68 <SPI_Pin_Init+0x7f0>)
 8002ca8:	f7ff fa0a 	bl	80020c0 <GPIO_Pin_Init>
			if(config->miso_pin == SPI_Configurations.Pin._SPI3_.MISO3.PB4) GPIO_Pin_Init(GPIOB, 4, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_3);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	799b      	ldrb	r3, [r3, #6]
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	2318      	movs	r3, #24
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d10e      	bne.n	8002cd6 <SPI_Pin_Init+0x75e>
 8002cb8:	2002      	movs	r0, #2
 8002cba:	2400      	movs	r4, #0
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	2106      	movs	r1, #6
 8002cc2:	9102      	str	r1, [sp, #8]
 8002cc4:	9201      	str	r2, [sp, #4]
 8002cc6:	9300      	str	r3, [sp, #0]
 8002cc8:	4623      	mov	r3, r4
 8002cca:	4602      	mov	r2, r0
 8002ccc:	2104      	movs	r1, #4
 8002cce:	4828      	ldr	r0, [pc, #160]	@ (8002d70 <SPI_Pin_Init+0x7f8>)
 8002cd0:	f7ff f9f6 	bl	80020c0 <GPIO_Pin_Init>
 8002cd4:	e013      	b.n	8002cfe <SPI_Pin_Init+0x786>
			else if(config->miso_pin == SPI_Configurations.Pin._SPI3_.MISO3.PC11) GPIO_Pin_Init(GPIOC,11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_3);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	799b      	ldrb	r3, [r3, #6]
 8002cda:	461a      	mov	r2, r3
 8002cdc:	2327      	movs	r3, #39	@ 0x27
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d10d      	bne.n	8002cfe <SPI_Pin_Init+0x786>
 8002ce2:	2002      	movs	r0, #2
 8002ce4:	2400      	movs	r4, #0
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	2200      	movs	r2, #0
 8002cea:	2106      	movs	r1, #6
 8002cec:	9102      	str	r1, [sp, #8]
 8002cee:	9201      	str	r2, [sp, #4]
 8002cf0:	9300      	str	r3, [sp, #0]
 8002cf2:	4623      	mov	r3, r4
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	210b      	movs	r1, #11
 8002cf8:	481b      	ldr	r0, [pc, #108]	@ (8002d68 <SPI_Pin_Init+0x7f0>)
 8002cfa:	f7ff f9e1 	bl	80020c0 <GPIO_Pin_Init>
			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002d0c:	601a      	str	r2, [r3, #0]
			config->Port -> CR1 |= SPI_CR1_BIDIOE;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002d1c:	601a      	str	r2, [r3, #0]
 8002d1e:	e077      	b.n	8002e10 <SPI_Pin_Init+0x898>
		else if((config->mode == SPI_Configurations.Mode.Half_Duplex_Slave) || (config->mode == SPI_Configurations.Mode.RX_Only_Master) || (config->mode == SPI_Configurations.Mode.TX_Only_Slave))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	89db      	ldrh	r3, [r3, #14]
 8002d24:	220e      	movs	r2, #14
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d009      	beq.n	8002d3e <SPI_Pin_Init+0x7c6>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	89db      	ldrh	r3, [r3, #14]
 8002d2e:	220f      	movs	r2, #15
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d004      	beq.n	8002d3e <SPI_Pin_Init+0x7c6>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	89db      	ldrh	r3, [r3, #14]
 8002d38:	2212      	movs	r2, #18
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d168      	bne.n	8002e10 <SPI_Pin_Init+0x898>
			if(config->clock_pin == SPI_Configurations.Pin._SPI3_.CLK3.PB3) GPIO_Pin_Init(GPIOB, 3, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_3);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	791b      	ldrb	r3, [r3, #4]
 8002d42:	461a      	mov	r2, r3
 8002d44:	2317      	movs	r3, #23
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d114      	bne.n	8002d74 <SPI_Pin_Init+0x7fc>
 8002d4a:	2002      	movs	r0, #2
 8002d4c:	2400      	movs	r4, #0
 8002d4e:	2303      	movs	r3, #3
 8002d50:	2200      	movs	r2, #0
 8002d52:	2106      	movs	r1, #6
 8002d54:	9102      	str	r1, [sp, #8]
 8002d56:	9201      	str	r2, [sp, #4]
 8002d58:	9300      	str	r3, [sp, #0]
 8002d5a:	4623      	mov	r3, r4
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	2103      	movs	r1, #3
 8002d60:	4803      	ldr	r0, [pc, #12]	@ (8002d70 <SPI_Pin_Init+0x7f8>)
 8002d62:	f7ff f9ad 	bl	80020c0 <GPIO_Pin_Init>
 8002d66:	e019      	b.n	8002d9c <SPI_Pin_Init+0x824>
 8002d68:	40020800 	.word	0x40020800
 8002d6c:	40003c00 	.word	0x40003c00
 8002d70:	40020400 	.word	0x40020400
			else if(config->clock_pin == SPI_Configurations.Pin._SPI3_.CLK3.PC10) GPIO_Pin_Init(GPIOC, 10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_3);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	791b      	ldrb	r3, [r3, #4]
 8002d78:	461a      	mov	r2, r3
 8002d7a:	2325      	movs	r3, #37	@ 0x25
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d10d      	bne.n	8002d9c <SPI_Pin_Init+0x824>
 8002d80:	2002      	movs	r0, #2
 8002d82:	2400      	movs	r4, #0
 8002d84:	2303      	movs	r3, #3
 8002d86:	2200      	movs	r2, #0
 8002d88:	2106      	movs	r1, #6
 8002d8a:	9102      	str	r1, [sp, #8]
 8002d8c:	9201      	str	r2, [sp, #4]
 8002d8e:	9300      	str	r3, [sp, #0]
 8002d90:	4623      	mov	r3, r4
 8002d92:	4602      	mov	r2, r0
 8002d94:	210a      	movs	r1, #10
 8002d96:	4820      	ldr	r0, [pc, #128]	@ (8002e18 <SPI_Pin_Init+0x8a0>)
 8002d98:	f7ff f992 	bl	80020c0 <GPIO_Pin_Init>
			if(config->mosi_pin == SPI_Configurations.Pin._SPI3_.MOSI3.PB5) GPIO_Pin_Init(GPIOB, 5, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_3);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	795b      	ldrb	r3, [r3, #5]
 8002da0:	461a      	mov	r2, r3
 8002da2:	2319      	movs	r3, #25
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d10e      	bne.n	8002dc6 <SPI_Pin_Init+0x84e>
 8002da8:	2002      	movs	r0, #2
 8002daa:	2400      	movs	r4, #0
 8002dac:	2303      	movs	r3, #3
 8002dae:	2200      	movs	r2, #0
 8002db0:	2106      	movs	r1, #6
 8002db2:	9102      	str	r1, [sp, #8]
 8002db4:	9201      	str	r2, [sp, #4]
 8002db6:	9300      	str	r3, [sp, #0]
 8002db8:	4623      	mov	r3, r4
 8002dba:	4602      	mov	r2, r0
 8002dbc:	2105      	movs	r1, #5
 8002dbe:	4817      	ldr	r0, [pc, #92]	@ (8002e1c <SPI_Pin_Init+0x8a4>)
 8002dc0:	f7ff f97e 	bl	80020c0 <GPIO_Pin_Init>
 8002dc4:	e013      	b.n	8002dee <SPI_Pin_Init+0x876>
			else if(config->mosi_pin == SPI_Configurations.Pin._SPI3_.MOSI3.PC12) GPIO_Pin_Init(GPIOC, 12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_3);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	795b      	ldrb	r3, [r3, #5]
 8002dca:	461a      	mov	r2, r3
 8002dcc:	2327      	movs	r3, #39	@ 0x27
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d10d      	bne.n	8002dee <SPI_Pin_Init+0x876>
 8002dd2:	2002      	movs	r0, #2
 8002dd4:	2400      	movs	r4, #0
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	2200      	movs	r2, #0
 8002dda:	2106      	movs	r1, #6
 8002ddc:	9102      	str	r1, [sp, #8]
 8002dde:	9201      	str	r2, [sp, #4]
 8002de0:	9300      	str	r3, [sp, #0]
 8002de2:	4623      	mov	r3, r4
 8002de4:	4602      	mov	r2, r0
 8002de6:	210c      	movs	r1, #12
 8002de8:	480b      	ldr	r0, [pc, #44]	@ (8002e18 <SPI_Pin_Init+0x8a0>)
 8002dea:	f7ff f969 	bl	80020c0 <GPIO_Pin_Init>
			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002dfc:	601a      	str	r2, [r3, #0]
			config->Port -> CR1 &= ~SPI_CR1_BIDIOE;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002e0c:	601a      	str	r2, [r3, #0]
}
 8002e0e:	e7ff      	b.n	8002e10 <SPI_Pin_Init+0x898>
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd90      	pop	{r4, r7, pc}
 8002e18:	40020800 	.word	0x40020800
 8002e1c:	40020400 	.word	0x40020400

08002e20 <SPI_Init>:
 *
 * @param[in] config Pointer to the SPI configuration structure.
 * @return int8_t Returns 1 on success, -1 on failure.
 */
int8_t SPI_Init(SPI_Config *config)
{
 8002e20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e22:	b087      	sub	sp, #28
 8002e24:	af04      	add	r7, sp, #16
 8002e26:	6078      	str	r0, [r7, #4]
	if(config->type == SPI_Configurations.Type.Master){
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	8b1b      	ldrh	r3, [r3, #24]
 8002e2c:	2232      	movs	r2, #50	@ 0x32
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d110      	bne.n	8002e54 <SPI_Init+0x34>
		GPIO_Pin_Init(config->NSS_Port, config->NSS_Pin, GPIO_Configuration.Mode.General_Purpose_Output, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.Pull_Up, GPIO_Configuration.Alternate_Functions.None);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6898      	ldr	r0, [r3, #8]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	7b19      	ldrb	r1, [r3, #12]
 8002e3a:	2501      	movs	r5, #1
 8002e3c:	2600      	movs	r6, #0
 8002e3e:	2303      	movs	r3, #3
 8002e40:	2201      	movs	r2, #1
 8002e42:	2400      	movs	r4, #0
 8002e44:	9402      	str	r4, [sp, #8]
 8002e46:	9201      	str	r2, [sp, #4]
 8002e48:	9300      	str	r3, [sp, #0]
 8002e4a:	4633      	mov	r3, r6
 8002e4c:	462a      	mov	r2, r5
 8002e4e:	f7ff f937 	bl	80020c0 <GPIO_Pin_Init>
 8002e52:	e014      	b.n	8002e7e <SPI_Init+0x5e>
	}
	else if(config->type == SPI_Configurations.Type.Slave){
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	8b1b      	ldrh	r3, [r3, #24]
 8002e58:	2233      	movs	r2, #51	@ 0x33
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d10f      	bne.n	8002e7e <SPI_Init+0x5e>
		GPIO_Pin_Init(config->NSS_Port, config->NSS_Pin, GPIO_Configuration.Mode.Input, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.Pull_Up, GPIO_Configuration.Alternate_Functions.None);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6898      	ldr	r0, [r3, #8]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	7b19      	ldrb	r1, [r3, #12]
 8002e66:	2500      	movs	r5, #0
 8002e68:	2600      	movs	r6, #0
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	2400      	movs	r4, #0
 8002e70:	9402      	str	r4, [sp, #8]
 8002e72:	9201      	str	r2, [sp, #4]
 8002e74:	9300      	str	r3, [sp, #0]
 8002e76:	4633      	mov	r3, r6
 8002e78:	462a      	mov	r2, r5
 8002e7a:	f7ff f921 	bl	80020c0 <GPIO_Pin_Init>
	}

	SPI_Clock_Enable(config);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f7ff fb40 	bl	8002504 <SPI_Clock_Enable>
	SPI_Pin_Init(config);
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f7ff fb77 	bl	8002578 <SPI_Pin_Init>

	SPI_NSS_High(config);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 fc32 	bl	80036f4 <SPI_NSS_High>

	config -> Port -> CR1 &= ~SPI_CR1_SPE;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e9e:	601a      	str	r2, [r3, #0]



	if((config -> Port == SPI1) || (config -> Port == SPI2) || (config -> Port == SPI3))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a89      	ldr	r2, [pc, #548]	@ (80030cc <SPI_Init+0x2ac>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d00a      	beq.n	8002ec0 <SPI_Init+0xa0>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a88      	ldr	r2, [pc, #544]	@ (80030d0 <SPI_Init+0x2b0>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d005      	beq.n	8002ec0 <SPI_Init+0xa0>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a86      	ldr	r2, [pc, #536]	@ (80030d4 <SPI_Init+0x2b4>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	f040 81e2 	bne.w	8003284 <SPI_Init+0x464>
	{

		config -> Port ->CR1 |= SPI_CR1_SSM | SPI_CR1_SSI;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002ece:	601a      	str	r2, [r3, #0]


		     if(config -> clock_phase == SPI_Configurations.Clock_Phase.Low_0) config-> Port -> CR1 &= ~SPI_CR1_CPHA;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	8b9b      	ldrh	r3, [r3, #28]
 8002ed4:	2217      	movs	r2, #23
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d108      	bne.n	8002eec <SPI_Init+0xcc>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f022 0201 	bic.w	r2, r2, #1
 8002ee8:	601a      	str	r2, [r3, #0]
 8002eea:	e010      	b.n	8002f0e <SPI_Init+0xee>
		else if(config -> clock_phase == SPI_Configurations.Clock_Phase.High_1) config-> Port -> CR1 |= SPI_CR1_CPHA;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	8b9b      	ldrh	r3, [r3, #28]
 8002ef0:	2216      	movs	r2, #22
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d108      	bne.n	8002f08 <SPI_Init+0xe8>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f042 0201 	orr.w	r2, r2, #1
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	e002      	b.n	8002f0e <SPI_Init+0xee>
		else {return -1;}
 8002f08:	f04f 33ff 	mov.w	r3, #4294967295
 8002f0c:	e1be      	b.n	800328c <SPI_Init+0x46c>

		     if(config -> clock_polarity == SPI_Configurations.Clock_Polarity.Low_0) config-> Port -> CR1 &= ~SPI_CR1_CPOL;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	8b5b      	ldrh	r3, [r3, #26]
 8002f12:	2221      	movs	r2, #33	@ 0x21
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d108      	bne.n	8002f2a <SPI_Init+0x10a>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f022 0202 	bic.w	r2, r2, #2
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	e010      	b.n	8002f4c <SPI_Init+0x12c>
		else if(config -> clock_polarity == SPI_Configurations.Clock_Polarity.High_1) config-> Port -> CR1 |= SPI_CR1_CPOL;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	8b5b      	ldrh	r3, [r3, #26]
 8002f2e:	2220      	movs	r2, #32
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d108      	bne.n	8002f46 <SPI_Init+0x126>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f042 0202 	orr.w	r2, r2, #2
 8002f42:	601a      	str	r2, [r3, #0]
 8002f44:	e002      	b.n	8002f4c <SPI_Init+0x12c>
		else {return -1;}
 8002f46:	f04f 33ff 	mov.w	r3, #4294967295
 8002f4a:	e19f      	b.n	800328c <SPI_Init+0x46c>

		     if(config -> crc == SPI_Configurations.CRC_Enable.Disable) config -> Port -> CR1 &= ~SPI_CR1_CRCEN;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	8a1b      	ldrh	r3, [r3, #16]
 8002f50:	2200      	movs	r2, #0
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d108      	bne.n	8002f68 <SPI_Init+0x148>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f64:	601a      	str	r2, [r3, #0]
 8002f66:	e010      	b.n	8002f8a <SPI_Init+0x16a>
		else if(config -> crc == SPI_Configurations.CRC_Enable.Enable) config -> Port -> CR1 |=  SPI_CR1_CRCEN;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	8a1b      	ldrh	r3, [r3, #16]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d108      	bne.n	8002f84 <SPI_Init+0x164>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002f80:	601a      	str	r2, [r3, #0]
 8002f82:	e002      	b.n	8002f8a <SPI_Init+0x16a>
		else {return -1;}
 8002f84:	f04f 33ff 	mov.w	r3, #4294967295
 8002f88:	e180      	b.n	800328c <SPI_Init+0x46c>

		     if(config -> data_format == SPI_Configurations.Data_Format.Bit8) config -> Port -> CR1 &= ~SPI_CR1_DFF;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	8a5b      	ldrh	r3, [r3, #18]
 8002f8e:	220b      	movs	r2, #11
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d108      	bne.n	8002fa6 <SPI_Init+0x186>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002fa2:	601a      	str	r2, [r3, #0]
 8002fa4:	e010      	b.n	8002fc8 <SPI_Init+0x1a8>
		else if(config -> data_format == SPI_Configurations.Data_Format.Bit16) config -> Port -> CR1 |=  SPI_CR1_DFF;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	8a5b      	ldrh	r3, [r3, #18]
 8002faa:	220c      	movs	r2, #12
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d108      	bne.n	8002fc2 <SPI_Init+0x1a2>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002fbe:	601a      	str	r2, [r3, #0]
 8002fc0:	e002      	b.n	8002fc8 <SPI_Init+0x1a8>
		else {return -1;}
 8002fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8002fc6:	e161      	b.n	800328c <SPI_Init+0x46c>

		     if(config -> frame_format == SPI_Configurations.Frame_Format.LSB_First) config -> Port -> CR1 |= SPI_CR1_LSBFIRST;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	8a9b      	ldrh	r3, [r3, #20]
 8002fcc:	2218      	movs	r2, #24
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d108      	bne.n	8002fe4 <SPI_Init+0x1c4>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002fe0:	601a      	str	r2, [r3, #0]
 8002fe2:	e010      	b.n	8003006 <SPI_Init+0x1e6>
		else if(config -> frame_format == SPI_Configurations.Frame_Format.MSB_First) config -> Port -> CR1 &= ~SPI_CR1_LSBFIRST;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	8a9b      	ldrh	r3, [r3, #20]
 8002fe8:	2217      	movs	r2, #23
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d108      	bne.n	8003000 <SPI_Init+0x1e0>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ffc:	601a      	str	r2, [r3, #0]
 8002ffe:	e002      	b.n	8003006 <SPI_Init+0x1e6>
		else {return -1;}
 8003000:	f04f 33ff 	mov.w	r3, #4294967295
 8003004:	e142      	b.n	800328c <SPI_Init+0x46c>

		     if(config->prescaler == SPI_Configurations.Prescaler.CLK_div_2) config -> Port -> CR1 &=   ~SPI_CR1_BR;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	8adb      	ldrh	r3, [r3, #22]
 800300a:	2228      	movs	r2, #40	@ 0x28
 800300c:	4293      	cmp	r3, r2
 800300e:	d108      	bne.n	8003022 <SPI_Init+0x202>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f022 0238 	bic.w	r2, r2, #56	@ 0x38
 800301e:	601a      	str	r2, [r3, #0]
 8003020:	e06b      	b.n	80030fa <SPI_Init+0x2da>
		else if(config->prescaler == SPI_Configurations.Prescaler.CLK_div_4) config -> Port -> CR1 |=    SPI_CR1_BR_0;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	8adb      	ldrh	r3, [r3, #22]
 8003026:	2229      	movs	r2, #41	@ 0x29
 8003028:	4293      	cmp	r3, r2
 800302a:	d108      	bne.n	800303e <SPI_Init+0x21e>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f042 0208 	orr.w	r2, r2, #8
 800303a:	601a      	str	r2, [r3, #0]
 800303c:	e05d      	b.n	80030fa <SPI_Init+0x2da>
		else if(config->prescaler == SPI_Configurations.Prescaler.CLK_div_8) config -> Port -> CR1 |=    SPI_CR1_BR_1;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	8adb      	ldrh	r3, [r3, #22]
 8003042:	222a      	movs	r2, #42	@ 0x2a
 8003044:	4293      	cmp	r3, r2
 8003046:	d108      	bne.n	800305a <SPI_Init+0x23a>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f042 0210 	orr.w	r2, r2, #16
 8003056:	601a      	str	r2, [r3, #0]
 8003058:	e04f      	b.n	80030fa <SPI_Init+0x2da>
		else if(config->prescaler == SPI_Configurations.Prescaler.CLK_div_16) config -> Port -> CR1 |=   SPI_CR1_BR_0 | SPI_CR1_BR_1;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	8adb      	ldrh	r3, [r3, #22]
 800305e:	222b      	movs	r2, #43	@ 0x2b
 8003060:	4293      	cmp	r3, r2
 8003062:	d108      	bne.n	8003076 <SPI_Init+0x256>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f042 0218 	orr.w	r2, r2, #24
 8003072:	601a      	str	r2, [r3, #0]
 8003074:	e041      	b.n	80030fa <SPI_Init+0x2da>
		else if(config->prescaler == SPI_Configurations.Prescaler.CLK_div_32) config -> Port -> CR1 |=   SPI_CR1_BR_2;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	8adb      	ldrh	r3, [r3, #22]
 800307a:	222c      	movs	r2, #44	@ 0x2c
 800307c:	4293      	cmp	r3, r2
 800307e:	d108      	bne.n	8003092 <SPI_Init+0x272>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f042 0220 	orr.w	r2, r2, #32
 800308e:	601a      	str	r2, [r3, #0]
 8003090:	e033      	b.n	80030fa <SPI_Init+0x2da>
		else if(config->prescaler == SPI_Configurations.Prescaler.CLK_div_64) config -> Port -> CR1 |=   SPI_CR1_BR_2 | SPI_CR1_BR_0;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	8adb      	ldrh	r3, [r3, #22]
 8003096:	222d      	movs	r2, #45	@ 0x2d
 8003098:	4293      	cmp	r3, r2
 800309a:	d108      	bne.n	80030ae <SPI_Init+0x28e>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f042 0228 	orr.w	r2, r2, #40	@ 0x28
 80030aa:	601a      	str	r2, [r3, #0]
 80030ac:	e025      	b.n	80030fa <SPI_Init+0x2da>
		else if(config->prescaler == SPI_Configurations.Prescaler.CLK_div_128) config -> Port -> CR1 |=  SPI_CR1_BR_2 | SPI_CR1_BR_1;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	8adb      	ldrh	r3, [r3, #22]
 80030b2:	222e      	movs	r2, #46	@ 0x2e
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d10f      	bne.n	80030d8 <SPI_Init+0x2b8>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 80030c6:	601a      	str	r2, [r3, #0]
 80030c8:	e017      	b.n	80030fa <SPI_Init+0x2da>
 80030ca:	bf00      	nop
 80030cc:	40013000 	.word	0x40013000
 80030d0:	40003800 	.word	0x40003800
 80030d4:	40003c00 	.word	0x40003c00
		else if(config->prescaler == SPI_Configurations.Prescaler.CLK_div_256) config -> Port -> CR1 |=  SPI_CR1_BR_2 | SPI_CR1_BR_1 | SPI_CR1_BR_0;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	8adb      	ldrh	r3, [r3, #22]
 80030dc:	222f      	movs	r2, #47	@ 0x2f
 80030de:	4293      	cmp	r3, r2
 80030e0:	d108      	bne.n	80030f4 <SPI_Init+0x2d4>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f042 0238 	orr.w	r2, r2, #56	@ 0x38
 80030f0:	601a      	str	r2, [r3, #0]
 80030f2:	e002      	b.n	80030fa <SPI_Init+0x2da>
		else {return -1;}
 80030f4:	f04f 33ff 	mov.w	r3, #4294967295
 80030f8:	e0c8      	b.n	800328c <SPI_Init+0x46c>

		     if(config->type == SPI_Configurations.Type.Master) config -> Port -> CR1 |= SPI_CR1_MSTR;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	8b1b      	ldrh	r3, [r3, #24]
 80030fe:	2232      	movs	r2, #50	@ 0x32
 8003100:	4293      	cmp	r3, r2
 8003102:	d108      	bne.n	8003116 <SPI_Init+0x2f6>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f042 0204 	orr.w	r2, r2, #4
 8003112:	601a      	str	r2, [r3, #0]
 8003114:	e010      	b.n	8003138 <SPI_Init+0x318>
		else if(config->type == SPI_Configurations.Type.Slave) config -> Port -> CR1 &= ~SPI_CR1_MSTR;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	8b1b      	ldrh	r3, [r3, #24]
 800311a:	2233      	movs	r2, #51	@ 0x33
 800311c:	4293      	cmp	r3, r2
 800311e:	d108      	bne.n	8003132 <SPI_Init+0x312>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f022 0204 	bic.w	r2, r2, #4
 800312e:	601a      	str	r2, [r3, #0]
 8003130:	e002      	b.n	8003138 <SPI_Init+0x318>
		else {return -1;}
 8003132:	f04f 33ff 	mov.w	r3, #4294967295
 8003136:	e0a9      	b.n	800328c <SPI_Init+0x46c>

		     if(config->interrupt == SPI_Configurations.Interrupts.Disable) config -> Port ->  CR2 &= ~(SPI_CR2_TXEIE | SPI_CR2_RXNEIE | SPI_CR2_ERRIE);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	8bdb      	ldrh	r3, [r3, #30]
 800313c:	2246      	movs	r2, #70	@ 0x46
 800313e:	4293      	cmp	r3, r2
 8003140:	d108      	bne.n	8003154 <SPI_Init+0x334>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	685a      	ldr	r2, [r3, #4]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003150:	605a      	str	r2, [r3, #4]
 8003152:	e02c      	b.n	80031ae <SPI_Init+0x38e>
		else if(config->interrupt == SPI_Configurations.Interrupts.Tx_Buffer_Empty) config -> Port ->  CR2 |= SPI_CR2_TXEIE;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	8bdb      	ldrh	r3, [r3, #30]
 8003158:	2249      	movs	r2, #73	@ 0x49
 800315a:	4293      	cmp	r3, r2
 800315c:	d108      	bne.n	8003170 <SPI_Init+0x350>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800316c:	605a      	str	r2, [r3, #4]
 800316e:	e01e      	b.n	80031ae <SPI_Init+0x38e>
		else if(config->interrupt == SPI_Configurations.Interrupts.RX_Buffer_not_Empty) config -> Port ->  CR2 |= SPI_CR2_RXNEIE ;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	8bdb      	ldrh	r3, [r3, #30]
 8003174:	2248      	movs	r2, #72	@ 0x48
 8003176:	4293      	cmp	r3, r2
 8003178:	d108      	bne.n	800318c <SPI_Init+0x36c>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	685a      	ldr	r2, [r3, #4]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003188:	605a      	str	r2, [r3, #4]
 800318a:	e010      	b.n	80031ae <SPI_Init+0x38e>
		else if(config->interrupt == SPI_Configurations.Interrupts.Error) config -> Port ->  CR2 |=  SPI_CR2_ERRIE;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	8bdb      	ldrh	r3, [r3, #30]
 8003190:	2247      	movs	r2, #71	@ 0x47
 8003192:	4293      	cmp	r3, r2
 8003194:	d108      	bne.n	80031a8 <SPI_Init+0x388>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	685a      	ldr	r2, [r3, #4]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f042 0220 	orr.w	r2, r2, #32
 80031a4:	605a      	str	r2, [r3, #4]
 80031a6:	e002      	b.n	80031ae <SPI_Init+0x38e>
		else { return -1;}
 80031a8:	f04f 33ff 	mov.w	r3, #4294967295
 80031ac:	e06e      	b.n	800328c <SPI_Init+0x46c>




		if((config -> dma & SPI_Configurations.DMA_Type.RX_DMA_Disable) == SPI_Configurations.DMA_Type.RX_DMA_Disable){
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	8c1b      	ldrh	r3, [r3, #32]
 80031b2:	461a      	mov	r2, r3
 80031b4:	2310      	movs	r3, #16
 80031b6:	4013      	ands	r3, r2
 80031b8:	2210      	movs	r2, #16
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d108      	bne.n	80031d0 <SPI_Init+0x3b0>
		    config -> Port -> CR2 &= ~SPI_CR2_RXDMAEN;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	685a      	ldr	r2, [r3, #4]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f022 0201 	bic.w	r2, r2, #1
 80031cc:	605a      	str	r2, [r3, #4]
 80031ce:	e022      	b.n	8003216 <SPI_Init+0x3f6>
		 }
		else if((config -> dma & SPI_Configurations.DMA_Type.RX_DMA_Enable) == SPI_Configurations.DMA_Type.RX_DMA_Enable)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	8c1b      	ldrh	r3, [r3, #32]
 80031d4:	461a      	mov	r2, r3
 80031d6:	2308      	movs	r3, #8
 80031d8:	4013      	ands	r3, r2
 80031da:	2208      	movs	r2, #8
 80031dc:	4293      	cmp	r3, r2
 80031de:	d11a      	bne.n	8003216 <SPI_Init+0x3f6>
		{
//			config -> Port -> CR2 |=  SPI_CR2_RXDMAEN;
//			config -> Port -> CR2 |=  SPI_CR2_TXDMAEN;
			if(config -> Port == SPI1){
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a2b      	ldr	r2, [pc, #172]	@ (8003294 <SPI_Init+0x474>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d102      	bne.n	80031f0 <SPI_Init+0x3d0>
				xDMA1_RX_Init();
 80031ea:	f7ff f903 	bl	80023f4 <xDMA1_RX_Init>
 80031ee:	e012      	b.n	8003216 <SPI_Init+0x3f6>
			}
			else if(config -> Port == SPI2){
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a28      	ldr	r2, [pc, #160]	@ (8003298 <SPI_Init+0x478>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d102      	bne.n	8003200 <SPI_Init+0x3e0>
				xDMA2_RX_Init();
 80031fa:	f7ff f92d 	bl	8002458 <xDMA2_RX_Init>
 80031fe:	e00a      	b.n	8003216 <SPI_Init+0x3f6>
			}
			else if(config -> Port == SPI3){
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a25      	ldr	r2, [pc, #148]	@ (800329c <SPI_Init+0x47c>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d102      	bne.n	8003210 <SPI_Init+0x3f0>
				xDMA3_RX_Init();
 800320a:	f7ff f951 	bl	80024b0 <xDMA3_RX_Init>
 800320e:	e002      	b.n	8003216 <SPI_Init+0x3f6>
			}
			else {return -1;}
 8003210:	f04f 33ff 	mov.w	r3, #4294967295
 8003214:	e03a      	b.n	800328c <SPI_Init+0x46c>
		}

		if((config -> dma & SPI_Configurations.DMA_Type.TX_DMA_Disable) == SPI_Configurations.DMA_Type.TX_DMA_Disable){
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	8c1b      	ldrh	r3, [r3, #32]
 800321a:	461a      	mov	r2, r3
 800321c:	2304      	movs	r3, #4
 800321e:	4013      	ands	r3, r2
 8003220:	2204      	movs	r2, #4
 8003222:	4293      	cmp	r3, r2
 8003224:	d108      	bne.n	8003238 <SPI_Init+0x418>
			config -> Port -> CR2 &= ~SPI_CR2_TXDMAEN;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	685a      	ldr	r2, [r3, #4]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f022 0202 	bic.w	r2, r2, #2
 8003234:	605a      	str	r2, [r3, #4]
		if((config -> dma & SPI_Configurations.DMA_Type.TX_DMA_Disable) == SPI_Configurations.DMA_Type.TX_DMA_Disable){
 8003236:	e028      	b.n	800328a <SPI_Init+0x46a>
		}
		else if((config -> dma & SPI_Configurations.DMA_Type.TX_DMA_Enable) == SPI_Configurations.DMA_Type.TX_DMA_Enable){
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	8c1b      	ldrh	r3, [r3, #32]
 800323c:	461a      	mov	r2, r3
 800323e:	2302      	movs	r3, #2
 8003240:	4013      	ands	r3, r2
 8003242:	2202      	movs	r2, #2
 8003244:	4293      	cmp	r3, r2
 8003246:	d11a      	bne.n	800327e <SPI_Init+0x45e>
//			config -> Port -> CR2 |=  SPI_CR2_TXDMAEN;
			if(config -> Port == SPI1){
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a11      	ldr	r2, [pc, #68]	@ (8003294 <SPI_Init+0x474>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d102      	bne.n	8003258 <SPI_Init+0x438>
				xDMA1_TX_Init();
 8003252:	f7ff f845 	bl	80022e0 <xDMA1_TX_Init>
		if((config -> dma & SPI_Configurations.DMA_Type.TX_DMA_Disable) == SPI_Configurations.DMA_Type.TX_DMA_Disable){
 8003256:	e018      	b.n	800328a <SPI_Init+0x46a>
			}
			else if(config -> Port == SPI2){
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a0e      	ldr	r2, [pc, #56]	@ (8003298 <SPI_Init+0x478>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d102      	bne.n	8003268 <SPI_Init+0x448>
				xDMA2_TX_Init();
 8003262:	f7ff f86f 	bl	8002344 <xDMA2_TX_Init>
		if((config -> dma & SPI_Configurations.DMA_Type.TX_DMA_Disable) == SPI_Configurations.DMA_Type.TX_DMA_Disable){
 8003266:	e010      	b.n	800328a <SPI_Init+0x46a>
			}
			else if(config -> Port == SPI3){
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a0b      	ldr	r2, [pc, #44]	@ (800329c <SPI_Init+0x47c>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d102      	bne.n	8003278 <SPI_Init+0x458>
				xDMA3_TX_Init();
 8003272:	f7ff f893 	bl	800239c <xDMA3_TX_Init>
		if((config -> dma & SPI_Configurations.DMA_Type.TX_DMA_Disable) == SPI_Configurations.DMA_Type.TX_DMA_Disable){
 8003276:	e008      	b.n	800328a <SPI_Init+0x46a>
			}
			else {return -1;}
 8003278:	f04f 33ff 	mov.w	r3, #4294967295
 800327c:	e006      	b.n	800328c <SPI_Init+0x46c>
		}
		else {return -1;}
 800327e:	f04f 33ff 	mov.w	r3, #4294967295
 8003282:	e003      	b.n	800328c <SPI_Init+0x46c>


	}
	else
	{
		return -1;
 8003284:	f04f 33ff 	mov.w	r3, #4294967295
 8003288:	e000      	b.n	800328c <SPI_Init+0x46c>
	}

	return 1;
 800328a:	2301      	movs	r3, #1
}
 800328c:	4618      	mov	r0, r3
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003294:	40013000 	.word	0x40013000
 8003298:	40003800 	.word	0x40003800
 800329c:	40003c00 	.word	0x40003c00

080032a0 <SPI_Enable>:
 * This function enables the SPI peripheral, allowing data transmission and reception.
 *
 * @param[in] config Pointer to the SPI configuration structure.
 */
void SPI_Enable(SPI_Config *config)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
	config->Port -> CR1 |= SPI_CR1_SPE;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80032b6:	601a      	str	r2, [r3, #0]
}
 80032b8:	bf00      	nop
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <SPI_TRX_Byte>:
 * @param[in] config Pointer to the SPI configuration structure.
 * @param[in] tx_data Data to transmit.
 * @return uint16_t Received data.
 */
uint16_t SPI_TRX_Byte(SPI_Config *config,uint16_t tx_data)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b085      	sub	sp, #20
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	460b      	mov	r3, r1
 80032ce:	807b      	strh	r3, [r7, #2]
	volatile uint16_t temp = 0;
 80032d0:	2300      	movs	r3, #0
 80032d2:	81fb      	strh	r3, [r7, #14]
	while (!(config->Port->SR & SPI_SR_TXE));
 80032d4:	bf00      	nop
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f003 0302 	and.w	r3, r3, #2
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d0f8      	beq.n	80032d6 <SPI_TRX_Byte+0x12>
	config->Port -> DR = tx_data;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	887a      	ldrh	r2, [r7, #2]
 80032ea:	60da      	str	r2, [r3, #12]
	while (!(config->Port->SR & SPI_SR_RXNE));
 80032ec:	bf00      	nop
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f003 0301 	and.w	r3, r3, #1
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d0f8      	beq.n	80032ee <SPI_TRX_Byte+0x2a>
	temp = config->Port -> DR;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	b29b      	uxth	r3, r3
 8003304:	81fb      	strh	r3, [r7, #14]
	while (!(config->Port->SR & SPI_SR_TXE));
 8003306:	bf00      	nop
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d0f8      	beq.n	8003308 <SPI_TRX_Byte+0x44>
	while (config->Port->SR & SPI_SR_BSY);
 8003316:	bf00      	nop
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003322:	2b00      	cmp	r3, #0
 8003324:	d1f8      	bne.n	8003318 <SPI_TRX_Byte+0x54>
	return temp;
 8003326:	89fb      	ldrh	r3, [r7, #14]
 8003328:	b29b      	uxth	r3, r3
}
 800332a:	4618      	mov	r0, r3
 800332c:	3714      	adds	r7, #20
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
	...

08003338 <SPI_TRX_Buffer_8Bit>:
 * @param[in] tx_length Length of the transmit buffer.
 * @param[in] rx_length Length of the receive buffer.
 * @return int8_t Returns 1 on success, -1 on failure.
 */
int8_t SPI_TRX_Buffer_8Bit(SPI_Config *config, uint8_t *tx_buffer,uint8_t *rx_buffer, uint16_t tx_length, uint16_t rx_length)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b086      	sub	sp, #24
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	607a      	str	r2, [r7, #4]
 8003344:	807b      	strh	r3, [r7, #2]

	if((config->dma & SPI_Configurations.DMA_Type.RX_DMA_Enable) || (config->dma & SPI_Configurations.DMA_Type.TX_DMA_Enable))
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	8c1b      	ldrh	r3, [r3, #32]
 800334a:	461a      	mov	r2, r3
 800334c:	2308      	movs	r3, #8
 800334e:	4013      	ands	r3, r2
 8003350:	2b00      	cmp	r3, #0
 8003352:	d107      	bne.n	8003364 <SPI_TRX_Buffer_8Bit+0x2c>
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	8c1b      	ldrh	r3, [r3, #32]
 8003358:	461a      	mov	r2, r3
 800335a:	2302      	movs	r3, #2
 800335c:	4013      	ands	r3, r2
 800335e:	2b00      	cmp	r3, #0
 8003360:	f000 81a3 	beq.w	80036aa <SPI_TRX_Buffer_8Bit+0x372>
	{
		if(config->Port == SPI1)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a90      	ldr	r2, [pc, #576]	@ (80035ac <SPI_TRX_Buffer_8Bit+0x274>)
 800336a:	4293      	cmp	r3, r2
 800336c:	f040 80b0 	bne.w	80034d0 <SPI_TRX_Buffer_8Bit+0x198>
		{
			xDMA1_TX.memory_address = (uint32_t)&tx_buffer[0];
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	4a8f      	ldr	r2, [pc, #572]	@ (80035b0 <SPI_TRX_Buffer_8Bit+0x278>)
 8003374:	6313      	str	r3, [r2, #48]	@ 0x30
			if(config->data_format == SPI_Configurations.Data_Format.Bit8) xDMA1_TX.memory_data_size = DMA_Configuration.Memory_Data_Size.byte;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	8a5b      	ldrh	r3, [r3, #18]
 800337a:	220b      	movs	r2, #11
 800337c:	4293      	cmp	r3, r2
 800337e:	d103      	bne.n	8003388 <SPI_TRX_Buffer_8Bit+0x50>
 8003380:	2200      	movs	r2, #0
 8003382:	4b8b      	ldr	r3, [pc, #556]	@ (80035b0 <SPI_TRX_Buffer_8Bit+0x278>)
 8003384:	629a      	str	r2, [r3, #40]	@ 0x28
 8003386:	e008      	b.n	800339a <SPI_TRX_Buffer_8Bit+0x62>
			else if(config->data_format == SPI_Configurations.Data_Format.Bit16) xDMA1_TX.memory_data_size = DMA_Configuration.Memory_Data_Size.half_word;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	8a5b      	ldrh	r3, [r3, #18]
 800338c:	220c      	movs	r2, #12
 800338e:	4293      	cmp	r3, r2
 8003390:	d103      	bne.n	800339a <SPI_TRX_Buffer_8Bit+0x62>
 8003392:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003396:	4b86      	ldr	r3, [pc, #536]	@ (80035b0 <SPI_TRX_Buffer_8Bit+0x278>)
 8003398:	629a      	str	r2, [r3, #40]	@ 0x28

			xDMA1_TX.peripheral_address = (uint32_t)&config->Port->DR;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	330c      	adds	r3, #12
 80033a0:	461a      	mov	r2, r3
 80033a2:	4b83      	ldr	r3, [pc, #524]	@ (80035b0 <SPI_TRX_Buffer_8Bit+0x278>)
 80033a4:	62da      	str	r2, [r3, #44]	@ 0x2c
			if(config->data_format == SPI_Configurations.Data_Format.Bit8) xDMA1_TX.peripheral_data_size = DMA_Configuration.Peripheral_Data_Size.byte;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	8a5b      	ldrh	r3, [r3, #18]
 80033aa:	220b      	movs	r2, #11
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d103      	bne.n	80033b8 <SPI_TRX_Buffer_8Bit+0x80>
 80033b0:	2200      	movs	r2, #0
 80033b2:	4b7f      	ldr	r3, [pc, #508]	@ (80035b0 <SPI_TRX_Buffer_8Bit+0x278>)
 80033b4:	625a      	str	r2, [r3, #36]	@ 0x24
 80033b6:	e008      	b.n	80033ca <SPI_TRX_Buffer_8Bit+0x92>
			else if(config->data_format == SPI_Configurations.Data_Format.Bit16) xDMA1_TX.peripheral_data_size = DMA_Configuration.Peripheral_Data_Size.half_word;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	8a5b      	ldrh	r3, [r3, #18]
 80033bc:	220c      	movs	r2, #12
 80033be:	4293      	cmp	r3, r2
 80033c0:	d103      	bne.n	80033ca <SPI_TRX_Buffer_8Bit+0x92>
 80033c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80033c6:	4b7a      	ldr	r3, [pc, #488]	@ (80035b0 <SPI_TRX_Buffer_8Bit+0x278>)
 80033c8:	625a      	str	r2, [r3, #36]	@ 0x24
			xDMA1_TX.buffer_length = tx_length;
 80033ca:	4a79      	ldr	r2, [pc, #484]	@ (80035b0 <SPI_TRX_Buffer_8Bit+0x278>)
 80033cc:	887b      	ldrh	r3, [r7, #2]
 80033ce:	8693      	strh	r3, [r2, #52]	@ 0x34
			xDMA1_TX.memory_pointer_increment = DMA_Configuration.Memory_Pointer_Increment.Enable;
 80033d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80033d4:	b29a      	uxth	r2, r3
 80033d6:	4b76      	ldr	r3, [pc, #472]	@ (80035b0 <SPI_TRX_Buffer_8Bit+0x278>)
 80033d8:	841a      	strh	r2, [r3, #32]
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

			if(rx_buffer)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d02f      	beq.n	8003440 <SPI_TRX_Buffer_8Bit+0x108>
			{
				xDMA1_RX.memory_address = (uint32_t)&rx_buffer[0];
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a74      	ldr	r2, [pc, #464]	@ (80035b4 <SPI_TRX_Buffer_8Bit+0x27c>)
 80033e4:	6313      	str	r3, [r2, #48]	@ 0x30
				if(config->data_format == SPI_Configurations.Data_Format.Bit8) xDMA1_RX.memory_data_size = DMA_Configuration.Memory_Data_Size.byte;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	8a5b      	ldrh	r3, [r3, #18]
 80033ea:	220b      	movs	r2, #11
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d103      	bne.n	80033f8 <SPI_TRX_Buffer_8Bit+0xc0>
 80033f0:	2200      	movs	r2, #0
 80033f2:	4b70      	ldr	r3, [pc, #448]	@ (80035b4 <SPI_TRX_Buffer_8Bit+0x27c>)
 80033f4:	629a      	str	r2, [r3, #40]	@ 0x28
 80033f6:	e008      	b.n	800340a <SPI_TRX_Buffer_8Bit+0xd2>
				else if(config->data_format == SPI_Configurations.Data_Format.Bit16) xDMA1_RX.memory_data_size = DMA_Configuration.Memory_Data_Size.half_word;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	8a5b      	ldrh	r3, [r3, #18]
 80033fc:	220c      	movs	r2, #12
 80033fe:	4293      	cmp	r3, r2
 8003400:	d103      	bne.n	800340a <SPI_TRX_Buffer_8Bit+0xd2>
 8003402:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003406:	4b6b      	ldr	r3, [pc, #428]	@ (80035b4 <SPI_TRX_Buffer_8Bit+0x27c>)
 8003408:	629a      	str	r2, [r3, #40]	@ 0x28
				xDMA1_RX.peripheral_address = (uint32_t)&config->Port->DR;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	330c      	adds	r3, #12
 8003410:	461a      	mov	r2, r3
 8003412:	4b68      	ldr	r3, [pc, #416]	@ (80035b4 <SPI_TRX_Buffer_8Bit+0x27c>)
 8003414:	62da      	str	r2, [r3, #44]	@ 0x2c
				if(config->data_format == SPI_Configurations.Data_Format.Bit8) xDMA1_RX.peripheral_data_size = DMA_Configuration.Peripheral_Data_Size.byte;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	8a5b      	ldrh	r3, [r3, #18]
 800341a:	220b      	movs	r2, #11
 800341c:	4293      	cmp	r3, r2
 800341e:	d103      	bne.n	8003428 <SPI_TRX_Buffer_8Bit+0xf0>
 8003420:	2200      	movs	r2, #0
 8003422:	4b64      	ldr	r3, [pc, #400]	@ (80035b4 <SPI_TRX_Buffer_8Bit+0x27c>)
 8003424:	625a      	str	r2, [r3, #36]	@ 0x24
 8003426:	e008      	b.n	800343a <SPI_TRX_Buffer_8Bit+0x102>
				else if(config->data_format == SPI_Configurations.Data_Format.Bit16) xDMA1_RX.peripheral_data_size = DMA_Configuration.Peripheral_Data_Size.half_word;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	8a5b      	ldrh	r3, [r3, #18]
 800342c:	220c      	movs	r2, #12
 800342e:	4293      	cmp	r3, r2
 8003430:	d103      	bne.n	800343a <SPI_TRX_Buffer_8Bit+0x102>
 8003432:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003436:	4b5f      	ldr	r3, [pc, #380]	@ (80035b4 <SPI_TRX_Buffer_8Bit+0x27c>)
 8003438:	625a      	str	r2, [r3, #36]	@ 0x24
				xDMA1_RX.buffer_length = rx_length;
 800343a:	4a5e      	ldr	r2, [pc, #376]	@ (80035b4 <SPI_TRX_Buffer_8Bit+0x27c>)
 800343c:	8c3b      	ldrh	r3, [r7, #32]
 800343e:	8693      	strh	r3, [r2, #52]	@ 0x34
			}


			DMA_Set_Target(&xDMA1_TX);
 8003440:	485b      	ldr	r0, [pc, #364]	@ (80035b0 <SPI_TRX_Buffer_8Bit+0x278>)
 8003442:	f7fe fbdd 	bl	8001c00 <DMA_Set_Target>
			if(rx_buffer)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d002      	beq.n	8003452 <SPI_TRX_Buffer_8Bit+0x11a>
			{
				DMA_Set_Target(&xDMA1_RX);
 800344c:	4859      	ldr	r0, [pc, #356]	@ (80035b4 <SPI_TRX_Buffer_8Bit+0x27c>)
 800344e:	f7fe fbd7 	bl	8001c00 <DMA_Set_Target>
			}

			DMA_Set_Trigger(&xDMA1_TX);
 8003452:	4857      	ldr	r0, [pc, #348]	@ (80035b0 <SPI_TRX_Buffer_8Bit+0x278>)
 8003454:	f7fe fc34 	bl	8001cc0 <DMA_Set_Trigger>
			if(rx_buffer)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d002      	beq.n	8003464 <SPI_TRX_Buffer_8Bit+0x12c>
			{
				DMA_Set_Trigger(&xDMA1_RX);
 800345e:	4855      	ldr	r0, [pc, #340]	@ (80035b4 <SPI_TRX_Buffer_8Bit+0x27c>)
 8003460:	f7fe fc2e 	bl	8001cc0 <DMA_Set_Trigger>
			}



			config -> Port -> CR2 |=  SPI_CR2_TXDMAEN;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	685a      	ldr	r2, [r3, #4]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f042 0202 	orr.w	r2, r2, #2
 8003472:	605a      	str	r2, [r3, #4]

			if(rx_buffer)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d007      	beq.n	800348a <SPI_TRX_Buffer_8Bit+0x152>
			{
				config -> Port -> CR2 |=  SPI_CR2_RXDMAEN;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	685a      	ldr	r2, [r3, #4]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f042 0201 	orr.w	r2, r2, #1
 8003488:	605a      	str	r2, [r3, #4]
			}

			while(!TX_Complete){}
 800348a:	bf00      	nop
 800348c:	4b4a      	ldr	r3, [pc, #296]	@ (80035b8 <SPI_TRX_Buffer_8Bit+0x280>)
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	b2db      	uxtb	r3, r3
 8003492:	f083 0301 	eor.w	r3, r3, #1
 8003496:	b2db      	uxtb	r3, r3
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1f7      	bne.n	800348c <SPI_TRX_Buffer_8Bit+0x154>
			if(rx_buffer)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00b      	beq.n	80034ba <SPI_TRX_Buffer_8Bit+0x182>
			{
				while(!RX_Complete){}
 80034a2:	bf00      	nop
 80034a4:	4b45      	ldr	r3, [pc, #276]	@ (80035bc <SPI_TRX_Buffer_8Bit+0x284>)
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	f083 0301 	eor.w	r3, r3, #1
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d1f7      	bne.n	80034a4 <SPI_TRX_Buffer_8Bit+0x16c>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80034b4:	f3bf 8f4f 	dsb	sy
}
 80034b8:	bf00      	nop
				__DSB();
			}
			TX_Complete = 0;
 80034ba:	4b3f      	ldr	r3, [pc, #252]	@ (80035b8 <SPI_TRX_Buffer_8Bit+0x280>)
 80034bc:	2200      	movs	r2, #0
 80034be:	701a      	strb	r2, [r3, #0]
			RX_Complete = 0;
 80034c0:	4b3e      	ldr	r3, [pc, #248]	@ (80035bc <SPI_TRX_Buffer_8Bit+0x284>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	701a      	strb	r2, [r3, #0]
			Delay_us(1);
 80034c6:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80034ca:	f7fe fea1 	bl	8002210 <Delay_us>
		if(config->Port == SPI1)
 80034ce:	e105      	b.n	80036dc <SPI_TRX_Buffer_8Bit+0x3a4>

		}
		else if(config->Port == SPI2)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a3a      	ldr	r2, [pc, #232]	@ (80035c0 <SPI_TRX_Buffer_8Bit+0x288>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d178      	bne.n	80035cc <SPI_TRX_Buffer_8Bit+0x294>
		{
			xDMA2_TX.memory_address = (uint32_t)&tx_buffer[0];
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	4a39      	ldr	r2, [pc, #228]	@ (80035c4 <SPI_TRX_Buffer_8Bit+0x28c>)
 80034de:	6313      	str	r3, [r2, #48]	@ 0x30
			if(config->data_format == SPI_Configurations.Data_Format.Bit8) xDMA2_TX.memory_data_size = DMA_Configuration.Memory_Data_Size.byte;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	8a5b      	ldrh	r3, [r3, #18]
 80034e4:	220b      	movs	r2, #11
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d103      	bne.n	80034f2 <SPI_TRX_Buffer_8Bit+0x1ba>
 80034ea:	2200      	movs	r2, #0
 80034ec:	4b35      	ldr	r3, [pc, #212]	@ (80035c4 <SPI_TRX_Buffer_8Bit+0x28c>)
 80034ee:	629a      	str	r2, [r3, #40]	@ 0x28
 80034f0:	e008      	b.n	8003504 <SPI_TRX_Buffer_8Bit+0x1cc>
			else if(config->data_format == SPI_Configurations.Data_Format.Bit16) xDMA2_TX.memory_data_size = DMA_Configuration.Peripheral_Data_Size.half_word;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	8a5b      	ldrh	r3, [r3, #18]
 80034f6:	220c      	movs	r2, #12
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d103      	bne.n	8003504 <SPI_TRX_Buffer_8Bit+0x1cc>
 80034fc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003500:	4b30      	ldr	r3, [pc, #192]	@ (80035c4 <SPI_TRX_Buffer_8Bit+0x28c>)
 8003502:	629a      	str	r2, [r3, #40]	@ 0x28

			xDMA2_TX.peripheral_address = (uint32_t)&config->Port->DR;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	330c      	adds	r3, #12
 800350a:	461a      	mov	r2, r3
 800350c:	4b2d      	ldr	r3, [pc, #180]	@ (80035c4 <SPI_TRX_Buffer_8Bit+0x28c>)
 800350e:	62da      	str	r2, [r3, #44]	@ 0x2c
			if(config->data_format == SPI_Configurations.Data_Format.Bit8) xDMA2_TX.peripheral_data_size = DMA_Configuration.Memory_Data_Size.byte;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	8a5b      	ldrh	r3, [r3, #18]
 8003514:	220b      	movs	r2, #11
 8003516:	4293      	cmp	r3, r2
 8003518:	d103      	bne.n	8003522 <SPI_TRX_Buffer_8Bit+0x1ea>
 800351a:	2200      	movs	r2, #0
 800351c:	4b29      	ldr	r3, [pc, #164]	@ (80035c4 <SPI_TRX_Buffer_8Bit+0x28c>)
 800351e:	625a      	str	r2, [r3, #36]	@ 0x24
 8003520:	e008      	b.n	8003534 <SPI_TRX_Buffer_8Bit+0x1fc>
			else if(config->data_format == SPI_Configurations.Data_Format.Bit16) xDMA2_TX.peripheral_data_size = DMA_Configuration.Peripheral_Data_Size.half_word;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	8a5b      	ldrh	r3, [r3, #18]
 8003526:	220c      	movs	r2, #12
 8003528:	4293      	cmp	r3, r2
 800352a:	d103      	bne.n	8003534 <SPI_TRX_Buffer_8Bit+0x1fc>
 800352c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003530:	4b24      	ldr	r3, [pc, #144]	@ (80035c4 <SPI_TRX_Buffer_8Bit+0x28c>)
 8003532:	625a      	str	r2, [r3, #36]	@ 0x24
			xDMA2_RX.buffer_length = tx_length + 2;
 8003534:	887b      	ldrh	r3, [r7, #2]
 8003536:	3302      	adds	r3, #2
 8003538:	b29a      	uxth	r2, r3
 800353a:	4b23      	ldr	r3, [pc, #140]	@ (80035c8 <SPI_TRX_Buffer_8Bit+0x290>)
 800353c:	869a      	strh	r2, [r3, #52]	@ 0x34

			xDMA2_RX.memory_address = (uint32_t)&rx_buffer[0];
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a21      	ldr	r2, [pc, #132]	@ (80035c8 <SPI_TRX_Buffer_8Bit+0x290>)
 8003542:	6313      	str	r3, [r2, #48]	@ 0x30
			if(config->data_format == SPI_Configurations.Data_Format.Bit8) xDMA2_TX.memory_data_size = DMA_Configuration.Memory_Data_Size.byte;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	8a5b      	ldrh	r3, [r3, #18]
 8003548:	220b      	movs	r2, #11
 800354a:	4293      	cmp	r3, r2
 800354c:	d103      	bne.n	8003556 <SPI_TRX_Buffer_8Bit+0x21e>
 800354e:	2200      	movs	r2, #0
 8003550:	4b1c      	ldr	r3, [pc, #112]	@ (80035c4 <SPI_TRX_Buffer_8Bit+0x28c>)
 8003552:	629a      	str	r2, [r3, #40]	@ 0x28
 8003554:	e008      	b.n	8003568 <SPI_TRX_Buffer_8Bit+0x230>
			else if(config->data_format == SPI_Configurations.Data_Format.Bit16) xDMA2_TX.memory_data_size = DMA_Configuration.Peripheral_Data_Size.half_word;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	8a5b      	ldrh	r3, [r3, #18]
 800355a:	220c      	movs	r2, #12
 800355c:	4293      	cmp	r3, r2
 800355e:	d103      	bne.n	8003568 <SPI_TRX_Buffer_8Bit+0x230>
 8003560:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003564:	4b17      	ldr	r3, [pc, #92]	@ (80035c4 <SPI_TRX_Buffer_8Bit+0x28c>)
 8003566:	629a      	str	r2, [r3, #40]	@ 0x28

			xDMA2_RX.peripheral_address = (uint32_t)&config->Port->DR;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	330c      	adds	r3, #12
 800356e:	461a      	mov	r2, r3
 8003570:	4b15      	ldr	r3, [pc, #84]	@ (80035c8 <SPI_TRX_Buffer_8Bit+0x290>)
 8003572:	62da      	str	r2, [r3, #44]	@ 0x2c
			if(config->data_format == SPI_Configurations.Data_Format.Bit8) xDMA2_TX.peripheral_data_size = DMA_Configuration.Memory_Data_Size.byte;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	8a5b      	ldrh	r3, [r3, #18]
 8003578:	220b      	movs	r2, #11
 800357a:	4293      	cmp	r3, r2
 800357c:	d103      	bne.n	8003586 <SPI_TRX_Buffer_8Bit+0x24e>
 800357e:	2200      	movs	r2, #0
 8003580:	4b10      	ldr	r3, [pc, #64]	@ (80035c4 <SPI_TRX_Buffer_8Bit+0x28c>)
 8003582:	625a      	str	r2, [r3, #36]	@ 0x24
 8003584:	e008      	b.n	8003598 <SPI_TRX_Buffer_8Bit+0x260>
			else if(config->data_format == SPI_Configurations.Data_Format.Bit16) xDMA2_TX.peripheral_data_size = DMA_Configuration.Peripheral_Data_Size.half_word;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	8a5b      	ldrh	r3, [r3, #18]
 800358a:	220c      	movs	r2, #12
 800358c:	4293      	cmp	r3, r2
 800358e:	d103      	bne.n	8003598 <SPI_TRX_Buffer_8Bit+0x260>
 8003590:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003594:	4b0b      	ldr	r3, [pc, #44]	@ (80035c4 <SPI_TRX_Buffer_8Bit+0x28c>)
 8003596:	625a      	str	r2, [r3, #36]	@ 0x24
			xDMA2_RX.buffer_length = rx_length;
 8003598:	4a0b      	ldr	r2, [pc, #44]	@ (80035c8 <SPI_TRX_Buffer_8Bit+0x290>)
 800359a:	8c3b      	ldrh	r3, [r7, #32]
 800359c:	8693      	strh	r3, [r2, #52]	@ 0x34

			DMA_Set_Target(&xDMA2_TX);
 800359e:	4809      	ldr	r0, [pc, #36]	@ (80035c4 <SPI_TRX_Buffer_8Bit+0x28c>)
 80035a0:	f7fe fb2e 	bl	8001c00 <DMA_Set_Target>
//			DMA_Set_Target(&xDMA2_RX);
			DMA_Set_Trigger(&xDMA2_TX);
 80035a4:	4807      	ldr	r0, [pc, #28]	@ (80035c4 <SPI_TRX_Buffer_8Bit+0x28c>)
 80035a6:	f7fe fb8b 	bl	8001cc0 <DMA_Set_Trigger>
		if(config->Port == SPI1)
 80035aa:	e097      	b.n	80036dc <SPI_TRX_Buffer_8Bit+0x3a4>
 80035ac:	40013000 	.word	0x40013000
 80035b0:	200000b0 	.word	0x200000b0
 80035b4:	20000108 	.word	0x20000108
 80035b8:	200000ac 	.word	0x200000ac
 80035bc:	200000ad 	.word	0x200000ad
 80035c0:	40003800 	.word	0x40003800
 80035c4:	20000160 	.word	0x20000160
 80035c8:	200001b8 	.word	0x200001b8

//			while((SPI2_TX_DMA_Flag.Transfer_Complete_Flag == false)){}
//			SPI2_TX_DMA_Flag.Transfer_Complete_Flag = false;

		}
		else if(config->Port == SPI3)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a45      	ldr	r2, [pc, #276]	@ (80036e8 <SPI_TRX_Buffer_8Bit+0x3b0>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d166      	bne.n	80036a4 <SPI_TRX_Buffer_8Bit+0x36c>
		{
			xDMA3_TX.memory_address = (uint32_t)&tx_buffer[0];
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	4a44      	ldr	r2, [pc, #272]	@ (80036ec <SPI_TRX_Buffer_8Bit+0x3b4>)
 80035da:	6313      	str	r3, [r2, #48]	@ 0x30
			if(config->data_format == SPI_Configurations.Data_Format.Bit8) xDMA3_TX.memory_data_size = DMA_Configuration.Memory_Data_Size.byte;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	8a5b      	ldrh	r3, [r3, #18]
 80035e0:	220b      	movs	r2, #11
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d103      	bne.n	80035ee <SPI_TRX_Buffer_8Bit+0x2b6>
 80035e6:	2200      	movs	r2, #0
 80035e8:	4b40      	ldr	r3, [pc, #256]	@ (80036ec <SPI_TRX_Buffer_8Bit+0x3b4>)
 80035ea:	629a      	str	r2, [r3, #40]	@ 0x28
 80035ec:	e008      	b.n	8003600 <SPI_TRX_Buffer_8Bit+0x2c8>
			else if(config->data_format == SPI_Configurations.Data_Format.Bit16) xDMA3_TX.memory_data_size = DMA_Configuration.Peripheral_Data_Size.half_word;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	8a5b      	ldrh	r3, [r3, #18]
 80035f2:	220c      	movs	r2, #12
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d103      	bne.n	8003600 <SPI_TRX_Buffer_8Bit+0x2c8>
 80035f8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80035fc:	4b3b      	ldr	r3, [pc, #236]	@ (80036ec <SPI_TRX_Buffer_8Bit+0x3b4>)
 80035fe:	629a      	str	r2, [r3, #40]	@ 0x28

			xDMA3_TX.peripheral_address = (uint32_t)&config->Port->DR;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	330c      	adds	r3, #12
 8003606:	461a      	mov	r2, r3
 8003608:	4b38      	ldr	r3, [pc, #224]	@ (80036ec <SPI_TRX_Buffer_8Bit+0x3b4>)
 800360a:	62da      	str	r2, [r3, #44]	@ 0x2c
			if(config->data_format == SPI_Configurations.Data_Format.Bit8) xDMA3_TX.peripheral_data_size = DMA_Configuration.Memory_Data_Size.byte;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	8a5b      	ldrh	r3, [r3, #18]
 8003610:	220b      	movs	r2, #11
 8003612:	4293      	cmp	r3, r2
 8003614:	d103      	bne.n	800361e <SPI_TRX_Buffer_8Bit+0x2e6>
 8003616:	2200      	movs	r2, #0
 8003618:	4b34      	ldr	r3, [pc, #208]	@ (80036ec <SPI_TRX_Buffer_8Bit+0x3b4>)
 800361a:	625a      	str	r2, [r3, #36]	@ 0x24
 800361c:	e008      	b.n	8003630 <SPI_TRX_Buffer_8Bit+0x2f8>
			else if(config->data_format == SPI_Configurations.Data_Format.Bit16) xDMA3_TX.peripheral_data_size = DMA_Configuration.Peripheral_Data_Size.half_word;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	8a5b      	ldrh	r3, [r3, #18]
 8003622:	220c      	movs	r2, #12
 8003624:	4293      	cmp	r3, r2
 8003626:	d103      	bne.n	8003630 <SPI_TRX_Buffer_8Bit+0x2f8>
 8003628:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800362c:	4b2f      	ldr	r3, [pc, #188]	@ (80036ec <SPI_TRX_Buffer_8Bit+0x3b4>)
 800362e:	625a      	str	r2, [r3, #36]	@ 0x24
			xDMA3_RX.buffer_length = tx_length;
 8003630:	4a2f      	ldr	r2, [pc, #188]	@ (80036f0 <SPI_TRX_Buffer_8Bit+0x3b8>)
 8003632:	887b      	ldrh	r3, [r7, #2]
 8003634:	8693      	strh	r3, [r2, #52]	@ 0x34

			xDMA3_RX.memory_address = (uint32_t)&rx_buffer[0];
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a2d      	ldr	r2, [pc, #180]	@ (80036f0 <SPI_TRX_Buffer_8Bit+0x3b8>)
 800363a:	6313      	str	r3, [r2, #48]	@ 0x30
			if(config->data_format == SPI_Configurations.Data_Format.Bit8) xDMA3_TX.memory_data_size = DMA_Configuration.Memory_Data_Size.byte;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	8a5b      	ldrh	r3, [r3, #18]
 8003640:	220b      	movs	r2, #11
 8003642:	4293      	cmp	r3, r2
 8003644:	d103      	bne.n	800364e <SPI_TRX_Buffer_8Bit+0x316>
 8003646:	2200      	movs	r2, #0
 8003648:	4b28      	ldr	r3, [pc, #160]	@ (80036ec <SPI_TRX_Buffer_8Bit+0x3b4>)
 800364a:	629a      	str	r2, [r3, #40]	@ 0x28
 800364c:	e008      	b.n	8003660 <SPI_TRX_Buffer_8Bit+0x328>
			else if(config->data_format == SPI_Configurations.Data_Format.Bit16) xDMA3_TX.memory_data_size = DMA_Configuration.Peripheral_Data_Size.half_word;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	8a5b      	ldrh	r3, [r3, #18]
 8003652:	220c      	movs	r2, #12
 8003654:	4293      	cmp	r3, r2
 8003656:	d103      	bne.n	8003660 <SPI_TRX_Buffer_8Bit+0x328>
 8003658:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800365c:	4b23      	ldr	r3, [pc, #140]	@ (80036ec <SPI_TRX_Buffer_8Bit+0x3b4>)
 800365e:	629a      	str	r2, [r3, #40]	@ 0x28

			xDMA3_RX.peripheral_address = (uint32_t)&config->Port->DR;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	330c      	adds	r3, #12
 8003666:	461a      	mov	r2, r3
 8003668:	4b21      	ldr	r3, [pc, #132]	@ (80036f0 <SPI_TRX_Buffer_8Bit+0x3b8>)
 800366a:	62da      	str	r2, [r3, #44]	@ 0x2c
			if(config->data_format == SPI_Configurations.Data_Format.Bit8) xDMA3_TX.peripheral_data_size = DMA_Configuration.Memory_Data_Size.byte;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	8a5b      	ldrh	r3, [r3, #18]
 8003670:	220b      	movs	r2, #11
 8003672:	4293      	cmp	r3, r2
 8003674:	d103      	bne.n	800367e <SPI_TRX_Buffer_8Bit+0x346>
 8003676:	2200      	movs	r2, #0
 8003678:	4b1c      	ldr	r3, [pc, #112]	@ (80036ec <SPI_TRX_Buffer_8Bit+0x3b4>)
 800367a:	625a      	str	r2, [r3, #36]	@ 0x24
 800367c:	e008      	b.n	8003690 <SPI_TRX_Buffer_8Bit+0x358>
			else if(config->data_format == SPI_Configurations.Data_Format.Bit16) xDMA3_TX.peripheral_data_size = DMA_Configuration.Peripheral_Data_Size.half_word;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	8a5b      	ldrh	r3, [r3, #18]
 8003682:	220c      	movs	r2, #12
 8003684:	4293      	cmp	r3, r2
 8003686:	d103      	bne.n	8003690 <SPI_TRX_Buffer_8Bit+0x358>
 8003688:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800368c:	4b17      	ldr	r3, [pc, #92]	@ (80036ec <SPI_TRX_Buffer_8Bit+0x3b4>)
 800368e:	625a      	str	r2, [r3, #36]	@ 0x24
			xDMA3_RX.buffer_length = rx_length;
 8003690:	4a17      	ldr	r2, [pc, #92]	@ (80036f0 <SPI_TRX_Buffer_8Bit+0x3b8>)
 8003692:	8c3b      	ldrh	r3, [r7, #32]
 8003694:	8693      	strh	r3, [r2, #52]	@ 0x34

			DMA_Set_Target(&xDMA3_TX);
 8003696:	4815      	ldr	r0, [pc, #84]	@ (80036ec <SPI_TRX_Buffer_8Bit+0x3b4>)
 8003698:	f7fe fab2 	bl	8001c00 <DMA_Set_Target>
//			DMA_Set_Target(&xDMA3_RX);
			DMA_Set_Trigger(&xDMA3_TX);
 800369c:	4813      	ldr	r0, [pc, #76]	@ (80036ec <SPI_TRX_Buffer_8Bit+0x3b4>)
 800369e:	f7fe fb0f 	bl	8001cc0 <DMA_Set_Trigger>
		if(config->Port == SPI1)
 80036a2:	e01b      	b.n	80036dc <SPI_TRX_Buffer_8Bit+0x3a4>
//			SPI3_TX_DMA_Flag.Transfer_Complete_Flag = false;

		}
		else
		{
			return -1;
 80036a4:	f04f 33ff 	mov.w	r3, #4294967295
 80036a8:	e019      	b.n	80036de <SPI_TRX_Buffer_8Bit+0x3a6>
		}
	}
	else
	{
		for(uint16_t i = 0; i < tx_length; i++)
 80036aa:	2300      	movs	r3, #0
 80036ac:	82fb      	strh	r3, [r7, #22]
 80036ae:	e011      	b.n	80036d4 <SPI_TRX_Buffer_8Bit+0x39c>
		{
			rx_buffer[i] = SPI_TRX_Byte(config,tx_buffer[i]);
 80036b0:	8afb      	ldrh	r3, [r7, #22]
 80036b2:	68ba      	ldr	r2, [r7, #8]
 80036b4:	4413      	add	r3, r2
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	4619      	mov	r1, r3
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	f7ff fe02 	bl	80032c4 <SPI_TRX_Byte>
 80036c0:	4603      	mov	r3, r0
 80036c2:	4619      	mov	r1, r3
 80036c4:	8afb      	ldrh	r3, [r7, #22]
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	4413      	add	r3, r2
 80036ca:	b2ca      	uxtb	r2, r1
 80036cc:	701a      	strb	r2, [r3, #0]
		for(uint16_t i = 0; i < tx_length; i++)
 80036ce:	8afb      	ldrh	r3, [r7, #22]
 80036d0:	3301      	adds	r3, #1
 80036d2:	82fb      	strh	r3, [r7, #22]
 80036d4:	8afa      	ldrh	r2, [r7, #22]
 80036d6:	887b      	ldrh	r3, [r7, #2]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d3e9      	bcc.n	80036b0 <SPI_TRX_Buffer_8Bit+0x378>
		}
	}

	return 1;
 80036dc:	2301      	movs	r3, #1
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3718      	adds	r7, #24
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	40003c00 	.word	0x40003c00
 80036ec:	20000210 	.word	0x20000210
 80036f0:	20000268 	.word	0x20000268

080036f4 <SPI_NSS_High>:
 * This function sets the NSS pin to a high level, indicating the end of SPI communication.
 *
 * @param[in] config Pointer to the SPI configuration structure.
 */
void SPI_NSS_High(SPI_Config *config)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
	GPIO_Pin_High(config->NSS_Port, config->NSS_Pin);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	689a      	ldr	r2, [r3, #8]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	7b1b      	ldrb	r3, [r3, #12]
 8003704:	4619      	mov	r1, r3
 8003706:	4610      	mov	r0, r2
 8003708:	f7fe fdbd 	bl	8002286 <GPIO_Pin_High>
}
 800370c:	bf00      	nop
 800370e:	3708      	adds	r7, #8
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <SPI_NSS_Low>:
 * This function sets the NSS pin to a low level, indicating the start of SPI communication.
 *
 * @param[in] config Pointer to the SPI configuration structure.
 */
void SPI_NSS_Low(SPI_Config *config)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
	GPIO_Pin_Low(config->NSS_Port, config->NSS_Pin);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	689a      	ldr	r2, [r3, #8]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	7b1b      	ldrb	r3, [r3, #12]
 8003724:	4619      	mov	r1, r3
 8003726:	4610      	mov	r0, r2
 8003728:	f7fe fd98 	bl	800225c <GPIO_Pin_Low>
}
 800372c:	bf00      	nop
 800372e:	3708      	adds	r7, #8
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <TIM1_BRK_TIM9_IRQHandler>:
Timer_Config *__timer_13_config__;
Timer_Config *__timer_14_config__;



void TIM1_BRK_TIM9_IRQHandler(void) {
 8003734:	b580      	push	{r7, lr}
 8003736:	af00      	add	r7, sp, #0
    if (__timer_1_config__ ->ISR_Routines.Break_ISR) {
 8003738:	4b2b      	ldr	r3, [pc, #172]	@ (80037e8 <TIM1_BRK_TIM9_IRQHandler+0xb4>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003740:	2b00      	cmp	r3, #0
 8003742:	d00a      	beq.n	800375a <TIM1_BRK_TIM9_IRQHandler+0x26>
    	__timer_1_config__ ->ISR_Routines.Break_ISR();
 8003744:	4b28      	ldr	r3, [pc, #160]	@ (80037e8 <TIM1_BRK_TIM9_IRQHandler+0xb4>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800374c:	4798      	blx	r3
    	TIM1->SR &= ~TIM_SR_BIF;  // Clear the Break interrupt flag
 800374e:	4b27      	ldr	r3, [pc, #156]	@ (80037ec <TIM1_BRK_TIM9_IRQHandler+0xb8>)
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	4a26      	ldr	r2, [pc, #152]	@ (80037ec <TIM1_BRK_TIM9_IRQHandler+0xb8>)
 8003754:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003758:	6113      	str	r3, [r2, #16]
    }

    if (__timer_9_config__ ->ISR_Routines.Capture_Compare_1_ISR){
 800375a:	4b25      	ldr	r3, [pc, #148]	@ (80037f0 <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00a      	beq.n	800377c <TIM1_BRK_TIM9_IRQHandler+0x48>
    	__timer_9_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 8003766:	4b22      	ldr	r3, [pc, #136]	@ (80037f0 <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800376e:	4798      	blx	r3
    	TIM9->SR &= ~TIM_SR_CC1IF;  // Clear the Break interrupt flag
 8003770:	4b20      	ldr	r3, [pc, #128]	@ (80037f4 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8003772:	691b      	ldr	r3, [r3, #16]
 8003774:	4a1f      	ldr	r2, [pc, #124]	@ (80037f4 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8003776:	f023 0302 	bic.w	r3, r3, #2
 800377a:	6113      	str	r3, [r2, #16]
    }

    if (__timer_9_config__ ->ISR_Routines.Capture_Compare_2_ISR){
 800377c:	4b1c      	ldr	r3, [pc, #112]	@ (80037f0 <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00a      	beq.n	800379e <TIM1_BRK_TIM9_IRQHandler+0x6a>
    	__timer_9_config__ ->ISR_Routines.Capture_Compare_2_ISR();
 8003788:	4b19      	ldr	r3, [pc, #100]	@ (80037f0 <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003790:	4798      	blx	r3
    	TIM9->SR &= ~TIM_SR_CC2IF;  // Clear the Break interrupt flag
 8003792:	4b18      	ldr	r3, [pc, #96]	@ (80037f4 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	4a17      	ldr	r2, [pc, #92]	@ (80037f4 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8003798:	f023 0304 	bic.w	r3, r3, #4
 800379c:	6113      	str	r3, [r2, #16]
    }

    if (__timer_9_config__ ->ISR_Routines.Update_ISR){
 800379e:	4b14      	ldr	r3, [pc, #80]	@ (80037f0 <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00a      	beq.n	80037c0 <TIM1_BRK_TIM9_IRQHandler+0x8c>
    	__timer_9_config__ ->ISR_Routines.Update_ISR();
 80037aa:	4b11      	ldr	r3, [pc, #68]	@ (80037f0 <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80037b2:	4798      	blx	r3
    	TIM9->SR &= ~TIM_SR_UIF;  // Clear the Break interrupt flag
 80037b4:	4b0f      	ldr	r3, [pc, #60]	@ (80037f4 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	4a0e      	ldr	r2, [pc, #56]	@ (80037f4 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 80037ba:	f023 0301 	bic.w	r3, r3, #1
 80037be:	6113      	str	r3, [r2, #16]
    }

    if (__timer_9_config__ ->ISR_Routines.Trigger_ISR){
 80037c0:	4b0b      	ldr	r3, [pc, #44]	@ (80037f0 <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d00a      	beq.n	80037e2 <TIM1_BRK_TIM9_IRQHandler+0xae>
    	__timer_9_config__ ->ISR_Routines.Trigger_ISR();
 80037cc:	4b08      	ldr	r3, [pc, #32]	@ (80037f0 <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80037d4:	4798      	blx	r3
    	TIM9->SR &= ~TIM_SR_TIF;  // Clear the Break interrupt flag
 80037d6:	4b07      	ldr	r3, [pc, #28]	@ (80037f4 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	4a06      	ldr	r2, [pc, #24]	@ (80037f4 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 80037dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80037e0:	6113      	str	r3, [r2, #16]
    }

}
 80037e2:	bf00      	nop
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	200002c0 	.word	0x200002c0
 80037ec:	40010000 	.word	0x40010000
 80037f0:	200002e0 	.word	0x200002e0
 80037f4:	40014000 	.word	0x40014000

080037f8 <TIM1_UP_TIM10_IRQHandler>:

void TIM1_UP_TIM10_IRQHandler(void) {
 80037f8:	b580      	push	{r7, lr}
 80037fa:	af00      	add	r7, sp, #0
    if (__timer_1_config__ ->ISR_Routines.Update_ISR) {
 80037fc:	4b1a      	ldr	r3, [pc, #104]	@ (8003868 <TIM1_UP_TIM10_IRQHandler+0x70>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00a      	beq.n	800381e <TIM1_UP_TIM10_IRQHandler+0x26>
    	__timer_1_config__ ->ISR_Routines.Update_ISR();
 8003808:	4b17      	ldr	r3, [pc, #92]	@ (8003868 <TIM1_UP_TIM10_IRQHandler+0x70>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003810:	4798      	blx	r3
    	TIM1->SR &= ~TIM_SR_UIF;  // Clear the Update interrupt flag
 8003812:	4b16      	ldr	r3, [pc, #88]	@ (800386c <TIM1_UP_TIM10_IRQHandler+0x74>)
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	4a15      	ldr	r2, [pc, #84]	@ (800386c <TIM1_UP_TIM10_IRQHandler+0x74>)
 8003818:	f023 0301 	bic.w	r3, r3, #1
 800381c:	6113      	str	r3, [r2, #16]
    }

    if (__timer_10_config__ ->ISR_Routines.Update_ISR) {
 800381e:	4b14      	ldr	r3, [pc, #80]	@ (8003870 <TIM1_UP_TIM10_IRQHandler+0x78>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00a      	beq.n	8003840 <TIM1_UP_TIM10_IRQHandler+0x48>
    	__timer_10_config__ ->ISR_Routines.Update_ISR();
 800382a:	4b11      	ldr	r3, [pc, #68]	@ (8003870 <TIM1_UP_TIM10_IRQHandler+0x78>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003832:	4798      	blx	r3
    	TIM10->SR &= ~TIM_SR_UIF;  // Clear the Update interrupt flag
 8003834:	4b0f      	ldr	r3, [pc, #60]	@ (8003874 <TIM1_UP_TIM10_IRQHandler+0x7c>)
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	4a0e      	ldr	r2, [pc, #56]	@ (8003874 <TIM1_UP_TIM10_IRQHandler+0x7c>)
 800383a:	f023 0301 	bic.w	r3, r3, #1
 800383e:	6113      	str	r3, [r2, #16]
    }

    if (__timer_10_config__ ->ISR_Routines.Capture_Compare_1_ISR) {
 8003840:	4b0b      	ldr	r3, [pc, #44]	@ (8003870 <TIM1_UP_TIM10_IRQHandler+0x78>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003848:	2b00      	cmp	r3, #0
 800384a:	d00a      	beq.n	8003862 <TIM1_UP_TIM10_IRQHandler+0x6a>
    	__timer_10_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 800384c:	4b08      	ldr	r3, [pc, #32]	@ (8003870 <TIM1_UP_TIM10_IRQHandler+0x78>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003854:	4798      	blx	r3
    	TIM10->SR &= ~TIM_SR_CC1IF;  // Clear the Update interrupt flag
 8003856:	4b07      	ldr	r3, [pc, #28]	@ (8003874 <TIM1_UP_TIM10_IRQHandler+0x7c>)
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	4a06      	ldr	r2, [pc, #24]	@ (8003874 <TIM1_UP_TIM10_IRQHandler+0x7c>)
 800385c:	f023 0302 	bic.w	r3, r3, #2
 8003860:	6113      	str	r3, [r2, #16]
    }

}
 8003862:	bf00      	nop
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	200002c0 	.word	0x200002c0
 800386c:	40010000 	.word	0x40010000
 8003870:	200002e4 	.word	0x200002e4
 8003874:	40014400 	.word	0x40014400

08003878 <TIM1_TRG_COM_TIM11_IRQHandler>:

void TIM1_TRG_COM_TIM11_IRQHandler(void) {
 8003878:	b580      	push	{r7, lr}
 800387a:	af00      	add	r7, sp, #0
    if (__timer_1_config__ ->ISR_Routines.Trigger_ISR) {
 800387c:	4b22      	ldr	r3, [pc, #136]	@ (8003908 <TIM1_TRG_COM_TIM11_IRQHandler+0x90>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00a      	beq.n	800389e <TIM1_TRG_COM_TIM11_IRQHandler+0x26>
    	__timer_1_config__ ->ISR_Routines.Trigger_ISR();
 8003888:	4b1f      	ldr	r3, [pc, #124]	@ (8003908 <TIM1_TRG_COM_TIM11_IRQHandler+0x90>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003890:	4798      	blx	r3

    	TIM1->SR &= ~TIM_SR_TIF;  // Clear the Trigger interrupt flag
 8003892:	4b1e      	ldr	r3, [pc, #120]	@ (800390c <TIM1_TRG_COM_TIM11_IRQHandler+0x94>)
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	4a1d      	ldr	r2, [pc, #116]	@ (800390c <TIM1_TRG_COM_TIM11_IRQHandler+0x94>)
 8003898:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800389c:	6113      	str	r3, [r2, #16]
    }

    if (__timer_1_config__ ->ISR_Routines.Commutation_ISR) {
 800389e:	4b1a      	ldr	r3, [pc, #104]	@ (8003908 <TIM1_TRG_COM_TIM11_IRQHandler+0x90>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00a      	beq.n	80038c0 <TIM1_TRG_COM_TIM11_IRQHandler+0x48>
    	__timer_1_config__ ->ISR_Routines.Commutation_ISR();
 80038aa:	4b17      	ldr	r3, [pc, #92]	@ (8003908 <TIM1_TRG_COM_TIM11_IRQHandler+0x90>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80038b2:	4798      	blx	r3

    	TIM1->SR &= ~TIM_SR_COMIF;  // Clear the Trigger interrupt flag
 80038b4:	4b15      	ldr	r3, [pc, #84]	@ (800390c <TIM1_TRG_COM_TIM11_IRQHandler+0x94>)
 80038b6:	691b      	ldr	r3, [r3, #16]
 80038b8:	4a14      	ldr	r2, [pc, #80]	@ (800390c <TIM1_TRG_COM_TIM11_IRQHandler+0x94>)
 80038ba:	f023 0320 	bic.w	r3, r3, #32
 80038be:	6113      	str	r3, [r2, #16]
    }

    if (__timer_11_config__ ->ISR_Routines.Update_ISR) {
 80038c0:	4b13      	ldr	r3, [pc, #76]	@ (8003910 <TIM1_TRG_COM_TIM11_IRQHandler+0x98>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d00a      	beq.n	80038e2 <TIM1_TRG_COM_TIM11_IRQHandler+0x6a>
    	__timer_11_config__ ->ISR_Routines.Update_ISR();
 80038cc:	4b10      	ldr	r3, [pc, #64]	@ (8003910 <TIM1_TRG_COM_TIM11_IRQHandler+0x98>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80038d4:	4798      	blx	r3
    	TIM11->SR &= ~TIM_SR_UIF;  // Clear the Update interrupt flag
 80038d6:	4b0f      	ldr	r3, [pc, #60]	@ (8003914 <TIM1_TRG_COM_TIM11_IRQHandler+0x9c>)
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	4a0e      	ldr	r2, [pc, #56]	@ (8003914 <TIM1_TRG_COM_TIM11_IRQHandler+0x9c>)
 80038dc:	f023 0301 	bic.w	r3, r3, #1
 80038e0:	6113      	str	r3, [r2, #16]
    }

    if (__timer_11_config__ ->ISR_Routines.Capture_Compare_1_ISR) {
 80038e2:	4b0b      	ldr	r3, [pc, #44]	@ (8003910 <TIM1_TRG_COM_TIM11_IRQHandler+0x98>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00a      	beq.n	8003904 <TIM1_TRG_COM_TIM11_IRQHandler+0x8c>
    	__timer_11_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 80038ee:	4b08      	ldr	r3, [pc, #32]	@ (8003910 <TIM1_TRG_COM_TIM11_IRQHandler+0x98>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038f6:	4798      	blx	r3
    	TIM11->SR &= ~TIM_SR_CC1IF;  // Clear the Update interrupt flag
 80038f8:	4b06      	ldr	r3, [pc, #24]	@ (8003914 <TIM1_TRG_COM_TIM11_IRQHandler+0x9c>)
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	4a05      	ldr	r2, [pc, #20]	@ (8003914 <TIM1_TRG_COM_TIM11_IRQHandler+0x9c>)
 80038fe:	f023 0302 	bic.w	r3, r3, #2
 8003902:	6113      	str	r3, [r2, #16]
    }

}
 8003904:	bf00      	nop
 8003906:	bd80      	pop	{r7, pc}
 8003908:	200002c0 	.word	0x200002c0
 800390c:	40010000 	.word	0x40010000
 8003910:	200002e8 	.word	0x200002e8
 8003914:	40014800 	.word	0x40014800

08003918 <TIM1_CC_IRQHandler>:

void TIM1_CC_IRQHandler(void) {
 8003918:	b580      	push	{r7, lr}
 800391a:	af00      	add	r7, sp, #0
    if (__timer_1_config__ ->ISR_Routines.Capture_Compare_1_ISR) {
 800391c:	4b22      	ldr	r3, [pc, #136]	@ (80039a8 <TIM1_CC_IRQHandler+0x90>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003924:	2b00      	cmp	r3, #0
 8003926:	d00a      	beq.n	800393e <TIM1_CC_IRQHandler+0x26>
    	__timer_1_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 8003928:	4b1f      	ldr	r3, [pc, #124]	@ (80039a8 <TIM1_CC_IRQHandler+0x90>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003930:	4798      	blx	r3

    	TIM1->SR &= ~TIM_SR_CC1IF;  // Clear the Capture Compare interrupt flag
 8003932:	4b1e      	ldr	r3, [pc, #120]	@ (80039ac <TIM1_CC_IRQHandler+0x94>)
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	4a1d      	ldr	r2, [pc, #116]	@ (80039ac <TIM1_CC_IRQHandler+0x94>)
 8003938:	f023 0302 	bic.w	r3, r3, #2
 800393c:	6113      	str	r3, [r2, #16]
    }

    if (__timer_1_config__ ->ISR_Routines.Capture_Compare_2_ISR) {
 800393e:	4b1a      	ldr	r3, [pc, #104]	@ (80039a8 <TIM1_CC_IRQHandler+0x90>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003946:	2b00      	cmp	r3, #0
 8003948:	d00a      	beq.n	8003960 <TIM1_CC_IRQHandler+0x48>
    	__timer_1_config__ ->ISR_Routines.Capture_Compare_2_ISR();
 800394a:	4b17      	ldr	r3, [pc, #92]	@ (80039a8 <TIM1_CC_IRQHandler+0x90>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003952:	4798      	blx	r3

    	TIM1->SR &= ~TIM_SR_CC2IF;  // Clear the Capture Compare interrupt flag
 8003954:	4b15      	ldr	r3, [pc, #84]	@ (80039ac <TIM1_CC_IRQHandler+0x94>)
 8003956:	691b      	ldr	r3, [r3, #16]
 8003958:	4a14      	ldr	r2, [pc, #80]	@ (80039ac <TIM1_CC_IRQHandler+0x94>)
 800395a:	f023 0304 	bic.w	r3, r3, #4
 800395e:	6113      	str	r3, [r2, #16]
    }

    if (__timer_1_config__ ->ISR_Routines.Capture_Compare_3_ISR) {
 8003960:	4b11      	ldr	r3, [pc, #68]	@ (80039a8 <TIM1_CC_IRQHandler+0x90>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003968:	2b00      	cmp	r3, #0
 800396a:	d00a      	beq.n	8003982 <TIM1_CC_IRQHandler+0x6a>
    	__timer_1_config__ ->ISR_Routines.Capture_Compare_3_ISR();
 800396c:	4b0e      	ldr	r3, [pc, #56]	@ (80039a8 <TIM1_CC_IRQHandler+0x90>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003974:	4798      	blx	r3

    	TIM1->SR &= ~TIM_SR_CC3IF;  // Clear the Capture Compare interrupt flag
 8003976:	4b0d      	ldr	r3, [pc, #52]	@ (80039ac <TIM1_CC_IRQHandler+0x94>)
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	4a0c      	ldr	r2, [pc, #48]	@ (80039ac <TIM1_CC_IRQHandler+0x94>)
 800397c:	f023 0308 	bic.w	r3, r3, #8
 8003980:	6113      	str	r3, [r2, #16]
    }

    if (__timer_1_config__ ->ISR_Routines.Capture_Compare_4_ISR) {
 8003982:	4b09      	ldr	r3, [pc, #36]	@ (80039a8 <TIM1_CC_IRQHandler+0x90>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800398a:	2b00      	cmp	r3, #0
 800398c:	d00a      	beq.n	80039a4 <TIM1_CC_IRQHandler+0x8c>
    	__timer_1_config__ ->ISR_Routines.Capture_Compare_4_ISR();
 800398e:	4b06      	ldr	r3, [pc, #24]	@ (80039a8 <TIM1_CC_IRQHandler+0x90>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003996:	4798      	blx	r3

    	TIM1->SR &= ~TIM_SR_CC4IF;  // Clear the Capture Compare interrupt flag
 8003998:	4b04      	ldr	r3, [pc, #16]	@ (80039ac <TIM1_CC_IRQHandler+0x94>)
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	4a03      	ldr	r2, [pc, #12]	@ (80039ac <TIM1_CC_IRQHandler+0x94>)
 800399e:	f023 0310 	bic.w	r3, r3, #16
 80039a2:	6113      	str	r3, [r2, #16]
    }
}
 80039a4:	bf00      	nop
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	200002c0 	.word	0x200002c0
 80039ac:	40010000 	.word	0x40010000

080039b0 <TIM2_IRQHandler>:


void TIM2_IRQHandler(void)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	af00      	add	r7, sp, #0
    if (__timer_2_config__ ->ISR_Routines.Capture_Compare_1_ISR) {
 80039b4:	4b39      	ldr	r3, [pc, #228]	@ (8003a9c <TIM2_IRQHandler+0xec>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d00c      	beq.n	80039da <TIM2_IRQHandler+0x2a>
    	__timer_2_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 80039c0:	4b36      	ldr	r3, [pc, #216]	@ (8003a9c <TIM2_IRQHandler+0xec>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039c8:	4798      	blx	r3

    	TIM2->SR &= ~TIM_SR_CC1IF;  // Clear the Capture Compare interrupt flag
 80039ca:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80039d4:	f023 0302 	bic.w	r3, r3, #2
 80039d8:	6113      	str	r3, [r2, #16]
    }
    if (__timer_2_config__ ->ISR_Routines.Capture_Compare_2_ISR) {
 80039da:	4b30      	ldr	r3, [pc, #192]	@ (8003a9c <TIM2_IRQHandler+0xec>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00c      	beq.n	8003a00 <TIM2_IRQHandler+0x50>
    	__timer_2_config__ ->ISR_Routines.Capture_Compare_2_ISR();
 80039e6:	4b2d      	ldr	r3, [pc, #180]	@ (8003a9c <TIM2_IRQHandler+0xec>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039ee:	4798      	blx	r3

    	TIM2->SR &= ~TIM_SR_CC2IF;  // Clear the Capture Compare interrupt flag
 80039f0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80039fa:	f023 0304 	bic.w	r3, r3, #4
 80039fe:	6113      	str	r3, [r2, #16]
    }
    if (__timer_2_config__ ->ISR_Routines.Capture_Compare_3_ISR) {
 8003a00:	4b26      	ldr	r3, [pc, #152]	@ (8003a9c <TIM2_IRQHandler+0xec>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d00c      	beq.n	8003a26 <TIM2_IRQHandler+0x76>
    	__timer_2_config__ ->ISR_Routines.Capture_Compare_3_ISR();
 8003a0c:	4b23      	ldr	r3, [pc, #140]	@ (8003a9c <TIM2_IRQHandler+0xec>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003a14:	4798      	blx	r3

    	TIM2->SR &= ~TIM_SR_CC3IF;  // Clear the Capture Compare interrupt flag
 8003a16:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003a20:	f023 0308 	bic.w	r3, r3, #8
 8003a24:	6113      	str	r3, [r2, #16]
    }
    if (__timer_2_config__ ->ISR_Routines.Capture_Compare_4_ISR) {
 8003a26:	4b1d      	ldr	r3, [pc, #116]	@ (8003a9c <TIM2_IRQHandler+0xec>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00c      	beq.n	8003a4c <TIM2_IRQHandler+0x9c>
    	__timer_2_config__ ->ISR_Routines.Capture_Compare_4_ISR();
 8003a32:	4b1a      	ldr	r3, [pc, #104]	@ (8003a9c <TIM2_IRQHandler+0xec>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003a3a:	4798      	blx	r3

    	TIM2->SR &= ~TIM_SR_CC4IF;  // Clear the Capture Compare interrupt flag
 8003a3c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003a46:	f023 0310 	bic.w	r3, r3, #16
 8003a4a:	6113      	str	r3, [r2, #16]
    }
    if (__timer_2_config__ ->ISR_Routines.Update_ISR) {
 8003a4c:	4b13      	ldr	r3, [pc, #76]	@ (8003a9c <TIM2_IRQHandler+0xec>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d00c      	beq.n	8003a72 <TIM2_IRQHandler+0xc2>
    	__timer_2_config__ ->ISR_Routines.Update_ISR();
 8003a58:	4b10      	ldr	r3, [pc, #64]	@ (8003a9c <TIM2_IRQHandler+0xec>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a60:	4798      	blx	r3

    	TIM2->SR &= ~TIM_SR_UIF;  // Clear the Capture Compare interrupt flag
 8003a62:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003a6c:	f023 0301 	bic.w	r3, r3, #1
 8003a70:	6113      	str	r3, [r2, #16]
    }
    if (__timer_2_config__ ->ISR_Routines.Trigger_ISR) {
 8003a72:	4b0a      	ldr	r3, [pc, #40]	@ (8003a9c <TIM2_IRQHandler+0xec>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00c      	beq.n	8003a98 <TIM2_IRQHandler+0xe8>
    	__timer_2_config__ ->ISR_Routines.Trigger_ISR();
 8003a7e:	4b07      	ldr	r3, [pc, #28]	@ (8003a9c <TIM2_IRQHandler+0xec>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003a86:	4798      	blx	r3

    	TIM2->SR &= ~TIM_SR_TIF;  // Clear the Capture Compare interrupt flag
 8003a88:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003a92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a96:	6113      	str	r3, [r2, #16]
    }
}
 8003a98:	bf00      	nop
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	200002c4 	.word	0x200002c4

08003aa0 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	af00      	add	r7, sp, #0
    if (__timer_3_config__ ->ISR_Routines.Capture_Compare_1_ISR) {
 8003aa4:	4b33      	ldr	r3, [pc, #204]	@ (8003b74 <TIM3_IRQHandler+0xd4>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d00a      	beq.n	8003ac6 <TIM3_IRQHandler+0x26>
    	__timer_3_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 8003ab0:	4b30      	ldr	r3, [pc, #192]	@ (8003b74 <TIM3_IRQHandler+0xd4>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ab8:	4798      	blx	r3

    	TIM3->SR &= ~TIM_SR_CC1IF;  // Clear the Capture Compare interrupt flag
 8003aba:	4b2f      	ldr	r3, [pc, #188]	@ (8003b78 <TIM3_IRQHandler+0xd8>)
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	4a2e      	ldr	r2, [pc, #184]	@ (8003b78 <TIM3_IRQHandler+0xd8>)
 8003ac0:	f023 0302 	bic.w	r3, r3, #2
 8003ac4:	6113      	str	r3, [r2, #16]
    }
    if (__timer_3_config__ ->ISR_Routines.Capture_Compare_2_ISR) {
 8003ac6:	4b2b      	ldr	r3, [pc, #172]	@ (8003b74 <TIM3_IRQHandler+0xd4>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d00a      	beq.n	8003ae8 <TIM3_IRQHandler+0x48>
    	__timer_3_config__ ->ISR_Routines.Capture_Compare_2_ISR();
 8003ad2:	4b28      	ldr	r3, [pc, #160]	@ (8003b74 <TIM3_IRQHandler+0xd4>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ada:	4798      	blx	r3

    	TIM3->SR &= ~TIM_SR_CC2IF;  // Clear the Capture Compare interrupt flag
 8003adc:	4b26      	ldr	r3, [pc, #152]	@ (8003b78 <TIM3_IRQHandler+0xd8>)
 8003ade:	691b      	ldr	r3, [r3, #16]
 8003ae0:	4a25      	ldr	r2, [pc, #148]	@ (8003b78 <TIM3_IRQHandler+0xd8>)
 8003ae2:	f023 0304 	bic.w	r3, r3, #4
 8003ae6:	6113      	str	r3, [r2, #16]
    }
    if (__timer_3_config__ ->ISR_Routines.Capture_Compare_3_ISR) {
 8003ae8:	4b22      	ldr	r3, [pc, #136]	@ (8003b74 <TIM3_IRQHandler+0xd4>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d00a      	beq.n	8003b0a <TIM3_IRQHandler+0x6a>
    	__timer_3_config__ ->ISR_Routines.Capture_Compare_3_ISR();
 8003af4:	4b1f      	ldr	r3, [pc, #124]	@ (8003b74 <TIM3_IRQHandler+0xd4>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003afc:	4798      	blx	r3

    	TIM3->SR &= ~TIM_SR_CC3IF;  // Clear the Capture Compare interrupt flag
 8003afe:	4b1e      	ldr	r3, [pc, #120]	@ (8003b78 <TIM3_IRQHandler+0xd8>)
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	4a1d      	ldr	r2, [pc, #116]	@ (8003b78 <TIM3_IRQHandler+0xd8>)
 8003b04:	f023 0308 	bic.w	r3, r3, #8
 8003b08:	6113      	str	r3, [r2, #16]
    }
    if (__timer_3_config__ ->ISR_Routines.Capture_Compare_4_ISR) {
 8003b0a:	4b1a      	ldr	r3, [pc, #104]	@ (8003b74 <TIM3_IRQHandler+0xd4>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00a      	beq.n	8003b2c <TIM3_IRQHandler+0x8c>
    	__timer_3_config__ ->ISR_Routines.Capture_Compare_4_ISR();
 8003b16:	4b17      	ldr	r3, [pc, #92]	@ (8003b74 <TIM3_IRQHandler+0xd4>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003b1e:	4798      	blx	r3

    	TIM3->SR &= ~TIM_SR_CC4IF;  // Clear the Capture Compare interrupt flag
 8003b20:	4b15      	ldr	r3, [pc, #84]	@ (8003b78 <TIM3_IRQHandler+0xd8>)
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	4a14      	ldr	r2, [pc, #80]	@ (8003b78 <TIM3_IRQHandler+0xd8>)
 8003b26:	f023 0310 	bic.w	r3, r3, #16
 8003b2a:	6113      	str	r3, [r2, #16]
    }
    if (__timer_3_config__ ->ISR_Routines.Update_ISR) {
 8003b2c:	4b11      	ldr	r3, [pc, #68]	@ (8003b74 <TIM3_IRQHandler+0xd4>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d00a      	beq.n	8003b4e <TIM3_IRQHandler+0xae>
    	__timer_3_config__ ->ISR_Routines.Update_ISR();
 8003b38:	4b0e      	ldr	r3, [pc, #56]	@ (8003b74 <TIM3_IRQHandler+0xd4>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b40:	4798      	blx	r3

    	TIM3->SR &= ~TIM_SR_UIF;  // Clear the Capture Compare interrupt flag
 8003b42:	4b0d      	ldr	r3, [pc, #52]	@ (8003b78 <TIM3_IRQHandler+0xd8>)
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	4a0c      	ldr	r2, [pc, #48]	@ (8003b78 <TIM3_IRQHandler+0xd8>)
 8003b48:	f023 0301 	bic.w	r3, r3, #1
 8003b4c:	6113      	str	r3, [r2, #16]
    }
    if (__timer_3_config__ ->ISR_Routines.Trigger_ISR) {
 8003b4e:	4b09      	ldr	r3, [pc, #36]	@ (8003b74 <TIM3_IRQHandler+0xd4>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d00a      	beq.n	8003b70 <TIM3_IRQHandler+0xd0>
    	__timer_3_config__ ->ISR_Routines.Trigger_ISR();
 8003b5a:	4b06      	ldr	r3, [pc, #24]	@ (8003b74 <TIM3_IRQHandler+0xd4>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003b62:	4798      	blx	r3

    	TIM3->SR &= ~TIM_SR_TIF;  // Clear the Capture Compare interrupt flag
 8003b64:	4b04      	ldr	r3, [pc, #16]	@ (8003b78 <TIM3_IRQHandler+0xd8>)
 8003b66:	691b      	ldr	r3, [r3, #16]
 8003b68:	4a03      	ldr	r2, [pc, #12]	@ (8003b78 <TIM3_IRQHandler+0xd8>)
 8003b6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b6e:	6113      	str	r3, [r2, #16]
    }
}
 8003b70:	bf00      	nop
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	200002c8 	.word	0x200002c8
 8003b78:	40000400 	.word	0x40000400

08003b7c <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	af00      	add	r7, sp, #0
    if (__timer_4_config__ ->ISR_Routines.Capture_Compare_1_ISR) {
 8003b80:	4b33      	ldr	r3, [pc, #204]	@ (8003c50 <TIM4_IRQHandler+0xd4>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d00a      	beq.n	8003ba2 <TIM4_IRQHandler+0x26>
    	__timer_4_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 8003b8c:	4b30      	ldr	r3, [pc, #192]	@ (8003c50 <TIM4_IRQHandler+0xd4>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b94:	4798      	blx	r3

    	TIM4->SR &= ~TIM_SR_CC1IF;  // Clear the Capture Compare interrupt flag
 8003b96:	4b2f      	ldr	r3, [pc, #188]	@ (8003c54 <TIM4_IRQHandler+0xd8>)
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	4a2e      	ldr	r2, [pc, #184]	@ (8003c54 <TIM4_IRQHandler+0xd8>)
 8003b9c:	f023 0302 	bic.w	r3, r3, #2
 8003ba0:	6113      	str	r3, [r2, #16]
    }
    if (__timer_4_config__ ->ISR_Routines.Capture_Compare_2_ISR) {
 8003ba2:	4b2b      	ldr	r3, [pc, #172]	@ (8003c50 <TIM4_IRQHandler+0xd4>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00a      	beq.n	8003bc4 <TIM4_IRQHandler+0x48>
    	__timer_4_config__ ->ISR_Routines.Capture_Compare_2_ISR();
 8003bae:	4b28      	ldr	r3, [pc, #160]	@ (8003c50 <TIM4_IRQHandler+0xd4>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bb6:	4798      	blx	r3

    	TIM4->SR &= ~TIM_SR_CC2IF;  // Clear the Capture Compare interrupt flag
 8003bb8:	4b26      	ldr	r3, [pc, #152]	@ (8003c54 <TIM4_IRQHandler+0xd8>)
 8003bba:	691b      	ldr	r3, [r3, #16]
 8003bbc:	4a25      	ldr	r2, [pc, #148]	@ (8003c54 <TIM4_IRQHandler+0xd8>)
 8003bbe:	f023 0304 	bic.w	r3, r3, #4
 8003bc2:	6113      	str	r3, [r2, #16]
    }
    if (__timer_4_config__ ->ISR_Routines.Capture_Compare_3_ISR) {
 8003bc4:	4b22      	ldr	r3, [pc, #136]	@ (8003c50 <TIM4_IRQHandler+0xd4>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d00a      	beq.n	8003be6 <TIM4_IRQHandler+0x6a>
    	__timer_4_config__ ->ISR_Routines.Capture_Compare_3_ISR();
 8003bd0:	4b1f      	ldr	r3, [pc, #124]	@ (8003c50 <TIM4_IRQHandler+0xd4>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003bd8:	4798      	blx	r3

    	TIM4->SR &= ~TIM_SR_CC3IF;  // Clear the Capture Compare interrupt flag
 8003bda:	4b1e      	ldr	r3, [pc, #120]	@ (8003c54 <TIM4_IRQHandler+0xd8>)
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	4a1d      	ldr	r2, [pc, #116]	@ (8003c54 <TIM4_IRQHandler+0xd8>)
 8003be0:	f023 0308 	bic.w	r3, r3, #8
 8003be4:	6113      	str	r3, [r2, #16]
    }
    if (__timer_4_config__ ->ISR_Routines.Capture_Compare_4_ISR) {
 8003be6:	4b1a      	ldr	r3, [pc, #104]	@ (8003c50 <TIM4_IRQHandler+0xd4>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00a      	beq.n	8003c08 <TIM4_IRQHandler+0x8c>
    	__timer_4_config__ ->ISR_Routines.Capture_Compare_4_ISR();
 8003bf2:	4b17      	ldr	r3, [pc, #92]	@ (8003c50 <TIM4_IRQHandler+0xd4>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003bfa:	4798      	blx	r3

    	TIM4->SR &= ~TIM_SR_CC4IF;  // Clear the Capture Compare interrupt flag
 8003bfc:	4b15      	ldr	r3, [pc, #84]	@ (8003c54 <TIM4_IRQHandler+0xd8>)
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	4a14      	ldr	r2, [pc, #80]	@ (8003c54 <TIM4_IRQHandler+0xd8>)
 8003c02:	f023 0310 	bic.w	r3, r3, #16
 8003c06:	6113      	str	r3, [r2, #16]
    }
    if (__timer_4_config__ ->ISR_Routines.Update_ISR) {
 8003c08:	4b11      	ldr	r3, [pc, #68]	@ (8003c50 <TIM4_IRQHandler+0xd4>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d00a      	beq.n	8003c2a <TIM4_IRQHandler+0xae>
    	__timer_4_config__ ->ISR_Routines.Update_ISR();
 8003c14:	4b0e      	ldr	r3, [pc, #56]	@ (8003c50 <TIM4_IRQHandler+0xd4>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c1c:	4798      	blx	r3

    	TIM4->SR &= ~TIM_SR_UIF;  // Clear the Capture Compare interrupt flag
 8003c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8003c54 <TIM4_IRQHandler+0xd8>)
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	4a0c      	ldr	r2, [pc, #48]	@ (8003c54 <TIM4_IRQHandler+0xd8>)
 8003c24:	f023 0301 	bic.w	r3, r3, #1
 8003c28:	6113      	str	r3, [r2, #16]
    }
    if (__timer_4_config__ ->ISR_Routines.Trigger_ISR) {
 8003c2a:	4b09      	ldr	r3, [pc, #36]	@ (8003c50 <TIM4_IRQHandler+0xd4>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d00a      	beq.n	8003c4c <TIM4_IRQHandler+0xd0>
    	__timer_4_config__ ->ISR_Routines.Trigger_ISR();
 8003c36:	4b06      	ldr	r3, [pc, #24]	@ (8003c50 <TIM4_IRQHandler+0xd4>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003c3e:	4798      	blx	r3

    	TIM4->SR &= ~TIM_SR_TIF;  // Clear the Capture Compare interrupt flag
 8003c40:	4b04      	ldr	r3, [pc, #16]	@ (8003c54 <TIM4_IRQHandler+0xd8>)
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	4a03      	ldr	r2, [pc, #12]	@ (8003c54 <TIM4_IRQHandler+0xd8>)
 8003c46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c4a:	6113      	str	r3, [r2, #16]
    }
}
 8003c4c:	bf00      	nop
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	200002cc 	.word	0x200002cc
 8003c54:	40000800 	.word	0x40000800

08003c58 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	af00      	add	r7, sp, #0
    if (__timer_5_config__ ->ISR_Routines.Capture_Compare_1_ISR) {
 8003c5c:	4b33      	ldr	r3, [pc, #204]	@ (8003d2c <TIM5_IRQHandler+0xd4>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d00a      	beq.n	8003c7e <TIM5_IRQHandler+0x26>
    	__timer_5_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 8003c68:	4b30      	ldr	r3, [pc, #192]	@ (8003d2c <TIM5_IRQHandler+0xd4>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c70:	4798      	blx	r3

    	TIM5->SR &= ~TIM_SR_CC1IF;  // Clear the Capture Compare interrupt flag
 8003c72:	4b2f      	ldr	r3, [pc, #188]	@ (8003d30 <TIM5_IRQHandler+0xd8>)
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	4a2e      	ldr	r2, [pc, #184]	@ (8003d30 <TIM5_IRQHandler+0xd8>)
 8003c78:	f023 0302 	bic.w	r3, r3, #2
 8003c7c:	6113      	str	r3, [r2, #16]
    }
    if (__timer_5_config__ ->ISR_Routines.Capture_Compare_2_ISR) {
 8003c7e:	4b2b      	ldr	r3, [pc, #172]	@ (8003d2c <TIM5_IRQHandler+0xd4>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00a      	beq.n	8003ca0 <TIM5_IRQHandler+0x48>
    	__timer_5_config__ ->ISR_Routines.Capture_Compare_2_ISR();
 8003c8a:	4b28      	ldr	r3, [pc, #160]	@ (8003d2c <TIM5_IRQHandler+0xd4>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c92:	4798      	blx	r3

    	TIM5->SR &= ~TIM_SR_CC2IF;  // Clear the Capture Compare interrupt flag
 8003c94:	4b26      	ldr	r3, [pc, #152]	@ (8003d30 <TIM5_IRQHandler+0xd8>)
 8003c96:	691b      	ldr	r3, [r3, #16]
 8003c98:	4a25      	ldr	r2, [pc, #148]	@ (8003d30 <TIM5_IRQHandler+0xd8>)
 8003c9a:	f023 0304 	bic.w	r3, r3, #4
 8003c9e:	6113      	str	r3, [r2, #16]
    }
    if (__timer_5_config__ ->ISR_Routines.Capture_Compare_3_ISR) {
 8003ca0:	4b22      	ldr	r3, [pc, #136]	@ (8003d2c <TIM5_IRQHandler+0xd4>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d00a      	beq.n	8003cc2 <TIM5_IRQHandler+0x6a>
    	__timer_5_config__ ->ISR_Routines.Capture_Compare_3_ISR();
 8003cac:	4b1f      	ldr	r3, [pc, #124]	@ (8003d2c <TIM5_IRQHandler+0xd4>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003cb4:	4798      	blx	r3

    	TIM5->SR &= ~TIM_SR_CC3IF;  // Clear the Capture Compare interrupt flag
 8003cb6:	4b1e      	ldr	r3, [pc, #120]	@ (8003d30 <TIM5_IRQHandler+0xd8>)
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	4a1d      	ldr	r2, [pc, #116]	@ (8003d30 <TIM5_IRQHandler+0xd8>)
 8003cbc:	f023 0308 	bic.w	r3, r3, #8
 8003cc0:	6113      	str	r3, [r2, #16]
    }
    if (__timer_5_config__ ->ISR_Routines.Capture_Compare_4_ISR) {
 8003cc2:	4b1a      	ldr	r3, [pc, #104]	@ (8003d2c <TIM5_IRQHandler+0xd4>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00a      	beq.n	8003ce4 <TIM5_IRQHandler+0x8c>
    	__timer_5_config__ ->ISR_Routines.Capture_Compare_4_ISR();
 8003cce:	4b17      	ldr	r3, [pc, #92]	@ (8003d2c <TIM5_IRQHandler+0xd4>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003cd6:	4798      	blx	r3

    	TIM5->SR &= ~TIM_SR_CC4IF;  // Clear the Capture Compare interrupt flag
 8003cd8:	4b15      	ldr	r3, [pc, #84]	@ (8003d30 <TIM5_IRQHandler+0xd8>)
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	4a14      	ldr	r2, [pc, #80]	@ (8003d30 <TIM5_IRQHandler+0xd8>)
 8003cde:	f023 0310 	bic.w	r3, r3, #16
 8003ce2:	6113      	str	r3, [r2, #16]
    }
    if (__timer_5_config__ ->ISR_Routines.Update_ISR) {
 8003ce4:	4b11      	ldr	r3, [pc, #68]	@ (8003d2c <TIM5_IRQHandler+0xd4>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d00a      	beq.n	8003d06 <TIM5_IRQHandler+0xae>
    	__timer_5_config__ ->ISR_Routines.Update_ISR();
 8003cf0:	4b0e      	ldr	r3, [pc, #56]	@ (8003d2c <TIM5_IRQHandler+0xd4>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003cf8:	4798      	blx	r3

    	TIM5->SR &= ~TIM_SR_UIF;  // Clear the Capture Compare interrupt flag
 8003cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8003d30 <TIM5_IRQHandler+0xd8>)
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	4a0c      	ldr	r2, [pc, #48]	@ (8003d30 <TIM5_IRQHandler+0xd8>)
 8003d00:	f023 0301 	bic.w	r3, r3, #1
 8003d04:	6113      	str	r3, [r2, #16]
    }
    if (__timer_5_config__ ->ISR_Routines.Trigger_ISR) {
 8003d06:	4b09      	ldr	r3, [pc, #36]	@ (8003d2c <TIM5_IRQHandler+0xd4>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00a      	beq.n	8003d28 <TIM5_IRQHandler+0xd0>
    	__timer_5_config__ ->ISR_Routines.Trigger_ISR();
 8003d12:	4b06      	ldr	r3, [pc, #24]	@ (8003d2c <TIM5_IRQHandler+0xd4>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003d1a:	4798      	blx	r3

    	TIM5->SR &= ~TIM_SR_TIF;  // Clear the Capture Compare interrupt flag
 8003d1c:	4b04      	ldr	r3, [pc, #16]	@ (8003d30 <TIM5_IRQHandler+0xd8>)
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	4a03      	ldr	r2, [pc, #12]	@ (8003d30 <TIM5_IRQHandler+0xd8>)
 8003d22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d26:	6113      	str	r3, [r2, #16]
    }
}
 8003d28:	bf00      	nop
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	200002d0 	.word	0x200002d0
 8003d30:	40000c00 	.word	0x40000c00

08003d34 <TIM6_DAC_IRQHandler>:

void TIM6_DAC_IRQHandler(void)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	af00      	add	r7, sp, #0
    if (__timer_6_config__->ISR_Routines.Update_ISR) {
 8003d38:	4b09      	ldr	r3, [pc, #36]	@ (8003d60 <TIM6_DAC_IRQHandler+0x2c>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d00a      	beq.n	8003d5a <TIM6_DAC_IRQHandler+0x26>
    	__timer_6_config__->ISR_Routines.Update_ISR();
 8003d44:	4b06      	ldr	r3, [pc, #24]	@ (8003d60 <TIM6_DAC_IRQHandler+0x2c>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d4c:	4798      	blx	r3
    	  TIM6->SR &= ~TIM_SR_UIF;  // Clear the Capture Compare interrupt flag
 8003d4e:	4b05      	ldr	r3, [pc, #20]	@ (8003d64 <TIM6_DAC_IRQHandler+0x30>)
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	4a04      	ldr	r2, [pc, #16]	@ (8003d64 <TIM6_DAC_IRQHandler+0x30>)
 8003d54:	f023 0301 	bic.w	r3, r3, #1
 8003d58:	6113      	str	r3, [r2, #16]

    }

}
 8003d5a:	bf00      	nop
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	200002d4 	.word	0x200002d4
 8003d64:	40001000 	.word	0x40001000

08003d68 <TIM7_IRQHandler>:

void TIM7_IRQHandler(void)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	af00      	add	r7, sp, #0
    if (__timer_7_config__->ISR_Routines.Update_ISR) {
 8003d6c:	4b09      	ldr	r3, [pc, #36]	@ (8003d94 <TIM7_IRQHandler+0x2c>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d00a      	beq.n	8003d8e <TIM7_IRQHandler+0x26>
    	__timer_7_config__->ISR_Routines.Update_ISR();
 8003d78:	4b06      	ldr	r3, [pc, #24]	@ (8003d94 <TIM7_IRQHandler+0x2c>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d80:	4798      	blx	r3

    	TIM7->SR &= ~TIM_SR_UIF;  // Clear the Capture Compare interrupt flag
 8003d82:	4b05      	ldr	r3, [pc, #20]	@ (8003d98 <TIM7_IRQHandler+0x30>)
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	4a04      	ldr	r2, [pc, #16]	@ (8003d98 <TIM7_IRQHandler+0x30>)
 8003d88:	f023 0301 	bic.w	r3, r3, #1
 8003d8c:	6113      	str	r3, [r2, #16]
    }
}
 8003d8e:	bf00      	nop
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	200002d8 	.word	0x200002d8
 8003d98:	40001400 	.word	0x40001400

08003d9c <TIM8_BRK_TIM12_IRQHandler>:
//		(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_4))
//{
//	NVIC_EnableIRQ(TIM8_CC_IRQn);
//}

void TIM8_BRK_TIM12_IRQHandler(void) {
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	af00      	add	r7, sp, #0
    if (__timer_8_config__ ->ISR_Routines.Break_ISR) {
 8003da0:	4b2b      	ldr	r3, [pc, #172]	@ (8003e50 <TIM8_BRK_TIM12_IRQHandler+0xb4>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d00a      	beq.n	8003dc2 <TIM8_BRK_TIM12_IRQHandler+0x26>
    	__timer_8_config__ ->ISR_Routines.Break_ISR();
 8003dac:	4b28      	ldr	r3, [pc, #160]	@ (8003e50 <TIM8_BRK_TIM12_IRQHandler+0xb4>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003db4:	4798      	blx	r3
    	TIM1->SR &= ~TIM_SR_BIF;  // Clear the Break interrupt flag
 8003db6:	4b27      	ldr	r3, [pc, #156]	@ (8003e54 <TIM8_BRK_TIM12_IRQHandler+0xb8>)
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	4a26      	ldr	r2, [pc, #152]	@ (8003e54 <TIM8_BRK_TIM12_IRQHandler+0xb8>)
 8003dbc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003dc0:	6113      	str	r3, [r2, #16]
    }

    if (__timer_12_config__ ->ISR_Routines.Capture_Compare_1_ISR){
 8003dc2:	4b25      	ldr	r3, [pc, #148]	@ (8003e58 <TIM8_BRK_TIM12_IRQHandler+0xbc>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00a      	beq.n	8003de4 <TIM8_BRK_TIM12_IRQHandler+0x48>
    	__timer_12_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 8003dce:	4b22      	ldr	r3, [pc, #136]	@ (8003e58 <TIM8_BRK_TIM12_IRQHandler+0xbc>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dd6:	4798      	blx	r3
    	TIM9->SR &= ~TIM_SR_CC1IF;  // Clear the Break interrupt flag
 8003dd8:	4b20      	ldr	r3, [pc, #128]	@ (8003e5c <TIM8_BRK_TIM12_IRQHandler+0xc0>)
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	4a1f      	ldr	r2, [pc, #124]	@ (8003e5c <TIM8_BRK_TIM12_IRQHandler+0xc0>)
 8003dde:	f023 0302 	bic.w	r3, r3, #2
 8003de2:	6113      	str	r3, [r2, #16]
    }

    if (__timer_12_config__ ->ISR_Routines.Capture_Compare_2_ISR){
 8003de4:	4b1c      	ldr	r3, [pc, #112]	@ (8003e58 <TIM8_BRK_TIM12_IRQHandler+0xbc>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d00a      	beq.n	8003e06 <TIM8_BRK_TIM12_IRQHandler+0x6a>
    	__timer_12_config__ ->ISR_Routines.Capture_Compare_2_ISR();
 8003df0:	4b19      	ldr	r3, [pc, #100]	@ (8003e58 <TIM8_BRK_TIM12_IRQHandler+0xbc>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003df8:	4798      	blx	r3
    	TIM9->SR &= ~TIM_SR_CC2IF;  // Clear the Break interrupt flag
 8003dfa:	4b18      	ldr	r3, [pc, #96]	@ (8003e5c <TIM8_BRK_TIM12_IRQHandler+0xc0>)
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	4a17      	ldr	r2, [pc, #92]	@ (8003e5c <TIM8_BRK_TIM12_IRQHandler+0xc0>)
 8003e00:	f023 0304 	bic.w	r3, r3, #4
 8003e04:	6113      	str	r3, [r2, #16]
    }

    if (__timer_12_config__ ->ISR_Routines.Update_ISR){
 8003e06:	4b14      	ldr	r3, [pc, #80]	@ (8003e58 <TIM8_BRK_TIM12_IRQHandler+0xbc>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00a      	beq.n	8003e28 <TIM8_BRK_TIM12_IRQHandler+0x8c>
    	__timer_12_config__ ->ISR_Routines.Update_ISR();
 8003e12:	4b11      	ldr	r3, [pc, #68]	@ (8003e58 <TIM8_BRK_TIM12_IRQHandler+0xbc>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e1a:	4798      	blx	r3
    	TIM9->SR &= ~TIM_SR_UIF;  // Clear the Break interrupt flag
 8003e1c:	4b0f      	ldr	r3, [pc, #60]	@ (8003e5c <TIM8_BRK_TIM12_IRQHandler+0xc0>)
 8003e1e:	691b      	ldr	r3, [r3, #16]
 8003e20:	4a0e      	ldr	r2, [pc, #56]	@ (8003e5c <TIM8_BRK_TIM12_IRQHandler+0xc0>)
 8003e22:	f023 0301 	bic.w	r3, r3, #1
 8003e26:	6113      	str	r3, [r2, #16]
    }

    if (__timer_12_config__ ->ISR_Routines.Trigger_ISR){
 8003e28:	4b0b      	ldr	r3, [pc, #44]	@ (8003e58 <TIM8_BRK_TIM12_IRQHandler+0xbc>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d00a      	beq.n	8003e4a <TIM8_BRK_TIM12_IRQHandler+0xae>
    	__timer_12_config__ ->ISR_Routines.Trigger_ISR();
 8003e34:	4b08      	ldr	r3, [pc, #32]	@ (8003e58 <TIM8_BRK_TIM12_IRQHandler+0xbc>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003e3c:	4798      	blx	r3
    	TIM9->SR &= ~TIM_SR_TIF;  // Clear the Break interrupt flag
 8003e3e:	4b07      	ldr	r3, [pc, #28]	@ (8003e5c <TIM8_BRK_TIM12_IRQHandler+0xc0>)
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	4a06      	ldr	r2, [pc, #24]	@ (8003e5c <TIM8_BRK_TIM12_IRQHandler+0xc0>)
 8003e44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e48:	6113      	str	r3, [r2, #16]
    }

}
 8003e4a:	bf00      	nop
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	200002dc 	.word	0x200002dc
 8003e54:	40010000 	.word	0x40010000
 8003e58:	200002ec 	.word	0x200002ec
 8003e5c:	40014000 	.word	0x40014000

08003e60 <TIM8_UP_TIM13_IRQHandler>:

void TIM8_UP_TIM13_IRQHandler(void) {
 8003e60:	b580      	push	{r7, lr}
 8003e62:	af00      	add	r7, sp, #0
    if (__timer_1_config__ ->ISR_Routines.Update_ISR) {
 8003e64:	4b1a      	ldr	r3, [pc, #104]	@ (8003ed0 <TIM8_UP_TIM13_IRQHandler+0x70>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d00a      	beq.n	8003e86 <TIM8_UP_TIM13_IRQHandler+0x26>
    	__timer_1_config__ ->ISR_Routines.Update_ISR();
 8003e70:	4b17      	ldr	r3, [pc, #92]	@ (8003ed0 <TIM8_UP_TIM13_IRQHandler+0x70>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e78:	4798      	blx	r3
    	TIM1->SR &= ~TIM_SR_UIF;  // Clear the Update interrupt flag
 8003e7a:	4b16      	ldr	r3, [pc, #88]	@ (8003ed4 <TIM8_UP_TIM13_IRQHandler+0x74>)
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	4a15      	ldr	r2, [pc, #84]	@ (8003ed4 <TIM8_UP_TIM13_IRQHandler+0x74>)
 8003e80:	f023 0301 	bic.w	r3, r3, #1
 8003e84:	6113      	str	r3, [r2, #16]
    }

    if (__timer_13_config__ ->ISR_Routines.Update_ISR) {
 8003e86:	4b14      	ldr	r3, [pc, #80]	@ (8003ed8 <TIM8_UP_TIM13_IRQHandler+0x78>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00a      	beq.n	8003ea8 <TIM8_UP_TIM13_IRQHandler+0x48>
    	__timer_13_config__ ->ISR_Routines.Update_ISR();
 8003e92:	4b11      	ldr	r3, [pc, #68]	@ (8003ed8 <TIM8_UP_TIM13_IRQHandler+0x78>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e9a:	4798      	blx	r3
    	TIM13->SR &= ~TIM_SR_UIF;  // Clear the Update interrupt flag
 8003e9c:	4b0f      	ldr	r3, [pc, #60]	@ (8003edc <TIM8_UP_TIM13_IRQHandler+0x7c>)
 8003e9e:	691b      	ldr	r3, [r3, #16]
 8003ea0:	4a0e      	ldr	r2, [pc, #56]	@ (8003edc <TIM8_UP_TIM13_IRQHandler+0x7c>)
 8003ea2:	f023 0301 	bic.w	r3, r3, #1
 8003ea6:	6113      	str	r3, [r2, #16]
    }

    if (__timer_13_config__ ->ISR_Routines.Capture_Compare_1_ISR) {
 8003ea8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ed8 <TIM8_UP_TIM13_IRQHandler+0x78>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d00a      	beq.n	8003eca <TIM8_UP_TIM13_IRQHandler+0x6a>
    	__timer_13_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 8003eb4:	4b08      	ldr	r3, [pc, #32]	@ (8003ed8 <TIM8_UP_TIM13_IRQHandler+0x78>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ebc:	4798      	blx	r3
    	TIM13->SR &= ~TIM_SR_CC1IF;  // Clear the Update interrupt flag
 8003ebe:	4b07      	ldr	r3, [pc, #28]	@ (8003edc <TIM8_UP_TIM13_IRQHandler+0x7c>)
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	4a06      	ldr	r2, [pc, #24]	@ (8003edc <TIM8_UP_TIM13_IRQHandler+0x7c>)
 8003ec4:	f023 0302 	bic.w	r3, r3, #2
 8003ec8:	6113      	str	r3, [r2, #16]
    }

}
 8003eca:	bf00      	nop
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	200002c0 	.word	0x200002c0
 8003ed4:	40010000 	.word	0x40010000
 8003ed8:	200002f0 	.word	0x200002f0
 8003edc:	40001c00 	.word	0x40001c00

08003ee0 <TIM8_TRG_COM_TIM14_IRQHandler>:

void TIM8_TRG_COM_TIM14_IRQHandler(void) {
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	af00      	add	r7, sp, #0
    if (__timer_8_config__ ->ISR_Routines.Trigger_ISR) {
 8003ee4:	4b22      	ldr	r3, [pc, #136]	@ (8003f70 <TIM8_TRG_COM_TIM14_IRQHandler+0x90>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d00a      	beq.n	8003f06 <TIM8_TRG_COM_TIM14_IRQHandler+0x26>
    	__timer_8_config__ ->ISR_Routines.Trigger_ISR();
 8003ef0:	4b1f      	ldr	r3, [pc, #124]	@ (8003f70 <TIM8_TRG_COM_TIM14_IRQHandler+0x90>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003ef8:	4798      	blx	r3

    	TIM8->SR &= ~TIM_SR_TIF;  // Clear the Trigger interrupt flag
 8003efa:	4b1e      	ldr	r3, [pc, #120]	@ (8003f74 <TIM8_TRG_COM_TIM14_IRQHandler+0x94>)
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	4a1d      	ldr	r2, [pc, #116]	@ (8003f74 <TIM8_TRG_COM_TIM14_IRQHandler+0x94>)
 8003f00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f04:	6113      	str	r3, [r2, #16]
    }

    if (__timer_8_config__ ->ISR_Routines.Commutation_ISR) {
 8003f06:	4b1a      	ldr	r3, [pc, #104]	@ (8003f70 <TIM8_TRG_COM_TIM14_IRQHandler+0x90>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d00a      	beq.n	8003f28 <TIM8_TRG_COM_TIM14_IRQHandler+0x48>
    	__timer_8_config__ ->ISR_Routines.Commutation_ISR();
 8003f12:	4b17      	ldr	r3, [pc, #92]	@ (8003f70 <TIM8_TRG_COM_TIM14_IRQHandler+0x90>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003f1a:	4798      	blx	r3

    	TIM8->SR &= ~TIM_SR_COMIF;  // Clear the Trigger interrupt flag
 8003f1c:	4b15      	ldr	r3, [pc, #84]	@ (8003f74 <TIM8_TRG_COM_TIM14_IRQHandler+0x94>)
 8003f1e:	691b      	ldr	r3, [r3, #16]
 8003f20:	4a14      	ldr	r2, [pc, #80]	@ (8003f74 <TIM8_TRG_COM_TIM14_IRQHandler+0x94>)
 8003f22:	f023 0320 	bic.w	r3, r3, #32
 8003f26:	6113      	str	r3, [r2, #16]
    }

    if (__timer_14_config__ ->ISR_Routines.Update_ISR) {
 8003f28:	4b13      	ldr	r3, [pc, #76]	@ (8003f78 <TIM8_TRG_COM_TIM14_IRQHandler+0x98>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d00a      	beq.n	8003f4a <TIM8_TRG_COM_TIM14_IRQHandler+0x6a>
    	__timer_14_config__ ->ISR_Routines.Update_ISR();
 8003f34:	4b10      	ldr	r3, [pc, #64]	@ (8003f78 <TIM8_TRG_COM_TIM14_IRQHandler+0x98>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f3c:	4798      	blx	r3
    	TIM14->SR &= ~TIM_SR_UIF;  // Clear the Update interrupt flag
 8003f3e:	4b0f      	ldr	r3, [pc, #60]	@ (8003f7c <TIM8_TRG_COM_TIM14_IRQHandler+0x9c>)
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	4a0e      	ldr	r2, [pc, #56]	@ (8003f7c <TIM8_TRG_COM_TIM14_IRQHandler+0x9c>)
 8003f44:	f023 0301 	bic.w	r3, r3, #1
 8003f48:	6113      	str	r3, [r2, #16]
    }

    if (__timer_14_config__ ->ISR_Routines.Capture_Compare_1_ISR) {
 8003f4a:	4b0b      	ldr	r3, [pc, #44]	@ (8003f78 <TIM8_TRG_COM_TIM14_IRQHandler+0x98>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00a      	beq.n	8003f6c <TIM8_TRG_COM_TIM14_IRQHandler+0x8c>
    	__timer_14_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 8003f56:	4b08      	ldr	r3, [pc, #32]	@ (8003f78 <TIM8_TRG_COM_TIM14_IRQHandler+0x98>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f5e:	4798      	blx	r3
    	TIM14->SR &= ~TIM_SR_CC1IF;  // Clear the Update interrupt flag
 8003f60:	4b06      	ldr	r3, [pc, #24]	@ (8003f7c <TIM8_TRG_COM_TIM14_IRQHandler+0x9c>)
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	4a05      	ldr	r2, [pc, #20]	@ (8003f7c <TIM8_TRG_COM_TIM14_IRQHandler+0x9c>)
 8003f66:	f023 0302 	bic.w	r3, r3, #2
 8003f6a:	6113      	str	r3, [r2, #16]
    }

}
 8003f6c:	bf00      	nop
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	200002dc 	.word	0x200002dc
 8003f74:	40010400 	.word	0x40010400
 8003f78:	200002f4 	.word	0x200002f4
 8003f7c:	40002000 	.word	0x40002000

08003f80 <TIM8_CC_IRQHandler>:

void TIM8_CC_IRQHandler(void) {
 8003f80:	b580      	push	{r7, lr}
 8003f82:	af00      	add	r7, sp, #0
    if (__timer_8_config__ ->ISR_Routines.Capture_Compare_1_ISR) {
 8003f84:	4b22      	ldr	r3, [pc, #136]	@ (8004010 <TIM8_CC_IRQHandler+0x90>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00a      	beq.n	8003fa6 <TIM8_CC_IRQHandler+0x26>
    	__timer_8_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 8003f90:	4b1f      	ldr	r3, [pc, #124]	@ (8004010 <TIM8_CC_IRQHandler+0x90>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f98:	4798      	blx	r3

    	TIM8->SR &= ~TIM_SR_CC1IF;  // Clear the Capture Compare interrupt flag
 8003f9a:	4b1e      	ldr	r3, [pc, #120]	@ (8004014 <TIM8_CC_IRQHandler+0x94>)
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	4a1d      	ldr	r2, [pc, #116]	@ (8004014 <TIM8_CC_IRQHandler+0x94>)
 8003fa0:	f023 0302 	bic.w	r3, r3, #2
 8003fa4:	6113      	str	r3, [r2, #16]
    }

    if (__timer_8_config__ ->ISR_Routines.Capture_Compare_2_ISR) {
 8003fa6:	4b1a      	ldr	r3, [pc, #104]	@ (8004010 <TIM8_CC_IRQHandler+0x90>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d00a      	beq.n	8003fc8 <TIM8_CC_IRQHandler+0x48>
    	__timer_8_config__ ->ISR_Routines.Capture_Compare_2_ISR();
 8003fb2:	4b17      	ldr	r3, [pc, #92]	@ (8004010 <TIM8_CC_IRQHandler+0x90>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fba:	4798      	blx	r3

    	TIM8->SR &= ~TIM_SR_CC2IF;  // Clear the Capture Compare interrupt flag
 8003fbc:	4b15      	ldr	r3, [pc, #84]	@ (8004014 <TIM8_CC_IRQHandler+0x94>)
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	4a14      	ldr	r2, [pc, #80]	@ (8004014 <TIM8_CC_IRQHandler+0x94>)
 8003fc2:	f023 0304 	bic.w	r3, r3, #4
 8003fc6:	6113      	str	r3, [r2, #16]
    }

    if (__timer_8_config__ ->ISR_Routines.Capture_Compare_3_ISR) {
 8003fc8:	4b11      	ldr	r3, [pc, #68]	@ (8004010 <TIM8_CC_IRQHandler+0x90>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d00a      	beq.n	8003fea <TIM8_CC_IRQHandler+0x6a>
    	__timer_8_config__ ->ISR_Routines.Capture_Compare_3_ISR();
 8003fd4:	4b0e      	ldr	r3, [pc, #56]	@ (8004010 <TIM8_CC_IRQHandler+0x90>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003fdc:	4798      	blx	r3

    	TIM8->SR &= ~TIM_SR_CC3IF;  // Clear the Capture Compare interrupt flag
 8003fde:	4b0d      	ldr	r3, [pc, #52]	@ (8004014 <TIM8_CC_IRQHandler+0x94>)
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	4a0c      	ldr	r2, [pc, #48]	@ (8004014 <TIM8_CC_IRQHandler+0x94>)
 8003fe4:	f023 0308 	bic.w	r3, r3, #8
 8003fe8:	6113      	str	r3, [r2, #16]
    }

    if (__timer_8_config__ ->ISR_Routines.Capture_Compare_4_ISR) {
 8003fea:	4b09      	ldr	r3, [pc, #36]	@ (8004010 <TIM8_CC_IRQHandler+0x90>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00a      	beq.n	800400c <TIM8_CC_IRQHandler+0x8c>
    	__timer_8_config__ ->ISR_Routines.Capture_Compare_4_ISR();
 8003ff6:	4b06      	ldr	r3, [pc, #24]	@ (8004010 <TIM8_CC_IRQHandler+0x90>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003ffe:	4798      	blx	r3

    	TIM8->SR &= ~TIM_SR_CC4IF;  // Clear the Capture Compare interrupt flag
 8004000:	4b04      	ldr	r3, [pc, #16]	@ (8004014 <TIM8_CC_IRQHandler+0x94>)
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	4a03      	ldr	r2, [pc, #12]	@ (8004014 <TIM8_CC_IRQHandler+0x94>)
 8004006:	f023 0310 	bic.w	r3, r3, #16
 800400a:	6113      	str	r3, [r2, #16]
    }
}
 800400c:	bf00      	nop
 800400e:	bd80      	pop	{r7, pc}
 8004010:	200002dc 	.word	0x200002dc
 8004014:	40010400 	.word	0x40010400

08004018 <UART4_IRQHandler>:




void UART4_IRQHandler(void)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	af00      	add	r7, sp, #0
	USART_SR = UART4 -> SR;
 800401c:	4b57      	ldr	r3, [pc, #348]	@ (800417c <UART4_IRQHandler+0x164>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	b29a      	uxth	r2, r3
 8004022:	4b57      	ldr	r3, [pc, #348]	@ (8004180 <UART4_IRQHandler+0x168>)
 8004024:	801a      	strh	r2, [r3, #0]
	if(USART_SR & USART_SR_CTS)
 8004026:	4b56      	ldr	r3, [pc, #344]	@ (8004180 <UART4_IRQHandler+0x168>)
 8004028:	881b      	ldrh	r3, [r3, #0]
 800402a:	b29b      	uxth	r3, r3
 800402c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004030:	2b00      	cmp	r3, #0
 8004032:	d010      	beq.n	8004056 <UART4_IRQHandler+0x3e>
	{
	    if (__usart_4_config__ ->ISR_Routines.CTS_ISR) {
 8004034:	4b53      	ldr	r3, [pc, #332]	@ (8004184 <UART4_IRQHandler+0x16c>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800403c:	2b00      	cmp	r3, #0
 800403e:	d00a      	beq.n	8004056 <UART4_IRQHandler+0x3e>
	    	__usart_4_config__ ->ISR_Routines.CTS_ISR();
 8004040:	4b50      	ldr	r3, [pc, #320]	@ (8004184 <UART4_IRQHandler+0x16c>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004048:	4798      	blx	r3
	    	UART4->SR &= ~USART_SR_CTS;  // Clear the Break interrupt flag
 800404a:	4b4c      	ldr	r3, [pc, #304]	@ (800417c <UART4_IRQHandler+0x164>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a4b      	ldr	r2, [pc, #300]	@ (800417c <UART4_IRQHandler+0x164>)
 8004050:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004054:	6013      	str	r3, [r2, #0]
	    }
	}

	if(USART_SR & USART_SR_LBD)
 8004056:	4b4a      	ldr	r3, [pc, #296]	@ (8004180 <UART4_IRQHandler+0x168>)
 8004058:	881b      	ldrh	r3, [r3, #0]
 800405a:	b29b      	uxth	r3, r3
 800405c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004060:	2b00      	cmp	r3, #0
 8004062:	d010      	beq.n	8004086 <UART4_IRQHandler+0x6e>
	{
	    if (__usart_4_config__ ->ISR_Routines.LIN_Break_Detection_ISR) {
 8004064:	4b47      	ldr	r3, [pc, #284]	@ (8004184 <UART4_IRQHandler+0x16c>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d00a      	beq.n	8004086 <UART4_IRQHandler+0x6e>
	    	__usart_4_config__ ->ISR_Routines.LIN_Break_Detection_ISR();
 8004070:	4b44      	ldr	r3, [pc, #272]	@ (8004184 <UART4_IRQHandler+0x16c>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004078:	4798      	blx	r3
	    	UART4->SR &= ~USART_SR_LBD;  // Clear the Break interrupt flag
 800407a:	4b40      	ldr	r3, [pc, #256]	@ (800417c <UART4_IRQHandler+0x164>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a3f      	ldr	r2, [pc, #252]	@ (800417c <UART4_IRQHandler+0x164>)
 8004080:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004084:	6013      	str	r3, [r2, #0]
	    }
	}

	if(USART_SR & USART_SR_TXE)
 8004086:	4b3e      	ldr	r3, [pc, #248]	@ (8004180 <UART4_IRQHandler+0x168>)
 8004088:	881b      	ldrh	r3, [r3, #0]
 800408a:	b29b      	uxth	r3, r3
 800408c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004090:	2b00      	cmp	r3, #0
 8004092:	d010      	beq.n	80040b6 <UART4_IRQHandler+0x9e>
	{
	    if (__usart_4_config__ ->ISR_Routines.Transmit_Empty_ISR) {
 8004094:	4b3b      	ldr	r3, [pc, #236]	@ (8004184 <UART4_IRQHandler+0x16c>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800409c:	2b00      	cmp	r3, #0
 800409e:	d00a      	beq.n	80040b6 <UART4_IRQHandler+0x9e>
	    	__usart_4_config__ ->ISR_Routines.Transmit_Empty_ISR();
 80040a0:	4b38      	ldr	r3, [pc, #224]	@ (8004184 <UART4_IRQHandler+0x16c>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80040a8:	4798      	blx	r3
	    	UART4->SR &= ~USART_SR_TXE;  // Clear the Break interrupt flag
 80040aa:	4b34      	ldr	r3, [pc, #208]	@ (800417c <UART4_IRQHandler+0x164>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a33      	ldr	r2, [pc, #204]	@ (800417c <UART4_IRQHandler+0x164>)
 80040b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040b4:	6013      	str	r3, [r2, #0]
	    }
	}


	if(USART_SR & USART_SR_TC)
 80040b6:	4b32      	ldr	r3, [pc, #200]	@ (8004180 <UART4_IRQHandler+0x168>)
 80040b8:	881b      	ldrh	r3, [r3, #0]
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d010      	beq.n	80040e6 <UART4_IRQHandler+0xce>
	{
	    if (__usart_4_config__ ->ISR_Routines.Transmission_Complete_ISR) {
 80040c4:	4b2f      	ldr	r3, [pc, #188]	@ (8004184 <UART4_IRQHandler+0x16c>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d00a      	beq.n	80040e6 <UART4_IRQHandler+0xce>
	    	__usart_4_config__ ->ISR_Routines.Transmission_Complete_ISR();
 80040d0:	4b2c      	ldr	r3, [pc, #176]	@ (8004184 <UART4_IRQHandler+0x16c>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80040d8:	4798      	blx	r3
	    	UART4->SR &= ~USART_SR_TC;  // Clear the Break interrupt flag
 80040da:	4b28      	ldr	r3, [pc, #160]	@ (800417c <UART4_IRQHandler+0x164>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a27      	ldr	r2, [pc, #156]	@ (800417c <UART4_IRQHandler+0x164>)
 80040e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040e4:	6013      	str	r3, [r2, #0]
	    }
	}

	if(USART_SR & USART_SR_RXNE)
 80040e6:	4b26      	ldr	r3, [pc, #152]	@ (8004180 <UART4_IRQHandler+0x168>)
 80040e8:	881b      	ldrh	r3, [r3, #0]
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	f003 0320 	and.w	r3, r3, #32
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d010      	beq.n	8004116 <UART4_IRQHandler+0xfe>
	{
	    if (__usart_4_config__ ->ISR_Routines.Receiver_Empty_ISR) {
 80040f4:	4b23      	ldr	r3, [pc, #140]	@ (8004184 <UART4_IRQHandler+0x16c>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d00a      	beq.n	8004116 <UART4_IRQHandler+0xfe>
	    	__usart_4_config__ ->ISR_Routines.Receiver_Empty_ISR();
 8004100:	4b20      	ldr	r3, [pc, #128]	@ (8004184 <UART4_IRQHandler+0x16c>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8004108:	4798      	blx	r3
	    	UART4->SR &= ~USART_SR_RXNE;  // Clear the Break interrupt flag
 800410a:	4b1c      	ldr	r3, [pc, #112]	@ (800417c <UART4_IRQHandler+0x164>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a1b      	ldr	r2, [pc, #108]	@ (800417c <UART4_IRQHandler+0x164>)
 8004110:	f023 0320 	bic.w	r3, r3, #32
 8004114:	6013      	str	r3, [r2, #0]
	    }
	}


	if(USART_SR & USART_SR_IDLE)
 8004116:	4b1a      	ldr	r3, [pc, #104]	@ (8004180 <UART4_IRQHandler+0x168>)
 8004118:	881b      	ldrh	r3, [r3, #0]
 800411a:	b29b      	uxth	r3, r3
 800411c:	f003 0310 	and.w	r3, r3, #16
 8004120:	2b00      	cmp	r3, #0
 8004122:	d010      	beq.n	8004146 <UART4_IRQHandler+0x12e>
	{
	    if (__usart_4_config__ ->ISR_Routines.Idle_Line_ISR) {
 8004124:	4b17      	ldr	r3, [pc, #92]	@ (8004184 <UART4_IRQHandler+0x16c>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800412c:	2b00      	cmp	r3, #0
 800412e:	d00a      	beq.n	8004146 <UART4_IRQHandler+0x12e>
	    	__usart_4_config__ ->ISR_Routines.Idle_Line_ISR();
 8004130:	4b14      	ldr	r3, [pc, #80]	@ (8004184 <UART4_IRQHandler+0x16c>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004138:	4798      	blx	r3
	    	UART4->SR &= ~USART_SR_IDLE;  // Clear the Break interrupt flag
 800413a:	4b10      	ldr	r3, [pc, #64]	@ (800417c <UART4_IRQHandler+0x164>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a0f      	ldr	r2, [pc, #60]	@ (800417c <UART4_IRQHandler+0x164>)
 8004140:	f023 0310 	bic.w	r3, r3, #16
 8004144:	6013      	str	r3, [r2, #0]
	    }
	}

	if(USART_SR & USART_SR_PE)
 8004146:	4b0e      	ldr	r3, [pc, #56]	@ (8004180 <UART4_IRQHandler+0x168>)
 8004148:	881b      	ldrh	r3, [r3, #0]
 800414a:	b29b      	uxth	r3, r3
 800414c:	f003 0301 	and.w	r3, r3, #1
 8004150:	2b00      	cmp	r3, #0
 8004152:	d010      	beq.n	8004176 <UART4_IRQHandler+0x15e>
	{
	    if (__usart_4_config__ ->ISR_Routines.Parity_ISR) {
 8004154:	4b0b      	ldr	r3, [pc, #44]	@ (8004184 <UART4_IRQHandler+0x16c>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800415c:	2b00      	cmp	r3, #0
 800415e:	d00a      	beq.n	8004176 <UART4_IRQHandler+0x15e>
	    	__usart_4_config__ ->ISR_Routines.Parity_ISR();
 8004160:	4b08      	ldr	r3, [pc, #32]	@ (8004184 <UART4_IRQHandler+0x16c>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004168:	4798      	blx	r3
	    	UART4->SR &= ~USART_SR_PE;  // Clear the Break interrupt flag
 800416a:	4b04      	ldr	r3, [pc, #16]	@ (800417c <UART4_IRQHandler+0x164>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a03      	ldr	r2, [pc, #12]	@ (800417c <UART4_IRQHandler+0x164>)
 8004170:	f023 0301 	bic.w	r3, r3, #1
 8004174:	6013      	str	r3, [r2, #0]
	    }
	}

}
 8004176:	bf00      	nop
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	40004c00 	.word	0x40004c00
 8004180:	20000300 	.word	0x20000300
 8004184:	200002fc 	.word	0x200002fc

08004188 <USART1_IRQHandler>:


void USART1_IRQHandler(void)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	af00      	add	r7, sp, #0
	USART_SR = USART1 -> SR;
 800418c:	4b57      	ldr	r3, [pc, #348]	@ (80042ec <USART1_IRQHandler+0x164>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	b29a      	uxth	r2, r3
 8004192:	4b57      	ldr	r3, [pc, #348]	@ (80042f0 <USART1_IRQHandler+0x168>)
 8004194:	801a      	strh	r2, [r3, #0]
	if(USART_SR & USART_SR_CTS)
 8004196:	4b56      	ldr	r3, [pc, #344]	@ (80042f0 <USART1_IRQHandler+0x168>)
 8004198:	881b      	ldrh	r3, [r3, #0]
 800419a:	b29b      	uxth	r3, r3
 800419c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d010      	beq.n	80041c6 <USART1_IRQHandler+0x3e>
	{
	    if (__usart_1_config__ ->ISR_Routines.CTS_ISR) {
 80041a4:	4b53      	ldr	r3, [pc, #332]	@ (80042f4 <USART1_IRQHandler+0x16c>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00a      	beq.n	80041c6 <USART1_IRQHandler+0x3e>
	    	__usart_1_config__ ->ISR_Routines.CTS_ISR();
 80041b0:	4b50      	ldr	r3, [pc, #320]	@ (80042f4 <USART1_IRQHandler+0x16c>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80041b8:	4798      	blx	r3
	    	USART1->SR &= ~USART_SR_CTS;  // Clear the Break interrupt flag
 80041ba:	4b4c      	ldr	r3, [pc, #304]	@ (80042ec <USART1_IRQHandler+0x164>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a4b      	ldr	r2, [pc, #300]	@ (80042ec <USART1_IRQHandler+0x164>)
 80041c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80041c4:	6013      	str	r3, [r2, #0]
	    }
	}

	if(USART_SR & USART_SR_LBD)
 80041c6:	4b4a      	ldr	r3, [pc, #296]	@ (80042f0 <USART1_IRQHandler+0x168>)
 80041c8:	881b      	ldrh	r3, [r3, #0]
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d010      	beq.n	80041f6 <USART1_IRQHandler+0x6e>
	{
	    if (__usart_1_config__ ->ISR_Routines.LIN_Break_Detection_ISR) {
 80041d4:	4b47      	ldr	r3, [pc, #284]	@ (80042f4 <USART1_IRQHandler+0x16c>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d00a      	beq.n	80041f6 <USART1_IRQHandler+0x6e>
	    	__usart_1_config__ ->ISR_Routines.LIN_Break_Detection_ISR();
 80041e0:	4b44      	ldr	r3, [pc, #272]	@ (80042f4 <USART1_IRQHandler+0x16c>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80041e8:	4798      	blx	r3
	    	USART1->SR &= ~USART_SR_LBD;  // Clear the Break interrupt flag
 80041ea:	4b40      	ldr	r3, [pc, #256]	@ (80042ec <USART1_IRQHandler+0x164>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a3f      	ldr	r2, [pc, #252]	@ (80042ec <USART1_IRQHandler+0x164>)
 80041f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80041f4:	6013      	str	r3, [r2, #0]
	    }
	}

	if(USART_SR & USART_SR_TXE)
 80041f6:	4b3e      	ldr	r3, [pc, #248]	@ (80042f0 <USART1_IRQHandler+0x168>)
 80041f8:	881b      	ldrh	r3, [r3, #0]
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004200:	2b00      	cmp	r3, #0
 8004202:	d010      	beq.n	8004226 <USART1_IRQHandler+0x9e>
	{
	    if (__usart_1_config__ ->ISR_Routines.Transmit_Empty_ISR) {
 8004204:	4b3b      	ldr	r3, [pc, #236]	@ (80042f4 <USART1_IRQHandler+0x16c>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800420c:	2b00      	cmp	r3, #0
 800420e:	d00a      	beq.n	8004226 <USART1_IRQHandler+0x9e>
	    	__usart_1_config__ ->ISR_Routines.Transmit_Empty_ISR();
 8004210:	4b38      	ldr	r3, [pc, #224]	@ (80042f4 <USART1_IRQHandler+0x16c>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004218:	4798      	blx	r3
	    	USART1->SR &= ~USART_SR_TXE;  // Clear the Break interrupt flag
 800421a:	4b34      	ldr	r3, [pc, #208]	@ (80042ec <USART1_IRQHandler+0x164>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a33      	ldr	r2, [pc, #204]	@ (80042ec <USART1_IRQHandler+0x164>)
 8004220:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004224:	6013      	str	r3, [r2, #0]
	    }
	}


	if(USART_SR & USART_SR_TC)
 8004226:	4b32      	ldr	r3, [pc, #200]	@ (80042f0 <USART1_IRQHandler+0x168>)
 8004228:	881b      	ldrh	r3, [r3, #0]
 800422a:	b29b      	uxth	r3, r3
 800422c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004230:	2b00      	cmp	r3, #0
 8004232:	d010      	beq.n	8004256 <USART1_IRQHandler+0xce>
	{
	    if (__usart_1_config__ ->ISR_Routines.Transmission_Complete_ISR) {
 8004234:	4b2f      	ldr	r3, [pc, #188]	@ (80042f4 <USART1_IRQHandler+0x16c>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800423c:	2b00      	cmp	r3, #0
 800423e:	d00a      	beq.n	8004256 <USART1_IRQHandler+0xce>
	    	__usart_1_config__ ->ISR_Routines.Transmission_Complete_ISR();
 8004240:	4b2c      	ldr	r3, [pc, #176]	@ (80042f4 <USART1_IRQHandler+0x16c>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8004248:	4798      	blx	r3
	    	USART1->SR &= ~USART_SR_TC;  // Clear the Break interrupt flag
 800424a:	4b28      	ldr	r3, [pc, #160]	@ (80042ec <USART1_IRQHandler+0x164>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a27      	ldr	r2, [pc, #156]	@ (80042ec <USART1_IRQHandler+0x164>)
 8004250:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004254:	6013      	str	r3, [r2, #0]
	    }
	}

	if(USART_SR & USART_SR_RXNE)
 8004256:	4b26      	ldr	r3, [pc, #152]	@ (80042f0 <USART1_IRQHandler+0x168>)
 8004258:	881b      	ldrh	r3, [r3, #0]
 800425a:	b29b      	uxth	r3, r3
 800425c:	f003 0320 	and.w	r3, r3, #32
 8004260:	2b00      	cmp	r3, #0
 8004262:	d010      	beq.n	8004286 <USART1_IRQHandler+0xfe>
	{
	    if (__usart_1_config__ ->ISR_Routines.Receiver_Empty_ISR) {
 8004264:	4b23      	ldr	r3, [pc, #140]	@ (80042f4 <USART1_IRQHandler+0x16c>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d00a      	beq.n	8004286 <USART1_IRQHandler+0xfe>
	    	__usart_1_config__ ->ISR_Routines.Receiver_Empty_ISR();
 8004270:	4b20      	ldr	r3, [pc, #128]	@ (80042f4 <USART1_IRQHandler+0x16c>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8004278:	4798      	blx	r3
	    	USART1->SR &= ~USART_SR_RXNE;  // Clear the Break interrupt flag
 800427a:	4b1c      	ldr	r3, [pc, #112]	@ (80042ec <USART1_IRQHandler+0x164>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a1b      	ldr	r2, [pc, #108]	@ (80042ec <USART1_IRQHandler+0x164>)
 8004280:	f023 0320 	bic.w	r3, r3, #32
 8004284:	6013      	str	r3, [r2, #0]
	    }
	}


	if(USART_SR & USART_SR_IDLE)
 8004286:	4b1a      	ldr	r3, [pc, #104]	@ (80042f0 <USART1_IRQHandler+0x168>)
 8004288:	881b      	ldrh	r3, [r3, #0]
 800428a:	b29b      	uxth	r3, r3
 800428c:	f003 0310 	and.w	r3, r3, #16
 8004290:	2b00      	cmp	r3, #0
 8004292:	d010      	beq.n	80042b6 <USART1_IRQHandler+0x12e>
	{
	    if (__usart_1_config__ ->ISR_Routines.Idle_Line_ISR) {
 8004294:	4b17      	ldr	r3, [pc, #92]	@ (80042f4 <USART1_IRQHandler+0x16c>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800429c:	2b00      	cmp	r3, #0
 800429e:	d00a      	beq.n	80042b6 <USART1_IRQHandler+0x12e>
	    	__usart_1_config__ ->ISR_Routines.Idle_Line_ISR();
 80042a0:	4b14      	ldr	r3, [pc, #80]	@ (80042f4 <USART1_IRQHandler+0x16c>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80042a8:	4798      	blx	r3
	    	USART1->SR &= ~USART_SR_IDLE;  // Clear the Break interrupt flag
 80042aa:	4b10      	ldr	r3, [pc, #64]	@ (80042ec <USART1_IRQHandler+0x164>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a0f      	ldr	r2, [pc, #60]	@ (80042ec <USART1_IRQHandler+0x164>)
 80042b0:	f023 0310 	bic.w	r3, r3, #16
 80042b4:	6013      	str	r3, [r2, #0]
	    }
	}

	if(USART_SR & USART_SR_PE)
 80042b6:	4b0e      	ldr	r3, [pc, #56]	@ (80042f0 <USART1_IRQHandler+0x168>)
 80042b8:	881b      	ldrh	r3, [r3, #0]
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	f003 0301 	and.w	r3, r3, #1
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d010      	beq.n	80042e6 <USART1_IRQHandler+0x15e>
	{
	    if (__usart_1_config__ ->ISR_Routines.Parity_ISR) {
 80042c4:	4b0b      	ldr	r3, [pc, #44]	@ (80042f4 <USART1_IRQHandler+0x16c>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00a      	beq.n	80042e6 <USART1_IRQHandler+0x15e>
	    	__usart_1_config__ ->ISR_Routines.Parity_ISR();
 80042d0:	4b08      	ldr	r3, [pc, #32]	@ (80042f4 <USART1_IRQHandler+0x16c>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80042d8:	4798      	blx	r3
	    	USART1->SR &= ~USART_SR_PE;  // Clear the Break interrupt flag
 80042da:	4b04      	ldr	r3, [pc, #16]	@ (80042ec <USART1_IRQHandler+0x164>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a03      	ldr	r2, [pc, #12]	@ (80042ec <USART1_IRQHandler+0x164>)
 80042e0:	f023 0301 	bic.w	r3, r3, #1
 80042e4:	6013      	str	r3, [r2, #0]
	    }
	}

}
 80042e6:	bf00      	nop
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	40011000 	.word	0x40011000
 80042f0:	20000300 	.word	0x20000300
 80042f4:	200002f8 	.word	0x200002f8

080042f8 <Delay_us>:
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	ed87 0a01 	vstr	s0, [r7, #4]
	SysTick->LOAD = 168 * us;
 8004302:	edd7 7a01 	vldr	s15, [r7, #4]
 8004306:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800433c <Delay_us+0x44>
 800430a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800430e:	4b0c      	ldr	r3, [pc, #48]	@ (8004340 <Delay_us+0x48>)
 8004310:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004314:	ee17 2a90 	vmov	r2, s15
 8004318:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 800431a:	4b09      	ldr	r3, [pc, #36]	@ (8004340 <Delay_us+0x48>)
 800431c:	2200      	movs	r2, #0
 800431e:	609a      	str	r2, [r3, #8]
	while((SysTick->CTRL & 0x00010000) == 0);
 8004320:	bf00      	nop
 8004322:	4b07      	ldr	r3, [pc, #28]	@ (8004340 <Delay_us+0x48>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d0f9      	beq.n	8004322 <Delay_us+0x2a>
	return (0UL);                                                     /* Function successful */
 800432e:	2300      	movs	r3, #0
}
 8004330:	4618      	mov	r0, r3
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr
 800433c:	43280000 	.word	0x43280000
 8004340:	e000e010 	.word	0xe000e010

08004344 <Delay_ms>:

__STATIC_INLINE uint32_t Delay_ms(volatile float ms)
{
 8004344:	b480      	push	{r7}
 8004346:	b085      	sub	sp, #20
 8004348:	af00      	add	r7, sp, #0
 800434a:	ed87 0a01 	vstr	s0, [r7, #4]
	unsigned long x =0x29040 * (ms);
 800434e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004352:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8004398 <Delay_ms+0x54>
 8004356:	ee67 7a87 	vmul.f32	s15, s15, s14
 800435a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800435e:	ee17 3a90 	vmov	r3, s15
 8004362:	60fb      	str	r3, [r7, #12]
	SysTick->LOAD =  x ;
 8004364:	4a0d      	ldr	r2, [pc, #52]	@ (800439c <Delay_ms+0x58>)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0;
 800436a:	4b0c      	ldr	r3, [pc, #48]	@ (800439c <Delay_ms+0x58>)
 800436c:	2200      	movs	r2, #0
 800436e:	609a      	str	r2, [r3, #8]
	SysTick->CTRL |= 1;
 8004370:	4b0a      	ldr	r3, [pc, #40]	@ (800439c <Delay_ms+0x58>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a09      	ldr	r2, [pc, #36]	@ (800439c <Delay_ms+0x58>)
 8004376:	f043 0301 	orr.w	r3, r3, #1
 800437a:	6013      	str	r3, [r2, #0]
	while((SysTick->CTRL & 0x00010000) == 0);
 800437c:	bf00      	nop
 800437e:	4b07      	ldr	r3, [pc, #28]	@ (800439c <Delay_ms+0x58>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d0f9      	beq.n	800437e <Delay_ms+0x3a>
	return (0UL);                                                     /* Function successful */
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	3714      	adds	r7, #20
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr
 8004398:	48241000 	.word	0x48241000
 800439c:	e000e010 	.word	0xe000e010

080043a0 <Delay_milli>:


__STATIC_INLINE uint32_t Delay_milli(float ms)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	ed87 0a01 	vstr	s0, [r7, #4]
	for (; ms>0; ms--)
 80043aa:	e00b      	b.n	80043c4 <Delay_milli+0x24>
	{
		Delay_ms(1);
 80043ac:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80043b0:	f7ff ffc8 	bl	8004344 <Delay_ms>
	for (; ms>0; ms--)
 80043b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80043b8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80043bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80043c0:	edc7 7a01 	vstr	s15, [r7, #4]
 80043c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80043c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80043cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043d0:	dcec      	bgt.n	80043ac <Delay_milli+0xc>
	}
	return ms;
 80043d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80043d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043da:	ee17 3a90 	vmov	r3, s15
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3708      	adds	r7, #8
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}

080043e6 <Read_Status_Registers>:
}Status_bits;



static uint32_t Read_Status_Registers(W25Qxx_Config *_w25q_config_)
{
 80043e6:	b580      	push	{r7, lr}
 80043e8:	b086      	sub	sp, #24
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	6078      	str	r0, [r7, #4]
	uint32_t status[3];
	status[0] = 0;
 80043ee:	2300      	movs	r3, #0
 80043f0:	60fb      	str	r3, [r7, #12]
	status[1] = 0;
 80043f2:	2300      	movs	r3, #0
 80043f4:	613b      	str	r3, [r7, #16]
	status[2] = 0;
 80043f6:	2300      	movs	r3, #0
 80043f8:	617b      	str	r3, [r7, #20]

	SPI_NSS_Low(_w25q_config_->SPI_Port);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4618      	mov	r0, r3
 8004400:	f7ff f988 	bl	8003714 <SPI_NSS_Low>
	 SPI_TRX_Byte(_w25q_config_->SPI_Port, 0x05);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2105      	movs	r1, #5
 800440a:	4618      	mov	r0, r3
 800440c:	f7fe ff5a 	bl	80032c4 <SPI_TRX_Byte>
	status[0] = SPI_TRX_Byte(_w25q_config_->SPI_Port, 0x00);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2100      	movs	r1, #0
 8004416:	4618      	mov	r0, r3
 8004418:	f7fe ff54 	bl	80032c4 <SPI_TRX_Byte>
 800441c:	4603      	mov	r3, r0
 800441e:	60fb      	str	r3, [r7, #12]
	SPI_NSS_High(_w25q_config_->SPI_Port);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4618      	mov	r0, r3
 8004426:	f7ff f965 	bl	80036f4 <SPI_NSS_High>
//	SPI_NSS_Low(_w25q_config_->SPI_Port);
//	SPI_TRX_Byte(_w25q_config_->SPI_Port, 0x15);
//	status[2] = SPI_TRX_Byte(_w25q_config_->SPI_Port, 0xff);
//	SPI_NSS_High(_w25q_config_->SPI_Port);

	return ((status[2] << 16) | (status[1] << 8) | (status[0] << 0));
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	041a      	lsls	r2, r3, #16
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	021b      	lsls	r3, r3, #8
 8004432:	431a      	orrs	r2, r3
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	4313      	orrs	r3, r2
}
 8004438:	4618      	mov	r0, r3
 800443a:	3718      	adds	r7, #24
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}

08004440 <Write_Enable>:

static uint32_t Write_Enable(W25Qxx_Config *_w25q_config_)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
	SPI_NSS_Low(_w25q_config_->SPI_Port);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4618      	mov	r0, r3
 800444e:	f7ff f961 	bl	8003714 <SPI_NSS_Low>
	SPI_TRX_Byte(_w25q_config_->SPI_Port, 0x06);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2106      	movs	r1, #6
 8004458:	4618      	mov	r0, r3
 800445a:	f7fe ff33 	bl	80032c4 <SPI_TRX_Byte>
	SPI_NSS_High(_w25q_config_->SPI_Port);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4618      	mov	r0, r3
 8004464:	f7ff f946 	bl	80036f4 <SPI_NSS_High>

	return Read_Status_Registers(_w25q_config_) & Write_Enable_Latch;
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f7ff ffbc 	bl	80043e6 <Read_Status_Registers>
 800446e:	4603      	mov	r3, r0
 8004470:	f003 0302 	and.w	r3, r3, #2
}
 8004474:	4618      	mov	r0, r3
 8004476:	3708      	adds	r7, #8
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <Write_Disable>:

static uint32_t Write_Disable(W25Qxx_Config *_w25q_config_)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
	SPI_NSS_Low(_w25q_config_->SPI_Port);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4618      	mov	r0, r3
 800448a:	f7ff f943 	bl	8003714 <SPI_NSS_Low>
	SPI_TRX_Byte(_w25q_config_->SPI_Port, 0x04);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2104      	movs	r1, #4
 8004494:	4618      	mov	r0, r3
 8004496:	f7fe ff15 	bl	80032c4 <SPI_TRX_Byte>
	SPI_NSS_High(_w25q_config_->SPI_Port);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4618      	mov	r0, r3
 80044a0:	f7ff f928 	bl	80036f4 <SPI_NSS_High>

	return Read_Status_Registers(_w25q_config_) & Write_Enable_Latch;
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f7ff ff9e 	bl	80043e6 <Read_Status_Registers>
 80044aa:	4603      	mov	r3, r0
 80044ac:	f003 0302 	and.w	r3, r3, #2
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3708      	adds	r7, #8
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <W25Qxx_Release_Power_Down>:

W25Qxx_Status W25Qxx_Release_Power_Down(W25Qxx_Config *_w25q_config_)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
	SPI_NSS_Low(_w25q_config_->SPI_Port);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4618      	mov	r0, r3
 80044c6:	f7ff f925 	bl	8003714 <SPI_NSS_Low>
	SPI_TRX_Byte(_w25q_config_->SPI_Port, 0xAB);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	21ab      	movs	r1, #171	@ 0xab
 80044d0:	4618      	mov	r0, r3
 80044d2:	f7fe fef7 	bl	80032c4 <SPI_TRX_Byte>
	SPI_NSS_High(_w25q_config_->SPI_Port);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4618      	mov	r0, r3
 80044dc:	f7ff f90a 	bl	80036f4 <SPI_NSS_High>

	return Completed;
 80044e0:	2301      	movs	r3, #1
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3708      	adds	r7, #8
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}

080044ea <W25Qxx_Init>:

W25Qxx_Status W25Qxx_Init(W25Qxx_Config *_w25q_config_)
{
 80044ea:	b580      	push	{r7, lr}
 80044ec:	b082      	sub	sp, #8
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]

	SPI_Init(_w25q_config_->SPI_Port);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7fe fc92 	bl	8002e20 <SPI_Init>
	SPI_Enable(_w25q_config_->SPI_Port);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4618      	mov	r0, r3
 8004502:	f7fe fecd 	bl	80032a0 <SPI_Enable>

	W25Qxx_Reset_Device(_w25q_config_);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 fadc 	bl	8004ac4 <W25Qxx_Reset_Device>

	W25Qxx_Release_Power_Down(_w25q_config_);
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f7ff ffd3 	bl	80044b8 <W25Qxx_Release_Power_Down>
	Delay_milli(20);
 8004512:	eeb3 0a04 	vmov.f32	s0, #52	@ 0x41a00000  20.0
 8004516:	f7ff ff43 	bl	80043a0 <Delay_milli>
	W25Qxx_Read_ID(_w25q_config_);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 f805 	bl	800452a <W25Qxx_Read_ID>



	return Completed;
 8004520:	2301      	movs	r3, #1

}
 8004522:	4618      	mov	r0, r3
 8004524:	3708      	adds	r7, #8
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}

0800452a <W25Qxx_Read_ID>:


W25Qxx_Status W25Qxx_Read_ID(W25Qxx_Config *_w25q_config_)
{
 800452a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800452e:	b0a0      	sub	sp, #128	@ 0x80
 8004530:	af00      	add	r7, sp, #0
 8004532:	67f8      	str	r0, [r7, #124]	@ 0x7c
	SPI_NSS_Low(_w25q_config_->SPI_Port);
 8004534:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4618      	mov	r0, r3
 800453a:	f7ff f8eb 	bl	8003714 <SPI_NSS_Low>
	SPI_TRX_Byte(_w25q_config_->SPI_Port, 0x9F);
 800453e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	219f      	movs	r1, #159	@ 0x9f
 8004544:	4618      	mov	r0, r3
 8004546:	f7fe febd 	bl	80032c4 <SPI_TRX_Byte>
	_w25q_config_->Maufacturer_ID = SPI_TRX_Byte(_w25q_config_->SPI_Port, 0xAA);
 800454a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	21aa      	movs	r1, #170	@ 0xaa
 8004550:	4618      	mov	r0, r3
 8004552:	f7fe feb7 	bl	80032c4 <SPI_TRX_Byte>
 8004556:	4603      	mov	r3, r0
 8004558:	b2db      	uxtb	r3, r3
 800455a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800455c:	7113      	strb	r3, [r2, #4]
	_w25q_config_->Memory_Type = SPI_TRX_Byte(_w25q_config_->SPI_Port, 0xAA);
 800455e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	21aa      	movs	r1, #170	@ 0xaa
 8004564:	4618      	mov	r0, r3
 8004566:	f7fe fead 	bl	80032c4 <SPI_TRX_Byte>
 800456a:	4603      	mov	r3, r0
 800456c:	b2db      	uxtb	r3, r3
 800456e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004570:	7153      	strb	r3, [r2, #5]
	_w25q_config_->Capacity = SPI_TRX_Byte(_w25q_config_->SPI_Port, 0xAA);
 8004572:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	21aa      	movs	r1, #170	@ 0xaa
 8004578:	4618      	mov	r0, r3
 800457a:	f7fe fea3 	bl	80032c4 <SPI_TRX_Byte>
 800457e:	4603      	mov	r3, r0
 8004580:	b2db      	uxtb	r3, r3
 8004582:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004584:	7193      	strb	r3, [r2, #6]
	SPI_NSS_High(_w25q_config_->SPI_Port);
 8004586:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4618      	mov	r0, r3
 800458c:	f7ff f8b2 	bl	80036f4 <SPI_NSS_High>

	SPI_NSS_Low(_w25q_config_->SPI_Port);
 8004590:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4618      	mov	r0, r3
 8004596:	f7ff f8bd 	bl	8003714 <SPI_NSS_Low>
	SPI_TRX_Byte(_w25q_config_->SPI_Port, 0x4B);
 800459a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	214b      	movs	r1, #75	@ 0x4b
 80045a0:	4618      	mov	r0, r3
 80045a2:	f7fe fe8f 	bl	80032c4 <SPI_TRX_Byte>
	SPI_TRX_Byte(_w25q_config_->SPI_Port, 0x00);
 80045a6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2100      	movs	r1, #0
 80045ac:	4618      	mov	r0, r3
 80045ae:	f7fe fe89 	bl	80032c4 <SPI_TRX_Byte>
	SPI_TRX_Byte(_w25q_config_->SPI_Port, 0x00);
 80045b2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2100      	movs	r1, #0
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7fe fe83 	bl	80032c4 <SPI_TRX_Byte>
	SPI_TRX_Byte(_w25q_config_->SPI_Port, 0x00);
 80045be:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2100      	movs	r1, #0
 80045c4:	4618      	mov	r0, r3
 80045c6:	f7fe fe7d 	bl	80032c4 <SPI_TRX_Byte>
	SPI_TRX_Byte(_w25q_config_->SPI_Port, 0x00);
 80045ca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2100      	movs	r1, #0
 80045d0:	4618      	mov	r0, r3
 80045d2:	f7fe fe77 	bl	80032c4 <SPI_TRX_Byte>
	_w25q_config_->Unique_ID = ((uint64_t)SPI_TRX_Byte(_w25q_config_->SPI_Port, 0x00) << 56) |
 80045d6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2100      	movs	r1, #0
 80045dc:	4618      	mov	r0, r3
 80045de:	f7fe fe71 	bl	80032c4 <SPI_TRX_Byte>
 80045e2:	4603      	mov	r3, r0
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	2200      	movs	r2, #0
 80045e8:	673b      	str	r3, [r7, #112]	@ 0x70
 80045ea:	677a      	str	r2, [r7, #116]	@ 0x74
 80045ec:	f04f 0400 	mov.w	r4, #0
 80045f0:	f04f 0500 	mov.w	r5, #0
 80045f4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80045f6:	061d      	lsls	r5, r3, #24
 80045f8:	2400      	movs	r4, #0
							   ((uint64_t)SPI_TRX_Byte(_w25q_config_->SPI_Port, 0x00) << 48) |
 80045fa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2100      	movs	r1, #0
 8004600:	4618      	mov	r0, r3
 8004602:	f7fe fe5f 	bl	80032c4 <SPI_TRX_Byte>
 8004606:	4603      	mov	r3, r0
 8004608:	b29b      	uxth	r3, r3
 800460a:	2200      	movs	r2, #0
 800460c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800460e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004610:	f04f 0200 	mov.w	r2, #0
 8004614:	f04f 0300 	mov.w	r3, #0
 8004618:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800461a:	040b      	lsls	r3, r1, #16
 800461c:	2200      	movs	r2, #0
	_w25q_config_->Unique_ID = ((uint64_t)SPI_TRX_Byte(_w25q_config_->SPI_Port, 0x00) << 56) |
 800461e:	ea44 0802 	orr.w	r8, r4, r2
 8004622:	ea45 0903 	orr.w	r9, r5, r3
							   ((uint64_t)SPI_TRX_Byte(_w25q_config_->SPI_Port, 0x00) << 40) |
 8004626:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2100      	movs	r1, #0
 800462c:	4618      	mov	r0, r3
 800462e:	f7fe fe49 	bl	80032c4 <SPI_TRX_Byte>
 8004632:	4603      	mov	r3, r0
 8004634:	b29b      	uxth	r3, r3
 8004636:	2200      	movs	r2, #0
 8004638:	663b      	str	r3, [r7, #96]	@ 0x60
 800463a:	667a      	str	r2, [r7, #100]	@ 0x64
 800463c:	f04f 0200 	mov.w	r2, #0
 8004640:	f04f 0300 	mov.w	r3, #0
 8004644:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8004646:	020b      	lsls	r3, r1, #8
 8004648:	2200      	movs	r2, #0
							   ((uint64_t)SPI_TRX_Byte(_w25q_config_->SPI_Port, 0x00) << 48) |
 800464a:	ea48 0a02 	orr.w	sl, r8, r2
 800464e:	ea49 0b03 	orr.w	fp, r9, r3
							   ((uint64_t)SPI_TRX_Byte(_w25q_config_->SPI_Port, 0x00) << 32) |
 8004652:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	2100      	movs	r1, #0
 8004658:	4618      	mov	r0, r3
 800465a:	f7fe fe33 	bl	80032c4 <SPI_TRX_Byte>
 800465e:	4603      	mov	r3, r0
 8004660:	b29b      	uxth	r3, r3
 8004662:	2200      	movs	r2, #0
 8004664:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004666:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004668:	f04f 0200 	mov.w	r2, #0
 800466c:	f04f 0300 	mov.w	r3, #0
 8004670:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004672:	000b      	movs	r3, r1
 8004674:	2200      	movs	r2, #0
							   ((uint64_t)SPI_TRX_Byte(_w25q_config_->SPI_Port, 0x00) << 40) |
 8004676:	ea4a 0102 	orr.w	r1, sl, r2
 800467a:	6539      	str	r1, [r7, #80]	@ 0x50
 800467c:	ea4b 0303 	orr.w	r3, fp, r3
 8004680:	657b      	str	r3, [r7, #84]	@ 0x54
							   ((uint64_t)SPI_TRX_Byte(_w25q_config_->SPI_Port, 0x00) << 24) |
 8004682:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2100      	movs	r1, #0
 8004688:	4618      	mov	r0, r3
 800468a:	f7fe fe1b 	bl	80032c4 <SPI_TRX_Byte>
 800468e:	4603      	mov	r3, r0
 8004690:	b29b      	uxth	r3, r3
 8004692:	2200      	movs	r2, #0
 8004694:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004696:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004698:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800469c:	460b      	mov	r3, r1
 800469e:	0a1b      	lsrs	r3, r3, #8
 80046a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80046a2:	460b      	mov	r3, r1
 80046a4:	061b      	lsls	r3, r3, #24
 80046a6:	643b      	str	r3, [r7, #64]	@ 0x40
							   ((uint64_t)SPI_TRX_Byte(_w25q_config_->SPI_Port, 0x00) << 32) |
 80046a8:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 80046ac:	4623      	mov	r3, r4
 80046ae:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80046b2:	4602      	mov	r2, r0
 80046b4:	4313      	orrs	r3, r2
 80046b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80046b8:	462b      	mov	r3, r5
 80046ba:	460a      	mov	r2, r1
 80046bc:	4313      	orrs	r3, r2
 80046be:	63fb      	str	r3, [r7, #60]	@ 0x3c
							   ((uint64_t)SPI_TRX_Byte(_w25q_config_->SPI_Port, 0x00) << 16) |
 80046c0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2100      	movs	r1, #0
 80046c6:	4618      	mov	r0, r3
 80046c8:	f7fe fdfc 	bl	80032c4 <SPI_TRX_Byte>
 80046cc:	4603      	mov	r3, r0
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	2200      	movs	r2, #0
 80046d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80046d4:	637a      	str	r2, [r7, #52]	@ 0x34
 80046d6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80046da:	460b      	mov	r3, r1
 80046dc:	0c1b      	lsrs	r3, r3, #16
 80046de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046e0:	460b      	mov	r3, r1
 80046e2:	041b      	lsls	r3, r3, #16
 80046e4:	62bb      	str	r3, [r7, #40]	@ 0x28
							   ((uint64_t)SPI_TRX_Byte(_w25q_config_->SPI_Port, 0x00) << 24) |
 80046e6:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 80046ea:	4623      	mov	r3, r4
 80046ec:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80046f0:	4602      	mov	r2, r0
 80046f2:	4313      	orrs	r3, r2
 80046f4:	623b      	str	r3, [r7, #32]
 80046f6:	462b      	mov	r3, r5
 80046f8:	460a      	mov	r2, r1
 80046fa:	4313      	orrs	r3, r2
 80046fc:	627b      	str	r3, [r7, #36]	@ 0x24
							   ((uint64_t)SPI_TRX_Byte(_w25q_config_->SPI_Port, 0x00) << 8)  |
 80046fe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2100      	movs	r1, #0
 8004704:	4618      	mov	r0, r3
 8004706:	f7fe fddd 	bl	80032c4 <SPI_TRX_Byte>
 800470a:	4603      	mov	r3, r0
 800470c:	b29b      	uxth	r3, r3
 800470e:	2200      	movs	r2, #0
 8004710:	61bb      	str	r3, [r7, #24]
 8004712:	61fa      	str	r2, [r7, #28]
 8004714:	f04f 0200 	mov.w	r2, #0
 8004718:	f04f 0300 	mov.w	r3, #0
 800471c:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8004720:	4629      	mov	r1, r5
 8004722:	020b      	lsls	r3, r1, #8
 8004724:	4621      	mov	r1, r4
 8004726:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 800472a:	4621      	mov	r1, r4
 800472c:	020a      	lsls	r2, r1, #8
							   ((uint64_t)SPI_TRX_Byte(_w25q_config_->SPI_Port, 0x00) << 16) |
 800472e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004732:	4621      	mov	r1, r4
 8004734:	4311      	orrs	r1, r2
 8004736:	6139      	str	r1, [r7, #16]
 8004738:	4629      	mov	r1, r5
 800473a:	4319      	orrs	r1, r3
 800473c:	6179      	str	r1, [r7, #20]
							   ((uint64_t)SPI_TRX_Byte(_w25q_config_->SPI_Port, 0x00) << 0);
 800473e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2100      	movs	r1, #0
 8004744:	4618      	mov	r0, r3
 8004746:	f7fe fdbd 	bl	80032c4 <SPI_TRX_Byte>
 800474a:	4603      	mov	r3, r0
 800474c:	b29b      	uxth	r3, r3
 800474e:	2200      	movs	r2, #0
 8004750:	60bb      	str	r3, [r7, #8]
 8004752:	60fa      	str	r2, [r7, #12]
							   ((uint64_t)SPI_TRX_Byte(_w25q_config_->SPI_Port, 0x00) << 8)  |
 8004754:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004758:	4623      	mov	r3, r4
 800475a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800475e:	4602      	mov	r2, r0
 8004760:	4313      	orrs	r3, r2
 8004762:	603b      	str	r3, [r7, #0]
 8004764:	462b      	mov	r3, r5
 8004766:	460a      	mov	r2, r1
 8004768:	4313      	orrs	r3, r2
 800476a:	607b      	str	r3, [r7, #4]
	_w25q_config_->Unique_ID = ((uint64_t)SPI_TRX_Byte(_w25q_config_->SPI_Port, 0x00) << 56) |
 800476c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800476e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004772:	e9c3 1202 	strd	r1, r2, [r3, #8]

	SPI_NSS_High(_w25q_config_->SPI_Port);
 8004776:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4618      	mov	r0, r3
 800477c:	f7fe ffba 	bl	80036f4 <SPI_NSS_High>


	return Completed;
 8004780:	2301      	movs	r3, #1
}
 8004782:	4618      	mov	r0, r3
 8004784:	3780      	adds	r7, #128	@ 0x80
 8004786:	46bd      	mov	sp, r7
 8004788:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800478c <W25Qxx_Page_Program>:
}



W25Qxx_Status W25Qxx_Page_Program(W25Qxx_Config *_w25q_config_,uint32_t address, uint8_t *buffer, size_t size)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b088      	sub	sp, #32
 8004790:	af02      	add	r7, sp, #8
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	607a      	str	r2, [r7, #4]
 8004798:	603b      	str	r3, [r7, #0]
	uint32_t temp = Write_Enable(_w25q_config_);
 800479a:	68f8      	ldr	r0, [r7, #12]
 800479c:	f7ff fe50 	bl	8004440 <Write_Enable>
 80047a0:	6178      	str	r0, [r7, #20]
	if(temp == Write_Enable_Latch)
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d13e      	bne.n	8004826 <W25Qxx_Page_Program+0x9a>
	{
		SPI_NSS_Low(_w25q_config_->SPI_Port);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4618      	mov	r0, r3
 80047ae:	f7fe ffb1 	bl	8003714 <SPI_NSS_Low>
		SPI_TRX_Byte(_w25q_config_->SPI_Port, 0x02);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2102      	movs	r1, #2
 80047b8:	4618      	mov	r0, r3
 80047ba:	f7fe fd83 	bl	80032c4 <SPI_TRX_Byte>
		SPI_TRX_Byte(_w25q_config_->SPI_Port, address >> 16);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	0c1b      	lsrs	r3, r3, #16
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	4619      	mov	r1, r3
 80047ca:	4610      	mov	r0, r2
 80047cc:	f7fe fd7a 	bl	80032c4 <SPI_TRX_Byte>
		SPI_TRX_Byte(_w25q_config_->SPI_Port, address >> 8);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	0a1b      	lsrs	r3, r3, #8
 80047d8:	b29b      	uxth	r3, r3
 80047da:	4619      	mov	r1, r3
 80047dc:	4610      	mov	r0, r2
 80047de:	f7fe fd71 	bl	80032c4 <SPI_TRX_Byte>
		SPI_TRX_Byte(_w25q_config_->SPI_Port, address & 0x0000FF);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	68ba      	ldr	r2, [r7, #8]
 80047e8:	b292      	uxth	r2, r2
 80047ea:	b2d2      	uxtb	r2, r2
 80047ec:	b292      	uxth	r2, r2
 80047ee:	4611      	mov	r1, r2
 80047f0:	4618      	mov	r0, r3
 80047f2:	f7fe fd67 	bl	80032c4 <SPI_TRX_Byte>
		SPI_TRX_Buffer_8Bit(_w25q_config_->SPI_Port, buffer, 0, size, 0);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6818      	ldr	r0, [r3, #0]
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	2200      	movs	r2, #0
 8004800:	9200      	str	r2, [sp, #0]
 8004802:	2200      	movs	r2, #0
 8004804:	6879      	ldr	r1, [r7, #4]
 8004806:	f7fe fd97 	bl	8003338 <SPI_TRX_Buffer_8Bit>
		SPI_NSS_High(_w25q_config_->SPI_Port);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4618      	mov	r0, r3
 8004810:	f7fe ff70 	bl	80036f4 <SPI_NSS_High>
		Delay_us(10);
 8004814:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8004818:	f7ff fd6e 	bl	80042f8 <Delay_us>
		Write_Disable(_w25q_config_);
 800481c:	68f8      	ldr	r0, [r7, #12]
 800481e:	f7ff fe2d 	bl	800447c <Write_Disable>
		return Completed;
 8004822:	2301      	movs	r3, #1
 8004824:	e000      	b.n	8004828 <W25Qxx_Page_Program+0x9c>

	}
	else
	{
		return Error;
 8004826:	2302      	movs	r3, #2



return Completed;

}
 8004828:	4618      	mov	r0, r3
 800482a:	3718      	adds	r7, #24
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <W25Qxx_Read_Data>:

W25Qxx_Status W25Qxx_Read_Data(W25Qxx_Config *_w25q_config_,uint32_t address, uint8_t *buffer, size_t size)
{
 8004830:	b590      	push	{r4, r7, lr}
 8004832:	b0c9      	sub	sp, #292	@ 0x124
 8004834:	af02      	add	r7, sp, #8
 8004836:	f507 748c 	add.w	r4, r7, #280	@ 0x118
 800483a:	f5a4 7486 	sub.w	r4, r4, #268	@ 0x10c
 800483e:	6020      	str	r0, [r4, #0]
 8004840:	f507 708c 	add.w	r0, r7, #280	@ 0x118
 8004844:	f5a0 7088 	sub.w	r0, r0, #272	@ 0x110
 8004848:	6001      	str	r1, [r0, #0]
 800484a:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 800484e:	f5a1 718a 	sub.w	r1, r1, #276	@ 0x114
 8004852:	600a      	str	r2, [r1, #0]
 8004854:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8004858:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 800485c:	6013      	str	r3, [r2, #0]
	uint8_t txbuffer[256];

	for(int i = 0; i < 256; i++)
 800485e:	2300      	movs	r3, #0
 8004860:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8004864:	e00d      	b.n	8004882 <W25Qxx_Read_Data+0x52>
	{
		txbuffer[i] = 0;
 8004866:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800486a:	f5a3 7282 	sub.w	r2, r3, #260	@ 0x104
 800486e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004872:	4413      	add	r3, r2
 8004874:	2200      	movs	r2, #0
 8004876:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 256; i++)
 8004878:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800487c:	3301      	adds	r3, #1
 800487e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8004882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004886:	2bff      	cmp	r3, #255	@ 0xff
 8004888:	dded      	ble.n	8004866 <W25Qxx_Read_Data+0x36>
	}

	SPI_NSS_Low(_w25q_config_->SPI_Port);
 800488a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800488e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4618      	mov	r0, r3
 8004898:	f7fe ff3c 	bl	8003714 <SPI_NSS_Low>
	SPI_TRX_Byte(_w25q_config_->SPI_Port, 0x03);
 800489c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80048a0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2103      	movs	r1, #3
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7fe fd0a 	bl	80032c4 <SPI_TRX_Byte>
	SPI_TRX_Byte(_w25q_config_->SPI_Port, address >> 16);
 80048b0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80048b4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80048c0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	0c1b      	lsrs	r3, r3, #16
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	4619      	mov	r1, r3
 80048cc:	4610      	mov	r0, r2
 80048ce:	f7fe fcf9 	bl	80032c4 <SPI_TRX_Byte>
	SPI_TRX_Byte(_w25q_config_->SPI_Port, address >> 8);
 80048d2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80048d6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80048e2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	0a1b      	lsrs	r3, r3, #8
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	4619      	mov	r1, r3
 80048ee:	4610      	mov	r0, r2
 80048f0:	f7fe fce8 	bl	80032c4 <SPI_TRX_Byte>
	SPI_TRX_Byte(_w25q_config_->SPI_Port, address & 0x0000FF);
 80048f4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80048f8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004904:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	b29b      	uxth	r3, r3
 800490c:	b2db      	uxtb	r3, r3
 800490e:	b29b      	uxth	r3, r3
 8004910:	4619      	mov	r1, r3
 8004912:	4610      	mov	r0, r2
 8004914:	f7fe fcd6 	bl	80032c4 <SPI_TRX_Byte>
	SPI_TRX_Buffer_8Bit(_w25q_config_->SPI_Port, txbuffer, buffer, size, size);
 8004918:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800491c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	6818      	ldr	r0, [r3, #0]
 8004924:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004928:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	b29c      	uxth	r4, r3
 8004930:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004934:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	b29b      	uxth	r3, r3
 800493c:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8004940:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 8004944:	f107 0114 	add.w	r1, r7, #20
 8004948:	9300      	str	r3, [sp, #0]
 800494a:	4623      	mov	r3, r4
 800494c:	6812      	ldr	r2, [r2, #0]
 800494e:	f7fe fcf3 	bl	8003338 <SPI_TRX_Buffer_8Bit>
	SPI_NSS_High(_w25q_config_->SPI_Port);
 8004952:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004956:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4618      	mov	r0, r3
 8004960:	f7fe fec8 	bl	80036f4 <SPI_NSS_High>

	return Completed;
 8004964:	2301      	movs	r3, #1

}
 8004966:	4618      	mov	r0, r3
 8004968:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 800496c:	46bd      	mov	sp, r7
 800496e:	bd90      	pop	{r4, r7, pc}

08004970 <W25Qxx_Fast_Read_Data>:



W25Qxx_Status W25Qxx_Fast_Read_Data(W25Qxx_Config *_w25q_config_,uint32_t address, uint8_t *buffer, size_t size)
{
 8004970:	b590      	push	{r4, r7, lr}
 8004972:	b0c9      	sub	sp, #292	@ 0x124
 8004974:	af02      	add	r7, sp, #8
 8004976:	f507 748c 	add.w	r4, r7, #280	@ 0x118
 800497a:	f5a4 7486 	sub.w	r4, r4, #268	@ 0x10c
 800497e:	6020      	str	r0, [r4, #0]
 8004980:	f507 708c 	add.w	r0, r7, #280	@ 0x118
 8004984:	f5a0 7088 	sub.w	r0, r0, #272	@ 0x110
 8004988:	6001      	str	r1, [r0, #0]
 800498a:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 800498e:	f5a1 718a 	sub.w	r1, r1, #276	@ 0x114
 8004992:	600a      	str	r2, [r1, #0]
 8004994:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8004998:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 800499c:	6013      	str	r3, [r2, #0]
	uint8_t txbuffer[256];

	for(int i = 0; i < 256; i++)
 800499e:	2300      	movs	r3, #0
 80049a0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80049a4:	e00d      	b.n	80049c2 <W25Qxx_Fast_Read_Data+0x52>
	{
		txbuffer[i] = 0;
 80049a6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80049aa:	f5a3 7282 	sub.w	r2, r3, #260	@ 0x104
 80049ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049b2:	4413      	add	r3, r2
 80049b4:	2200      	movs	r2, #0
 80049b6:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 256; i++)
 80049b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049bc:	3301      	adds	r3, #1
 80049be:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80049c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049c6:	2bff      	cmp	r3, #255	@ 0xff
 80049c8:	dded      	ble.n	80049a6 <W25Qxx_Fast_Read_Data+0x36>
	}

	SPI_NSS_Low(_w25q_config_->SPI_Port);
 80049ca:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80049ce:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4618      	mov	r0, r3
 80049d8:	f7fe fe9c 	bl	8003714 <SPI_NSS_Low>
	SPI_TRX_Byte(_w25q_config_->SPI_Port, 0x0B);
 80049dc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80049e0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	210b      	movs	r1, #11
 80049ea:	4618      	mov	r0, r3
 80049ec:	f7fe fc6a 	bl	80032c4 <SPI_TRX_Byte>
	SPI_TRX_Byte(_w25q_config_->SPI_Port, address >> 16);
 80049f0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80049f4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004a00:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	0c1b      	lsrs	r3, r3, #16
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	4610      	mov	r0, r2
 8004a0e:	f7fe fc59 	bl	80032c4 <SPI_TRX_Byte>
	SPI_TRX_Byte(_w25q_config_->SPI_Port, address >> 8);
 8004a12:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004a16:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004a22:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	0a1b      	lsrs	r3, r3, #8
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	4610      	mov	r0, r2
 8004a30:	f7fe fc48 	bl	80032c4 <SPI_TRX_Byte>
	SPI_TRX_Byte(_w25q_config_->SPI_Port, address & 0x0000FF);
 8004a34:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004a38:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004a44:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	4619      	mov	r1, r3
 8004a52:	4610      	mov	r0, r2
 8004a54:	f7fe fc36 	bl	80032c4 <SPI_TRX_Byte>
	SPI_TRX_Byte(_w25q_config_->SPI_Port, 0xFF);
 8004a58:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004a5c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	21ff      	movs	r1, #255	@ 0xff
 8004a66:	4618      	mov	r0, r3
 8004a68:	f7fe fc2c 	bl	80032c4 <SPI_TRX_Byte>
	SPI_TRX_Buffer_8Bit(_w25q_config_->SPI_Port, txbuffer, buffer, size, size);
 8004a6c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004a70:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	6818      	ldr	r0, [r3, #0]
 8004a78:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004a7c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	b29c      	uxth	r4, r3
 8004a84:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004a88:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8004a94:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 8004a98:	f107 0114 	add.w	r1, r7, #20
 8004a9c:	9300      	str	r3, [sp, #0]
 8004a9e:	4623      	mov	r3, r4
 8004aa0:	6812      	ldr	r2, [r2, #0]
 8004aa2:	f7fe fc49 	bl	8003338 <SPI_TRX_Buffer_8Bit>
	SPI_NSS_High(_w25q_config_->SPI_Port);
 8004aa6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8004aaa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7fe fe1e 	bl	80036f4 <SPI_NSS_High>

	return Completed;
 8004ab8:	2301      	movs	r3, #1
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd90      	pop	{r4, r7, pc}

08004ac4 <W25Qxx_Reset_Device>:


W25Qxx_Status W25Qxx_Reset_Device(W25Qxx_Config *_w25q_config_)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
	SPI_NSS_Low(_w25q_config_->SPI_Port);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f7fe fe1f 	bl	8003714 <SPI_NSS_Low>
	SPI_TRX_Byte(_w25q_config_->SPI_Port, 0x66);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2166      	movs	r1, #102	@ 0x66
 8004adc:	4618      	mov	r0, r3
 8004ade:	f7fe fbf1 	bl	80032c4 <SPI_TRX_Byte>
	SPI_NSS_High(_w25q_config_->SPI_Port);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f7fe fe04 	bl	80036f4 <SPI_NSS_High>

	SPI_NSS_Low(_w25q_config_->SPI_Port);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4618      	mov	r0, r3
 8004af2:	f7fe fe0f 	bl	8003714 <SPI_NSS_Low>
	SPI_TRX_Byte(_w25q_config_->SPI_Port, 0x99);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2199      	movs	r1, #153	@ 0x99
 8004afc:	4618      	mov	r0, r3
 8004afe:	f7fe fbe1 	bl	80032c4 <SPI_TRX_Byte>
	SPI_NSS_High(_w25q_config_->SPI_Port);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4618      	mov	r0, r3
 8004b08:	f7fe fdf4 	bl	80036f4 <SPI_NSS_High>

	Delay_ms(1);
 8004b0c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8004b10:	f7ff fc18 	bl	8004344 <Delay_ms>
	return Completed;
 8004b14:	2301      	movs	r3, #1
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3708      	adds	r7, #8
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}

08004b1e <W25Qxx_Chip_Erase>:

W25Qxx_Status W25Qxx_Chip_Erase(W25Qxx_Config *_w25q_config_)
{
 8004b1e:	b580      	push	{r7, lr}
 8004b20:	b084      	sub	sp, #16
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
	Write_Enable(_w25q_config_);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f7ff fc8a 	bl	8004440 <Write_Enable>

	SPI_NSS_Low(_w25q_config_->SPI_Port);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4618      	mov	r0, r3
 8004b32:	f7fe fdef 	bl	8003714 <SPI_NSS_Low>
	SPI_TRX_Byte(_w25q_config_->SPI_Port, 0x60);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2160      	movs	r1, #96	@ 0x60
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f7fe fbc1 	bl	80032c4 <SPI_TRX_Byte>
	SPI_NSS_High(_w25q_config_->SPI_Port);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4618      	mov	r0, r3
 8004b48:	f7fe fdd4 	bl	80036f4 <SPI_NSS_High>

//	Write_Disable(_w25q_config_);

	uint32_t temp = 0;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	60fb      	str	r3, [r7, #12]
	do {
		temp = 0;
 8004b50:	2300      	movs	r3, #0
 8004b52:	60fb      	str	r3, [r7, #12]
		temp = Read_Status_Registers(_w25q_config_);
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f7ff fc46 	bl	80043e6 <Read_Status_Registers>
 8004b5a:	60f8      	str	r0, [r7, #12]
	} while (temp != 0);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d1f6      	bne.n	8004b50 <W25Qxx_Chip_Erase+0x32>

	return Completed;
 8004b62:	2301      	movs	r3, #1
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3710      	adds	r7, #16
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <W25Qxx_Sector_Erase>:

W25Qxx_Status W25Qxx_Sector_Erase(W25Qxx_Config *_w25q_config_,uint32_t address )
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
	Write_Enable(_w25q_config_);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f7ff fc62 	bl	8004440 <Write_Enable>

	SPI_NSS_Low(_w25q_config_->SPI_Port);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4618      	mov	r0, r3
 8004b82:	f7fe fdc7 	bl	8003714 <SPI_NSS_Low>
	SPI_TRX_Byte(_w25q_config_->SPI_Port, 0x20);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	2120      	movs	r1, #32
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f7fe fb99 	bl	80032c4 <SPI_TRX_Byte>
	SPI_TRX_Byte(_w25q_config_->SPI_Port, address >> 16);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	0c1b      	lsrs	r3, r3, #16
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	4610      	mov	r0, r2
 8004ba0:	f7fe fb90 	bl	80032c4 <SPI_TRX_Byte>
	SPI_TRX_Byte(_w25q_config_->SPI_Port, address >> 8);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	0a1b      	lsrs	r3, r3, #8
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	4619      	mov	r1, r3
 8004bb0:	4610      	mov	r0, r2
 8004bb2:	f7fe fb87 	bl	80032c4 <SPI_TRX_Byte>
	SPI_TRX_Byte(_w25q_config_->SPI_Port, address & 0x0000FF);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	683a      	ldr	r2, [r7, #0]
 8004bbc:	b292      	uxth	r2, r2
 8004bbe:	b2d2      	uxtb	r2, r2
 8004bc0:	b292      	uxth	r2, r2
 8004bc2:	4611      	mov	r1, r2
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f7fe fb7d 	bl	80032c4 <SPI_TRX_Byte>
	SPI_NSS_High(_w25q_config_->SPI_Port);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f7fe fd90 	bl	80036f4 <SPI_NSS_High>

	uint32_t temp = 0;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	60fb      	str	r3, [r7, #12]
	do {
		temp = 0;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	60fb      	str	r3, [r7, #12]
		temp = Read_Status_Registers(_w25q_config_);
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f7ff fc02 	bl	80043e6 <Read_Status_Registers>
 8004be2:	60f8      	str	r0, [r7, #12]
	} while (temp != 0);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d1f6      	bne.n	8004bd8 <W25Qxx_Sector_Erase+0x6c>




	Write_Disable(_w25q_config_);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f7ff fc46 	bl	800447c <Write_Disable>

	return Completed;
 8004bf0:	2301      	movs	r3, #1
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3710      	adds	r7, #16
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}

08004bfa <W25Qxx_Block_Erase_32KB>:

W25Qxx_Status W25Qxx_Block_Erase_32KB(W25Qxx_Config *_w25q_config_,uint32_t address )
{
 8004bfa:	b580      	push	{r7, lr}
 8004bfc:	b084      	sub	sp, #16
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
 8004c02:	6039      	str	r1, [r7, #0]
	Write_Enable(_w25q_config_);
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f7ff fc1b 	bl	8004440 <Write_Enable>

	SPI_NSS_Low(_w25q_config_->SPI_Port);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f7fe fd80 	bl	8003714 <SPI_NSS_Low>
	SPI_TRX_Byte(_w25q_config_->SPI_Port, 0x52);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2152      	movs	r1, #82	@ 0x52
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f7fe fb52 	bl	80032c4 <SPI_TRX_Byte>
	SPI_TRX_Byte(_w25q_config_->SPI_Port, address >> 16);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	0c1b      	lsrs	r3, r3, #16
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	4610      	mov	r0, r2
 8004c2e:	f7fe fb49 	bl	80032c4 <SPI_TRX_Byte>
	SPI_TRX_Byte(_w25q_config_->SPI_Port, address >> 8);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	0a1b      	lsrs	r3, r3, #8
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	4610      	mov	r0, r2
 8004c40:	f7fe fb40 	bl	80032c4 <SPI_TRX_Byte>
	SPI_TRX_Byte(_w25q_config_->SPI_Port, address & 0x0000FF);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	683a      	ldr	r2, [r7, #0]
 8004c4a:	b292      	uxth	r2, r2
 8004c4c:	b2d2      	uxtb	r2, r2
 8004c4e:	b292      	uxth	r2, r2
 8004c50:	4611      	mov	r1, r2
 8004c52:	4618      	mov	r0, r3
 8004c54:	f7fe fb36 	bl	80032c4 <SPI_TRX_Byte>
	SPI_NSS_High(_w25q_config_->SPI_Port);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f7fe fd49 	bl	80036f4 <SPI_NSS_High>

	uint32_t temp = 0;
 8004c62:	2300      	movs	r3, #0
 8004c64:	60fb      	str	r3, [r7, #12]
	do {
		temp = 0;
 8004c66:	2300      	movs	r3, #0
 8004c68:	60fb      	str	r3, [r7, #12]
		temp = Read_Status_Registers(_w25q_config_);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f7ff fbbb 	bl	80043e6 <Read_Status_Registers>
 8004c70:	60f8      	str	r0, [r7, #12]
	} while (temp != 0);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d1f6      	bne.n	8004c66 <W25Qxx_Block_Erase_32KB+0x6c>




	Write_Disable(_w25q_config_);
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f7ff fbff 	bl	800447c <Write_Disable>

	return Completed;
 8004c7e:	2301      	movs	r3, #1
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3710      	adds	r7, #16
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <W25Qxx_Block_Erase_64KB>:


W25Qxx_Status W25Qxx_Block_Erase_64KB(W25Qxx_Config *_w25q_config_,uint32_t address )
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
	Write_Enable(_w25q_config_);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f7ff fbd4 	bl	8004440 <Write_Enable>

	SPI_NSS_Low(_w25q_config_->SPI_Port);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f7fe fd39 	bl	8003714 <SPI_NSS_Low>
	SPI_TRX_Byte(_w25q_config_->SPI_Port, 0xd8);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	21d8      	movs	r1, #216	@ 0xd8
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f7fe fb0b 	bl	80032c4 <SPI_TRX_Byte>
	SPI_TRX_Byte(_w25q_config_->SPI_Port, address >> 16);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	0c1b      	lsrs	r3, r3, #16
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	4619      	mov	r1, r3
 8004cba:	4610      	mov	r0, r2
 8004cbc:	f7fe fb02 	bl	80032c4 <SPI_TRX_Byte>
	SPI_TRX_Byte(_w25q_config_->SPI_Port, address >> 8);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	0a1b      	lsrs	r3, r3, #8
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	4619      	mov	r1, r3
 8004ccc:	4610      	mov	r0, r2
 8004cce:	f7fe faf9 	bl	80032c4 <SPI_TRX_Byte>
	SPI_TRX_Byte(_w25q_config_->SPI_Port, address & 0x0000FF);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	683a      	ldr	r2, [r7, #0]
 8004cd8:	b292      	uxth	r2, r2
 8004cda:	b2d2      	uxtb	r2, r2
 8004cdc:	b292      	uxth	r2, r2
 8004cde:	4611      	mov	r1, r2
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f7fe faef 	bl	80032c4 <SPI_TRX_Byte>
	SPI_NSS_High(_w25q_config_->SPI_Port);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4618      	mov	r0, r3
 8004cec:	f7fe fd02 	bl	80036f4 <SPI_NSS_High>

	uint32_t temp = 0;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	60fb      	str	r3, [r7, #12]
	do {
		temp = 0;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	60fb      	str	r3, [r7, #12]
		temp = Read_Status_Registers(_w25q_config_);
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f7ff fb74 	bl	80043e6 <Read_Status_Registers>
 8004cfe:	60f8      	str	r0, [r7, #12]
	} while (temp != 0);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d1f6      	bne.n	8004cf4 <W25Qxx_Block_Erase_64KB+0x6c>

	return Completed;
 8004d06:	2301      	movs	r3, #1


	Write_Disable(_w25q_config_);

	return Completed;
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3710      	adds	r7, #16
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	4603      	mov	r3, r0
 8004d18:	6039      	str	r1, [r7, #0]
 8004d1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	db0a      	blt.n	8004d3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	b2da      	uxtb	r2, r3
 8004d28:	490c      	ldr	r1, [pc, #48]	@ (8004d5c <__NVIC_SetPriority+0x4c>)
 8004d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d2e:	0112      	lsls	r2, r2, #4
 8004d30:	b2d2      	uxtb	r2, r2
 8004d32:	440b      	add	r3, r1
 8004d34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004d38:	e00a      	b.n	8004d50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	b2da      	uxtb	r2, r3
 8004d3e:	4908      	ldr	r1, [pc, #32]	@ (8004d60 <__NVIC_SetPriority+0x50>)
 8004d40:	79fb      	ldrb	r3, [r7, #7]
 8004d42:	f003 030f 	and.w	r3, r3, #15
 8004d46:	3b04      	subs	r3, #4
 8004d48:	0112      	lsls	r2, r2, #4
 8004d4a:	b2d2      	uxtb	r2, r2
 8004d4c:	440b      	add	r3, r1
 8004d4e:	761a      	strb	r2, [r3, #24]
}
 8004d50:	bf00      	nop
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr
 8004d5c:	e000e100 	.word	0xe000e100
 8004d60:	e000ed00 	.word	0xe000ed00

08004d64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d74:	d301      	bcc.n	8004d7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d76:	2301      	movs	r3, #1
 8004d78:	e00f      	b.n	8004d9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d7a:	4a0a      	ldr	r2, [pc, #40]	@ (8004da4 <SysTick_Config+0x40>)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d82:	210f      	movs	r1, #15
 8004d84:	f04f 30ff 	mov.w	r0, #4294967295
 8004d88:	f7ff ffc2 	bl	8004d10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d8c:	4b05      	ldr	r3, [pc, #20]	@ (8004da4 <SysTick_Config+0x40>)
 8004d8e:	2200      	movs	r2, #0
 8004d90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d92:	4b04      	ldr	r3, [pc, #16]	@ (8004da4 <SysTick_Config+0x40>)
 8004d94:	2207      	movs	r2, #7
 8004d96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3708      	adds	r7, #8
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	e000e010 	.word	0xe000e010

08004da8 <MCU_Clock_Setup>:
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
	SystemInit();
 8004dae:	f000 fa09 	bl	80051c4 <SystemInit>
	uint8_t pll_m = 8;
 8004db2:	2308      	movs	r3, #8
 8004db4:	71fb      	strb	r3, [r7, #7]
	uint16_t pll_n = 336; //192
 8004db6:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8004dba:	80bb      	strh	r3, [r7, #4]
	uint8_t pll_p = 0;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	70fb      	strb	r3, [r7, #3]
	uint8_t pll_q = 7;
 8004dc0:	2307      	movs	r3, #7
 8004dc2:	70bb      	strb	r3, [r7, #2]
	RCC->PLLCFGR = 0x00000000;
 8004dc4:	4b3c      	ldr	r3, [pc, #240]	@ (8004eb8 <MCU_Clock_Setup+0x110>)
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	605a      	str	r2, [r3, #4]
	RCC -> CR |= RCC_CR_HSEON;
 8004dca:	4b3b      	ldr	r3, [pc, #236]	@ (8004eb8 <MCU_Clock_Setup+0x110>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a3a      	ldr	r2, [pc, #232]	@ (8004eb8 <MCU_Clock_Setup+0x110>)
 8004dd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004dd4:	6013      	str	r3, [r2, #0]
	while(!(RCC -> CR & RCC_CR_HSERDY)){}
 8004dd6:	bf00      	nop
 8004dd8:	4b37      	ldr	r3, [pc, #220]	@ (8004eb8 <MCU_Clock_Setup+0x110>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d0f9      	beq.n	8004dd8 <MCU_Clock_Setup+0x30>
	RCC -> APB1ENR |= RCC_APB1ENR_PWREN;
 8004de4:	4b34      	ldr	r3, [pc, #208]	@ (8004eb8 <MCU_Clock_Setup+0x110>)
 8004de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004de8:	4a33      	ldr	r2, [pc, #204]	@ (8004eb8 <MCU_Clock_Setup+0x110>)
 8004dea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dee:	6413      	str	r3, [r2, #64]	@ 0x40
	PWR ->CR |= PWR_CR_VOS;
 8004df0:	4b32      	ldr	r3, [pc, #200]	@ (8004ebc <MCU_Clock_Setup+0x114>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a31      	ldr	r2, [pc, #196]	@ (8004ebc <MCU_Clock_Setup+0x114>)
 8004df6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004dfa:	6013      	str	r3, [r2, #0]
	FLASH -> ACR |= FLASH_ACR_ICEN | FLASH_ACR_PRFTEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS;
 8004dfc:	4b30      	ldr	r3, [pc, #192]	@ (8004ec0 <MCU_Clock_Setup+0x118>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a2f      	ldr	r2, [pc, #188]	@ (8004ec0 <MCU_Clock_Setup+0x118>)
 8004e02:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004e06:	f043 0305 	orr.w	r3, r3, #5
 8004e0a:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR |= (pll_q << 24) | (pll_p << 16) | (pll_n << 6) | (pll_m << 0);
 8004e0c:	4b2a      	ldr	r3, [pc, #168]	@ (8004eb8 <MCU_Clock_Setup+0x110>)
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	78ba      	ldrb	r2, [r7, #2]
 8004e12:	0611      	lsls	r1, r2, #24
 8004e14:	78fa      	ldrb	r2, [r7, #3]
 8004e16:	0412      	lsls	r2, r2, #16
 8004e18:	4311      	orrs	r1, r2
 8004e1a:	88ba      	ldrh	r2, [r7, #4]
 8004e1c:	0192      	lsls	r2, r2, #6
 8004e1e:	4311      	orrs	r1, r2
 8004e20:	79fa      	ldrb	r2, [r7, #7]
 8004e22:	430a      	orrs	r2, r1
 8004e24:	4611      	mov	r1, r2
 8004e26:	4a24      	ldr	r2, [pc, #144]	@ (8004eb8 <MCU_Clock_Setup+0x110>)
 8004e28:	430b      	orrs	r3, r1
 8004e2a:	6053      	str	r3, [r2, #4]
	RCC ->PLLCFGR |= 1 << 22;
 8004e2c:	4b22      	ldr	r3, [pc, #136]	@ (8004eb8 <MCU_Clock_Setup+0x110>)
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	4a21      	ldr	r2, [pc, #132]	@ (8004eb8 <MCU_Clock_Setup+0x110>)
 8004e32:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004e36:	6053      	str	r3, [r2, #4]
	RCC -> CFGR |= RCC_CFGR_HPRE_DIV1;
 8004e38:	4b1f      	ldr	r3, [pc, #124]	@ (8004eb8 <MCU_Clock_Setup+0x110>)
 8004e3a:	4a1f      	ldr	r2, [pc, #124]	@ (8004eb8 <MCU_Clock_Setup+0x110>)
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE1_DIV4;
 8004e40:	4b1d      	ldr	r3, [pc, #116]	@ (8004eb8 <MCU_Clock_Setup+0x110>)
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	4a1c      	ldr	r2, [pc, #112]	@ (8004eb8 <MCU_Clock_Setup+0x110>)
 8004e46:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 8004e4a:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE2_DIV2;
 8004e4c:	4b1a      	ldr	r3, [pc, #104]	@ (8004eb8 <MCU_Clock_Setup+0x110>)
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	4a19      	ldr	r2, [pc, #100]	@ (8004eb8 <MCU_Clock_Setup+0x110>)
 8004e52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e56:	6093      	str	r3, [r2, #8]
	RCC -> CR |= RCC_CR_PLLON;
 8004e58:	4b17      	ldr	r3, [pc, #92]	@ (8004eb8 <MCU_Clock_Setup+0x110>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a16      	ldr	r2, [pc, #88]	@ (8004eb8 <MCU_Clock_Setup+0x110>)
 8004e5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e62:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY)){}
 8004e64:	bf00      	nop
 8004e66:	4b14      	ldr	r3, [pc, #80]	@ (8004eb8 <MCU_Clock_Setup+0x110>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d0f9      	beq.n	8004e66 <MCU_Clock_Setup+0xbe>
	RCC -> CFGR |= RCC_CFGR_SW_PLL;
 8004e72:	4b11      	ldr	r3, [pc, #68]	@ (8004eb8 <MCU_Clock_Setup+0x110>)
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	4a10      	ldr	r2, [pc, #64]	@ (8004eb8 <MCU_Clock_Setup+0x110>)
 8004e78:	f043 0302 	orr.w	r3, r3, #2
 8004e7c:	6093      	str	r3, [r2, #8]
	while((RCC -> CFGR & RCC_CFGR_SWS_PLL) != RCC_CFGR_SWS_PLL);
 8004e7e:	bf00      	nop
 8004e80:	4b0d      	ldr	r3, [pc, #52]	@ (8004eb8 <MCU_Clock_Setup+0x110>)
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	f003 0308 	and.w	r3, r3, #8
 8004e88:	2b08      	cmp	r3, #8
 8004e8a:	d1f9      	bne.n	8004e80 <MCU_Clock_Setup+0xd8>
	SystemCoreClockUpdate();
 8004e8c:	f000 f9ac 	bl	80051e8 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock/168);
 8004e90:	4b0c      	ldr	r3, [pc, #48]	@ (8004ec4 <MCU_Clock_Setup+0x11c>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	08db      	lsrs	r3, r3, #3
 8004e96:	4a0c      	ldr	r2, [pc, #48]	@ (8004ec8 <MCU_Clock_Setup+0x120>)
 8004e98:	fba2 2303 	umull	r2, r3, r2, r3
 8004e9c:	085b      	lsrs	r3, r3, #1
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f7ff ff60 	bl	8004d64 <SysTick_Config>
	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8004ea4:	4b04      	ldr	r3, [pc, #16]	@ (8004eb8 <MCU_Clock_Setup+0x110>)
 8004ea6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ea8:	4a03      	ldr	r2, [pc, #12]	@ (8004eb8 <MCU_Clock_Setup+0x110>)
 8004eaa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004eae:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8004eb0:	bf00      	nop
 8004eb2:	3708      	adds	r7, #8
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	40023800 	.word	0x40023800
 8004ebc:	40007000 	.word	0x40007000
 8004ec0:	40023c00 	.word	0x40023c00
 8004ec4:	20000000 	.word	0x20000000
 8004ec8:	18618619 	.word	0x18618619

08004ecc <Delay_Config>:
{
 8004ecc:	b480      	push	{r7}
 8004ece:	af00      	add	r7, sp, #0
	SysTick->CTRL = 0;
 8004ed0:	4b09      	ldr	r3, [pc, #36]	@ (8004ef8 <Delay_Config+0x2c>)
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0x00FFFFFF;
 8004ed6:	4b08      	ldr	r3, [pc, #32]	@ (8004ef8 <Delay_Config+0x2c>)
 8004ed8:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8004edc:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8004ede:	4b06      	ldr	r3, [pc, #24]	@ (8004ef8 <Delay_Config+0x2c>)
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5;
 8004ee4:	4b04      	ldr	r3, [pc, #16]	@ (8004ef8 <Delay_Config+0x2c>)
 8004ee6:	2205      	movs	r2, #5
 8004ee8:	601a      	str	r2, [r3, #0]
	return (0UL);                                                     /* Function successful */
 8004eea:	2300      	movs	r3, #0
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	e000e010 	.word	0xe000e010

08004efc <Delay_us>:
{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	ed87 0a01 	vstr	s0, [r7, #4]
	SysTick->LOAD = 168 * us;
 8004f06:	edd7 7a01 	vldr	s15, [r7, #4]
 8004f0a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8004f40 <Delay_us+0x44>
 8004f0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f12:	4b0c      	ldr	r3, [pc, #48]	@ (8004f44 <Delay_us+0x48>)
 8004f14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f18:	ee17 2a90 	vmov	r2, s15
 8004f1c:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8004f1e:	4b09      	ldr	r3, [pc, #36]	@ (8004f44 <Delay_us+0x48>)
 8004f20:	2200      	movs	r2, #0
 8004f22:	609a      	str	r2, [r3, #8]
	while((SysTick->CTRL & 0x00010000) == 0);
 8004f24:	bf00      	nop
 8004f26:	4b07      	ldr	r3, [pc, #28]	@ (8004f44 <Delay_us+0x48>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d0f9      	beq.n	8004f26 <Delay_us+0x2a>
	return (0UL);                                                     /* Function successful */
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr
 8004f40:	43280000 	.word	0x43280000
 8004f44:	e000e010 	.word	0xe000e010

08004f48 <Delay_ms>:
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	ed87 0a01 	vstr	s0, [r7, #4]
	unsigned long x =0x29040 * (ms);
 8004f52:	edd7 7a01 	vldr	s15, [r7, #4]
 8004f56:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8004f9c <Delay_ms+0x54>
 8004f5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f62:	ee17 3a90 	vmov	r3, s15
 8004f66:	60fb      	str	r3, [r7, #12]
	SysTick->LOAD =  x ;
 8004f68:	4a0d      	ldr	r2, [pc, #52]	@ (8004fa0 <Delay_ms+0x58>)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0;
 8004f6e:	4b0c      	ldr	r3, [pc, #48]	@ (8004fa0 <Delay_ms+0x58>)
 8004f70:	2200      	movs	r2, #0
 8004f72:	609a      	str	r2, [r3, #8]
	SysTick->CTRL |= 1;
 8004f74:	4b0a      	ldr	r3, [pc, #40]	@ (8004fa0 <Delay_ms+0x58>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a09      	ldr	r2, [pc, #36]	@ (8004fa0 <Delay_ms+0x58>)
 8004f7a:	f043 0301 	orr.w	r3, r3, #1
 8004f7e:	6013      	str	r3, [r2, #0]
	while((SysTick->CTRL & 0x00010000) == 0);
 8004f80:	bf00      	nop
 8004f82:	4b07      	ldr	r3, [pc, #28]	@ (8004fa0 <Delay_ms+0x58>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d0f9      	beq.n	8004f82 <Delay_ms+0x3a>
	return (0UL);                                                     /* Function successful */
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3714      	adds	r7, #20
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr
 8004f9c:	48241000 	.word	0x48241000
 8004fa0:	e000e010 	.word	0xe000e010

08004fa4 <Delay_milli>:
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	ed87 0a01 	vstr	s0, [r7, #4]
	for (; ms>0; ms--)
 8004fae:	e00b      	b.n	8004fc8 <Delay_milli+0x24>
		Delay_ms(1);
 8004fb0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8004fb4:	f7ff ffc8 	bl	8004f48 <Delay_ms>
	for (; ms>0; ms--)
 8004fb8:	edd7 7a01 	vldr	s15, [r7, #4]
 8004fbc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004fc0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004fc4:	edc7 7a01 	vstr	s15, [r7, #4]
 8004fc8:	edd7 7a01 	vldr	s15, [r7, #4]
 8004fcc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fd4:	dcec      	bgt.n	8004fb0 <Delay_milli+0xc>
	return ms;
 8004fd6:	edd7 7a01 	vldr	s15, [r7, #4]
 8004fda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fde:	ee17 3a90 	vmov	r3, s15
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3708      	adds	r7, #8
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}

08004fea <Delay_s>:


__STATIC_INLINE uint32_t Delay_s(unsigned long s)
{
 8004fea:	b580      	push	{r7, lr}
 8004fec:	b082      	sub	sp, #8
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
	s = s * 1000;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004ff8:	fb02 f303 	mul.w	r3, r2, r3
 8004ffc:	607b      	str	r3, [r7, #4]
	for (; s>0; s--)
 8004ffe:	e006      	b.n	800500e <Delay_s+0x24>
	{
		Delay_ms(1);
 8005000:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8005004:	f7ff ffa0 	bl	8004f48 <Delay_ms>
	for (; s>0; s--)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	3b01      	subs	r3, #1
 800500c:	607b      	str	r3, [r7, #4]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d1f5      	bne.n	8005000 <Delay_s+0x16>
	}
	return (0UL);
 8005014:	2300      	movs	r3, #0
}
 8005016:	4618      	mov	r0, r3
 8005018:	3708      	adds	r7, #8
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
	...

08005020 <main>:
W25Qxx_Config Chip1;

uint32_t starting_address = 0x000000;

int main(void)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8005026:	af00      	add	r7, sp, #0
	MCU_Clock_Setup();
 8005028:	f7ff febe 	bl	8004da8 <MCU_Clock_Setup>
	Delay_Config();
 800502c:	f7ff ff4e 	bl	8004ecc <Delay_Config>

	Delay_ms(1);
 8005030:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8005034:	f7ff ff88 	bl	8004f48 <Delay_ms>



	Flash.clock_pin      = SPI_Configurations.Pin._SPI1_.CLK1.PA5;
 8005038:	220f      	movs	r2, #15
 800503a:	4b5d      	ldr	r3, [pc, #372]	@ (80051b0 <main+0x190>)
 800503c:	711a      	strb	r2, [r3, #4]
	Flash.miso_pin       = SPI_Configurations.Pin._SPI1_.MISO1.PA6;
 800503e:	2210      	movs	r2, #16
 8005040:	4b5b      	ldr	r3, [pc, #364]	@ (80051b0 <main+0x190>)
 8005042:	719a      	strb	r2, [r3, #6]
	Flash.mosi_pin       = SPI_Configurations.Pin._SPI1_.MOSI1.PA7;
 8005044:	2211      	movs	r2, #17
 8005046:	4b5a      	ldr	r3, [pc, #360]	@ (80051b0 <main+0x190>)
 8005048:	715a      	strb	r2, [r3, #5]
	Flash.Port           = SPI1;
 800504a:	4b59      	ldr	r3, [pc, #356]	@ (80051b0 <main+0x190>)
 800504c:	4a59      	ldr	r2, [pc, #356]	@ (80051b4 <main+0x194>)
 800504e:	601a      	str	r2, [r3, #0]
	Flash.clock_phase    = SPI_Configurations.Clock_Phase.Low_0;
 8005050:	2317      	movs	r3, #23
 8005052:	461a      	mov	r2, r3
 8005054:	4b56      	ldr	r3, [pc, #344]	@ (80051b0 <main+0x190>)
 8005056:	839a      	strh	r2, [r3, #28]
	Flash.clock_polarity = SPI_Configurations.Clock_Polarity.Low_0;
 8005058:	2321      	movs	r3, #33	@ 0x21
 800505a:	461a      	mov	r2, r3
 800505c:	4b54      	ldr	r3, [pc, #336]	@ (80051b0 <main+0x190>)
 800505e:	835a      	strh	r2, [r3, #26]
	Flash.type           = SPI_Configurations.Type.Master;
 8005060:	2332      	movs	r3, #50	@ 0x32
 8005062:	461a      	mov	r2, r3
 8005064:	4b52      	ldr	r3, [pc, #328]	@ (80051b0 <main+0x190>)
 8005066:	831a      	strh	r2, [r3, #24]
	Flash.prescaler      = SPI_Configurations.Prescaler.CLK_div_8;
 8005068:	232a      	movs	r3, #42	@ 0x2a
 800506a:	461a      	mov	r2, r3
 800506c:	4b50      	ldr	r3, [pc, #320]	@ (80051b0 <main+0x190>)
 800506e:	82da      	strh	r2, [r3, #22]
	Flash.mode           = SPI_Configurations.Mode.Full_Duplex_Master;
 8005070:	230b      	movs	r3, #11
 8005072:	461a      	mov	r2, r3
 8005074:	4b4e      	ldr	r3, [pc, #312]	@ (80051b0 <main+0x190>)
 8005076:	81da      	strh	r2, [r3, #14]
	Flash.frame_format   = SPI_Configurations.Frame_Format.MSB_First;
 8005078:	2317      	movs	r3, #23
 800507a:	461a      	mov	r2, r3
 800507c:	4b4c      	ldr	r3, [pc, #304]	@ (80051b0 <main+0x190>)
 800507e:	829a      	strh	r2, [r3, #20]
	Flash.dma            = SPI_Configurations.DMA_Type.TX_DMA_Enable | SPI_Configurations.DMA_Type.RX_DMA_Enable;
 8005080:	2202      	movs	r2, #2
 8005082:	2308      	movs	r3, #8
 8005084:	4313      	orrs	r3, r2
 8005086:	b2db      	uxtb	r3, r3
 8005088:	461a      	mov	r2, r3
 800508a:	4b49      	ldr	r3, [pc, #292]	@ (80051b0 <main+0x190>)
 800508c:	841a      	strh	r2, [r3, #32]
	Flash.data_format    = SPI_Configurations.Data_Format.Bit8;
 800508e:	230b      	movs	r3, #11
 8005090:	461a      	mov	r2, r3
 8005092:	4b47      	ldr	r3, [pc, #284]	@ (80051b0 <main+0x190>)
 8005094:	825a      	strh	r2, [r3, #18]
	Flash.crc            = SPI_Configurations.CRC_Enable.Disable;
 8005096:	2300      	movs	r3, #0
 8005098:	461a      	mov	r2, r3
 800509a:	4b45      	ldr	r3, [pc, #276]	@ (80051b0 <main+0x190>)
 800509c:	821a      	strh	r2, [r3, #16]
	Flash.interrupt      = SPI_Configurations.Interrupts.Disable;
 800509e:	2346      	movs	r3, #70	@ 0x46
 80050a0:	461a      	mov	r2, r3
 80050a2:	4b43      	ldr	r3, [pc, #268]	@ (80051b0 <main+0x190>)
 80050a4:	83da      	strh	r2, [r3, #30]


	Chip1.SPI_Port = &Flash;
 80050a6:	4b44      	ldr	r3, [pc, #272]	@ (80051b8 <main+0x198>)
 80050a8:	4a41      	ldr	r2, [pc, #260]	@ (80051b0 <main+0x190>)
 80050aa:	601a      	str	r2, [r3, #0]
	Chip1.SPI_Port->NSS_Pin = 3;
 80050ac:	4b42      	ldr	r3, [pc, #264]	@ (80051b8 <main+0x198>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2203      	movs	r2, #3
 80050b2:	731a      	strb	r2, [r3, #12]
	Chip1.SPI_Port->NSS_Port = GPIOA;
 80050b4:	4b40      	ldr	r3, [pc, #256]	@ (80051b8 <main+0x198>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a40      	ldr	r2, [pc, #256]	@ (80051bc <main+0x19c>)
 80050ba:	609a      	str	r2, [r3, #8]

	W25Qxx_Init(&Chip1);
 80050bc:	483e      	ldr	r0, [pc, #248]	@ (80051b8 <main+0x198>)
 80050be:	f7ff fa14 	bl	80044ea <W25Qxx_Init>

	uint8_t buffer[256];
	uint8_t rxbuffer[256] = {0};
 80050c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80050c6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80050ca:	2200      	movs	r2, #0
 80050cc:	601a      	str	r2, [r3, #0]
 80050ce:	3304      	adds	r3, #4
 80050d0:	22fc      	movs	r2, #252	@ 0xfc
 80050d2:	2100      	movs	r1, #0
 80050d4:	4618      	mov	r0, r3
 80050d6:	f000 f930 	bl	800533a <memset>

	for(int i = 0; i < 256; i++)
 80050da:	2300      	movs	r3, #0
 80050dc:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 80050e0:	e010      	b.n	8005104 <main+0xe4>
	{
		buffer[i] = i;
 80050e2:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 80050e6:	b2d9      	uxtb	r1, r3
 80050e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80050ec:	f5a3 7282 	sub.w	r2, r3, #260	@ 0x104
 80050f0:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 80050f4:	4413      	add	r3, r2
 80050f6:	460a      	mov	r2, r1
 80050f8:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 256; i++)
 80050fa:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 80050fe:	3301      	adds	r3, #1
 8005100:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 8005104:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8005108:	2bff      	cmp	r3, #255	@ 0xff
 800510a:	ddea      	ble.n	80050e2 <main+0xc2>
	}

	W25Qxx_Sector_Erase(&Chip1, starting_address);
 800510c:	4b2c      	ldr	r3, [pc, #176]	@ (80051c0 <main+0x1a0>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4619      	mov	r1, r3
 8005112:	4829      	ldr	r0, [pc, #164]	@ (80051b8 <main+0x198>)
 8005114:	f7ff fd2a 	bl	8004b6c <W25Qxx_Sector_Erase>
	Delay_us(10);
 8005118:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 800511c:	f7ff feee 	bl	8004efc <Delay_us>
	W25Qxx_Read_Data(&Chip1, starting_address, rxbuffer, 256);
 8005120:	4b27      	ldr	r3, [pc, #156]	@ (80051c0 <main+0x1a0>)
 8005122:	6819      	ldr	r1, [r3, #0]
 8005124:	1d3a      	adds	r2, r7, #4
 8005126:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800512a:	4823      	ldr	r0, [pc, #140]	@ (80051b8 <main+0x198>)
 800512c:	f7ff fb80 	bl	8004830 <W25Qxx_Read_Data>
	Delay_milli(1);
 8005130:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8005134:	f7ff ff36 	bl	8004fa4 <Delay_milli>
	W25Qxx_Page_Program(&Chip1, starting_address, buffer, 256);
 8005138:	4b21      	ldr	r3, [pc, #132]	@ (80051c0 <main+0x1a0>)
 800513a:	6819      	ldr	r1, [r3, #0]
 800513c:	f507 7282 	add.w	r2, r7, #260	@ 0x104
 8005140:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005144:	481c      	ldr	r0, [pc, #112]	@ (80051b8 <main+0x198>)
 8005146:	f7ff fb21 	bl	800478c <W25Qxx_Page_Program>
	Delay_milli(1);
 800514a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800514e:	f7ff ff29 	bl	8004fa4 <Delay_milli>
	W25Qxx_Read_Data(&Chip1, starting_address, rxbuffer, 256);
 8005152:	4b1b      	ldr	r3, [pc, #108]	@ (80051c0 <main+0x1a0>)
 8005154:	6819      	ldr	r1, [r3, #0]
 8005156:	1d3a      	adds	r2, r7, #4
 8005158:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800515c:	4816      	ldr	r0, [pc, #88]	@ (80051b8 <main+0x198>)
 800515e:	f7ff fb67 	bl	8004830 <W25Qxx_Read_Data>
	Delay_milli(1);
 8005162:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8005166:	f7ff ff1d 	bl	8004fa4 <Delay_milli>
	W25Qxx_Fast_Read_Data(&Chip1, starting_address, buffer, 256);
 800516a:	4b15      	ldr	r3, [pc, #84]	@ (80051c0 <main+0x1a0>)
 800516c:	6819      	ldr	r1, [r3, #0]
 800516e:	f507 7282 	add.w	r2, r7, #260	@ 0x104
 8005172:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005176:	4810      	ldr	r0, [pc, #64]	@ (80051b8 <main+0x198>)
 8005178:	f7ff fbfa 	bl	8004970 <W25Qxx_Fast_Read_Data>
	Delay_s(1);
 800517c:	2001      	movs	r0, #1
 800517e:	f7ff ff34 	bl	8004fea <Delay_s>

	W25Qxx_Block_Erase_32KB(&Chip1, starting_address);
 8005182:	4b0f      	ldr	r3, [pc, #60]	@ (80051c0 <main+0x1a0>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4619      	mov	r1, r3
 8005188:	480b      	ldr	r0, [pc, #44]	@ (80051b8 <main+0x198>)
 800518a:	f7ff fd36 	bl	8004bfa <W25Qxx_Block_Erase_32KB>
	Delay_s(1);
 800518e:	2001      	movs	r0, #1
 8005190:	f7ff ff2b 	bl	8004fea <Delay_s>

	W25Qxx_Block_Erase_64KB(&Chip1, starting_address);
 8005194:	4b0a      	ldr	r3, [pc, #40]	@ (80051c0 <main+0x1a0>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4619      	mov	r1, r3
 800519a:	4807      	ldr	r0, [pc, #28]	@ (80051b8 <main+0x198>)
 800519c:	f7ff fd74 	bl	8004c88 <W25Qxx_Block_Erase_64KB>
	Delay_s(1);
 80051a0:	2001      	movs	r0, #1
 80051a2:	f7ff ff22 	bl	8004fea <Delay_s>

	W25Qxx_Chip_Erase(&Chip1);
 80051a6:	4804      	ldr	r0, [pc, #16]	@ (80051b8 <main+0x198>)
 80051a8:	f7ff fcb9 	bl	8004b1e <W25Qxx_Chip_Erase>




	for(;;)
 80051ac:	bf00      	nop
 80051ae:	e7fd      	b.n	80051ac <main+0x18c>
 80051b0:	20000304 	.word	0x20000304
 80051b4:	40013000 	.word	0x40013000
 80051b8:	20000328 	.word	0x20000328
 80051bc:	40020000 	.word	0x40020000
 80051c0:	20000350 	.word	0x20000350

080051c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80051c4:	b480      	push	{r7}
 80051c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80051c8:	4b06      	ldr	r3, [pc, #24]	@ (80051e4 <SystemInit+0x20>)
 80051ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051ce:	4a05      	ldr	r2, [pc, #20]	@ (80051e4 <SystemInit+0x20>)
 80051d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80051d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80051d8:	bf00      	nop
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop
 80051e4:	e000ed00 	.word	0xe000ed00

080051e8 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b087      	sub	sp, #28
 80051ec:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80051ee:	2300      	movs	r3, #0
 80051f0:	613b      	str	r3, [r7, #16]
 80051f2:	2300      	movs	r3, #0
 80051f4:	617b      	str	r3, [r7, #20]
 80051f6:	2302      	movs	r3, #2
 80051f8:	60fb      	str	r3, [r7, #12]
 80051fa:	2300      	movs	r3, #0
 80051fc:	60bb      	str	r3, [r7, #8]
 80051fe:	2302      	movs	r3, #2
 8005200:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8005202:	4b34      	ldr	r3, [pc, #208]	@ (80052d4 <SystemCoreClockUpdate+0xec>)
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	f003 030c 	and.w	r3, r3, #12
 800520a:	613b      	str	r3, [r7, #16]

  switch (tmp)
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	2b08      	cmp	r3, #8
 8005210:	d011      	beq.n	8005236 <SystemCoreClockUpdate+0x4e>
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	2b08      	cmp	r3, #8
 8005216:	d844      	bhi.n	80052a2 <SystemCoreClockUpdate+0xba>
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d003      	beq.n	8005226 <SystemCoreClockUpdate+0x3e>
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	2b04      	cmp	r3, #4
 8005222:	d004      	beq.n	800522e <SystemCoreClockUpdate+0x46>
 8005224:	e03d      	b.n	80052a2 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8005226:	4b2c      	ldr	r3, [pc, #176]	@ (80052d8 <SystemCoreClockUpdate+0xf0>)
 8005228:	4a2c      	ldr	r2, [pc, #176]	@ (80052dc <SystemCoreClockUpdate+0xf4>)
 800522a:	601a      	str	r2, [r3, #0]
      break;
 800522c:	e03d      	b.n	80052aa <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800522e:	4b2a      	ldr	r3, [pc, #168]	@ (80052d8 <SystemCoreClockUpdate+0xf0>)
 8005230:	4a2b      	ldr	r2, [pc, #172]	@ (80052e0 <SystemCoreClockUpdate+0xf8>)
 8005232:	601a      	str	r2, [r3, #0]
      break;
 8005234:	e039      	b.n	80052aa <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8005236:	4b27      	ldr	r3, [pc, #156]	@ (80052d4 <SystemCoreClockUpdate+0xec>)
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	0d9b      	lsrs	r3, r3, #22
 800523c:	f003 0301 	and.w	r3, r3, #1
 8005240:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005242:	4b24      	ldr	r3, [pc, #144]	@ (80052d4 <SystemCoreClockUpdate+0xec>)
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800524a:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d00c      	beq.n	800526c <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8005252:	4a23      	ldr	r2, [pc, #140]	@ (80052e0 <SystemCoreClockUpdate+0xf8>)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	fbb2 f3f3 	udiv	r3, r2, r3
 800525a:	4a1e      	ldr	r2, [pc, #120]	@ (80052d4 <SystemCoreClockUpdate+0xec>)
 800525c:	6852      	ldr	r2, [r2, #4]
 800525e:	0992      	lsrs	r2, r2, #6
 8005260:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005264:	fb02 f303 	mul.w	r3, r2, r3
 8005268:	617b      	str	r3, [r7, #20]
 800526a:	e00b      	b.n	8005284 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800526c:	4a1b      	ldr	r2, [pc, #108]	@ (80052dc <SystemCoreClockUpdate+0xf4>)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	fbb2 f3f3 	udiv	r3, r2, r3
 8005274:	4a17      	ldr	r2, [pc, #92]	@ (80052d4 <SystemCoreClockUpdate+0xec>)
 8005276:	6852      	ldr	r2, [r2, #4]
 8005278:	0992      	lsrs	r2, r2, #6
 800527a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800527e:	fb02 f303 	mul.w	r3, r2, r3
 8005282:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8005284:	4b13      	ldr	r3, [pc, #76]	@ (80052d4 <SystemCoreClockUpdate+0xec>)
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	0c1b      	lsrs	r3, r3, #16
 800528a:	f003 0303 	and.w	r3, r3, #3
 800528e:	3301      	adds	r3, #1
 8005290:	005b      	lsls	r3, r3, #1
 8005292:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8005294:	697a      	ldr	r2, [r7, #20]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	fbb2 f3f3 	udiv	r3, r2, r3
 800529c:	4a0e      	ldr	r2, [pc, #56]	@ (80052d8 <SystemCoreClockUpdate+0xf0>)
 800529e:	6013      	str	r3, [r2, #0]
      break;
 80052a0:	e003      	b.n	80052aa <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 80052a2:	4b0d      	ldr	r3, [pc, #52]	@ (80052d8 <SystemCoreClockUpdate+0xf0>)
 80052a4:	4a0d      	ldr	r2, [pc, #52]	@ (80052dc <SystemCoreClockUpdate+0xf4>)
 80052a6:	601a      	str	r2, [r3, #0]
      break;
 80052a8:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80052aa:	4b0a      	ldr	r3, [pc, #40]	@ (80052d4 <SystemCoreClockUpdate+0xec>)
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	091b      	lsrs	r3, r3, #4
 80052b0:	f003 030f 	and.w	r3, r3, #15
 80052b4:	4a0b      	ldr	r2, [pc, #44]	@ (80052e4 <SystemCoreClockUpdate+0xfc>)
 80052b6:	5cd3      	ldrb	r3, [r2, r3]
 80052b8:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80052ba:	4b07      	ldr	r3, [pc, #28]	@ (80052d8 <SystemCoreClockUpdate+0xf0>)
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	fa22 f303 	lsr.w	r3, r2, r3
 80052c4:	4a04      	ldr	r2, [pc, #16]	@ (80052d8 <SystemCoreClockUpdate+0xf0>)
 80052c6:	6013      	str	r3, [r2, #0]
}
 80052c8:	bf00      	nop
 80052ca:	371c      	adds	r7, #28
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr
 80052d4:	40023800 	.word	0x40023800
 80052d8:	20000000 	.word	0x20000000
 80052dc:	00f42400 	.word	0x00f42400
 80052e0:	017d7840 	.word	0x017d7840
 80052e4:	080057b8 	.word	0x080057b8

080052e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80052e8:	480d      	ldr	r0, [pc, #52]	@ (8005320 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80052ea:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80052ec:	f7ff ff6a 	bl	80051c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80052f0:	480c      	ldr	r0, [pc, #48]	@ (8005324 <LoopForever+0x6>)
  ldr r1, =_edata
 80052f2:	490d      	ldr	r1, [pc, #52]	@ (8005328 <LoopForever+0xa>)
  ldr r2, =_sidata
 80052f4:	4a0d      	ldr	r2, [pc, #52]	@ (800532c <LoopForever+0xe>)
  movs r3, #0
 80052f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80052f8:	e002      	b.n	8005300 <LoopCopyDataInit>

080052fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80052fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80052fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80052fe:	3304      	adds	r3, #4

08005300 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005300:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005302:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005304:	d3f9      	bcc.n	80052fa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005306:	4a0a      	ldr	r2, [pc, #40]	@ (8005330 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005308:	4c0a      	ldr	r4, [pc, #40]	@ (8005334 <LoopForever+0x16>)
  movs r3, #0
 800530a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800530c:	e001      	b.n	8005312 <LoopFillZerobss>

0800530e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800530e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005310:	3204      	adds	r2, #4

08005312 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005312:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005314:	d3fb      	bcc.n	800530e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8005316:	f000 f819 	bl	800534c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800531a:	f7ff fe81 	bl	8005020 <main>

0800531e <LoopForever>:

LoopForever:
  b LoopForever
 800531e:	e7fe      	b.n	800531e <LoopForever>
  ldr   r0, =_estack
 8005320:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005324:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005328:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800532c:	080057d0 	.word	0x080057d0
  ldr r2, =_sbss
 8005330:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8005334:	20000354 	.word	0x20000354

08005338 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005338:	e7fe      	b.n	8005338 <ADC_IRQHandler>

0800533a <memset>:
 800533a:	4402      	add	r2, r0
 800533c:	4603      	mov	r3, r0
 800533e:	4293      	cmp	r3, r2
 8005340:	d100      	bne.n	8005344 <memset+0xa>
 8005342:	4770      	bx	lr
 8005344:	f803 1b01 	strb.w	r1, [r3], #1
 8005348:	e7f9      	b.n	800533e <memset+0x4>
	...

0800534c <__libc_init_array>:
 800534c:	b570      	push	{r4, r5, r6, lr}
 800534e:	4d0d      	ldr	r5, [pc, #52]	@ (8005384 <__libc_init_array+0x38>)
 8005350:	4c0d      	ldr	r4, [pc, #52]	@ (8005388 <__libc_init_array+0x3c>)
 8005352:	1b64      	subs	r4, r4, r5
 8005354:	10a4      	asrs	r4, r4, #2
 8005356:	2600      	movs	r6, #0
 8005358:	42a6      	cmp	r6, r4
 800535a:	d109      	bne.n	8005370 <__libc_init_array+0x24>
 800535c:	4d0b      	ldr	r5, [pc, #44]	@ (800538c <__libc_init_array+0x40>)
 800535e:	4c0c      	ldr	r4, [pc, #48]	@ (8005390 <__libc_init_array+0x44>)
 8005360:	f000 f818 	bl	8005394 <_init>
 8005364:	1b64      	subs	r4, r4, r5
 8005366:	10a4      	asrs	r4, r4, #2
 8005368:	2600      	movs	r6, #0
 800536a:	42a6      	cmp	r6, r4
 800536c:	d105      	bne.n	800537a <__libc_init_array+0x2e>
 800536e:	bd70      	pop	{r4, r5, r6, pc}
 8005370:	f855 3b04 	ldr.w	r3, [r5], #4
 8005374:	4798      	blx	r3
 8005376:	3601      	adds	r6, #1
 8005378:	e7ee      	b.n	8005358 <__libc_init_array+0xc>
 800537a:	f855 3b04 	ldr.w	r3, [r5], #4
 800537e:	4798      	blx	r3
 8005380:	3601      	adds	r6, #1
 8005382:	e7f2      	b.n	800536a <__libc_init_array+0x1e>
 8005384:	080057c8 	.word	0x080057c8
 8005388:	080057c8 	.word	0x080057c8
 800538c:	080057c8 	.word	0x080057c8
 8005390:	080057cc 	.word	0x080057cc

08005394 <_init>:
 8005394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005396:	bf00      	nop
 8005398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800539a:	bc08      	pop	{r3}
 800539c:	469e      	mov	lr, r3
 800539e:	4770      	bx	lr

080053a0 <_fini>:
 80053a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053a2:	bf00      	nop
 80053a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053a6:	bc08      	pop	{r3}
 80053a8:	469e      	mov	lr, r3
 80053aa:	4770      	bx	lr
