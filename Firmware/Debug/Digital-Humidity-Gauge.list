
Digital-Humidity-Gauge.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cd8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000470  08005e60  08005e60  00006e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062d0  080062d0  00008054  2**0
                  CONTENTS
  4 .ARM          00000008  080062d0  080062d0  000072d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080062d8  080062d8  00008054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062d8  080062d8  000072d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080062dc  080062dc  000072dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  080062e0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008054  2**0
                  CONTENTS
 10 .bss          0000047c  20000054  20000054  00008054  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200004d0  200004d0  00008054  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008054  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000de9a  00000000  00000000  00008084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016cc  00000000  00000000  00015f1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000570  00000000  00000000  000175f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000042d  00000000  00000000  00017b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a95a  00000000  00000000  00017f8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a54e  00000000  00000000  000328e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00090b9d  00000000  00000000  0003ce35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000cd9d2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000019e8  00000000  00000000  000cda18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000056  00000000  00000000  000cf400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000054 	.word	0x20000054
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005e48 	.word	0x08005e48

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000058 	.word	0x20000058
 80001c4:	08005e48 	.word	0x08005e48

080001c8 <__aeabi_frsub>:
 80001c8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__addsf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_fsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080001d4 <__addsf3>:
 80001d4:	0042      	lsls	r2, r0, #1
 80001d6:	bf1f      	itttt	ne
 80001d8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80001dc:	ea92 0f03 	teqne	r2, r3
 80001e0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80001e4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80001e8:	d06a      	beq.n	80002c0 <__addsf3+0xec>
 80001ea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001ee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80001f2:	bfc1      	itttt	gt
 80001f4:	18d2      	addgt	r2, r2, r3
 80001f6:	4041      	eorgt	r1, r0
 80001f8:	4048      	eorgt	r0, r1
 80001fa:	4041      	eorgt	r1, r0
 80001fc:	bfb8      	it	lt
 80001fe:	425b      	neglt	r3, r3
 8000200:	2b19      	cmp	r3, #25
 8000202:	bf88      	it	hi
 8000204:	4770      	bxhi	lr
 8000206:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800020a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800020e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000212:	bf18      	it	ne
 8000214:	4240      	negne	r0, r0
 8000216:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800021a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800021e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000222:	bf18      	it	ne
 8000224:	4249      	negne	r1, r1
 8000226:	ea92 0f03 	teq	r2, r3
 800022a:	d03f      	beq.n	80002ac <__addsf3+0xd8>
 800022c:	f1a2 0201 	sub.w	r2, r2, #1
 8000230:	fa41 fc03 	asr.w	ip, r1, r3
 8000234:	eb10 000c 	adds.w	r0, r0, ip
 8000238:	f1c3 0320 	rsb	r3, r3, #32
 800023c:	fa01 f103 	lsl.w	r1, r1, r3
 8000240:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000244:	d502      	bpl.n	800024c <__addsf3+0x78>
 8000246:	4249      	negs	r1, r1
 8000248:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800024c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000250:	d313      	bcc.n	800027a <__addsf3+0xa6>
 8000252:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000256:	d306      	bcc.n	8000266 <__addsf3+0x92>
 8000258:	0840      	lsrs	r0, r0, #1
 800025a:	ea4f 0131 	mov.w	r1, r1, rrx
 800025e:	f102 0201 	add.w	r2, r2, #1
 8000262:	2afe      	cmp	r2, #254	@ 0xfe
 8000264:	d251      	bcs.n	800030a <__addsf3+0x136>
 8000266:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 800026a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800026e:	bf08      	it	eq
 8000270:	f020 0001 	biceq.w	r0, r0, #1
 8000274:	ea40 0003 	orr.w	r0, r0, r3
 8000278:	4770      	bx	lr
 800027a:	0049      	lsls	r1, r1, #1
 800027c:	eb40 0000 	adc.w	r0, r0, r0
 8000280:	3a01      	subs	r2, #1
 8000282:	bf28      	it	cs
 8000284:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000288:	d2ed      	bcs.n	8000266 <__addsf3+0x92>
 800028a:	fab0 fc80 	clz	ip, r0
 800028e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000292:	ebb2 020c 	subs.w	r2, r2, ip
 8000296:	fa00 f00c 	lsl.w	r0, r0, ip
 800029a:	bfaa      	itet	ge
 800029c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002a0:	4252      	neglt	r2, r2
 80002a2:	4318      	orrge	r0, r3
 80002a4:	bfbc      	itt	lt
 80002a6:	40d0      	lsrlt	r0, r2
 80002a8:	4318      	orrlt	r0, r3
 80002aa:	4770      	bx	lr
 80002ac:	f092 0f00 	teq	r2, #0
 80002b0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80002b4:	bf06      	itte	eq
 80002b6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80002ba:	3201      	addeq	r2, #1
 80002bc:	3b01      	subne	r3, #1
 80002be:	e7b5      	b.n	800022c <__addsf3+0x58>
 80002c0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80002c4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80002c8:	bf18      	it	ne
 80002ca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002ce:	d021      	beq.n	8000314 <__addsf3+0x140>
 80002d0:	ea92 0f03 	teq	r2, r3
 80002d4:	d004      	beq.n	80002e0 <__addsf3+0x10c>
 80002d6:	f092 0f00 	teq	r2, #0
 80002da:	bf08      	it	eq
 80002dc:	4608      	moveq	r0, r1
 80002de:	4770      	bx	lr
 80002e0:	ea90 0f01 	teq	r0, r1
 80002e4:	bf1c      	itt	ne
 80002e6:	2000      	movne	r0, #0
 80002e8:	4770      	bxne	lr
 80002ea:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80002ee:	d104      	bne.n	80002fa <__addsf3+0x126>
 80002f0:	0040      	lsls	r0, r0, #1
 80002f2:	bf28      	it	cs
 80002f4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80002f8:	4770      	bx	lr
 80002fa:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80002fe:	bf3c      	itt	cc
 8000300:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000304:	4770      	bxcc	lr
 8000306:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800030a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800030e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000312:	4770      	bx	lr
 8000314:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000318:	bf16      	itet	ne
 800031a:	4608      	movne	r0, r1
 800031c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000320:	4601      	movne	r1, r0
 8000322:	0242      	lsls	r2, r0, #9
 8000324:	bf06      	itte	eq
 8000326:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800032a:	ea90 0f01 	teqeq	r0, r1
 800032e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000332:	4770      	bx	lr

08000334 <__aeabi_ui2f>:
 8000334:	f04f 0300 	mov.w	r3, #0
 8000338:	e004      	b.n	8000344 <__aeabi_i2f+0x8>
 800033a:	bf00      	nop

0800033c <__aeabi_i2f>:
 800033c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000340:	bf48      	it	mi
 8000342:	4240      	negmi	r0, r0
 8000344:	ea5f 0c00 	movs.w	ip, r0
 8000348:	bf08      	it	eq
 800034a:	4770      	bxeq	lr
 800034c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000350:	4601      	mov	r1, r0
 8000352:	f04f 0000 	mov.w	r0, #0
 8000356:	e01c      	b.n	8000392 <__aeabi_l2f+0x2a>

08000358 <__aeabi_ul2f>:
 8000358:	ea50 0201 	orrs.w	r2, r0, r1
 800035c:	bf08      	it	eq
 800035e:	4770      	bxeq	lr
 8000360:	f04f 0300 	mov.w	r3, #0
 8000364:	e00a      	b.n	800037c <__aeabi_l2f+0x14>
 8000366:	bf00      	nop

08000368 <__aeabi_l2f>:
 8000368:	ea50 0201 	orrs.w	r2, r0, r1
 800036c:	bf08      	it	eq
 800036e:	4770      	bxeq	lr
 8000370:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000374:	d502      	bpl.n	800037c <__aeabi_l2f+0x14>
 8000376:	4240      	negs	r0, r0
 8000378:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800037c:	ea5f 0c01 	movs.w	ip, r1
 8000380:	bf02      	ittt	eq
 8000382:	4684      	moveq	ip, r0
 8000384:	4601      	moveq	r1, r0
 8000386:	2000      	moveq	r0, #0
 8000388:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 800038c:	bf08      	it	eq
 800038e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000392:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000396:	fabc f28c 	clz	r2, ip
 800039a:	3a08      	subs	r2, #8
 800039c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003a0:	db10      	blt.n	80003c4 <__aeabi_l2f+0x5c>
 80003a2:	fa01 fc02 	lsl.w	ip, r1, r2
 80003a6:	4463      	add	r3, ip
 80003a8:	fa00 fc02 	lsl.w	ip, r0, r2
 80003ac:	f1c2 0220 	rsb	r2, r2, #32
 80003b0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003b4:	fa20 f202 	lsr.w	r2, r0, r2
 80003b8:	eb43 0002 	adc.w	r0, r3, r2
 80003bc:	bf08      	it	eq
 80003be:	f020 0001 	biceq.w	r0, r0, #1
 80003c2:	4770      	bx	lr
 80003c4:	f102 0220 	add.w	r2, r2, #32
 80003c8:	fa01 fc02 	lsl.w	ip, r1, r2
 80003cc:	f1c2 0220 	rsb	r2, r2, #32
 80003d0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80003d4:	fa21 f202 	lsr.w	r2, r1, r2
 80003d8:	eb43 0002 	adc.w	r0, r3, r2
 80003dc:	bf08      	it	eq
 80003de:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80003e2:	4770      	bx	lr

080003e4 <__aeabi_ldivmod>:
 80003e4:	b97b      	cbnz	r3, 8000406 <__aeabi_ldivmod+0x22>
 80003e6:	b972      	cbnz	r2, 8000406 <__aeabi_ldivmod+0x22>
 80003e8:	2900      	cmp	r1, #0
 80003ea:	bfbe      	ittt	lt
 80003ec:	2000      	movlt	r0, #0
 80003ee:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80003f2:	e006      	blt.n	8000402 <__aeabi_ldivmod+0x1e>
 80003f4:	bf08      	it	eq
 80003f6:	2800      	cmpeq	r0, #0
 80003f8:	bf1c      	itt	ne
 80003fa:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80003fe:	f04f 30ff 	movne.w	r0, #4294967295
 8000402:	f000 b99d 	b.w	8000740 <__aeabi_idiv0>
 8000406:	f1ad 0c08 	sub.w	ip, sp, #8
 800040a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800040e:	2900      	cmp	r1, #0
 8000410:	db09      	blt.n	8000426 <__aeabi_ldivmod+0x42>
 8000412:	2b00      	cmp	r3, #0
 8000414:	db1a      	blt.n	800044c <__aeabi_ldivmod+0x68>
 8000416:	f000 f835 	bl	8000484 <__udivmoddi4>
 800041a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800041e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000422:	b004      	add	sp, #16
 8000424:	4770      	bx	lr
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	2b00      	cmp	r3, #0
 800042e:	db1b      	blt.n	8000468 <__aeabi_ldivmod+0x84>
 8000430:	f000 f828 	bl	8000484 <__udivmoddi4>
 8000434:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000438:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800043c:	b004      	add	sp, #16
 800043e:	4240      	negs	r0, r0
 8000440:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000444:	4252      	negs	r2, r2
 8000446:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800044a:	4770      	bx	lr
 800044c:	4252      	negs	r2, r2
 800044e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000452:	f000 f817 	bl	8000484 <__udivmoddi4>
 8000456:	f8dd e004 	ldr.w	lr, [sp, #4]
 800045a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800045e:	b004      	add	sp, #16
 8000460:	4240      	negs	r0, r0
 8000462:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000466:	4770      	bx	lr
 8000468:	4252      	negs	r2, r2
 800046a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800046e:	f000 f809 	bl	8000484 <__udivmoddi4>
 8000472:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000476:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800047a:	b004      	add	sp, #16
 800047c:	4252      	negs	r2, r2
 800047e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000482:	4770      	bx	lr

08000484 <__udivmoddi4>:
 8000484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000488:	9d08      	ldr	r5, [sp, #32]
 800048a:	460c      	mov	r4, r1
 800048c:	2b00      	cmp	r3, #0
 800048e:	d14e      	bne.n	800052e <__udivmoddi4+0xaa>
 8000490:	4694      	mov	ip, r2
 8000492:	458c      	cmp	ip, r1
 8000494:	4686      	mov	lr, r0
 8000496:	fab2 f282 	clz	r2, r2
 800049a:	d962      	bls.n	8000562 <__udivmoddi4+0xde>
 800049c:	b14a      	cbz	r2, 80004b2 <__udivmoddi4+0x2e>
 800049e:	f1c2 0320 	rsb	r3, r2, #32
 80004a2:	4091      	lsls	r1, r2
 80004a4:	fa20 f303 	lsr.w	r3, r0, r3
 80004a8:	fa0c fc02 	lsl.w	ip, ip, r2
 80004ac:	4319      	orrs	r1, r3
 80004ae:	fa00 fe02 	lsl.w	lr, r0, r2
 80004b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b6:	fa1f f68c 	uxth.w	r6, ip
 80004ba:	fbb1 f4f7 	udiv	r4, r1, r7
 80004be:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004c2:	fb07 1114 	mls	r1, r7, r4, r1
 80004c6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004ca:	fb04 f106 	mul.w	r1, r4, r6
 80004ce:	4299      	cmp	r1, r3
 80004d0:	d90a      	bls.n	80004e8 <__udivmoddi4+0x64>
 80004d2:	eb1c 0303 	adds.w	r3, ip, r3
 80004d6:	f104 30ff 	add.w	r0, r4, #4294967295
 80004da:	f080 8112 	bcs.w	8000702 <__udivmoddi4+0x27e>
 80004de:	4299      	cmp	r1, r3
 80004e0:	f240 810f 	bls.w	8000702 <__udivmoddi4+0x27e>
 80004e4:	3c02      	subs	r4, #2
 80004e6:	4463      	add	r3, ip
 80004e8:	1a59      	subs	r1, r3, r1
 80004ea:	fa1f f38e 	uxth.w	r3, lr
 80004ee:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f2:	fb07 1110 	mls	r1, r7, r0, r1
 80004f6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004fa:	fb00 f606 	mul.w	r6, r0, r6
 80004fe:	429e      	cmp	r6, r3
 8000500:	d90a      	bls.n	8000518 <__udivmoddi4+0x94>
 8000502:	eb1c 0303 	adds.w	r3, ip, r3
 8000506:	f100 31ff 	add.w	r1, r0, #4294967295
 800050a:	f080 80fc 	bcs.w	8000706 <__udivmoddi4+0x282>
 800050e:	429e      	cmp	r6, r3
 8000510:	f240 80f9 	bls.w	8000706 <__udivmoddi4+0x282>
 8000514:	4463      	add	r3, ip
 8000516:	3802      	subs	r0, #2
 8000518:	1b9b      	subs	r3, r3, r6
 800051a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800051e:	2100      	movs	r1, #0
 8000520:	b11d      	cbz	r5, 800052a <__udivmoddi4+0xa6>
 8000522:	40d3      	lsrs	r3, r2
 8000524:	2200      	movs	r2, #0
 8000526:	e9c5 3200 	strd	r3, r2, [r5]
 800052a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052e:	428b      	cmp	r3, r1
 8000530:	d905      	bls.n	800053e <__udivmoddi4+0xba>
 8000532:	b10d      	cbz	r5, 8000538 <__udivmoddi4+0xb4>
 8000534:	e9c5 0100 	strd	r0, r1, [r5]
 8000538:	2100      	movs	r1, #0
 800053a:	4608      	mov	r0, r1
 800053c:	e7f5      	b.n	800052a <__udivmoddi4+0xa6>
 800053e:	fab3 f183 	clz	r1, r3
 8000542:	2900      	cmp	r1, #0
 8000544:	d146      	bne.n	80005d4 <__udivmoddi4+0x150>
 8000546:	42a3      	cmp	r3, r4
 8000548:	d302      	bcc.n	8000550 <__udivmoddi4+0xcc>
 800054a:	4290      	cmp	r0, r2
 800054c:	f0c0 80f0 	bcc.w	8000730 <__udivmoddi4+0x2ac>
 8000550:	1a86      	subs	r6, r0, r2
 8000552:	eb64 0303 	sbc.w	r3, r4, r3
 8000556:	2001      	movs	r0, #1
 8000558:	2d00      	cmp	r5, #0
 800055a:	d0e6      	beq.n	800052a <__udivmoddi4+0xa6>
 800055c:	e9c5 6300 	strd	r6, r3, [r5]
 8000560:	e7e3      	b.n	800052a <__udivmoddi4+0xa6>
 8000562:	2a00      	cmp	r2, #0
 8000564:	f040 8090 	bne.w	8000688 <__udivmoddi4+0x204>
 8000568:	eba1 040c 	sub.w	r4, r1, ip
 800056c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000570:	fa1f f78c 	uxth.w	r7, ip
 8000574:	2101      	movs	r1, #1
 8000576:	fbb4 f6f8 	udiv	r6, r4, r8
 800057a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800057e:	fb08 4416 	mls	r4, r8, r6, r4
 8000582:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000586:	fb07 f006 	mul.w	r0, r7, r6
 800058a:	4298      	cmp	r0, r3
 800058c:	d908      	bls.n	80005a0 <__udivmoddi4+0x11c>
 800058e:	eb1c 0303 	adds.w	r3, ip, r3
 8000592:	f106 34ff 	add.w	r4, r6, #4294967295
 8000596:	d202      	bcs.n	800059e <__udivmoddi4+0x11a>
 8000598:	4298      	cmp	r0, r3
 800059a:	f200 80cd 	bhi.w	8000738 <__udivmoddi4+0x2b4>
 800059e:	4626      	mov	r6, r4
 80005a0:	1a1c      	subs	r4, r3, r0
 80005a2:	fa1f f38e 	uxth.w	r3, lr
 80005a6:	fbb4 f0f8 	udiv	r0, r4, r8
 80005aa:	fb08 4410 	mls	r4, r8, r0, r4
 80005ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80005b2:	fb00 f707 	mul.w	r7, r0, r7
 80005b6:	429f      	cmp	r7, r3
 80005b8:	d908      	bls.n	80005cc <__udivmoddi4+0x148>
 80005ba:	eb1c 0303 	adds.w	r3, ip, r3
 80005be:	f100 34ff 	add.w	r4, r0, #4294967295
 80005c2:	d202      	bcs.n	80005ca <__udivmoddi4+0x146>
 80005c4:	429f      	cmp	r7, r3
 80005c6:	f200 80b0 	bhi.w	800072a <__udivmoddi4+0x2a6>
 80005ca:	4620      	mov	r0, r4
 80005cc:	1bdb      	subs	r3, r3, r7
 80005ce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80005d2:	e7a5      	b.n	8000520 <__udivmoddi4+0x9c>
 80005d4:	f1c1 0620 	rsb	r6, r1, #32
 80005d8:	408b      	lsls	r3, r1
 80005da:	fa22 f706 	lsr.w	r7, r2, r6
 80005de:	431f      	orrs	r7, r3
 80005e0:	fa20 fc06 	lsr.w	ip, r0, r6
 80005e4:	fa04 f301 	lsl.w	r3, r4, r1
 80005e8:	ea43 030c 	orr.w	r3, r3, ip
 80005ec:	40f4      	lsrs	r4, r6
 80005ee:	fa00 f801 	lsl.w	r8, r0, r1
 80005f2:	0c38      	lsrs	r0, r7, #16
 80005f4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80005f8:	fbb4 fef0 	udiv	lr, r4, r0
 80005fc:	fa1f fc87 	uxth.w	ip, r7
 8000600:	fb00 441e 	mls	r4, r0, lr, r4
 8000604:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000608:	fb0e f90c 	mul.w	r9, lr, ip
 800060c:	45a1      	cmp	r9, r4
 800060e:	fa02 f201 	lsl.w	r2, r2, r1
 8000612:	d90a      	bls.n	800062a <__udivmoddi4+0x1a6>
 8000614:	193c      	adds	r4, r7, r4
 8000616:	f10e 3aff 	add.w	sl, lr, #4294967295
 800061a:	f080 8084 	bcs.w	8000726 <__udivmoddi4+0x2a2>
 800061e:	45a1      	cmp	r9, r4
 8000620:	f240 8081 	bls.w	8000726 <__udivmoddi4+0x2a2>
 8000624:	f1ae 0e02 	sub.w	lr, lr, #2
 8000628:	443c      	add	r4, r7
 800062a:	eba4 0409 	sub.w	r4, r4, r9
 800062e:	fa1f f983 	uxth.w	r9, r3
 8000632:	fbb4 f3f0 	udiv	r3, r4, r0
 8000636:	fb00 4413 	mls	r4, r0, r3, r4
 800063a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800063e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000642:	45a4      	cmp	ip, r4
 8000644:	d907      	bls.n	8000656 <__udivmoddi4+0x1d2>
 8000646:	193c      	adds	r4, r7, r4
 8000648:	f103 30ff 	add.w	r0, r3, #4294967295
 800064c:	d267      	bcs.n	800071e <__udivmoddi4+0x29a>
 800064e:	45a4      	cmp	ip, r4
 8000650:	d965      	bls.n	800071e <__udivmoddi4+0x29a>
 8000652:	3b02      	subs	r3, #2
 8000654:	443c      	add	r4, r7
 8000656:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800065a:	fba0 9302 	umull	r9, r3, r0, r2
 800065e:	eba4 040c 	sub.w	r4, r4, ip
 8000662:	429c      	cmp	r4, r3
 8000664:	46ce      	mov	lr, r9
 8000666:	469c      	mov	ip, r3
 8000668:	d351      	bcc.n	800070e <__udivmoddi4+0x28a>
 800066a:	d04e      	beq.n	800070a <__udivmoddi4+0x286>
 800066c:	b155      	cbz	r5, 8000684 <__udivmoddi4+0x200>
 800066e:	ebb8 030e 	subs.w	r3, r8, lr
 8000672:	eb64 040c 	sbc.w	r4, r4, ip
 8000676:	fa04 f606 	lsl.w	r6, r4, r6
 800067a:	40cb      	lsrs	r3, r1
 800067c:	431e      	orrs	r6, r3
 800067e:	40cc      	lsrs	r4, r1
 8000680:	e9c5 6400 	strd	r6, r4, [r5]
 8000684:	2100      	movs	r1, #0
 8000686:	e750      	b.n	800052a <__udivmoddi4+0xa6>
 8000688:	f1c2 0320 	rsb	r3, r2, #32
 800068c:	fa20 f103 	lsr.w	r1, r0, r3
 8000690:	fa0c fc02 	lsl.w	ip, ip, r2
 8000694:	fa24 f303 	lsr.w	r3, r4, r3
 8000698:	4094      	lsls	r4, r2
 800069a:	430c      	orrs	r4, r1
 800069c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80006a0:	fa00 fe02 	lsl.w	lr, r0, r2
 80006a4:	fa1f f78c 	uxth.w	r7, ip
 80006a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80006ac:	fb08 3110 	mls	r1, r8, r0, r3
 80006b0:	0c23      	lsrs	r3, r4, #16
 80006b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006b6:	fb00 f107 	mul.w	r1, r0, r7
 80006ba:	4299      	cmp	r1, r3
 80006bc:	d908      	bls.n	80006d0 <__udivmoddi4+0x24c>
 80006be:	eb1c 0303 	adds.w	r3, ip, r3
 80006c2:	f100 36ff 	add.w	r6, r0, #4294967295
 80006c6:	d22c      	bcs.n	8000722 <__udivmoddi4+0x29e>
 80006c8:	4299      	cmp	r1, r3
 80006ca:	d92a      	bls.n	8000722 <__udivmoddi4+0x29e>
 80006cc:	3802      	subs	r0, #2
 80006ce:	4463      	add	r3, ip
 80006d0:	1a5b      	subs	r3, r3, r1
 80006d2:	b2a4      	uxth	r4, r4
 80006d4:	fbb3 f1f8 	udiv	r1, r3, r8
 80006d8:	fb08 3311 	mls	r3, r8, r1, r3
 80006dc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006e0:	fb01 f307 	mul.w	r3, r1, r7
 80006e4:	42a3      	cmp	r3, r4
 80006e6:	d908      	bls.n	80006fa <__udivmoddi4+0x276>
 80006e8:	eb1c 0404 	adds.w	r4, ip, r4
 80006ec:	f101 36ff 	add.w	r6, r1, #4294967295
 80006f0:	d213      	bcs.n	800071a <__udivmoddi4+0x296>
 80006f2:	42a3      	cmp	r3, r4
 80006f4:	d911      	bls.n	800071a <__udivmoddi4+0x296>
 80006f6:	3902      	subs	r1, #2
 80006f8:	4464      	add	r4, ip
 80006fa:	1ae4      	subs	r4, r4, r3
 80006fc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000700:	e739      	b.n	8000576 <__udivmoddi4+0xf2>
 8000702:	4604      	mov	r4, r0
 8000704:	e6f0      	b.n	80004e8 <__udivmoddi4+0x64>
 8000706:	4608      	mov	r0, r1
 8000708:	e706      	b.n	8000518 <__udivmoddi4+0x94>
 800070a:	45c8      	cmp	r8, r9
 800070c:	d2ae      	bcs.n	800066c <__udivmoddi4+0x1e8>
 800070e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000712:	eb63 0c07 	sbc.w	ip, r3, r7
 8000716:	3801      	subs	r0, #1
 8000718:	e7a8      	b.n	800066c <__udivmoddi4+0x1e8>
 800071a:	4631      	mov	r1, r6
 800071c:	e7ed      	b.n	80006fa <__udivmoddi4+0x276>
 800071e:	4603      	mov	r3, r0
 8000720:	e799      	b.n	8000656 <__udivmoddi4+0x1d2>
 8000722:	4630      	mov	r0, r6
 8000724:	e7d4      	b.n	80006d0 <__udivmoddi4+0x24c>
 8000726:	46d6      	mov	lr, sl
 8000728:	e77f      	b.n	800062a <__udivmoddi4+0x1a6>
 800072a:	4463      	add	r3, ip
 800072c:	3802      	subs	r0, #2
 800072e:	e74d      	b.n	80005cc <__udivmoddi4+0x148>
 8000730:	4606      	mov	r6, r0
 8000732:	4623      	mov	r3, r4
 8000734:	4608      	mov	r0, r1
 8000736:	e70f      	b.n	8000558 <__udivmoddi4+0xd4>
 8000738:	3e02      	subs	r6, #2
 800073a:	4463      	add	r3, ip
 800073c:	e730      	b.n	80005a0 <__udivmoddi4+0x11c>
 800073e:	bf00      	nop

08000740 <__aeabi_idiv0>:
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop

08000744 <p_sat_kPa>:
#include "Humidity_Gauge.h"


/* ---------- helper: Magnus saturation vapour pressure (0-60 °C) -- */
static inline float p_sat_kPa(float T_C)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	ed87 0a01 	vstr	s0, [r7, #4]
    return 0.61078f * expf(17.269f * T_C / (T_C + 237.3f));   /* kPa */
 800074e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000752:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8000788 <p_sat_kPa+0x44>
 8000756:	ee27 7a87 	vmul.f32	s14, s15, s14
 800075a:	edd7 7a01 	vldr	s15, [r7, #4]
 800075e:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 800078c <p_sat_kPa+0x48>
 8000762:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000766:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800076a:	eeb0 0a66 	vmov.f32	s0, s13
 800076e:	f004 fc85 	bl	800507c <expf>
 8000772:	eef0 7a40 	vmov.f32	s15, s0
 8000776:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8000790 <p_sat_kPa+0x4c>
 800077a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800077e:	eeb0 0a67 	vmov.f32	s0, s15
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	418a26e9 	.word	0x418a26e9
 800078c:	436d4ccd 	.word	0x436d4ccd
 8000790:	3f1c5c14 	.word	0x3f1c5c14

08000794 <dew_point>:

/* ---------- helper: dew-point via inverse Magnus ----------------- */
static float dew_point(float p_v_kPa)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af00      	add	r7, sp, #0
 800079a:	ed87 0a01 	vstr	s0, [r7, #4]
    float ln = logf(p_v_kPa / 0.61078f);
 800079e:	edd7 7a01 	vldr	s15, [r7, #4]
 80007a2:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 80007e0 <dew_point+0x4c>
 80007a6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80007aa:	eeb0 0a47 	vmov.f32	s0, s14
 80007ae:	f004 fc9b 	bl	80050e8 <logf>
 80007b2:	ed87 0a03 	vstr	s0, [r7, #12]
    return (237.3f * ln) / (17.269f - ln);                    /* °C  */
 80007b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80007ba:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80007e4 <dew_point+0x50>
 80007be:	ee27 7a87 	vmul.f32	s14, s15, s14
 80007c2:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80007e8 <dew_point+0x54>
 80007c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80007ca:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80007ce:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80007d2:	eef0 7a66 	vmov.f32	s15, s13
}
 80007d6:	eeb0 0a67 	vmov.f32	s0, s15
 80007da:	3710      	adds	r7, #16
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	3f1c5c14 	.word	0x3f1c5c14
 80007e4:	436d4ccd 	.word	0x436d4ccd
 80007e8:	418a26e9 	.word	0x418a26e9

080007ec <wet_bulb_stull>:

/* ---------- helper: Stull (2011) wet-bulb approximation ---------- */
static float wet_bulb_stull(float T_C, float RH_pct)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	ed2d 8b02 	vpush	{d8}
 80007f2:	b088      	sub	sp, #32
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	ed87 0a01 	vstr	s0, [r7, #4]
 80007fa:	edc7 0a00 	vstr	s1, [r7]
    float rh = RH_pct;
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	61fb      	str	r3, [r7, #28]
    float term1 = T_C * atanf(0.151977f * sqrtf(rh + 8.313659f));
 8000802:	edd7 7a07 	vldr	s15, [r7, #28]
 8000806:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 80008d4 <wet_bulb_stull+0xe8>
 800080a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800080e:	eeb0 0a67 	vmov.f32	s0, s15
 8000812:	f004 fcef 	bl	80051f4 <sqrtf>
 8000816:	eef0 7a40 	vmov.f32	s15, s0
 800081a:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80008d8 <wet_bulb_stull+0xec>
 800081e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000822:	eeb0 0a67 	vmov.f32	s0, s15
 8000826:	f004 fd03 	bl	8005230 <atanf>
 800082a:	eeb0 7a40 	vmov.f32	s14, s0
 800082e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000832:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000836:	edc7 7a06 	vstr	s15, [r7, #24]
    float term2 = atanf(T_C + rh);
 800083a:	ed97 7a01 	vldr	s14, [r7, #4]
 800083e:	edd7 7a07 	vldr	s15, [r7, #28]
 8000842:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000846:	eeb0 0a67 	vmov.f32	s0, s15
 800084a:	f004 fcf1 	bl	8005230 <atanf>
 800084e:	ed87 0a05 	vstr	s0, [r7, #20]
    float term3 = atanf(rh - 1.676331f);
 8000852:	edd7 7a07 	vldr	s15, [r7, #28]
 8000856:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80008dc <wet_bulb_stull+0xf0>
 800085a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800085e:	eeb0 0a67 	vmov.f32	s0, s15
 8000862:	f004 fce5 	bl	8005230 <atanf>
 8000866:	ed87 0a04 	vstr	s0, [r7, #16]
    float term4 = 0.00391838f * powf(rh, 1.5f) * atanf(0.023101f * rh);
 800086a:	eef7 0a08 	vmov.f32	s1, #120	@ 0x3fc00000  1.5
 800086e:	ed97 0a07 	vldr	s0, [r7, #28]
 8000872:	f004 fc67 	bl	8005144 <powf>
 8000876:	eef0 7a40 	vmov.f32	s15, s0
 800087a:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80008e0 <wet_bulb_stull+0xf4>
 800087e:	ee27 8a87 	vmul.f32	s16, s15, s14
 8000882:	edd7 7a07 	vldr	s15, [r7, #28]
 8000886:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80008e4 <wet_bulb_stull+0xf8>
 800088a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800088e:	eeb0 0a67 	vmov.f32	s0, s15
 8000892:	f004 fccd 	bl	8005230 <atanf>
 8000896:	eef0 7a40 	vmov.f32	s15, s0
 800089a:	ee68 7a27 	vmul.f32	s15, s16, s15
 800089e:	edc7 7a03 	vstr	s15, [r7, #12]
    return term1 + term2 - term3 + term4 - 4.686035f;         /* °C */
 80008a2:	ed97 7a06 	vldr	s14, [r7, #24]
 80008a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80008aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80008ae:	edd7 7a04 	vldr	s15, [r7, #16]
 80008b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80008b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80008ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008be:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80008e8 <wet_bulb_stull+0xfc>
 80008c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
}
 80008c6:	eeb0 0a67 	vmov.f32	s0, s15
 80008ca:	3720      	adds	r7, #32
 80008cc:	46bd      	mov	sp, r7
 80008ce:	ecbd 8b02 	vpop	{d8}
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	410504bf 	.word	0x410504bf
 80008d8:	3e1b9fdc 	.word	0x3e1b9fdc
 80008dc:	3fd69204 	.word	0x3fd69204
 80008e0:	3b8065c1 	.word	0x3b8065c1
 80008e4:	3cbd3e4f 	.word	0x3cbd3e4f
 80008e8:	4095f400 	.word	0x4095f400

080008ec <psychro_from_bme280>:

/* ---------- public API ------------------------------------------ */
psychro_t psychro_from_bme280(float T_C,
                              float RH_pct,
                              float P_Pa)          /* BME280 gives Pa */
{
 80008ec:	b5b0      	push	{r4, r5, r7, lr}
 80008ee:	b090      	sub	sp, #64	@ 0x40
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	60f8      	str	r0, [r7, #12]
 80008f4:	ed87 0a02 	vstr	s0, [r7, #8]
 80008f8:	edc7 0a01 	vstr	s1, [r7, #4]
 80008fc:	ed87 1a00 	vstr	s2, [r7]
    psychro_t o;
    o.T      = T_C;
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	613b      	str	r3, [r7, #16]
    o.RH     = RH_pct;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	617b      	str	r3, [r7, #20]
    o.P_kPa  = P_Pa * 0.001f;
 8000908:	edd7 7a00 	vldr	s15, [r7]
 800090c:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8000a60 <psychro_from_bme280+0x174>
 8000910:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000914:	edc7 7a06 	vstr	s15, [r7, #24]

    /* 1. saturation & partial pressures */
    o.p_sat  = p_sat_kPa(T_C);
 8000918:	ed97 0a02 	vldr	s0, [r7, #8]
 800091c:	f7ff ff12 	bl	8000744 <p_sat_kPa>
 8000920:	eef0 7a40 	vmov.f32	s15, s0
 8000924:	edc7 7a07 	vstr	s15, [r7, #28]
    o.p_v    = (RH_pct * 0.01f) * o.p_sat;
 8000928:	edd7 7a01 	vldr	s15, [r7, #4]
 800092c:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8000a64 <psychro_from_bme280+0x178>
 8000930:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000934:	edd7 7a07 	vldr	s15, [r7, #28]
 8000938:	ee67 7a27 	vmul.f32	s15, s14, s15
 800093c:	edc7 7a08 	vstr	s15, [r7, #32]

    /* 2. humidity ratio & absolute humidity */
    o.w      = MW_MA * o.p_v / (o.P_kPa - o.p_v);
 8000940:	edd7 7a08 	vldr	s15, [r7, #32]
 8000944:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8000a68 <psychro_from_bme280+0x17c>
 8000948:	ee67 6a87 	vmul.f32	s13, s15, s14
 800094c:	ed97 7a06 	vldr	s14, [r7, #24]
 8000950:	edd7 7a08 	vldr	s15, [r7, #32]
 8000954:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000958:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800095c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    o.rho_v  = (o.p_v * 1000.0f) / (R_WV * (T_C + 273.15f));  /* kg/m³ */
 8000960:	edd7 7a08 	vldr	s15, [r7, #32]
 8000964:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8000a6c <psychro_from_bme280+0x180>
 8000968:	ee67 6a87 	vmul.f32	s13, s15, s14
 800096c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000970:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8000a70 <psychro_from_bme280+0x184>
 8000974:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000978:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8000a74 <psychro_from_bme280+0x188>
 800097c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000980:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000984:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    o.rho_v *= 1000.0f;                                       /* → g/m³ */
 8000988:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800098c:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8000a6c <psychro_from_bme280+0x180>
 8000990:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000994:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

    /* 3. dew-point & wet-bulb */
    o.T_dp   = dew_point(o.p_v);
 8000998:	edd7 7a08 	vldr	s15, [r7, #32]
 800099c:	eeb0 0a67 	vmov.f32	s0, s15
 80009a0:	f7ff fef8 	bl	8000794 <dew_point>
 80009a4:	eef0 7a40 	vmov.f32	s15, s0
 80009a8:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    o.T_wb   = wet_bulb_stull(T_C, RH_pct);  /* good −20…50 °C, 5–99 % */
 80009ac:	edd7 0a01 	vldr	s1, [r7, #4]
 80009b0:	ed97 0a02 	vldr	s0, [r7, #8]
 80009b4:	f7ff ff1a 	bl	80007ec <wet_bulb_stull>
 80009b8:	eef0 7a40 	vmov.f32	s15, s0
 80009bc:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    /* 4. enthalpy */
    o.h      = CP_DA * T_C + o.w * (L_0 + CP_WV * T_C);
 80009c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80009c4:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8000a78 <psychro_from_bme280+0x18c>
 80009c8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80009cc:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80009d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80009d4:	ed9f 6a29 	vldr	s12, [pc, #164]	@ 8000a7c <psychro_from_bme280+0x190>
 80009d8:	ee67 7a86 	vmul.f32	s15, s15, s12
 80009dc:	ed9f 6a28 	vldr	s12, [pc, #160]	@ 8000a80 <psychro_from_bme280+0x194>
 80009e0:	ee77 7a86 	vadd.f32	s15, s15, s12
 80009e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80009e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009ec:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    /* 5. specific volume & density (moist air) */
    o.v      = (R_DA * (T_C + 273.15f) * (1.0f + 1.6078f * o.w)) / (o.P_kPa * 1000.0f);
 80009f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80009f4:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8000a70 <psychro_from_bme280+0x184>
 80009f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80009fc:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8000a84 <psychro_from_bme280+0x198>
 8000a00:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000a04:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000a08:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8000a88 <psychro_from_bme280+0x19c>
 8000a0c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000a10:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000a14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000a18:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000a1c:	edd7 7a06 	vldr	s15, [r7, #24]
 8000a20:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8000a6c <psychro_from_bme280+0x180>
 8000a24:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000a28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a2c:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    o.rho    = 1.0f / o.v;
 8000a30:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8000a34:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000a38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a3c:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

    return o;
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	461d      	mov	r5, r3
 8000a44:	f107 0410 	add.w	r4, r7, #16
 8000a48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a50:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000a54:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8000a58:	68f8      	ldr	r0, [r7, #12]
 8000a5a:	3740      	adds	r7, #64	@ 0x40
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bdb0      	pop	{r4, r5, r7, pc}
 8000a60:	3a83126f 	.word	0x3a83126f
 8000a64:	3c23d70a 	.word	0x3c23d70a
 8000a68:	3f1f3b64 	.word	0x3f1f3b64
 8000a6c:	447a0000 	.word	0x447a0000
 8000a70:	43889333 	.word	0x43889333
 8000a74:	43e6c000 	.word	0x43e6c000
 8000a78:	3f80c49c 	.word	0x3f80c49c
 8000a7c:	3fee147b 	.word	0x3fee147b
 8000a80:	451c5000 	.word	0x451c5000
 8000a84:	438f8666 	.word	0x438f8666
 8000a88:	3fcdcc64 	.word	0x3fcdcc64

08000a8c <Delay_ms>:
	while((SysTick->CTRL & 0x00010000) == 0);
	return (0UL);                                                     /* Function successful */
}

__STATIC_INLINE uint32_t Delay_ms(volatile float ms)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b085      	sub	sp, #20
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	ed87 0a01 	vstr	s0, [r7, #4]
	unsigned long x =0x29040 * (ms);
 8000a96:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a9a:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8000ae0 <Delay_ms+0x54>
 8000a9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000aa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000aa6:	ee17 3a90 	vmov	r3, s15
 8000aaa:	60fb      	str	r3, [r7, #12]
	SysTick->LOAD =  x ;
 8000aac:	4a0d      	ldr	r2, [pc, #52]	@ (8000ae4 <Delay_ms+0x58>)
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0;
 8000ab2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae4 <Delay_ms+0x58>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
	SysTick->CTRL |= 1;
 8000ab8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ae4 <Delay_ms+0x58>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a09      	ldr	r2, [pc, #36]	@ (8000ae4 <Delay_ms+0x58>)
 8000abe:	f043 0301 	orr.w	r3, r3, #1
 8000ac2:	6013      	str	r3, [r2, #0]
	while((SysTick->CTRL & 0x00010000) == 0);
 8000ac4:	bf00      	nop
 8000ac6:	4b07      	ldr	r3, [pc, #28]	@ (8000ae4 <Delay_ms+0x58>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d0f9      	beq.n	8000ac6 <Delay_ms+0x3a>
	return (0UL);                                                     /* Function successful */
 8000ad2:	2300      	movs	r3, #0
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3714      	adds	r7, #20
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	48241000 	.word	0x48241000
 8000ae4:	e000e010 	.word	0xe000e010

08000ae8 <Delay_milli>:


__STATIC_INLINE uint32_t Delay_milli(float ms)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	ed87 0a01 	vstr	s0, [r7, #4]
	for (; ms>0; ms--)
 8000af2:	e00b      	b.n	8000b0c <Delay_milli+0x24>
	{
		Delay_ms(1);
 8000af4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000af8:	f7ff ffc8 	bl	8000a8c <Delay_ms>
	for (; ms>0; ms--)
 8000afc:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b00:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000b04:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000b08:	edc7 7a01 	vstr	s15, [r7, #4]
 8000b0c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b10:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b18:	dcec      	bgt.n	8000af4 <Delay_milli+0xc>
	}
	return ms;
 8000b1a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b22:	ee17 3a90 	vmov	r3, s15
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
	...

08000b30 <BME280_Init>:
#include "BME280.h"

static bme280_calib_t calib;

uint8_t BME280_Init(I2C_Config *config)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b090      	sub	sp, #64	@ 0x40
 8000b34:	af02      	add	r7, sp, #8
 8000b36:	6078      	str	r0, [r7, #4]
	int ID = 0;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	637b      	str	r3, [r7, #52]	@ 0x34
	ID = I2C_Master_Read_Register(config, BME280_ADDR, 0xD0);
 8000b3c:	22d0      	movs	r2, #208	@ 0xd0
 8000b3e:	2176      	movs	r1, #118	@ 0x76
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	f003 f934 	bl	8003dae <I2C_Master_Read_Register>
 8000b46:	6378      	str	r0, [r7, #52]	@ 0x34
	if(ID == 0x60)
 8000b48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b4a:	2b60      	cmp	r3, #96	@ 0x60
 8000b4c:	f040 80c9 	bne.w	8000ce2 <BME280_Init+0x1b2>
	{
		// Soft Reset
		I2C_Master_Write_Register(config, BME280_ADDR, 0xE0, 0xB6);
 8000b50:	23b6      	movs	r3, #182	@ 0xb6
 8000b52:	22e0      	movs	r2, #224	@ 0xe0
 8000b54:	2176      	movs	r1, #118	@ 0x76
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	f003 f902 	bl	8003d60 <I2C_Master_Write_Register>
		Delay_milli(5);
 8000b5c:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 8000b60:	f7ff ffc2 	bl	8000ae8 <Delay_milli>
		uint8_t temp[40];
		I2C_Master_Read_Registers_Bulk(config, BME280_ADDR, 0x88, temp, 24);
 8000b64:	f107 030c 	add.w	r3, r7, #12
 8000b68:	2218      	movs	r2, #24
 8000b6a:	9200      	str	r2, [sp, #0]
 8000b6c:	2288      	movs	r2, #136	@ 0x88
 8000b6e:	2176      	movs	r1, #118	@ 0x76
 8000b70:	6878      	ldr	r0, [r7, #4]
 8000b72:	f003 f94b 	bl	8003e0c <I2C_Master_Read_Registers_Bulk>
		temp[24] = I2C_Master_Read_Register(config, BME280_ADDR, 0xA1);
 8000b76:	22a1      	movs	r2, #161	@ 0xa1
 8000b78:	2176      	movs	r1, #118	@ 0x76
 8000b7a:	6878      	ldr	r0, [r7, #4]
 8000b7c:	f003 f917 	bl	8003dae <I2C_Master_Read_Register>
 8000b80:	4603      	mov	r3, r0
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
		I2C_Master_Read_Registers_Bulk(config, BME280_ADDR, 0xE1, &temp[25], 7);
 8000b88:	f107 030c 	add.w	r3, r7, #12
 8000b8c:	3319      	adds	r3, #25
 8000b8e:	2207      	movs	r2, #7
 8000b90:	9200      	str	r2, [sp, #0]
 8000b92:	22e1      	movs	r2, #225	@ 0xe1
 8000b94:	2176      	movs	r1, #118	@ 0x76
 8000b96:	6878      	ldr	r0, [r7, #4]
 8000b98:	f003 f938 	bl	8003e0c <I2C_Master_Read_Registers_Bulk>

		calib.dig_T1 = (temp[1] << 8) | (temp[0] << 0);
 8000b9c:	7b7b      	ldrb	r3, [r7, #13]
 8000b9e:	021b      	lsls	r3, r3, #8
 8000ba0:	b21a      	sxth	r2, r3
 8000ba2:	7b3b      	ldrb	r3, [r7, #12]
 8000ba4:	b21b      	sxth	r3, r3
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	b21b      	sxth	r3, r3
 8000baa:	b29a      	uxth	r2, r3
 8000bac:	4b4f      	ldr	r3, [pc, #316]	@ (8000cec <BME280_Init+0x1bc>)
 8000bae:	801a      	strh	r2, [r3, #0]
		calib.dig_T2 = (temp[3] << 8) | (temp[2] << 0);
 8000bb0:	7bfb      	ldrb	r3, [r7, #15]
 8000bb2:	021b      	lsls	r3, r3, #8
 8000bb4:	b21a      	sxth	r2, r3
 8000bb6:	7bbb      	ldrb	r3, [r7, #14]
 8000bb8:	b21b      	sxth	r3, r3
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	b21a      	sxth	r2, r3
 8000bbe:	4b4b      	ldr	r3, [pc, #300]	@ (8000cec <BME280_Init+0x1bc>)
 8000bc0:	805a      	strh	r2, [r3, #2]
		calib.dig_T3 = (temp[5] << 8) | (temp[4] << 0);
 8000bc2:	7c7b      	ldrb	r3, [r7, #17]
 8000bc4:	021b      	lsls	r3, r3, #8
 8000bc6:	b21a      	sxth	r2, r3
 8000bc8:	7c3b      	ldrb	r3, [r7, #16]
 8000bca:	b21b      	sxth	r3, r3
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	b21a      	sxth	r2, r3
 8000bd0:	4b46      	ldr	r3, [pc, #280]	@ (8000cec <BME280_Init+0x1bc>)
 8000bd2:	809a      	strh	r2, [r3, #4]

		calib.dig_P1 = (temp[7] << 8) | (temp[6] << 0);
 8000bd4:	7cfb      	ldrb	r3, [r7, #19]
 8000bd6:	021b      	lsls	r3, r3, #8
 8000bd8:	b21a      	sxth	r2, r3
 8000bda:	7cbb      	ldrb	r3, [r7, #18]
 8000bdc:	b21b      	sxth	r3, r3
 8000bde:	4313      	orrs	r3, r2
 8000be0:	b21b      	sxth	r3, r3
 8000be2:	b29a      	uxth	r2, r3
 8000be4:	4b41      	ldr	r3, [pc, #260]	@ (8000cec <BME280_Init+0x1bc>)
 8000be6:	80da      	strh	r2, [r3, #6]
		calib.dig_P2 = (temp[9] << 8) | (temp[8] << 0);
 8000be8:	7d7b      	ldrb	r3, [r7, #21]
 8000bea:	021b      	lsls	r3, r3, #8
 8000bec:	b21a      	sxth	r2, r3
 8000bee:	7d3b      	ldrb	r3, [r7, #20]
 8000bf0:	b21b      	sxth	r3, r3
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	b21a      	sxth	r2, r3
 8000bf6:	4b3d      	ldr	r3, [pc, #244]	@ (8000cec <BME280_Init+0x1bc>)
 8000bf8:	811a      	strh	r2, [r3, #8]
		calib.dig_P3 = (temp[11] << 8) | (temp[10] << 0);
 8000bfa:	7dfb      	ldrb	r3, [r7, #23]
 8000bfc:	021b      	lsls	r3, r3, #8
 8000bfe:	b21a      	sxth	r2, r3
 8000c00:	7dbb      	ldrb	r3, [r7, #22]
 8000c02:	b21b      	sxth	r3, r3
 8000c04:	4313      	orrs	r3, r2
 8000c06:	b21a      	sxth	r2, r3
 8000c08:	4b38      	ldr	r3, [pc, #224]	@ (8000cec <BME280_Init+0x1bc>)
 8000c0a:	815a      	strh	r2, [r3, #10]

		calib.dig_P4 = (temp[13] << 8) | (temp[12] << 0);
 8000c0c:	7e7b      	ldrb	r3, [r7, #25]
 8000c0e:	021b      	lsls	r3, r3, #8
 8000c10:	b21a      	sxth	r2, r3
 8000c12:	7e3b      	ldrb	r3, [r7, #24]
 8000c14:	b21b      	sxth	r3, r3
 8000c16:	4313      	orrs	r3, r2
 8000c18:	b21a      	sxth	r2, r3
 8000c1a:	4b34      	ldr	r3, [pc, #208]	@ (8000cec <BME280_Init+0x1bc>)
 8000c1c:	819a      	strh	r2, [r3, #12]
		calib.dig_P5 = (temp[15] << 8) | (temp[14] << 0);
 8000c1e:	7efb      	ldrb	r3, [r7, #27]
 8000c20:	021b      	lsls	r3, r3, #8
 8000c22:	b21a      	sxth	r2, r3
 8000c24:	7ebb      	ldrb	r3, [r7, #26]
 8000c26:	b21b      	sxth	r3, r3
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	b21a      	sxth	r2, r3
 8000c2c:	4b2f      	ldr	r3, [pc, #188]	@ (8000cec <BME280_Init+0x1bc>)
 8000c2e:	81da      	strh	r2, [r3, #14]
		calib.dig_P6 = (temp[17] << 8) | (temp[16] << 0);
 8000c30:	7f7b      	ldrb	r3, [r7, #29]
 8000c32:	021b      	lsls	r3, r3, #8
 8000c34:	b21a      	sxth	r2, r3
 8000c36:	7f3b      	ldrb	r3, [r7, #28]
 8000c38:	b21b      	sxth	r3, r3
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	b21a      	sxth	r2, r3
 8000c3e:	4b2b      	ldr	r3, [pc, #172]	@ (8000cec <BME280_Init+0x1bc>)
 8000c40:	821a      	strh	r2, [r3, #16]

		calib.dig_P7 = (temp[19] << 8) | (temp[18] << 0);
 8000c42:	7ffb      	ldrb	r3, [r7, #31]
 8000c44:	021b      	lsls	r3, r3, #8
 8000c46:	b21a      	sxth	r2, r3
 8000c48:	7fbb      	ldrb	r3, [r7, #30]
 8000c4a:	b21b      	sxth	r3, r3
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	b21a      	sxth	r2, r3
 8000c50:	4b26      	ldr	r3, [pc, #152]	@ (8000cec <BME280_Init+0x1bc>)
 8000c52:	825a      	strh	r2, [r3, #18]
		calib.dig_P8 = (temp[21] << 8) | (temp[20] << 0);
 8000c54:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8000c58:	021b      	lsls	r3, r3, #8
 8000c5a:	b21a      	sxth	r2, r3
 8000c5c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c60:	b21b      	sxth	r3, r3
 8000c62:	4313      	orrs	r3, r2
 8000c64:	b21a      	sxth	r2, r3
 8000c66:	4b21      	ldr	r3, [pc, #132]	@ (8000cec <BME280_Init+0x1bc>)
 8000c68:	829a      	strh	r2, [r3, #20]
		calib.dig_P9 = (temp[23] << 8) | (temp[22] << 0);
 8000c6a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000c6e:	021b      	lsls	r3, r3, #8
 8000c70:	b21a      	sxth	r2, r3
 8000c72:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8000c76:	b21b      	sxth	r3, r3
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	b21a      	sxth	r2, r3
 8000c7c:	4b1b      	ldr	r3, [pc, #108]	@ (8000cec <BME280_Init+0x1bc>)
 8000c7e:	82da      	strh	r2, [r3, #22]

		calib.dig_H1 =  (temp[24] << 0);
 8000c80:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8000c84:	4b19      	ldr	r3, [pc, #100]	@ (8000cec <BME280_Init+0x1bc>)
 8000c86:	761a      	strb	r2, [r3, #24]
		calib.dig_H2 = (temp[26] << 8) | (temp[25] << 0);
 8000c88:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000c8c:	021b      	lsls	r3, r3, #8
 8000c8e:	b21a      	sxth	r2, r3
 8000c90:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8000c94:	b21b      	sxth	r3, r3
 8000c96:	4313      	orrs	r3, r2
 8000c98:	b21a      	sxth	r2, r3
 8000c9a:	4b14      	ldr	r3, [pc, #80]	@ (8000cec <BME280_Init+0x1bc>)
 8000c9c:	835a      	strh	r2, [r3, #26]
		calib.dig_H3 = (temp[27] << 0);
 8000c9e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000ca2:	4b12      	ldr	r3, [pc, #72]	@ (8000cec <BME280_Init+0x1bc>)
 8000ca4:	771a      	strb	r2, [r3, #28]
		calib.dig_H4 = (temp[29] << 8) | (temp[28] << 0);
 8000ca6:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8000caa:	021b      	lsls	r3, r3, #8
 8000cac:	b21a      	sxth	r2, r3
 8000cae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000cb2:	b21b      	sxth	r3, r3
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	b21a      	sxth	r2, r3
 8000cb8:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <BME280_Init+0x1bc>)
 8000cba:	83da      	strh	r2, [r3, #30]
		calib.dig_H5 = (temp[31] << 8) | (temp[30] << 0);
 8000cbc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000cc0:	021b      	lsls	r3, r3, #8
 8000cc2:	b21a      	sxth	r2, r3
 8000cc4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8000cc8:	b21b      	sxth	r3, r3
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	b21a      	sxth	r2, r3
 8000cce:	4b07      	ldr	r3, [pc, #28]	@ (8000cec <BME280_Init+0x1bc>)
 8000cd0:	841a      	strh	r2, [r3, #32]
		calib.dig_H6 = (temp[32] << 0);
 8000cd2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000cd6:	b25a      	sxtb	r2, r3
 8000cd8:	4b04      	ldr	r3, [pc, #16]	@ (8000cec <BME280_Init+0x1bc>)
 8000cda:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

		return 1;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e000      	b.n	8000ce4 <BME280_Init+0x1b4>
	}

	return 0;
 8000ce2:	2300      	movs	r3, #0
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3738      	adds	r7, #56	@ 0x38
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	20000070 	.word	0x20000070

08000cf0 <BME280_Get_Raw>:

void BME280_Get_Raw(I2C_Config *config, bme280_raw *raw_values)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b086      	sub	sp, #24
 8000cf4:	af02      	add	r7, sp, #8
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	6039      	str	r1, [r7, #0]
	uint8_t raw[8];
	I2C_Master_Read_Registers_Bulk(config, BME280_ADDR, 0xf7, raw, 8);
 8000cfa:	f107 0308 	add.w	r3, r7, #8
 8000cfe:	2208      	movs	r2, #8
 8000d00:	9200      	str	r2, [sp, #0]
 8000d02:	22f7      	movs	r2, #247	@ 0xf7
 8000d04:	2176      	movs	r1, #118	@ 0x76
 8000d06:	6878      	ldr	r0, [r7, #4]
 8000d08:	f003 f880 	bl	8003e0c <I2C_Master_Read_Registers_Bulk>
	raw_values->Pressure_Raw = (raw[0]<<12)|(raw[1]<<4)|(raw[2]>>4);
 8000d0c:	7a3b      	ldrb	r3, [r7, #8]
 8000d0e:	031a      	lsls	r2, r3, #12
 8000d10:	7a7b      	ldrb	r3, [r7, #9]
 8000d12:	011b      	lsls	r3, r3, #4
 8000d14:	4313      	orrs	r3, r2
 8000d16:	7aba      	ldrb	r2, [r7, #10]
 8000d18:	0912      	lsrs	r2, r2, #4
 8000d1a:	b2d2      	uxtb	r2, r2
 8000d1c:	431a      	orrs	r2, r3
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	601a      	str	r2, [r3, #0]
	raw_values->Temperature_Raw = (raw[3]<<12)|(raw[4]<<4)|(raw[5]>>4);
 8000d22:	7afb      	ldrb	r3, [r7, #11]
 8000d24:	031a      	lsls	r2, r3, #12
 8000d26:	7b3b      	ldrb	r3, [r7, #12]
 8000d28:	011b      	lsls	r3, r3, #4
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	7b7a      	ldrb	r2, [r7, #13]
 8000d2e:	0912      	lsrs	r2, r2, #4
 8000d30:	b2d2      	uxtb	r2, r2
 8000d32:	431a      	orrs	r2, r3
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	605a      	str	r2, [r3, #4]
	raw_values->Humidity_Raw = (raw[6]<<8) | raw[7];
 8000d38:	7bbb      	ldrb	r3, [r7, #14]
 8000d3a:	021b      	lsls	r3, r3, #8
 8000d3c:	7bfa      	ldrb	r2, [r7, #15]
 8000d3e:	431a      	orrs	r2, r3
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	609a      	str	r2, [r3, #8]
}
 8000d44:	bf00      	nop
 8000d46:	3710      	adds	r7, #16
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <BME280_Compensate_T>:

float BME280_Compensate_T(int32_t adc_T)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
    int32_t var1 = (((adc_T>>3) - ((int32_t)calib.dig_T1<<1)) *
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	10da      	asrs	r2, r3, #3
 8000d58:	4b1a      	ldr	r3, [pc, #104]	@ (8000dc4 <BME280_Compensate_T+0x78>)
 8000d5a:	881b      	ldrh	r3, [r3, #0]
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	1ad3      	subs	r3, r2, r3
                   calib.dig_T2) >> 11;
 8000d60:	4a18      	ldr	r2, [pc, #96]	@ (8000dc4 <BME280_Compensate_T+0x78>)
 8000d62:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
    int32_t var1 = (((adc_T>>3) - ((int32_t)calib.dig_T1<<1)) *
 8000d66:	fb02 f303 	mul.w	r3, r2, r3
 8000d6a:	12db      	asrs	r3, r3, #11
 8000d6c:	60fb      	str	r3, [r7, #12]
    int32_t var2 = (((((adc_T>>4) - calib.dig_T1) *
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	111b      	asrs	r3, r3, #4
 8000d72:	4a14      	ldr	r2, [pc, #80]	@ (8000dc4 <BME280_Compensate_T+0x78>)
 8000d74:	8812      	ldrh	r2, [r2, #0]
 8000d76:	1a9b      	subs	r3, r3, r2
                   ((adc_T>>4) - calib.dig_T1)) >> 12) *
 8000d78:	687a      	ldr	r2, [r7, #4]
 8000d7a:	1112      	asrs	r2, r2, #4
 8000d7c:	4911      	ldr	r1, [pc, #68]	@ (8000dc4 <BME280_Compensate_T+0x78>)
 8000d7e:	8809      	ldrh	r1, [r1, #0]
 8000d80:	1a52      	subs	r2, r2, r1
    int32_t var2 = (((((adc_T>>4) - calib.dig_T1) *
 8000d82:	fb02 f303 	mul.w	r3, r2, r3
                   ((adc_T>>4) - calib.dig_T1)) >> 12) *
 8000d86:	131b      	asrs	r3, r3, #12
                   calib.dig_T3) >> 14;
 8000d88:	4a0e      	ldr	r2, [pc, #56]	@ (8000dc4 <BME280_Compensate_T+0x78>)
 8000d8a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
                   ((adc_T>>4) - calib.dig_T1)) >> 12) *
 8000d8e:	fb02 f303 	mul.w	r3, r2, r3
    int32_t var2 = (((((adc_T>>4) - calib.dig_T1) *
 8000d92:	139b      	asrs	r3, r3, #14
 8000d94:	60bb      	str	r3, [r7, #8]
    calib.t_fine = var1 + var2;
 8000d96:	68fa      	ldr	r2, [r7, #12]
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	4a09      	ldr	r2, [pc, #36]	@ (8000dc4 <BME280_Compensate_T+0x78>)
 8000d9e:	6253      	str	r3, [r2, #36]	@ 0x24
    return (calib.t_fine * 5 + 128) >> 8;   // 0.01 °C
 8000da0:	4b08      	ldr	r3, [pc, #32]	@ (8000dc4 <BME280_Compensate_T+0x78>)
 8000da2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000da4:	4613      	mov	r3, r2
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	4413      	add	r3, r2
 8000daa:	3380      	adds	r3, #128	@ 0x80
 8000dac:	121b      	asrs	r3, r3, #8
 8000dae:	ee07 3a90 	vmov	s15, r3
 8000db2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8000db6:	eeb0 0a67 	vmov.f32	s0, s15
 8000dba:	3714      	adds	r7, #20
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	20000070 	.word	0x20000070

08000dc8 <BME280_Compensate_P>:

float BME280_Compensate_P(int32_t adc_P)
{
 8000dc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000dcc:	b0c8      	sub	sp, #288	@ 0x120
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
    int64_t var1 = calib.t_fine - 128000;
 8000dd4:	4ba6      	ldr	r3, [pc, #664]	@ (8001070 <BME280_Compensate_P+0x2a8>)
 8000dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dd8:	f5a3 33fa 	sub.w	r3, r3, #128000	@ 0x1f400
 8000ddc:	17da      	asrs	r2, r3, #31
 8000dde:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000de0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8000de2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8000de6:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
    int64_t var2 = var1*var1*calib.dig_P6;
 8000dea:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8000dee:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000df2:	fb03 f102 	mul.w	r1, r3, r2
 8000df6:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8000dfa:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000dfe:	fb02 f303 	mul.w	r3, r2, r3
 8000e02:	18ca      	adds	r2, r1, r3
 8000e04:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000e08:	fba3 4503 	umull	r4, r5, r3, r3
 8000e0c:	1953      	adds	r3, r2, r5
 8000e0e:	461d      	mov	r5, r3
 8000e10:	4b97      	ldr	r3, [pc, #604]	@ (8001070 <BME280_Compensate_P+0x2a8>)
 8000e12:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000e16:	b21b      	sxth	r3, r3
 8000e18:	17da      	asrs	r2, r3, #31
 8000e1a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8000e1e:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8000e22:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 8000e26:	4603      	mov	r3, r0
 8000e28:	fb03 f205 	mul.w	r2, r3, r5
 8000e2c:	460b      	mov	r3, r1
 8000e2e:	fb04 f303 	mul.w	r3, r4, r3
 8000e32:	4413      	add	r3, r2
 8000e34:	4602      	mov	r2, r0
 8000e36:	fba4 8902 	umull	r8, r9, r4, r2
 8000e3a:	444b      	add	r3, r9
 8000e3c:	4699      	mov	r9, r3
 8000e3e:	e9c7 8944 	strd	r8, r9, [r7, #272]	@ 0x110
 8000e42:	e9c7 8944 	strd	r8, r9, [r7, #272]	@ 0x110
    var2 += ((var1*calib.dig_P5)<<17) + (((int64_t)calib.dig_P4)<<35);
 8000e46:	4b8a      	ldr	r3, [pc, #552]	@ (8001070 <BME280_Compensate_P+0x2a8>)
 8000e48:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000e4c:	b21b      	sxth	r3, r3
 8000e4e:	17da      	asrs	r2, r3, #31
 8000e50:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000e54:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8000e58:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000e5c:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 8000e60:	462a      	mov	r2, r5
 8000e62:	fb02 f203 	mul.w	r2, r2, r3
 8000e66:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000e6a:	4621      	mov	r1, r4
 8000e6c:	fb01 f303 	mul.w	r3, r1, r3
 8000e70:	441a      	add	r2, r3
 8000e72:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000e76:	4621      	mov	r1, r4
 8000e78:	fba3 ab01 	umull	sl, fp, r3, r1
 8000e7c:	eb02 030b 	add.w	r3, r2, fp
 8000e80:	469b      	mov	fp, r3
 8000e82:	f04f 0000 	mov.w	r0, #0
 8000e86:	f04f 0100 	mov.w	r1, #0
 8000e8a:	ea4f 414b 	mov.w	r1, fp, lsl #17
 8000e8e:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 8000e92:	ea4f 404a 	mov.w	r0, sl, lsl #17
 8000e96:	4b76      	ldr	r3, [pc, #472]	@ (8001070 <BME280_Compensate_P+0x2a8>)
 8000e98:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000e9c:	b21b      	sxth	r3, r3
 8000e9e:	17da      	asrs	r2, r3, #31
 8000ea0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000ea4:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8000ea8:	f04f 0200 	mov.w	r2, #0
 8000eac:	f04f 0300 	mov.w	r3, #0
 8000eb0:	f8d7 40b0 	ldr.w	r4, [r7, #176]	@ 0xb0
 8000eb4:	00e3      	lsls	r3, r4, #3
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	1884      	adds	r4, r0, r2
 8000eba:	f8c7 40a8 	str.w	r4, [r7, #168]	@ 0xa8
 8000ebe:	eb41 0303 	adc.w	r3, r1, r3
 8000ec2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8000ec6:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8000eca:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	@ 0xa8
 8000ece:	4621      	mov	r1, r4
 8000ed0:	1851      	adds	r1, r2, r1
 8000ed2:	6339      	str	r1, [r7, #48]	@ 0x30
 8000ed4:	4629      	mov	r1, r5
 8000ed6:	eb43 0101 	adc.w	r1, r3, r1
 8000eda:	6379      	str	r1, [r7, #52]	@ 0x34
 8000edc:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8000ee0:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
    var1 = ((var1*var1*calib.dig_P3)>>8) + ((var1*calib.dig_P2)<<12);
 8000ee4:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8000ee8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000eec:	fb03 f102 	mul.w	r1, r3, r2
 8000ef0:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8000ef4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000ef8:	fb02 f303 	mul.w	r3, r2, r3
 8000efc:	18ca      	adds	r2, r1, r3
 8000efe:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000f02:	fba3 1303 	umull	r1, r3, r3, r3
 8000f06:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000f0a:	460b      	mov	r3, r1
 8000f0c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8000f10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000f14:	18d3      	adds	r3, r2, r3
 8000f16:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000f1a:	4b55      	ldr	r3, [pc, #340]	@ (8001070 <BME280_Compensate_P+0x2a8>)
 8000f1c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000f20:	b21b      	sxth	r3, r3
 8000f22:	17da      	asrs	r2, r3, #31
 8000f24:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000f28:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8000f2c:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8000f30:	462b      	mov	r3, r5
 8000f32:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8000f36:	4642      	mov	r2, r8
 8000f38:	fb02 f203 	mul.w	r2, r2, r3
 8000f3c:	464b      	mov	r3, r9
 8000f3e:	4621      	mov	r1, r4
 8000f40:	fb01 f303 	mul.w	r3, r1, r3
 8000f44:	4413      	add	r3, r2
 8000f46:	4622      	mov	r2, r4
 8000f48:	4641      	mov	r1, r8
 8000f4a:	fba2 1201 	umull	r1, r2, r2, r1
 8000f4e:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8000f52:	460a      	mov	r2, r1
 8000f54:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8000f58:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8000f5c:	4413      	add	r3, r2
 8000f5e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8000f62:	f04f 0000 	mov.w	r0, #0
 8000f66:	f04f 0100 	mov.w	r1, #0
 8000f6a:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8000f6e:	4623      	mov	r3, r4
 8000f70:	0a18      	lsrs	r0, r3, #8
 8000f72:	462b      	mov	r3, r5
 8000f74:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000f78:	462b      	mov	r3, r5
 8000f7a:	1219      	asrs	r1, r3, #8
 8000f7c:	4b3c      	ldr	r3, [pc, #240]	@ (8001070 <BME280_Compensate_P+0x2a8>)
 8000f7e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000f82:	b21b      	sxth	r3, r3
 8000f84:	17da      	asrs	r2, r3, #31
 8000f86:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000f8a:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8000f8e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000f92:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8000f96:	464a      	mov	r2, r9
 8000f98:	fb02 f203 	mul.w	r2, r2, r3
 8000f9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000fa0:	4644      	mov	r4, r8
 8000fa2:	fb04 f303 	mul.w	r3, r4, r3
 8000fa6:	441a      	add	r2, r3
 8000fa8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000fac:	4644      	mov	r4, r8
 8000fae:	fba3 4304 	umull	r4, r3, r3, r4
 8000fb2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000fb6:	4623      	mov	r3, r4
 8000fb8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8000fbc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000fc0:	18d3      	adds	r3, r2, r3
 8000fc2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000fc6:	f04f 0200 	mov.w	r2, #0
 8000fca:	f04f 0300 	mov.w	r3, #0
 8000fce:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8000fd2:	464c      	mov	r4, r9
 8000fd4:	0323      	lsls	r3, r4, #12
 8000fd6:	4644      	mov	r4, r8
 8000fd8:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8000fdc:	4644      	mov	r4, r8
 8000fde:	0322      	lsls	r2, r4, #12
 8000fe0:	1884      	adds	r4, r0, r2
 8000fe2:	62bc      	str	r4, [r7, #40]	@ 0x28
 8000fe4:	eb41 0303 	adc.w	r3, r1, r3
 8000fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000fea:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8000fee:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
    var1 = (((((int64_t)1)<<47)+var1))*calib.dig_P1>>33;
 8000ff2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000ff6:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8000ffa:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8000ffe:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8001002:	4b1b      	ldr	r3, [pc, #108]	@ (8001070 <BME280_Compensate_P+0x2a8>)
 8001004:	88db      	ldrh	r3, [r3, #6]
 8001006:	b29b      	uxth	r3, r3
 8001008:	2200      	movs	r2, #0
 800100a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800100e:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001012:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001016:	462b      	mov	r3, r5
 8001018:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800101c:	4642      	mov	r2, r8
 800101e:	fb02 f203 	mul.w	r2, r2, r3
 8001022:	464b      	mov	r3, r9
 8001024:	4621      	mov	r1, r4
 8001026:	fb01 f303 	mul.w	r3, r1, r3
 800102a:	4413      	add	r3, r2
 800102c:	4622      	mov	r2, r4
 800102e:	4641      	mov	r1, r8
 8001030:	fba2 1201 	umull	r1, r2, r2, r1
 8001034:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8001038:	460a      	mov	r2, r1
 800103a:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 800103e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001042:	4413      	add	r3, r2
 8001044:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001048:	f04f 0200 	mov.w	r2, #0
 800104c:	f04f 0300 	mov.w	r3, #0
 8001050:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001054:	4629      	mov	r1, r5
 8001056:	104a      	asrs	r2, r1, #1
 8001058:	4629      	mov	r1, r5
 800105a:	17cb      	asrs	r3, r1, #31
 800105c:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
    if (var1==0) return 0;  /* avoid div-by-0 */
 8001060:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001064:	4313      	orrs	r3, r2
 8001066:	d105      	bne.n	8001074 <BME280_Compensate_P+0x2ac>
 8001068:	f04f 0300 	mov.w	r3, #0
 800106c:	e13e      	b.n	80012ec <BME280_Compensate_P+0x524>
 800106e:	bf00      	nop
 8001070:	20000070 	.word	0x20000070
    int64_t p = 1048576 - adc_P;
 8001074:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001078:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 800107c:	17da      	asrs	r2, r3, #31
 800107e:	623b      	str	r3, [r7, #32]
 8001080:	627a      	str	r2, [r7, #36]	@ 0x24
 8001082:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001086:	e9c7 3442 	strd	r3, r4, [r7, #264]	@ 0x108
    p = (((p<<31)-var2)*3125)/var1;
 800108a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800108e:	105b      	asrs	r3, r3, #1
 8001090:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001094:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001098:	07db      	lsls	r3, r3, #31
 800109a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800109e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 80010a2:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 80010a6:	4621      	mov	r1, r4
 80010a8:	1a89      	subs	r1, r1, r2
 80010aa:	67b9      	str	r1, [r7, #120]	@ 0x78
 80010ac:	4629      	mov	r1, r5
 80010ae:	eb61 0303 	sbc.w	r3, r1, r3
 80010b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80010b4:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80010b8:	4622      	mov	r2, r4
 80010ba:	462b      	mov	r3, r5
 80010bc:	1891      	adds	r1, r2, r2
 80010be:	61b9      	str	r1, [r7, #24]
 80010c0:	415b      	adcs	r3, r3
 80010c2:	61fb      	str	r3, [r7, #28]
 80010c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80010c8:	4621      	mov	r1, r4
 80010ca:	1851      	adds	r1, r2, r1
 80010cc:	6139      	str	r1, [r7, #16]
 80010ce:	4629      	mov	r1, r5
 80010d0:	414b      	adcs	r3, r1
 80010d2:	617b      	str	r3, [r7, #20]
 80010d4:	f04f 0200 	mov.w	r2, #0
 80010d8:	f04f 0300 	mov.w	r3, #0
 80010dc:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80010e0:	4649      	mov	r1, r9
 80010e2:	018b      	lsls	r3, r1, #6
 80010e4:	4641      	mov	r1, r8
 80010e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80010ea:	4641      	mov	r1, r8
 80010ec:	018a      	lsls	r2, r1, #6
 80010ee:	4641      	mov	r1, r8
 80010f0:	1889      	adds	r1, r1, r2
 80010f2:	60b9      	str	r1, [r7, #8]
 80010f4:	4649      	mov	r1, r9
 80010f6:	eb43 0101 	adc.w	r1, r3, r1
 80010fa:	60f9      	str	r1, [r7, #12]
 80010fc:	f04f 0200 	mov.w	r2, #0
 8001100:	f04f 0300 	mov.w	r3, #0
 8001104:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001108:	4649      	mov	r1, r9
 800110a:	008b      	lsls	r3, r1, #2
 800110c:	4641      	mov	r1, r8
 800110e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001112:	4641      	mov	r1, r8
 8001114:	008a      	lsls	r2, r1, #2
 8001116:	4610      	mov	r0, r2
 8001118:	4619      	mov	r1, r3
 800111a:	4603      	mov	r3, r0
 800111c:	4622      	mov	r2, r4
 800111e:	189b      	adds	r3, r3, r2
 8001120:	603b      	str	r3, [r7, #0]
 8001122:	460b      	mov	r3, r1
 8001124:	462a      	mov	r2, r5
 8001126:	eb42 0303 	adc.w	r3, r2, r3
 800112a:	607b      	str	r3, [r7, #4]
 800112c:	f04f 0200 	mov.w	r2, #0
 8001130:	f04f 0300 	mov.w	r3, #0
 8001134:	e9d7 8900 	ldrd	r8, r9, [r7]
 8001138:	4649      	mov	r1, r9
 800113a:	008b      	lsls	r3, r1, #2
 800113c:	4641      	mov	r1, r8
 800113e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001142:	4641      	mov	r1, r8
 8001144:	008a      	lsls	r2, r1, #2
 8001146:	4610      	mov	r0, r2
 8001148:	4619      	mov	r1, r3
 800114a:	4603      	mov	r3, r0
 800114c:	4622      	mov	r2, r4
 800114e:	189b      	adds	r3, r3, r2
 8001150:	673b      	str	r3, [r7, #112]	@ 0x70
 8001152:	462b      	mov	r3, r5
 8001154:	460a      	mov	r2, r1
 8001156:	eb42 0303 	adc.w	r3, r2, r3
 800115a:	677b      	str	r3, [r7, #116]	@ 0x74
 800115c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001160:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001164:	f7ff f93e 	bl	80003e4 <__aeabi_ldivmod>
 8001168:	4602      	mov	r2, r0
 800116a:	460b      	mov	r3, r1
 800116c:	e9c7 2342 	strd	r2, r3, [r7, #264]	@ 0x108
    var1 = (calib.dig_P9 * (p>>13) * (p>>13)) >> 25;
 8001170:	4b63      	ldr	r3, [pc, #396]	@ (8001300 <BME280_Compensate_P+0x538>)
 8001172:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001176:	b21b      	sxth	r3, r3
 8001178:	17da      	asrs	r2, r3, #31
 800117a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800117c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800117e:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 8001182:	f04f 0000 	mov.w	r0, #0
 8001186:	f04f 0100 	mov.w	r1, #0
 800118a:	0b50      	lsrs	r0, r2, #13
 800118c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001190:	1359      	asrs	r1, r3, #13
 8001192:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001196:	462b      	mov	r3, r5
 8001198:	fb00 f203 	mul.w	r2, r0, r3
 800119c:	4623      	mov	r3, r4
 800119e:	fb03 f301 	mul.w	r3, r3, r1
 80011a2:	4413      	add	r3, r2
 80011a4:	4622      	mov	r2, r4
 80011a6:	fba2 1200 	umull	r1, r2, r2, r0
 80011aa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80011ae:	460a      	mov	r2, r1
 80011b0:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 80011b4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80011b8:	4413      	add	r3, r2
 80011ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80011be:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 80011c2:	f04f 0000 	mov.w	r0, #0
 80011c6:	f04f 0100 	mov.w	r1, #0
 80011ca:	0b50      	lsrs	r0, r2, #13
 80011cc:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80011d0:	1359      	asrs	r1, r3, #13
 80011d2:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 80011d6:	462b      	mov	r3, r5
 80011d8:	fb00 f203 	mul.w	r2, r0, r3
 80011dc:	4623      	mov	r3, r4
 80011de:	fb03 f301 	mul.w	r3, r3, r1
 80011e2:	4413      	add	r3, r2
 80011e4:	4622      	mov	r2, r4
 80011e6:	fba2 1200 	umull	r1, r2, r2, r0
 80011ea:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80011ee:	460a      	mov	r2, r1
 80011f0:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 80011f4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80011f8:	4413      	add	r3, r2
 80011fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80011fe:	f04f 0200 	mov.w	r2, #0
 8001202:	f04f 0300 	mov.w	r3, #0
 8001206:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 800120a:	4621      	mov	r1, r4
 800120c:	0e4a      	lsrs	r2, r1, #25
 800120e:	4629      	mov	r1, r5
 8001210:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001214:	4629      	mov	r1, r5
 8001216:	164b      	asrs	r3, r1, #25
 8001218:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
    var2 = (calib.dig_P8 * p) >> 19;
 800121c:	4b38      	ldr	r3, [pc, #224]	@ (8001300 <BME280_Compensate_P+0x538>)
 800121e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001222:	b21b      	sxth	r3, r3
 8001224:	17da      	asrs	r2, r3, #31
 8001226:	663b      	str	r3, [r7, #96]	@ 0x60
 8001228:	667a      	str	r2, [r7, #100]	@ 0x64
 800122a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800122e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001232:	462a      	mov	r2, r5
 8001234:	fb02 f203 	mul.w	r2, r2, r3
 8001238:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800123c:	4621      	mov	r1, r4
 800123e:	fb01 f303 	mul.w	r3, r1, r3
 8001242:	4413      	add	r3, r2
 8001244:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001248:	4621      	mov	r1, r4
 800124a:	fba2 1201 	umull	r1, r2, r2, r1
 800124e:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8001252:	460a      	mov	r2, r1
 8001254:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8001258:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 800125c:	4413      	add	r3, r2
 800125e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001262:	f04f 0200 	mov.w	r2, #0
 8001266:	f04f 0300 	mov.w	r3, #0
 800126a:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 800126e:	4621      	mov	r1, r4
 8001270:	0cca      	lsrs	r2, r1, #19
 8001272:	4629      	mov	r1, r5
 8001274:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001278:	4629      	mov	r1, r5
 800127a:	14cb      	asrs	r3, r1, #19
 800127c:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
    return ((p + var1 + var2) >> 8) + (calib.dig_P7<<4); // Pa
 8001280:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	@ 0x108
 8001284:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001288:	1884      	adds	r4, r0, r2
 800128a:	65bc      	str	r4, [r7, #88]	@ 0x58
 800128c:	eb41 0303 	adc.w	r3, r1, r3
 8001290:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001292:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001296:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 800129a:	4621      	mov	r1, r4
 800129c:	1889      	adds	r1, r1, r2
 800129e:	6539      	str	r1, [r7, #80]	@ 0x50
 80012a0:	4629      	mov	r1, r5
 80012a2:	eb43 0101 	adc.w	r1, r3, r1
 80012a6:	6579      	str	r1, [r7, #84]	@ 0x54
 80012a8:	f04f 0200 	mov.w	r2, #0
 80012ac:	f04f 0300 	mov.w	r3, #0
 80012b0:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 80012b4:	4621      	mov	r1, r4
 80012b6:	0a0a      	lsrs	r2, r1, #8
 80012b8:	4629      	mov	r1, r5
 80012ba:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80012be:	4629      	mov	r1, r5
 80012c0:	120b      	asrs	r3, r1, #8
 80012c2:	490f      	ldr	r1, [pc, #60]	@ (8001300 <BME280_Compensate_P+0x538>)
 80012c4:	f9b1 1012 	ldrsh.w	r1, [r1, #18]
 80012c8:	0109      	lsls	r1, r1, #4
 80012ca:	17c8      	asrs	r0, r1, #31
 80012cc:	64b9      	str	r1, [r7, #72]	@ 0x48
 80012ce:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80012d0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80012d4:	4621      	mov	r1, r4
 80012d6:	1851      	adds	r1, r2, r1
 80012d8:	6439      	str	r1, [r7, #64]	@ 0x40
 80012da:	4629      	mov	r1, r5
 80012dc:	eb43 0101 	adc.w	r1, r3, r1
 80012e0:	6479      	str	r1, [r7, #68]	@ 0x44
 80012e2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80012e6:	f7ff f83f 	bl	8000368 <__aeabi_l2f>
 80012ea:	4603      	mov	r3, r0
}
 80012ec:	ee07 3a90 	vmov	s15, r3
 80012f0:	eeb0 0a67 	vmov.f32	s0, s15
 80012f4:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80012f8:	46bd      	mov	sp, r7
 80012fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80012fe:	bf00      	nop
 8001300:	20000070 	.word	0x20000070

08001304 <BME280_Compensate_H>:

float BME280_Compensate_H(int32_t adc_H)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
    int32_t v_x = calib.t_fine - 76800;
 800130c:	4b30      	ldr	r3, [pc, #192]	@ (80013d0 <BME280_Compensate_H+0xcc>)
 800130e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001310:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8001314:	60fb      	str	r3, [r7, #12]
    v_x = (((adc_H<<14) - (calib.dig_H4<<20) -
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	039a      	lsls	r2, r3, #14
 800131a:	4b2d      	ldr	r3, [pc, #180]	@ (80013d0 <BME280_Compensate_H+0xcc>)
 800131c:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001320:	051b      	lsls	r3, r3, #20
 8001322:	1ad2      	subs	r2, r2, r3
          (calib.dig_H5 * v_x)) + 16384)>>15;
 8001324:	4b2a      	ldr	r3, [pc, #168]	@ (80013d0 <BME280_Compensate_H+0xcc>)
 8001326:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800132a:	4619      	mov	r1, r3
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	fb01 f303 	mul.w	r3, r1, r3
    v_x = (((adc_H<<14) - (calib.dig_H4<<20) -
 8001332:	1ad3      	subs	r3, r2, r3
          (calib.dig_H5 * v_x)) + 16384)>>15;
 8001334:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
    v_x = (((adc_H<<14) - (calib.dig_H4<<20) -
 8001338:	13db      	asrs	r3, r3, #15
 800133a:	60fb      	str	r3, [r7, #12]
    v_x = v_x * (((((((v_x*calib.dig_H6)>>10) *
 800133c:	4b24      	ldr	r3, [pc, #144]	@ (80013d0 <BME280_Compensate_H+0xcc>)
 800133e:	f993 3022 	ldrsb.w	r3, [r3, #34]	@ 0x22
 8001342:	461a      	mov	r2, r3
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	fb02 f303 	mul.w	r3, r2, r3
 800134a:	129b      	asrs	r3, r3, #10
          (((v_x*calib.dig_H3)>>11)+32768))>>10)+2097152) *
 800134c:	4a20      	ldr	r2, [pc, #128]	@ (80013d0 <BME280_Compensate_H+0xcc>)
 800134e:	7f12      	ldrb	r2, [r2, #28]
 8001350:	4611      	mov	r1, r2
 8001352:	68fa      	ldr	r2, [r7, #12]
 8001354:	fb01 f202 	mul.w	r2, r1, r2
 8001358:	12d2      	asrs	r2, r2, #11
 800135a:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
    v_x = v_x * (((((((v_x*calib.dig_H6)>>10) *
 800135e:	fb02 f303 	mul.w	r3, r2, r3
          (((v_x*calib.dig_H3)>>11)+32768))>>10)+2097152) *
 8001362:	129b      	asrs	r3, r3, #10
 8001364:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
          calib.dig_H2 + 8192)>>14);
 8001368:	4a19      	ldr	r2, [pc, #100]	@ (80013d0 <BME280_Compensate_H+0xcc>)
 800136a:	f9b2 201a 	ldrsh.w	r2, [r2, #26]
          (((v_x*calib.dig_H3)>>11)+32768))>>10)+2097152) *
 800136e:	fb02 f303 	mul.w	r3, r2, r3
          calib.dig_H2 + 8192)>>14);
 8001372:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001376:	139a      	asrs	r2, r3, #14
    v_x = v_x * (((((((v_x*calib.dig_H6)>>10) *
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	fb02 f303 	mul.w	r3, r2, r3
 800137e:	60fb      	str	r3, [r7, #12]
    v_x = v_x - (((((v_x>>15)*(v_x>>15))>>7)*calib.dig_H1)>>4);
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	13db      	asrs	r3, r3, #15
 8001384:	68fa      	ldr	r2, [r7, #12]
 8001386:	13d2      	asrs	r2, r2, #15
 8001388:	fb02 f303 	mul.w	r3, r2, r3
 800138c:	11db      	asrs	r3, r3, #7
 800138e:	4a10      	ldr	r2, [pc, #64]	@ (80013d0 <BME280_Compensate_H+0xcc>)
 8001390:	7e12      	ldrb	r2, [r2, #24]
 8001392:	fb02 f303 	mul.w	r3, r2, r3
 8001396:	111b      	asrs	r3, r3, #4
 8001398:	68fa      	ldr	r2, [r7, #12]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	60fb      	str	r3, [r7, #12]
    v_x = (v_x<0)?0:v_x;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80013a4:	60fb      	str	r3, [r7, #12]
    v_x = (v_x>419430400)?419430400:v_x;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 80013ac:	bfa8      	it	ge
 80013ae:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 80013b2:	60fb      	str	r3, [r7, #12]
    return v_x>>12; /* 1024 = 100 %RH */
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	131b      	asrs	r3, r3, #12
 80013b8:	ee07 3a90 	vmov	s15, r3
 80013bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 80013c0:	eeb0 0a67 	vmov.f32	s0, s15
 80013c4:	3714      	adds	r7, #20
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	20000070 	.word	0x20000070

080013d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	db0b      	blt.n	80013fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013e6:	79fb      	ldrb	r3, [r7, #7]
 80013e8:	f003 021f 	and.w	r2, r3, #31
 80013ec:	4907      	ldr	r1, [pc, #28]	@ (800140c <__NVIC_EnableIRQ+0x38>)
 80013ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f2:	095b      	lsrs	r3, r3, #5
 80013f4:	2001      	movs	r0, #1
 80013f6:	fa00 f202 	lsl.w	r2, r0, r2
 80013fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013fe:	bf00      	nop
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	e000e100 	.word	0xe000e100

08001410 <DMA1_Stream0_IRQHandler>:
volatile uint32_t DMA_LISR = 0;
volatile uint32_t DMA_HISR = 0;


void DMA1_Stream0_IRQHandler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
	DMA_LISR = DMA1 -> LISR;
 8001414:	4b4f      	ldr	r3, [pc, #316]	@ (8001554 <DMA1_Stream0_IRQHandler+0x144>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a4f      	ldr	r2, [pc, #316]	@ (8001558 <DMA1_Stream0_IRQHandler+0x148>)
 800141a:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF0)
 800141c:	4b4e      	ldr	r3, [pc, #312]	@ (8001558 <DMA1_Stream0_IRQHandler+0x148>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0301 	and.w	r3, r3, #1
 8001424:	2b00      	cmp	r3, #0
 8001426:	d00e      	beq.n	8001446 <DMA1_Stream0_IRQHandler+0x36>
	{
	    if (__DMA1_Stream0_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001428:	4b4c      	ldr	r3, [pc, #304]	@ (800155c <DMA1_Stream0_IRQHandler+0x14c>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800142e:	2b00      	cmp	r3, #0
 8001430:	d009      	beq.n	8001446 <DMA1_Stream0_IRQHandler+0x36>
	    {
	    	__DMA1_Stream0_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8001432:	4b4a      	ldr	r3, [pc, #296]	@ (800155c <DMA1_Stream0_IRQHandler+0x14c>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001438:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CFEIF0;
 800143a:	4b46      	ldr	r3, [pc, #280]	@ (8001554 <DMA1_Stream0_IRQHandler+0x144>)
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	4a45      	ldr	r2, [pc, #276]	@ (8001554 <DMA1_Stream0_IRQHandler+0x144>)
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_DMEIF0)
 8001446:	4b44      	ldr	r3, [pc, #272]	@ (8001558 <DMA1_Stream0_IRQHandler+0x148>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0304 	and.w	r3, r3, #4
 800144e:	2b00      	cmp	r3, #0
 8001450:	d00e      	beq.n	8001470 <DMA1_Stream0_IRQHandler+0x60>
	{
	    if (__DMA1_Stream0_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8001452:	4b42      	ldr	r3, [pc, #264]	@ (800155c <DMA1_Stream0_IRQHandler+0x14c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001458:	2b00      	cmp	r3, #0
 800145a:	d009      	beq.n	8001470 <DMA1_Stream0_IRQHandler+0x60>
	    {
	    	__DMA1_Stream0_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 800145c:	4b3f      	ldr	r3, [pc, #252]	@ (800155c <DMA1_Stream0_IRQHandler+0x14c>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001462:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF0;
 8001464:	4b3b      	ldr	r3, [pc, #236]	@ (8001554 <DMA1_Stream0_IRQHandler+0x144>)
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	4a3a      	ldr	r2, [pc, #232]	@ (8001554 <DMA1_Stream0_IRQHandler+0x144>)
 800146a:	f043 0304 	orr.w	r3, r3, #4
 800146e:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_TEIF0)
 8001470:	4b39      	ldr	r3, [pc, #228]	@ (8001558 <DMA1_Stream0_IRQHandler+0x148>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0308 	and.w	r3, r3, #8
 8001478:	2b00      	cmp	r3, #0
 800147a:	d00e      	beq.n	800149a <DMA1_Stream0_IRQHandler+0x8a>
	{
	    if (__DMA1_Stream0_Config__ -> ISR_Routines.Transfer_Error_ISR)
 800147c:	4b37      	ldr	r3, [pc, #220]	@ (800155c <DMA1_Stream0_IRQHandler+0x14c>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001482:	2b00      	cmp	r3, #0
 8001484:	d009      	beq.n	800149a <DMA1_Stream0_IRQHandler+0x8a>
	    {
	    	__DMA1_Stream0_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8001486:	4b35      	ldr	r3, [pc, #212]	@ (800155c <DMA1_Stream0_IRQHandler+0x14c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800148c:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CTEIF0;
 800148e:	4b31      	ldr	r3, [pc, #196]	@ (8001554 <DMA1_Stream0_IRQHandler+0x144>)
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	4a30      	ldr	r2, [pc, #192]	@ (8001554 <DMA1_Stream0_IRQHandler+0x144>)
 8001494:	f043 0308 	orr.w	r3, r3, #8
 8001498:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_HTIF0)
 800149a:	4b2f      	ldr	r3, [pc, #188]	@ (8001558 <DMA1_Stream0_IRQHandler+0x148>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0310 	and.w	r3, r3, #16
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d026      	beq.n	80014f4 <DMA1_Stream0_IRQHandler+0xe4>
	{
	    if (__DMA1_Stream0_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 80014a6:	4b2d      	ldr	r3, [pc, #180]	@ (800155c <DMA1_Stream0_IRQHandler+0x14c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d021      	beq.n	80014f4 <DMA1_Stream0_IRQHandler+0xe4>
	    {
	    	__DMA1_Stream0_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80014b0:	4b2a      	ldr	r3, [pc, #168]	@ (800155c <DMA1_Stream0_IRQHandler+0x14c>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014b6:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CHTIF0;
 80014b8:	4b26      	ldr	r3, [pc, #152]	@ (8001554 <DMA1_Stream0_IRQHandler+0x144>)
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	4a25      	ldr	r2, [pc, #148]	@ (8001554 <DMA1_Stream0_IRQHandler+0x144>)
 80014be:	f043 0310 	orr.w	r3, r3, #16
 80014c2:	6093      	str	r3, [r2, #8]

	    	if(__DMA1_Stream0_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80014c4:	4b25      	ldr	r3, [pc, #148]	@ (800155c <DMA1_Stream0_IRQHandler+0x14c>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014ca:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d110      	bne.n	80014f4 <DMA1_Stream0_IRQHandler+0xe4>
	    	{
	    		if((__DMA1_Stream0_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80014d2:	4b22      	ldr	r3, [pc, #136]	@ (800155c <DMA1_Stream0_IRQHandler+0x14c>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d004      	beq.n	80014ec <DMA1_Stream0_IRQHandler+0xdc>
	    		{
	    			__DMA1_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80014e2:	4b1e      	ldr	r3, [pc, #120]	@ (800155c <DMA1_Stream0_IRQHandler+0x14c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80014e8:	4798      	blx	r3
 80014ea:	e003      	b.n	80014f4 <DMA1_Stream0_IRQHandler+0xe4>
	    		}
	    		else
	    		{
	    			__DMA1_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80014ec:	4b1b      	ldr	r3, [pc, #108]	@ (800155c <DMA1_Stream0_IRQHandler+0x14c>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014f2:	4798      	blx	r3
	    		}
	    	}
	    }
	}

	if(DMA_LISR & DMA_LISR_TCIF0)
 80014f4:	4b18      	ldr	r3, [pc, #96]	@ (8001558 <DMA1_Stream0_IRQHandler+0x148>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0320 	and.w	r3, r3, #32
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d026      	beq.n	800154e <DMA1_Stream0_IRQHandler+0x13e>
	{
	    if (__DMA1_Stream0_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001500:	4b16      	ldr	r3, [pc, #88]	@ (800155c <DMA1_Stream0_IRQHandler+0x14c>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001506:	2b00      	cmp	r3, #0
 8001508:	d021      	beq.n	800154e <DMA1_Stream0_IRQHandler+0x13e>
	    {
	    	__DMA1_Stream0_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 800150a:	4b14      	ldr	r3, [pc, #80]	@ (800155c <DMA1_Stream0_IRQHandler+0x14c>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001510:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CTCIF0;
 8001512:	4b10      	ldr	r3, [pc, #64]	@ (8001554 <DMA1_Stream0_IRQHandler+0x144>)
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	4a0f      	ldr	r2, [pc, #60]	@ (8001554 <DMA1_Stream0_IRQHandler+0x144>)
 8001518:	f043 0320 	orr.w	r3, r3, #32
 800151c:	6093      	str	r3, [r2, #8]

	    	if(__DMA1_Stream0_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800151e:	4b0f      	ldr	r3, [pc, #60]	@ (800155c <DMA1_Stream0_IRQHandler+0x14c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001524:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001528:	4293      	cmp	r3, r2
 800152a:	d110      	bne.n	800154e <DMA1_Stream0_IRQHandler+0x13e>
	    	{
	    		if((__DMA1_Stream0_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800152c:	4b0b      	ldr	r3, [pc, #44]	@ (800155c <DMA1_Stream0_IRQHandler+0x14c>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d004      	beq.n	8001546 <DMA1_Stream0_IRQHandler+0x136>
	    		{
	    			__DMA1_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800153c:	4b07      	ldr	r3, [pc, #28]	@ (800155c <DMA1_Stream0_IRQHandler+0x14c>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001542:	4798      	blx	r3
	    			__DMA1_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
	    		}
	    	}
	    }
	}
}
 8001544:	e003      	b.n	800154e <DMA1_Stream0_IRQHandler+0x13e>
	    			__DMA1_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001546:	4b05      	ldr	r3, [pc, #20]	@ (800155c <DMA1_Stream0_IRQHandler+0x14c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800154c:	4798      	blx	r3
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40026000 	.word	0x40026000
 8001558:	200000d8 	.word	0x200000d8
 800155c:	20000098 	.word	0x20000098

08001560 <DMA1_Stream1_IRQHandler>:

void DMA1_Stream1_IRQHandler(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
	DMA_LISR = DMA1 -> LISR;
 8001564:	4b4f      	ldr	r3, [pc, #316]	@ (80016a4 <DMA1_Stream1_IRQHandler+0x144>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a4f      	ldr	r2, [pc, #316]	@ (80016a8 <DMA1_Stream1_IRQHandler+0x148>)
 800156a:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF1)
 800156c:	4b4e      	ldr	r3, [pc, #312]	@ (80016a8 <DMA1_Stream1_IRQHandler+0x148>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001574:	2b00      	cmp	r3, #0
 8001576:	d00e      	beq.n	8001596 <DMA1_Stream1_IRQHandler+0x36>
	{
	    if (__DMA1_Stream1_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001578:	4b4c      	ldr	r3, [pc, #304]	@ (80016ac <DMA1_Stream1_IRQHandler+0x14c>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800157e:	2b00      	cmp	r3, #0
 8001580:	d009      	beq.n	8001596 <DMA1_Stream1_IRQHandler+0x36>
	    {
	    	__DMA1_Stream1_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8001582:	4b4a      	ldr	r3, [pc, #296]	@ (80016ac <DMA1_Stream1_IRQHandler+0x14c>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001588:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CFEIF1;
 800158a:	4b46      	ldr	r3, [pc, #280]	@ (80016a4 <DMA1_Stream1_IRQHandler+0x144>)
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	4a45      	ldr	r2, [pc, #276]	@ (80016a4 <DMA1_Stream1_IRQHandler+0x144>)
 8001590:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001594:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_DMEIF1)
 8001596:	4b44      	ldr	r3, [pc, #272]	@ (80016a8 <DMA1_Stream1_IRQHandler+0x148>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d00e      	beq.n	80015c0 <DMA1_Stream1_IRQHandler+0x60>
	{
	    if (__DMA1_Stream1_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 80015a2:	4b42      	ldr	r3, [pc, #264]	@ (80016ac <DMA1_Stream1_IRQHandler+0x14c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d009      	beq.n	80015c0 <DMA1_Stream1_IRQHandler+0x60>
	    {
	    	__DMA1_Stream1_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 80015ac:	4b3f      	ldr	r3, [pc, #252]	@ (80016ac <DMA1_Stream1_IRQHandler+0x14c>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b2:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF1;
 80015b4:	4b3b      	ldr	r3, [pc, #236]	@ (80016a4 <DMA1_Stream1_IRQHandler+0x144>)
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	4a3a      	ldr	r2, [pc, #232]	@ (80016a4 <DMA1_Stream1_IRQHandler+0x144>)
 80015ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015be:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_TEIF1)
 80015c0:	4b39      	ldr	r3, [pc, #228]	@ (80016a8 <DMA1_Stream1_IRQHandler+0x148>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d00e      	beq.n	80015ea <DMA1_Stream1_IRQHandler+0x8a>
	{
	    if (__DMA1_Stream1_Config__ -> ISR_Routines.Transfer_Error_ISR)
 80015cc:	4b37      	ldr	r3, [pc, #220]	@ (80016ac <DMA1_Stream1_IRQHandler+0x14c>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d009      	beq.n	80015ea <DMA1_Stream1_IRQHandler+0x8a>
	    {
	    	__DMA1_Stream1_Config__ ->ISR_Routines.Transfer_Error_ISR();
 80015d6:	4b35      	ldr	r3, [pc, #212]	@ (80016ac <DMA1_Stream1_IRQHandler+0x14c>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015dc:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CTEIF1;
 80015de:	4b31      	ldr	r3, [pc, #196]	@ (80016a4 <DMA1_Stream1_IRQHandler+0x144>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	4a30      	ldr	r2, [pc, #192]	@ (80016a4 <DMA1_Stream1_IRQHandler+0x144>)
 80015e4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015e8:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_HTIF1)
 80015ea:	4b2f      	ldr	r3, [pc, #188]	@ (80016a8 <DMA1_Stream1_IRQHandler+0x148>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d026      	beq.n	8001644 <DMA1_Stream1_IRQHandler+0xe4>
	{
	    if (__DMA1_Stream1_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 80015f6:	4b2d      	ldr	r3, [pc, #180]	@ (80016ac <DMA1_Stream1_IRQHandler+0x14c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d021      	beq.n	8001644 <DMA1_Stream1_IRQHandler+0xe4>
	    {
	    	__DMA1_Stream1_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001600:	4b2a      	ldr	r3, [pc, #168]	@ (80016ac <DMA1_Stream1_IRQHandler+0x14c>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001606:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CHTIF1;
 8001608:	4b26      	ldr	r3, [pc, #152]	@ (80016a4 <DMA1_Stream1_IRQHandler+0x144>)
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	4a25      	ldr	r2, [pc, #148]	@ (80016a4 <DMA1_Stream1_IRQHandler+0x144>)
 800160e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001612:	6093      	str	r3, [r2, #8]

	    	if(__DMA1_Stream1_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001614:	4b25      	ldr	r3, [pc, #148]	@ (80016ac <DMA1_Stream1_IRQHandler+0x14c>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800161a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800161e:	4293      	cmp	r3, r2
 8001620:	d110      	bne.n	8001644 <DMA1_Stream1_IRQHandler+0xe4>
	    	{
	    		if((__DMA1_Stream1_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001622:	4b22      	ldr	r3, [pc, #136]	@ (80016ac <DMA1_Stream1_IRQHandler+0x14c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d004      	beq.n	800163c <DMA1_Stream1_IRQHandler+0xdc>
	    		{
	    			__DMA1_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001632:	4b1e      	ldr	r3, [pc, #120]	@ (80016ac <DMA1_Stream1_IRQHandler+0x14c>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001638:	4798      	blx	r3
 800163a:	e003      	b.n	8001644 <DMA1_Stream1_IRQHandler+0xe4>
	    		}
	    		else
	    		{
	    			__DMA1_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800163c:	4b1b      	ldr	r3, [pc, #108]	@ (80016ac <DMA1_Stream1_IRQHandler+0x14c>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001642:	4798      	blx	r3
	    		}
	    	}
	    }
	}

	if(DMA_LISR & DMA_LISR_TCIF1)
 8001644:	4b18      	ldr	r3, [pc, #96]	@ (80016a8 <DMA1_Stream1_IRQHandler+0x148>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800164c:	2b00      	cmp	r3, #0
 800164e:	d026      	beq.n	800169e <DMA1_Stream1_IRQHandler+0x13e>
	{
	    if (__DMA1_Stream1_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001650:	4b16      	ldr	r3, [pc, #88]	@ (80016ac <DMA1_Stream1_IRQHandler+0x14c>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001656:	2b00      	cmp	r3, #0
 8001658:	d021      	beq.n	800169e <DMA1_Stream1_IRQHandler+0x13e>
	    {
	    	__DMA1_Stream1_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 800165a:	4b14      	ldr	r3, [pc, #80]	@ (80016ac <DMA1_Stream1_IRQHandler+0x14c>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001660:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CTCIF1;
 8001662:	4b10      	ldr	r3, [pc, #64]	@ (80016a4 <DMA1_Stream1_IRQHandler+0x144>)
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	4a0f      	ldr	r2, [pc, #60]	@ (80016a4 <DMA1_Stream1_IRQHandler+0x144>)
 8001668:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800166c:	6093      	str	r3, [r2, #8]

	    	if(__DMA1_Stream1_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800166e:	4b0f      	ldr	r3, [pc, #60]	@ (80016ac <DMA1_Stream1_IRQHandler+0x14c>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001674:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001678:	4293      	cmp	r3, r2
 800167a:	d110      	bne.n	800169e <DMA1_Stream1_IRQHandler+0x13e>
	    	{
	    		if((__DMA1_Stream1_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800167c:	4b0b      	ldr	r3, [pc, #44]	@ (80016ac <DMA1_Stream1_IRQHandler+0x14c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d004      	beq.n	8001696 <DMA1_Stream1_IRQHandler+0x136>
	    		{
	    			__DMA1_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800168c:	4b07      	ldr	r3, [pc, #28]	@ (80016ac <DMA1_Stream1_IRQHandler+0x14c>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001692:	4798      	blx	r3
	    			__DMA1_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
	    		}
	    	}
	    }
	}
}
 8001694:	e003      	b.n	800169e <DMA1_Stream1_IRQHandler+0x13e>
	    			__DMA1_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001696:	4b05      	ldr	r3, [pc, #20]	@ (80016ac <DMA1_Stream1_IRQHandler+0x14c>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800169c:	4798      	blx	r3
}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40026000 	.word	0x40026000
 80016a8:	200000d8 	.word	0x200000d8
 80016ac:	2000009c 	.word	0x2000009c

080016b0 <DMA1_Stream2_IRQHandler>:


void DMA1_Stream2_IRQHandler(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
	DMA_LISR = DMA1 -> LISR;
 80016b4:	4b4f      	ldr	r3, [pc, #316]	@ (80017f4 <DMA1_Stream2_IRQHandler+0x144>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a4f      	ldr	r2, [pc, #316]	@ (80017f8 <DMA1_Stream2_IRQHandler+0x148>)
 80016ba:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF2)
 80016bc:	4b4e      	ldr	r3, [pc, #312]	@ (80017f8 <DMA1_Stream2_IRQHandler+0x148>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d00e      	beq.n	80016e6 <DMA1_Stream2_IRQHandler+0x36>
	{
	    if (__DMA1_Stream2_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80016c8:	4b4c      	ldr	r3, [pc, #304]	@ (80017fc <DMA1_Stream2_IRQHandler+0x14c>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d009      	beq.n	80016e6 <DMA1_Stream2_IRQHandler+0x36>
	    {
	    	__DMA1_Stream2_Config__ ->ISR_Routines.FIFO_Error_ISR();
 80016d2:	4b4a      	ldr	r3, [pc, #296]	@ (80017fc <DMA1_Stream2_IRQHandler+0x14c>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016d8:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CFEIF2;
 80016da:	4b46      	ldr	r3, [pc, #280]	@ (80017f4 <DMA1_Stream2_IRQHandler+0x144>)
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	4a45      	ldr	r2, [pc, #276]	@ (80017f4 <DMA1_Stream2_IRQHandler+0x144>)
 80016e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016e4:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_DMEIF2)
 80016e6:	4b44      	ldr	r3, [pc, #272]	@ (80017f8 <DMA1_Stream2_IRQHandler+0x148>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d00e      	beq.n	8001710 <DMA1_Stream2_IRQHandler+0x60>
	{
	    if (__DMA1_Stream2_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 80016f2:	4b42      	ldr	r3, [pc, #264]	@ (80017fc <DMA1_Stream2_IRQHandler+0x14c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d009      	beq.n	8001710 <DMA1_Stream2_IRQHandler+0x60>
	    {
	    	__DMA1_Stream2_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 80016fc:	4b3f      	ldr	r3, [pc, #252]	@ (80017fc <DMA1_Stream2_IRQHandler+0x14c>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001702:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF2;
 8001704:	4b3b      	ldr	r3, [pc, #236]	@ (80017f4 <DMA1_Stream2_IRQHandler+0x144>)
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	4a3a      	ldr	r2, [pc, #232]	@ (80017f4 <DMA1_Stream2_IRQHandler+0x144>)
 800170a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800170e:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_TEIF2)
 8001710:	4b39      	ldr	r3, [pc, #228]	@ (80017f8 <DMA1_Stream2_IRQHandler+0x148>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d00e      	beq.n	800173a <DMA1_Stream2_IRQHandler+0x8a>
	{
	    if (__DMA1_Stream2_Config__ -> ISR_Routines.Transfer_Error_ISR)
 800171c:	4b37      	ldr	r3, [pc, #220]	@ (80017fc <DMA1_Stream2_IRQHandler+0x14c>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001722:	2b00      	cmp	r3, #0
 8001724:	d009      	beq.n	800173a <DMA1_Stream2_IRQHandler+0x8a>
	    {
	    	__DMA1_Stream2_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8001726:	4b35      	ldr	r3, [pc, #212]	@ (80017fc <DMA1_Stream2_IRQHandler+0x14c>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800172c:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CTEIF2;
 800172e:	4b31      	ldr	r3, [pc, #196]	@ (80017f4 <DMA1_Stream2_IRQHandler+0x144>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	4a30      	ldr	r2, [pc, #192]	@ (80017f4 <DMA1_Stream2_IRQHandler+0x144>)
 8001734:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001738:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_HTIF2)
 800173a:	4b2f      	ldr	r3, [pc, #188]	@ (80017f8 <DMA1_Stream2_IRQHandler+0x148>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d026      	beq.n	8001794 <DMA1_Stream2_IRQHandler+0xe4>
	{
	    if (__DMA1_Stream2_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001746:	4b2d      	ldr	r3, [pc, #180]	@ (80017fc <DMA1_Stream2_IRQHandler+0x14c>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800174c:	2b00      	cmp	r3, #0
 800174e:	d021      	beq.n	8001794 <DMA1_Stream2_IRQHandler+0xe4>
	    {
	    	__DMA1_Stream2_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001750:	4b2a      	ldr	r3, [pc, #168]	@ (80017fc <DMA1_Stream2_IRQHandler+0x14c>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001756:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CHTIF2;
 8001758:	4b26      	ldr	r3, [pc, #152]	@ (80017f4 <DMA1_Stream2_IRQHandler+0x144>)
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	4a25      	ldr	r2, [pc, #148]	@ (80017f4 <DMA1_Stream2_IRQHandler+0x144>)
 800175e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001762:	6093      	str	r3, [r2, #8]

	    	if(__DMA1_Stream2_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001764:	4b25      	ldr	r3, [pc, #148]	@ (80017fc <DMA1_Stream2_IRQHandler+0x14c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800176a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800176e:	4293      	cmp	r3, r2
 8001770:	d110      	bne.n	8001794 <DMA1_Stream2_IRQHandler+0xe4>
	    	{
	    		if((__DMA1_Stream2_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001772:	4b22      	ldr	r3, [pc, #136]	@ (80017fc <DMA1_Stream2_IRQHandler+0x14c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d004      	beq.n	800178c <DMA1_Stream2_IRQHandler+0xdc>
	    		{
	    			__DMA1_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001782:	4b1e      	ldr	r3, [pc, #120]	@ (80017fc <DMA1_Stream2_IRQHandler+0x14c>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001788:	4798      	blx	r3
 800178a:	e003      	b.n	8001794 <DMA1_Stream2_IRQHandler+0xe4>
	    		}
	    		else
	    		{
	    			__DMA1_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800178c:	4b1b      	ldr	r3, [pc, #108]	@ (80017fc <DMA1_Stream2_IRQHandler+0x14c>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001792:	4798      	blx	r3
	    		}
	    	}
	    }
	}

	if(DMA_LISR & DMA_LISR_TCIF2)
 8001794:	4b18      	ldr	r3, [pc, #96]	@ (80017f8 <DMA1_Stream2_IRQHandler+0x148>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d026      	beq.n	80017ee <DMA1_Stream2_IRQHandler+0x13e>
	{
	    if (__DMA1_Stream2_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 80017a0:	4b16      	ldr	r3, [pc, #88]	@ (80017fc <DMA1_Stream2_IRQHandler+0x14c>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d021      	beq.n	80017ee <DMA1_Stream2_IRQHandler+0x13e>
	    {
	    	__DMA1_Stream2_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80017aa:	4b14      	ldr	r3, [pc, #80]	@ (80017fc <DMA1_Stream2_IRQHandler+0x14c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017b0:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CTCIF2;
 80017b2:	4b10      	ldr	r3, [pc, #64]	@ (80017f4 <DMA1_Stream2_IRQHandler+0x144>)
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	4a0f      	ldr	r2, [pc, #60]	@ (80017f4 <DMA1_Stream2_IRQHandler+0x144>)
 80017b8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80017bc:	6093      	str	r3, [r2, #8]

	    	if(__DMA1_Stream2_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80017be:	4b0f      	ldr	r3, [pc, #60]	@ (80017fc <DMA1_Stream2_IRQHandler+0x14c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017c4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d110      	bne.n	80017ee <DMA1_Stream2_IRQHandler+0x13e>
	    	{
	    		if((__DMA1_Stream2_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80017cc:	4b0b      	ldr	r3, [pc, #44]	@ (80017fc <DMA1_Stream2_IRQHandler+0x14c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d004      	beq.n	80017e6 <DMA1_Stream2_IRQHandler+0x136>
	    		{
	    			__DMA1_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80017dc:	4b07      	ldr	r3, [pc, #28]	@ (80017fc <DMA1_Stream2_IRQHandler+0x14c>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80017e2:	4798      	blx	r3
	    			__DMA1_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
	    		}
	    	}
	    }
	}
}
 80017e4:	e003      	b.n	80017ee <DMA1_Stream2_IRQHandler+0x13e>
	    			__DMA1_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80017e6:	4b05      	ldr	r3, [pc, #20]	@ (80017fc <DMA1_Stream2_IRQHandler+0x14c>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017ec:	4798      	blx	r3
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40026000 	.word	0x40026000
 80017f8:	200000d8 	.word	0x200000d8
 80017fc:	200000a0 	.word	0x200000a0

08001800 <DMA1_Stream3_IRQHandler>:

void DMA1_Stream3_IRQHandler(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
	DMA_LISR = DMA1 -> LISR;
 8001804:	4b4f      	ldr	r3, [pc, #316]	@ (8001944 <DMA1_Stream3_IRQHandler+0x144>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a4f      	ldr	r2, [pc, #316]	@ (8001948 <DMA1_Stream3_IRQHandler+0x148>)
 800180a:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF3)
 800180c:	4b4e      	ldr	r3, [pc, #312]	@ (8001948 <DMA1_Stream3_IRQHandler+0x148>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001814:	2b00      	cmp	r3, #0
 8001816:	d00e      	beq.n	8001836 <DMA1_Stream3_IRQHandler+0x36>
	{
	    if (__DMA1_Stream3_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001818:	4b4c      	ldr	r3, [pc, #304]	@ (800194c <DMA1_Stream3_IRQHandler+0x14c>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800181e:	2b00      	cmp	r3, #0
 8001820:	d009      	beq.n	8001836 <DMA1_Stream3_IRQHandler+0x36>
	    {
	    	__DMA1_Stream3_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8001822:	4b4a      	ldr	r3, [pc, #296]	@ (800194c <DMA1_Stream3_IRQHandler+0x14c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001828:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CFEIF3;
 800182a:	4b46      	ldr	r3, [pc, #280]	@ (8001944 <DMA1_Stream3_IRQHandler+0x144>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	4a45      	ldr	r2, [pc, #276]	@ (8001944 <DMA1_Stream3_IRQHandler+0x144>)
 8001830:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001834:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_DMEIF3)
 8001836:	4b44      	ldr	r3, [pc, #272]	@ (8001948 <DMA1_Stream3_IRQHandler+0x148>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d00e      	beq.n	8001860 <DMA1_Stream3_IRQHandler+0x60>
	{
	    if (__DMA1_Stream3_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8001842:	4b42      	ldr	r3, [pc, #264]	@ (800194c <DMA1_Stream3_IRQHandler+0x14c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001848:	2b00      	cmp	r3, #0
 800184a:	d009      	beq.n	8001860 <DMA1_Stream3_IRQHandler+0x60>
	    {
	    	__DMA1_Stream3_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 800184c:	4b3f      	ldr	r3, [pc, #252]	@ (800194c <DMA1_Stream3_IRQHandler+0x14c>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001852:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF3;
 8001854:	4b3b      	ldr	r3, [pc, #236]	@ (8001944 <DMA1_Stream3_IRQHandler+0x144>)
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	4a3a      	ldr	r2, [pc, #232]	@ (8001944 <DMA1_Stream3_IRQHandler+0x144>)
 800185a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800185e:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_TEIF3)
 8001860:	4b39      	ldr	r3, [pc, #228]	@ (8001948 <DMA1_Stream3_IRQHandler+0x148>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d00e      	beq.n	800188a <DMA1_Stream3_IRQHandler+0x8a>
	{
	    if (__DMA1_Stream3_Config__ -> ISR_Routines.Transfer_Error_ISR)
 800186c:	4b37      	ldr	r3, [pc, #220]	@ (800194c <DMA1_Stream3_IRQHandler+0x14c>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001872:	2b00      	cmp	r3, #0
 8001874:	d009      	beq.n	800188a <DMA1_Stream3_IRQHandler+0x8a>
	    {
	    	__DMA1_Stream3_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8001876:	4b35      	ldr	r3, [pc, #212]	@ (800194c <DMA1_Stream3_IRQHandler+0x14c>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800187c:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CTEIF3;
 800187e:	4b31      	ldr	r3, [pc, #196]	@ (8001944 <DMA1_Stream3_IRQHandler+0x144>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	4a30      	ldr	r2, [pc, #192]	@ (8001944 <DMA1_Stream3_IRQHandler+0x144>)
 8001884:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001888:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_HTIF3)
 800188a:	4b2f      	ldr	r3, [pc, #188]	@ (8001948 <DMA1_Stream3_IRQHandler+0x148>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d026      	beq.n	80018e4 <DMA1_Stream3_IRQHandler+0xe4>
	{
	    if (__DMA1_Stream3_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001896:	4b2d      	ldr	r3, [pc, #180]	@ (800194c <DMA1_Stream3_IRQHandler+0x14c>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800189c:	2b00      	cmp	r3, #0
 800189e:	d021      	beq.n	80018e4 <DMA1_Stream3_IRQHandler+0xe4>
	    {
	    	__DMA1_Stream3_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80018a0:	4b2a      	ldr	r3, [pc, #168]	@ (800194c <DMA1_Stream3_IRQHandler+0x14c>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018a6:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CHTIF3;
 80018a8:	4b26      	ldr	r3, [pc, #152]	@ (8001944 <DMA1_Stream3_IRQHandler+0x144>)
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	4a25      	ldr	r2, [pc, #148]	@ (8001944 <DMA1_Stream3_IRQHandler+0x144>)
 80018ae:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80018b2:	6093      	str	r3, [r2, #8]

	    	if(__DMA1_Stream3_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80018b4:	4b25      	ldr	r3, [pc, #148]	@ (800194c <DMA1_Stream3_IRQHandler+0x14c>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018ba:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80018be:	4293      	cmp	r3, r2
 80018c0:	d110      	bne.n	80018e4 <DMA1_Stream3_IRQHandler+0xe4>
	    	{
	    		if((__DMA1_Stream3_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80018c2:	4b22      	ldr	r3, [pc, #136]	@ (800194c <DMA1_Stream3_IRQHandler+0x14c>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d004      	beq.n	80018dc <DMA1_Stream3_IRQHandler+0xdc>
	    		{
	    			__DMA1_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80018d2:	4b1e      	ldr	r3, [pc, #120]	@ (800194c <DMA1_Stream3_IRQHandler+0x14c>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018d8:	4798      	blx	r3
 80018da:	e003      	b.n	80018e4 <DMA1_Stream3_IRQHandler+0xe4>
	    		}
	    		else
	    		{
	    			__DMA1_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80018dc:	4b1b      	ldr	r3, [pc, #108]	@ (800194c <DMA1_Stream3_IRQHandler+0x14c>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018e2:	4798      	blx	r3
	    		}
	    	}
	    }
	}

	if(DMA_LISR & DMA_LISR_TCIF3)
 80018e4:	4b18      	ldr	r3, [pc, #96]	@ (8001948 <DMA1_Stream3_IRQHandler+0x148>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d026      	beq.n	800193e <DMA1_Stream3_IRQHandler+0x13e>
	{
	    if (__DMA1_Stream3_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 80018f0:	4b16      	ldr	r3, [pc, #88]	@ (800194c <DMA1_Stream3_IRQHandler+0x14c>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d021      	beq.n	800193e <DMA1_Stream3_IRQHandler+0x13e>
	    {
	    	__DMA1_Stream3_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80018fa:	4b14      	ldr	r3, [pc, #80]	@ (800194c <DMA1_Stream3_IRQHandler+0x14c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001900:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CTCIF3;
 8001902:	4b10      	ldr	r3, [pc, #64]	@ (8001944 <DMA1_Stream3_IRQHandler+0x144>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	4a0f      	ldr	r2, [pc, #60]	@ (8001944 <DMA1_Stream3_IRQHandler+0x144>)
 8001908:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800190c:	6093      	str	r3, [r2, #8]

	    	if(__DMA1_Stream3_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800190e:	4b0f      	ldr	r3, [pc, #60]	@ (800194c <DMA1_Stream3_IRQHandler+0x14c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001914:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001918:	4293      	cmp	r3, r2
 800191a:	d110      	bne.n	800193e <DMA1_Stream3_IRQHandler+0x13e>
	    	{
	    		if((__DMA1_Stream3_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800191c:	4b0b      	ldr	r3, [pc, #44]	@ (800194c <DMA1_Stream3_IRQHandler+0x14c>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d004      	beq.n	8001936 <DMA1_Stream3_IRQHandler+0x136>
	    		{
	    			__DMA1_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800192c:	4b07      	ldr	r3, [pc, #28]	@ (800194c <DMA1_Stream3_IRQHandler+0x14c>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001932:	4798      	blx	r3
	    			__DMA1_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
	    		}
	    	}
	    }
	}
}
 8001934:	e003      	b.n	800193e <DMA1_Stream3_IRQHandler+0x13e>
	    			__DMA1_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001936:	4b05      	ldr	r3, [pc, #20]	@ (800194c <DMA1_Stream3_IRQHandler+0x14c>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800193c:	4798      	blx	r3
}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40026000 	.word	0x40026000
 8001948:	200000d8 	.word	0x200000d8
 800194c:	200000a4 	.word	0x200000a4

08001950 <DMA1_Stream4_IRQHandler>:

void DMA1_Stream4_IRQHandler(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
	DMA_HISR = DMA1 -> HISR;
 8001954:	4b4f      	ldr	r3, [pc, #316]	@ (8001a94 <DMA1_Stream4_IRQHandler+0x144>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	4a4f      	ldr	r2, [pc, #316]	@ (8001a98 <DMA1_Stream4_IRQHandler+0x148>)
 800195a:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF4)
 800195c:	4b4e      	ldr	r3, [pc, #312]	@ (8001a98 <DMA1_Stream4_IRQHandler+0x148>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0301 	and.w	r3, r3, #1
 8001964:	2b00      	cmp	r3, #0
 8001966:	d00e      	beq.n	8001986 <DMA1_Stream4_IRQHandler+0x36>
	{
	    if (__DMA1_Stream4_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001968:	4b4c      	ldr	r3, [pc, #304]	@ (8001a9c <DMA1_Stream4_IRQHandler+0x14c>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800196e:	2b00      	cmp	r3, #0
 8001970:	d009      	beq.n	8001986 <DMA1_Stream4_IRQHandler+0x36>
	    {
	    	__DMA1_Stream4_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8001972:	4b4a      	ldr	r3, [pc, #296]	@ (8001a9c <DMA1_Stream4_IRQHandler+0x14c>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001978:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_HIFCR_CFEIF5;
 800197a:	4b46      	ldr	r3, [pc, #280]	@ (8001a94 <DMA1_Stream4_IRQHandler+0x144>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	4a45      	ldr	r2, [pc, #276]	@ (8001a94 <DMA1_Stream4_IRQHandler+0x144>)
 8001980:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001984:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_HISR & DMA_HISR_DMEIF4)
 8001986:	4b44      	ldr	r3, [pc, #272]	@ (8001a98 <DMA1_Stream4_IRQHandler+0x148>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0304 	and.w	r3, r3, #4
 800198e:	2b00      	cmp	r3, #0
 8001990:	d00e      	beq.n	80019b0 <DMA1_Stream4_IRQHandler+0x60>
	{
	    if (__DMA1_Stream4_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8001992:	4b42      	ldr	r3, [pc, #264]	@ (8001a9c <DMA1_Stream4_IRQHandler+0x14c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001998:	2b00      	cmp	r3, #0
 800199a:	d009      	beq.n	80019b0 <DMA1_Stream4_IRQHandler+0x60>
	    {
	    	__DMA1_Stream4_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 800199c:	4b3f      	ldr	r3, [pc, #252]	@ (8001a9c <DMA1_Stream4_IRQHandler+0x14c>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a2:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF4;
 80019a4:	4b3b      	ldr	r3, [pc, #236]	@ (8001a94 <DMA1_Stream4_IRQHandler+0x144>)
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	4a3a      	ldr	r2, [pc, #232]	@ (8001a94 <DMA1_Stream4_IRQHandler+0x144>)
 80019aa:	f043 0304 	orr.w	r3, r3, #4
 80019ae:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_TEIF4)
 80019b0:	4b39      	ldr	r3, [pc, #228]	@ (8001a98 <DMA1_Stream4_IRQHandler+0x148>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0308 	and.w	r3, r3, #8
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d00e      	beq.n	80019da <DMA1_Stream4_IRQHandler+0x8a>
	{
	    if (__DMA1_Stream4_Config__ -> ISR_Routines.Transfer_Error_ISR)
 80019bc:	4b37      	ldr	r3, [pc, #220]	@ (8001a9c <DMA1_Stream4_IRQHandler+0x14c>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d009      	beq.n	80019da <DMA1_Stream4_IRQHandler+0x8a>
	    {
	    	__DMA1_Stream4_Config__ ->ISR_Routines.Transfer_Error_ISR();
 80019c6:	4b35      	ldr	r3, [pc, #212]	@ (8001a9c <DMA1_Stream4_IRQHandler+0x14c>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019cc:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CTEIF4;
 80019ce:	4b31      	ldr	r3, [pc, #196]	@ (8001a94 <DMA1_Stream4_IRQHandler+0x144>)
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	4a30      	ldr	r2, [pc, #192]	@ (8001a94 <DMA1_Stream4_IRQHandler+0x144>)
 80019d4:	f043 0308 	orr.w	r3, r3, #8
 80019d8:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_HTIF4)
 80019da:	4b2f      	ldr	r3, [pc, #188]	@ (8001a98 <DMA1_Stream4_IRQHandler+0x148>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0310 	and.w	r3, r3, #16
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d026      	beq.n	8001a34 <DMA1_Stream4_IRQHandler+0xe4>
	{
	    if (__DMA1_Stream4_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 80019e6:	4b2d      	ldr	r3, [pc, #180]	@ (8001a9c <DMA1_Stream4_IRQHandler+0x14c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d021      	beq.n	8001a34 <DMA1_Stream4_IRQHandler+0xe4>
	    {
	    	__DMA1_Stream4_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80019f0:	4b2a      	ldr	r3, [pc, #168]	@ (8001a9c <DMA1_Stream4_IRQHandler+0x14c>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019f6:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CHTIF4;
 80019f8:	4b26      	ldr	r3, [pc, #152]	@ (8001a94 <DMA1_Stream4_IRQHandler+0x144>)
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	4a25      	ldr	r2, [pc, #148]	@ (8001a94 <DMA1_Stream4_IRQHandler+0x144>)
 80019fe:	f043 0310 	orr.w	r3, r3, #16
 8001a02:	60d3      	str	r3, [r2, #12]

	    	if(__DMA1_Stream4_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001a04:	4b25      	ldr	r3, [pc, #148]	@ (8001a9c <DMA1_Stream4_IRQHandler+0x14c>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a0a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d110      	bne.n	8001a34 <DMA1_Stream4_IRQHandler+0xe4>
	    	{
	    		if((__DMA1_Stream4_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001a12:	4b22      	ldr	r3, [pc, #136]	@ (8001a9c <DMA1_Stream4_IRQHandler+0x14c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d004      	beq.n	8001a2c <DMA1_Stream4_IRQHandler+0xdc>
	    		{
	    			__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001a22:	4b1e      	ldr	r3, [pc, #120]	@ (8001a9c <DMA1_Stream4_IRQHandler+0x14c>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a28:	4798      	blx	r3
 8001a2a:	e003      	b.n	8001a34 <DMA1_Stream4_IRQHandler+0xe4>
	    		}
	    		else
	    		{
	    			__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001a2c:	4b1b      	ldr	r3, [pc, #108]	@ (8001a9c <DMA1_Stream4_IRQHandler+0x14c>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a32:	4798      	blx	r3
	    		}
	    	}
	    }
	}

	if(DMA_HISR & DMA_HISR_TCIF4)
 8001a34:	4b18      	ldr	r3, [pc, #96]	@ (8001a98 <DMA1_Stream4_IRQHandler+0x148>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0320 	and.w	r3, r3, #32
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d026      	beq.n	8001a8e <DMA1_Stream4_IRQHandler+0x13e>
	{
	    if (__DMA1_Stream4_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001a40:	4b16      	ldr	r3, [pc, #88]	@ (8001a9c <DMA1_Stream4_IRQHandler+0x14c>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d021      	beq.n	8001a8e <DMA1_Stream4_IRQHandler+0x13e>
	    {
	    	__DMA1_Stream4_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001a4a:	4b14      	ldr	r3, [pc, #80]	@ (8001a9c <DMA1_Stream4_IRQHandler+0x14c>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a50:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CTCIF4;
 8001a52:	4b10      	ldr	r3, [pc, #64]	@ (8001a94 <DMA1_Stream4_IRQHandler+0x144>)
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	4a0f      	ldr	r2, [pc, #60]	@ (8001a94 <DMA1_Stream4_IRQHandler+0x144>)
 8001a58:	f043 0320 	orr.w	r3, r3, #32
 8001a5c:	60d3      	str	r3, [r2, #12]

	    	if(__DMA1_Stream4_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001a5e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a9c <DMA1_Stream4_IRQHandler+0x14c>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a64:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d110      	bne.n	8001a8e <DMA1_Stream4_IRQHandler+0x13e>
	    	{
	    		if((__DMA1_Stream4_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001a6c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a9c <DMA1_Stream4_IRQHandler+0x14c>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d004      	beq.n	8001a86 <DMA1_Stream4_IRQHandler+0x136>
	    		{
	    			__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001a7c:	4b07      	ldr	r3, [pc, #28]	@ (8001a9c <DMA1_Stream4_IRQHandler+0x14c>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a82:	4798      	blx	r3
	    			__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
	    		}
	    	}
	    }
	}
}
 8001a84:	e003      	b.n	8001a8e <DMA1_Stream4_IRQHandler+0x13e>
	    			__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001a86:	4b05      	ldr	r3, [pc, #20]	@ (8001a9c <DMA1_Stream4_IRQHandler+0x14c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a8c:	4798      	blx	r3
}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	40026000 	.word	0x40026000
 8001a98:	200000dc 	.word	0x200000dc
 8001a9c:	200000a8 	.word	0x200000a8

08001aa0 <DMA1_Stream5_IRQHandler>:




void DMA1_Stream5_IRQHandler(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
	DMA_HISR = DMA1 -> HISR;
 8001aa4:	4b4f      	ldr	r3, [pc, #316]	@ (8001be4 <DMA1_Stream5_IRQHandler+0x144>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	4a4f      	ldr	r2, [pc, #316]	@ (8001be8 <DMA1_Stream5_IRQHandler+0x148>)
 8001aaa:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF5)
 8001aac:	4b4e      	ldr	r3, [pc, #312]	@ (8001be8 <DMA1_Stream5_IRQHandler+0x148>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d00e      	beq.n	8001ad6 <DMA1_Stream5_IRQHandler+0x36>
	{
	    if (__DMA1_Stream5_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001ab8:	4b4c      	ldr	r3, [pc, #304]	@ (8001bec <DMA1_Stream5_IRQHandler+0x14c>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d009      	beq.n	8001ad6 <DMA1_Stream5_IRQHandler+0x36>
	    {
	    	__DMA1_Stream5_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8001ac2:	4b4a      	ldr	r3, [pc, #296]	@ (8001bec <DMA1_Stream5_IRQHandler+0x14c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ac8:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CFEIF5;
 8001aca:	4b46      	ldr	r3, [pc, #280]	@ (8001be4 <DMA1_Stream5_IRQHandler+0x144>)
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	4a45      	ldr	r2, [pc, #276]	@ (8001be4 <DMA1_Stream5_IRQHandler+0x144>)
 8001ad0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ad4:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_DMEIF5)
 8001ad6:	4b44      	ldr	r3, [pc, #272]	@ (8001be8 <DMA1_Stream5_IRQHandler+0x148>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d00e      	beq.n	8001b00 <DMA1_Stream5_IRQHandler+0x60>
	{
	    if (__DMA1_Stream5_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8001ae2:	4b42      	ldr	r3, [pc, #264]	@ (8001bec <DMA1_Stream5_IRQHandler+0x14c>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d009      	beq.n	8001b00 <DMA1_Stream5_IRQHandler+0x60>
	    {
	    	__DMA1_Stream5_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001aec:	4b3f      	ldr	r3, [pc, #252]	@ (8001bec <DMA1_Stream5_IRQHandler+0x14c>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af2:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF5;
 8001af4:	4b3b      	ldr	r3, [pc, #236]	@ (8001be4 <DMA1_Stream5_IRQHandler+0x144>)
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	4a3a      	ldr	r2, [pc, #232]	@ (8001be4 <DMA1_Stream5_IRQHandler+0x144>)
 8001afa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001afe:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_TEIF5)
 8001b00:	4b39      	ldr	r3, [pc, #228]	@ (8001be8 <DMA1_Stream5_IRQHandler+0x148>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d00e      	beq.n	8001b2a <DMA1_Stream5_IRQHandler+0x8a>
	{
	    if (__DMA1_Stream5_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001b0c:	4b37      	ldr	r3, [pc, #220]	@ (8001bec <DMA1_Stream5_IRQHandler+0x14c>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d009      	beq.n	8001b2a <DMA1_Stream5_IRQHandler+0x8a>
	    {
	    	__DMA1_Stream5_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8001b16:	4b35      	ldr	r3, [pc, #212]	@ (8001bec <DMA1_Stream5_IRQHandler+0x14c>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b1c:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CTEIF5;
 8001b1e:	4b31      	ldr	r3, [pc, #196]	@ (8001be4 <DMA1_Stream5_IRQHandler+0x144>)
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	4a30      	ldr	r2, [pc, #192]	@ (8001be4 <DMA1_Stream5_IRQHandler+0x144>)
 8001b24:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b28:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_HTIF5)
 8001b2a:	4b2f      	ldr	r3, [pc, #188]	@ (8001be8 <DMA1_Stream5_IRQHandler+0x148>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d026      	beq.n	8001b84 <DMA1_Stream5_IRQHandler+0xe4>
	{
	    if (__DMA1_Stream5_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001b36:	4b2d      	ldr	r3, [pc, #180]	@ (8001bec <DMA1_Stream5_IRQHandler+0x14c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d021      	beq.n	8001b84 <DMA1_Stream5_IRQHandler+0xe4>
	    {
	    	__DMA1_Stream5_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001b40:	4b2a      	ldr	r3, [pc, #168]	@ (8001bec <DMA1_Stream5_IRQHandler+0x14c>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b46:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CHTIF5;
 8001b48:	4b26      	ldr	r3, [pc, #152]	@ (8001be4 <DMA1_Stream5_IRQHandler+0x144>)
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	4a25      	ldr	r2, [pc, #148]	@ (8001be4 <DMA1_Stream5_IRQHandler+0x144>)
 8001b4e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b52:	60d3      	str	r3, [r2, #12]

	    	if(__DMA1_Stream5_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001b54:	4b25      	ldr	r3, [pc, #148]	@ (8001bec <DMA1_Stream5_IRQHandler+0x14c>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b5a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d110      	bne.n	8001b84 <DMA1_Stream5_IRQHandler+0xe4>
	    	{
	    		if((__DMA1_Stream5_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001b62:	4b22      	ldr	r3, [pc, #136]	@ (8001bec <DMA1_Stream5_IRQHandler+0x14c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d004      	beq.n	8001b7c <DMA1_Stream5_IRQHandler+0xdc>
	    		{
	    			__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001b72:	4b1e      	ldr	r3, [pc, #120]	@ (8001bec <DMA1_Stream5_IRQHandler+0x14c>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b78:	4798      	blx	r3
 8001b7a:	e003      	b.n	8001b84 <DMA1_Stream5_IRQHandler+0xe4>
	    		}
	    		else
	    		{
	    			__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001b7c:	4b1b      	ldr	r3, [pc, #108]	@ (8001bec <DMA1_Stream5_IRQHandler+0x14c>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b82:	4798      	blx	r3
	    		}
	    	}
	    }
	}

	if(DMA_HISR & DMA_HISR_TCIF5)
 8001b84:	4b18      	ldr	r3, [pc, #96]	@ (8001be8 <DMA1_Stream5_IRQHandler+0x148>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d026      	beq.n	8001bde <DMA1_Stream5_IRQHandler+0x13e>
	{
	    if (__DMA1_Stream5_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001b90:	4b16      	ldr	r3, [pc, #88]	@ (8001bec <DMA1_Stream5_IRQHandler+0x14c>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d021      	beq.n	8001bde <DMA1_Stream5_IRQHandler+0x13e>
	    {
	    	__DMA1_Stream5_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001b9a:	4b14      	ldr	r3, [pc, #80]	@ (8001bec <DMA1_Stream5_IRQHandler+0x14c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ba0:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CTCIF5;
 8001ba2:	4b10      	ldr	r3, [pc, #64]	@ (8001be4 <DMA1_Stream5_IRQHandler+0x144>)
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	4a0f      	ldr	r2, [pc, #60]	@ (8001be4 <DMA1_Stream5_IRQHandler+0x144>)
 8001ba8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001bac:	60d3      	str	r3, [r2, #12]

	    	if(__DMA1_Stream5_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001bae:	4b0f      	ldr	r3, [pc, #60]	@ (8001bec <DMA1_Stream5_IRQHandler+0x14c>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bb4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d110      	bne.n	8001bde <DMA1_Stream5_IRQHandler+0x13e>
	    	{
	    		if((__DMA1_Stream5_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8001bec <DMA1_Stream5_IRQHandler+0x14c>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d004      	beq.n	8001bd6 <DMA1_Stream5_IRQHandler+0x136>
	    		{
	    			__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001bcc:	4b07      	ldr	r3, [pc, #28]	@ (8001bec <DMA1_Stream5_IRQHandler+0x14c>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bd2:	4798      	blx	r3
	    			__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
	    		}
	    	}
	    }
	}
}
 8001bd4:	e003      	b.n	8001bde <DMA1_Stream5_IRQHandler+0x13e>
	    			__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001bd6:	4b05      	ldr	r3, [pc, #20]	@ (8001bec <DMA1_Stream5_IRQHandler+0x14c>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bdc:	4798      	blx	r3
}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	40026000 	.word	0x40026000
 8001be8:	200000dc 	.word	0x200000dc
 8001bec:	200000ac 	.word	0x200000ac

08001bf0 <DMA1_Stream6_IRQHandler>:



void DMA1_Stream6_IRQHandler(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
	DMA_HISR = DMA1 -> HISR;
 8001bf4:	4b4f      	ldr	r3, [pc, #316]	@ (8001d34 <DMA1_Stream6_IRQHandler+0x144>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	4a4f      	ldr	r2, [pc, #316]	@ (8001d38 <DMA1_Stream6_IRQHandler+0x148>)
 8001bfa:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF6)
 8001bfc:	4b4e      	ldr	r3, [pc, #312]	@ (8001d38 <DMA1_Stream6_IRQHandler+0x148>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d00e      	beq.n	8001c26 <DMA1_Stream6_IRQHandler+0x36>
	{
	    if (__DMA1_Stream6_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001c08:	4b4c      	ldr	r3, [pc, #304]	@ (8001d3c <DMA1_Stream6_IRQHandler+0x14c>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d009      	beq.n	8001c26 <DMA1_Stream6_IRQHandler+0x36>
	    {
	    	__DMA1_Stream6_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8001c12:	4b4a      	ldr	r3, [pc, #296]	@ (8001d3c <DMA1_Stream6_IRQHandler+0x14c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c18:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CFEIF6;
 8001c1a:	4b46      	ldr	r3, [pc, #280]	@ (8001d34 <DMA1_Stream6_IRQHandler+0x144>)
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	4a45      	ldr	r2, [pc, #276]	@ (8001d34 <DMA1_Stream6_IRQHandler+0x144>)
 8001c20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c24:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_DMEIF6)
 8001c26:	4b44      	ldr	r3, [pc, #272]	@ (8001d38 <DMA1_Stream6_IRQHandler+0x148>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d00e      	beq.n	8001c50 <DMA1_Stream6_IRQHandler+0x60>
	{
	    if (__DMA1_Stream6_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8001c32:	4b42      	ldr	r3, [pc, #264]	@ (8001d3c <DMA1_Stream6_IRQHandler+0x14c>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d009      	beq.n	8001c50 <DMA1_Stream6_IRQHandler+0x60>
	    {
	    	__DMA1_Stream6_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001c3c:	4b3f      	ldr	r3, [pc, #252]	@ (8001d3c <DMA1_Stream6_IRQHandler+0x14c>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c42:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF6;
 8001c44:	4b3b      	ldr	r3, [pc, #236]	@ (8001d34 <DMA1_Stream6_IRQHandler+0x144>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	4a3a      	ldr	r2, [pc, #232]	@ (8001d34 <DMA1_Stream6_IRQHandler+0x144>)
 8001c4a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c4e:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_TEIF6)
 8001c50:	4b39      	ldr	r3, [pc, #228]	@ (8001d38 <DMA1_Stream6_IRQHandler+0x148>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d00e      	beq.n	8001c7a <DMA1_Stream6_IRQHandler+0x8a>
	{
	    if (__DMA1_Stream6_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001c5c:	4b37      	ldr	r3, [pc, #220]	@ (8001d3c <DMA1_Stream6_IRQHandler+0x14c>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d009      	beq.n	8001c7a <DMA1_Stream6_IRQHandler+0x8a>
	    {
	    	__DMA1_Stream6_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8001c66:	4b35      	ldr	r3, [pc, #212]	@ (8001d3c <DMA1_Stream6_IRQHandler+0x14c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c6c:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CTEIF6;
 8001c6e:	4b31      	ldr	r3, [pc, #196]	@ (8001d34 <DMA1_Stream6_IRQHandler+0x144>)
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	4a30      	ldr	r2, [pc, #192]	@ (8001d34 <DMA1_Stream6_IRQHandler+0x144>)
 8001c74:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001c78:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_HTIF6)
 8001c7a:	4b2f      	ldr	r3, [pc, #188]	@ (8001d38 <DMA1_Stream6_IRQHandler+0x148>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d026      	beq.n	8001cd4 <DMA1_Stream6_IRQHandler+0xe4>
	{
	    if (__DMA1_Stream6_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001c86:	4b2d      	ldr	r3, [pc, #180]	@ (8001d3c <DMA1_Stream6_IRQHandler+0x14c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d021      	beq.n	8001cd4 <DMA1_Stream6_IRQHandler+0xe4>
	    {
	    	__DMA1_Stream6_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001c90:	4b2a      	ldr	r3, [pc, #168]	@ (8001d3c <DMA1_Stream6_IRQHandler+0x14c>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c96:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CHTIF6;
 8001c98:	4b26      	ldr	r3, [pc, #152]	@ (8001d34 <DMA1_Stream6_IRQHandler+0x144>)
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	4a25      	ldr	r2, [pc, #148]	@ (8001d34 <DMA1_Stream6_IRQHandler+0x144>)
 8001c9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001ca2:	60d3      	str	r3, [r2, #12]

	    	if(__DMA1_Stream6_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001ca4:	4b25      	ldr	r3, [pc, #148]	@ (8001d3c <DMA1_Stream6_IRQHandler+0x14c>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001caa:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d110      	bne.n	8001cd4 <DMA1_Stream6_IRQHandler+0xe4>
	    	{
	    		if((__DMA1_Stream6_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001cb2:	4b22      	ldr	r3, [pc, #136]	@ (8001d3c <DMA1_Stream6_IRQHandler+0x14c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d004      	beq.n	8001ccc <DMA1_Stream6_IRQHandler+0xdc>
	    		{
	    			__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001cc2:	4b1e      	ldr	r3, [pc, #120]	@ (8001d3c <DMA1_Stream6_IRQHandler+0x14c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001cc8:	4798      	blx	r3
 8001cca:	e003      	b.n	8001cd4 <DMA1_Stream6_IRQHandler+0xe4>
	    		}
	    		else
	    		{
	    			__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001ccc:	4b1b      	ldr	r3, [pc, #108]	@ (8001d3c <DMA1_Stream6_IRQHandler+0x14c>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cd2:	4798      	blx	r3
	    		}
	    	}
	    }
	}

	if(DMA_HISR & DMA_HISR_TCIF6)
 8001cd4:	4b18      	ldr	r3, [pc, #96]	@ (8001d38 <DMA1_Stream6_IRQHandler+0x148>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d026      	beq.n	8001d2e <DMA1_Stream6_IRQHandler+0x13e>
	{
	    if (__DMA1_Stream6_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001ce0:	4b16      	ldr	r3, [pc, #88]	@ (8001d3c <DMA1_Stream6_IRQHandler+0x14c>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d021      	beq.n	8001d2e <DMA1_Stream6_IRQHandler+0x13e>
	    {
	    	__DMA1_Stream6_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001cea:	4b14      	ldr	r3, [pc, #80]	@ (8001d3c <DMA1_Stream6_IRQHandler+0x14c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cf0:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CTCIF6;
 8001cf2:	4b10      	ldr	r3, [pc, #64]	@ (8001d34 <DMA1_Stream6_IRQHandler+0x144>)
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	4a0f      	ldr	r2, [pc, #60]	@ (8001d34 <DMA1_Stream6_IRQHandler+0x144>)
 8001cf8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001cfc:	60d3      	str	r3, [r2, #12]

	    	if(__DMA1_Stream6_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001cfe:	4b0f      	ldr	r3, [pc, #60]	@ (8001d3c <DMA1_Stream6_IRQHandler+0x14c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d04:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d110      	bne.n	8001d2e <DMA1_Stream6_IRQHandler+0x13e>
	    	{
	    		if((__DMA1_Stream6_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d3c <DMA1_Stream6_IRQHandler+0x14c>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d004      	beq.n	8001d26 <DMA1_Stream6_IRQHandler+0x136>
	    		{
	    			__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001d1c:	4b07      	ldr	r3, [pc, #28]	@ (8001d3c <DMA1_Stream6_IRQHandler+0x14c>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d22:	4798      	blx	r3
	    			__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
	    		}
	    	}
	    }
	}
}
 8001d24:	e003      	b.n	8001d2e <DMA1_Stream6_IRQHandler+0x13e>
	    			__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001d26:	4b05      	ldr	r3, [pc, #20]	@ (8001d3c <DMA1_Stream6_IRQHandler+0x14c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d2c:	4798      	blx	r3
}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	40026000 	.word	0x40026000
 8001d38:	200000dc 	.word	0x200000dc
 8001d3c:	200000b0 	.word	0x200000b0

08001d40 <DMA1_Stream7_IRQHandler>:


void DMA1_Stream7_IRQHandler(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
	DMA_HISR = DMA1 -> HISR;
 8001d44:	4b4f      	ldr	r3, [pc, #316]	@ (8001e84 <DMA1_Stream7_IRQHandler+0x144>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	4a4f      	ldr	r2, [pc, #316]	@ (8001e88 <DMA1_Stream7_IRQHandler+0x148>)
 8001d4a:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF7)
 8001d4c:	4b4e      	ldr	r3, [pc, #312]	@ (8001e88 <DMA1_Stream7_IRQHandler+0x148>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d00e      	beq.n	8001d76 <DMA1_Stream7_IRQHandler+0x36>
	{
	    if (__DMA1_Stream7_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001d58:	4b4c      	ldr	r3, [pc, #304]	@ (8001e8c <DMA1_Stream7_IRQHandler+0x14c>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d009      	beq.n	8001d76 <DMA1_Stream7_IRQHandler+0x36>
	    {
	    	__DMA1_Stream7_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8001d62:	4b4a      	ldr	r3, [pc, #296]	@ (8001e8c <DMA1_Stream7_IRQHandler+0x14c>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d68:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CFEIF7;
 8001d6a:	4b46      	ldr	r3, [pc, #280]	@ (8001e84 <DMA1_Stream7_IRQHandler+0x144>)
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	4a45      	ldr	r2, [pc, #276]	@ (8001e84 <DMA1_Stream7_IRQHandler+0x144>)
 8001d70:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001d74:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_DMEIF7)
 8001d76:	4b44      	ldr	r3, [pc, #272]	@ (8001e88 <DMA1_Stream7_IRQHandler+0x148>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d00e      	beq.n	8001da0 <DMA1_Stream7_IRQHandler+0x60>
	{
	    if (__DMA1_Stream7_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8001d82:	4b42      	ldr	r3, [pc, #264]	@ (8001e8c <DMA1_Stream7_IRQHandler+0x14c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d009      	beq.n	8001da0 <DMA1_Stream7_IRQHandler+0x60>
	    {
	    	__DMA1_Stream7_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001d8c:	4b3f      	ldr	r3, [pc, #252]	@ (8001e8c <DMA1_Stream7_IRQHandler+0x14c>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d92:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF7;
 8001d94:	4b3b      	ldr	r3, [pc, #236]	@ (8001e84 <DMA1_Stream7_IRQHandler+0x144>)
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	4a3a      	ldr	r2, [pc, #232]	@ (8001e84 <DMA1_Stream7_IRQHandler+0x144>)
 8001d9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d9e:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_TEIF7)
 8001da0:	4b39      	ldr	r3, [pc, #228]	@ (8001e88 <DMA1_Stream7_IRQHandler+0x148>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d00e      	beq.n	8001dca <DMA1_Stream7_IRQHandler+0x8a>
	{
	    if (__DMA1_Stream7_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001dac:	4b37      	ldr	r3, [pc, #220]	@ (8001e8c <DMA1_Stream7_IRQHandler+0x14c>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d009      	beq.n	8001dca <DMA1_Stream7_IRQHandler+0x8a>
	    {
	    	__DMA1_Stream7_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8001db6:	4b35      	ldr	r3, [pc, #212]	@ (8001e8c <DMA1_Stream7_IRQHandler+0x14c>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dbc:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CTEIF7;
 8001dbe:	4b31      	ldr	r3, [pc, #196]	@ (8001e84 <DMA1_Stream7_IRQHandler+0x144>)
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	4a30      	ldr	r2, [pc, #192]	@ (8001e84 <DMA1_Stream7_IRQHandler+0x144>)
 8001dc4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001dc8:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_HTIF7)
 8001dca:	4b2f      	ldr	r3, [pc, #188]	@ (8001e88 <DMA1_Stream7_IRQHandler+0x148>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d026      	beq.n	8001e24 <DMA1_Stream7_IRQHandler+0xe4>
	{
	    if (__DMA1_Stream7_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001dd6:	4b2d      	ldr	r3, [pc, #180]	@ (8001e8c <DMA1_Stream7_IRQHandler+0x14c>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d021      	beq.n	8001e24 <DMA1_Stream7_IRQHandler+0xe4>
	    {
	    	__DMA1_Stream7_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001de0:	4b2a      	ldr	r3, [pc, #168]	@ (8001e8c <DMA1_Stream7_IRQHandler+0x14c>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001de6:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CHTIF7;
 8001de8:	4b26      	ldr	r3, [pc, #152]	@ (8001e84 <DMA1_Stream7_IRQHandler+0x144>)
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	4a25      	ldr	r2, [pc, #148]	@ (8001e84 <DMA1_Stream7_IRQHandler+0x144>)
 8001dee:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001df2:	60d3      	str	r3, [r2, #12]

	    	if(__DMA1_Stream7_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001df4:	4b25      	ldr	r3, [pc, #148]	@ (8001e8c <DMA1_Stream7_IRQHandler+0x14c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001dfa:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d110      	bne.n	8001e24 <DMA1_Stream7_IRQHandler+0xe4>
	    	{
	    		if((__DMA1_Stream7_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001e02:	4b22      	ldr	r3, [pc, #136]	@ (8001e8c <DMA1_Stream7_IRQHandler+0x14c>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d004      	beq.n	8001e1c <DMA1_Stream7_IRQHandler+0xdc>
	    		{
	    			__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001e12:	4b1e      	ldr	r3, [pc, #120]	@ (8001e8c <DMA1_Stream7_IRQHandler+0x14c>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e18:	4798      	blx	r3
 8001e1a:	e003      	b.n	8001e24 <DMA1_Stream7_IRQHandler+0xe4>
	    		}
	    		else
	    		{
	    			__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001e1c:	4b1b      	ldr	r3, [pc, #108]	@ (8001e8c <DMA1_Stream7_IRQHandler+0x14c>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e22:	4798      	blx	r3
	    		}
	    	}
	    }
	}

	if(DMA_HISR & DMA_HISR_TCIF7)
 8001e24:	4b18      	ldr	r3, [pc, #96]	@ (8001e88 <DMA1_Stream7_IRQHandler+0x148>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d026      	beq.n	8001e7e <DMA1_Stream7_IRQHandler+0x13e>
	{
	    if (__DMA1_Stream7_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001e30:	4b16      	ldr	r3, [pc, #88]	@ (8001e8c <DMA1_Stream7_IRQHandler+0x14c>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d021      	beq.n	8001e7e <DMA1_Stream7_IRQHandler+0x13e>
	    {
	    	__DMA1_Stream7_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001e3a:	4b14      	ldr	r3, [pc, #80]	@ (8001e8c <DMA1_Stream7_IRQHandler+0x14c>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e40:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CTCIF7;
 8001e42:	4b10      	ldr	r3, [pc, #64]	@ (8001e84 <DMA1_Stream7_IRQHandler+0x144>)
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	4a0f      	ldr	r2, [pc, #60]	@ (8001e84 <DMA1_Stream7_IRQHandler+0x144>)
 8001e48:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001e4c:	60d3      	str	r3, [r2, #12]

	    	if(__DMA1_Stream7_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001e4e:	4b0f      	ldr	r3, [pc, #60]	@ (8001e8c <DMA1_Stream7_IRQHandler+0x14c>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e54:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d110      	bne.n	8001e7e <DMA1_Stream7_IRQHandler+0x13e>
	    	{
	    		if((__DMA1_Stream7_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e8c <DMA1_Stream7_IRQHandler+0x14c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d004      	beq.n	8001e76 <DMA1_Stream7_IRQHandler+0x136>
	    		{
	    			__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001e6c:	4b07      	ldr	r3, [pc, #28]	@ (8001e8c <DMA1_Stream7_IRQHandler+0x14c>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e72:	4798      	blx	r3
	    			__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
	    		}
	    	}
	    }
	}
}
 8001e74:	e003      	b.n	8001e7e <DMA1_Stream7_IRQHandler+0x13e>
	    			__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001e76:	4b05      	ldr	r3, [pc, #20]	@ (8001e8c <DMA1_Stream7_IRQHandler+0x14c>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e7c:	4798      	blx	r3
}
 8001e7e:	bf00      	nop
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	40026000 	.word	0x40026000
 8001e88:	200000dc 	.word	0x200000dc
 8001e8c:	200000b4 	.word	0x200000b4

08001e90 <DMA2_Stream0_IRQHandler>:

void DMA2_Stream0_IRQHandler(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
	DMA_LISR = DMA2 -> LISR;
 8001e94:	4b4f      	ldr	r3, [pc, #316]	@ (8001fd4 <DMA2_Stream0_IRQHandler+0x144>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a4f      	ldr	r2, [pc, #316]	@ (8001fd8 <DMA2_Stream0_IRQHandler+0x148>)
 8001e9a:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF0)
 8001e9c:	4b4e      	ldr	r3, [pc, #312]	@ (8001fd8 <DMA2_Stream0_IRQHandler+0x148>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0301 	and.w	r3, r3, #1
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d00e      	beq.n	8001ec6 <DMA2_Stream0_IRQHandler+0x36>
	{
	    if (__DMA2_Stream0_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001ea8:	4b4c      	ldr	r3, [pc, #304]	@ (8001fdc <DMA2_Stream0_IRQHandler+0x14c>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d009      	beq.n	8001ec6 <DMA2_Stream0_IRQHandler+0x36>
	    {
	    	__DMA2_Stream0_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8001eb2:	4b4a      	ldr	r3, [pc, #296]	@ (8001fdc <DMA2_Stream0_IRQHandler+0x14c>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001eb8:	4798      	blx	r3
	    	DMA2 -> LIFCR |= DMA_LIFCR_CFEIF0;
 8001eba:	4b46      	ldr	r3, [pc, #280]	@ (8001fd4 <DMA2_Stream0_IRQHandler+0x144>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	4a45      	ldr	r2, [pc, #276]	@ (8001fd4 <DMA2_Stream0_IRQHandler+0x144>)
 8001ec0:	f043 0301 	orr.w	r3, r3, #1
 8001ec4:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_DMEIF0)
 8001ec6:	4b44      	ldr	r3, [pc, #272]	@ (8001fd8 <DMA2_Stream0_IRQHandler+0x148>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0304 	and.w	r3, r3, #4
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d00e      	beq.n	8001ef0 <DMA2_Stream0_IRQHandler+0x60>
	{
	    if (__DMA2_Stream0_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8001ed2:	4b42      	ldr	r3, [pc, #264]	@ (8001fdc <DMA2_Stream0_IRQHandler+0x14c>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d009      	beq.n	8001ef0 <DMA2_Stream0_IRQHandler+0x60>
	    {
	    	__DMA2_Stream0_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001edc:	4b3f      	ldr	r3, [pc, #252]	@ (8001fdc <DMA2_Stream0_IRQHandler+0x14c>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee2:	4798      	blx	r3
	    	DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF0;
 8001ee4:	4b3b      	ldr	r3, [pc, #236]	@ (8001fd4 <DMA2_Stream0_IRQHandler+0x144>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	4a3a      	ldr	r2, [pc, #232]	@ (8001fd4 <DMA2_Stream0_IRQHandler+0x144>)
 8001eea:	f043 0304 	orr.w	r3, r3, #4
 8001eee:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_TEIF0)
 8001ef0:	4b39      	ldr	r3, [pc, #228]	@ (8001fd8 <DMA2_Stream0_IRQHandler+0x148>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0308 	and.w	r3, r3, #8
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d00e      	beq.n	8001f1a <DMA2_Stream0_IRQHandler+0x8a>
	{
	    if (__DMA2_Stream0_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001efc:	4b37      	ldr	r3, [pc, #220]	@ (8001fdc <DMA2_Stream0_IRQHandler+0x14c>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d009      	beq.n	8001f1a <DMA2_Stream0_IRQHandler+0x8a>
	    {
	    	__DMA2_Stream0_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8001f06:	4b35      	ldr	r3, [pc, #212]	@ (8001fdc <DMA2_Stream0_IRQHandler+0x14c>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f0c:	4798      	blx	r3
	    	DMA2 -> LIFCR |= DMA_LIFCR_CTEIF0;
 8001f0e:	4b31      	ldr	r3, [pc, #196]	@ (8001fd4 <DMA2_Stream0_IRQHandler+0x144>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	4a30      	ldr	r2, [pc, #192]	@ (8001fd4 <DMA2_Stream0_IRQHandler+0x144>)
 8001f14:	f043 0308 	orr.w	r3, r3, #8
 8001f18:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_HTIF0)
 8001f1a:	4b2f      	ldr	r3, [pc, #188]	@ (8001fd8 <DMA2_Stream0_IRQHandler+0x148>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0310 	and.w	r3, r3, #16
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d026      	beq.n	8001f74 <DMA2_Stream0_IRQHandler+0xe4>
	{
	    if (__DMA2_Stream0_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001f26:	4b2d      	ldr	r3, [pc, #180]	@ (8001fdc <DMA2_Stream0_IRQHandler+0x14c>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d021      	beq.n	8001f74 <DMA2_Stream0_IRQHandler+0xe4>
	    {
	    	__DMA2_Stream0_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001f30:	4b2a      	ldr	r3, [pc, #168]	@ (8001fdc <DMA2_Stream0_IRQHandler+0x14c>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f36:	4798      	blx	r3
	    	DMA2 -> LIFCR |= DMA_LIFCR_CHTIF0;
 8001f38:	4b26      	ldr	r3, [pc, #152]	@ (8001fd4 <DMA2_Stream0_IRQHandler+0x144>)
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	4a25      	ldr	r2, [pc, #148]	@ (8001fd4 <DMA2_Stream0_IRQHandler+0x144>)
 8001f3e:	f043 0310 	orr.w	r3, r3, #16
 8001f42:	6093      	str	r3, [r2, #8]

	    	if(__DMA2_Stream0_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001f44:	4b25      	ldr	r3, [pc, #148]	@ (8001fdc <DMA2_Stream0_IRQHandler+0x14c>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f4a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d110      	bne.n	8001f74 <DMA2_Stream0_IRQHandler+0xe4>
	    	{
	    		if((__DMA2_Stream0_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001f52:	4b22      	ldr	r3, [pc, #136]	@ (8001fdc <DMA2_Stream0_IRQHandler+0x14c>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d004      	beq.n	8001f6c <DMA2_Stream0_IRQHandler+0xdc>
	    		{
	    			__DMA2_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001f62:	4b1e      	ldr	r3, [pc, #120]	@ (8001fdc <DMA2_Stream0_IRQHandler+0x14c>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f68:	4798      	blx	r3
 8001f6a:	e003      	b.n	8001f74 <DMA2_Stream0_IRQHandler+0xe4>
	    		}
	    		else
	    		{
	    			__DMA2_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001f6c:	4b1b      	ldr	r3, [pc, #108]	@ (8001fdc <DMA2_Stream0_IRQHandler+0x14c>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f72:	4798      	blx	r3
	    		}
	    	}
	    }
	}

	if(DMA_LISR & DMA_LISR_TCIF0)
 8001f74:	4b18      	ldr	r3, [pc, #96]	@ (8001fd8 <DMA2_Stream0_IRQHandler+0x148>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0320 	and.w	r3, r3, #32
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d026      	beq.n	8001fce <DMA2_Stream0_IRQHandler+0x13e>
	{
	    if (__DMA2_Stream0_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001f80:	4b16      	ldr	r3, [pc, #88]	@ (8001fdc <DMA2_Stream0_IRQHandler+0x14c>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d021      	beq.n	8001fce <DMA2_Stream0_IRQHandler+0x13e>
	    {
	    	__DMA2_Stream0_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001f8a:	4b14      	ldr	r3, [pc, #80]	@ (8001fdc <DMA2_Stream0_IRQHandler+0x14c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f90:	4798      	blx	r3
	    	DMA2 -> LIFCR |= DMA_LIFCR_CTCIF0;
 8001f92:	4b10      	ldr	r3, [pc, #64]	@ (8001fd4 <DMA2_Stream0_IRQHandler+0x144>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	4a0f      	ldr	r2, [pc, #60]	@ (8001fd4 <DMA2_Stream0_IRQHandler+0x144>)
 8001f98:	f043 0320 	orr.w	r3, r3, #32
 8001f9c:	6093      	str	r3, [r2, #8]

	    	if(__DMA2_Stream0_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001f9e:	4b0f      	ldr	r3, [pc, #60]	@ (8001fdc <DMA2_Stream0_IRQHandler+0x14c>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fa4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d110      	bne.n	8001fce <DMA2_Stream0_IRQHandler+0x13e>
	    	{
	    		if((__DMA2_Stream0_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001fac:	4b0b      	ldr	r3, [pc, #44]	@ (8001fdc <DMA2_Stream0_IRQHandler+0x14c>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d004      	beq.n	8001fc6 <DMA2_Stream0_IRQHandler+0x136>
	    		{
	    			__DMA2_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001fbc:	4b07      	ldr	r3, [pc, #28]	@ (8001fdc <DMA2_Stream0_IRQHandler+0x14c>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fc2:	4798      	blx	r3
	    			__DMA2_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
	    		}
	    	}
	    }
	}
}
 8001fc4:	e003      	b.n	8001fce <DMA2_Stream0_IRQHandler+0x13e>
	    			__DMA2_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001fc6:	4b05      	ldr	r3, [pc, #20]	@ (8001fdc <DMA2_Stream0_IRQHandler+0x14c>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fcc:	4798      	blx	r3
}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40026400 	.word	0x40026400
 8001fd8:	200000d8 	.word	0x200000d8
 8001fdc:	200000b8 	.word	0x200000b8

08001fe0 <DMA2_Stream1_IRQHandler>:

void DMA2_Stream1_IRQHandler(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
	DMA_LISR = DMA2 -> LISR;
 8001fe4:	4b4f      	ldr	r3, [pc, #316]	@ (8002124 <DMA2_Stream1_IRQHandler+0x144>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a4f      	ldr	r2, [pc, #316]	@ (8002128 <DMA2_Stream1_IRQHandler+0x148>)
 8001fea:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF1)
 8001fec:	4b4e      	ldr	r3, [pc, #312]	@ (8002128 <DMA2_Stream1_IRQHandler+0x148>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d00e      	beq.n	8002016 <DMA2_Stream1_IRQHandler+0x36>
	{
	    if (__DMA2_Stream1_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001ff8:	4b4c      	ldr	r3, [pc, #304]	@ (800212c <DMA2_Stream1_IRQHandler+0x14c>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d009      	beq.n	8002016 <DMA2_Stream1_IRQHandler+0x36>
	    {
	    	__DMA2_Stream1_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8002002:	4b4a      	ldr	r3, [pc, #296]	@ (800212c <DMA2_Stream1_IRQHandler+0x14c>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002008:	4798      	blx	r3
	    	DMA2 -> LIFCR |= DMA_LIFCR_CFEIF1;
 800200a:	4b46      	ldr	r3, [pc, #280]	@ (8002124 <DMA2_Stream1_IRQHandler+0x144>)
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	4a45      	ldr	r2, [pc, #276]	@ (8002124 <DMA2_Stream1_IRQHandler+0x144>)
 8002010:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002014:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_DMEIF1)
 8002016:	4b44      	ldr	r3, [pc, #272]	@ (8002128 <DMA2_Stream1_IRQHandler+0x148>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00e      	beq.n	8002040 <DMA2_Stream1_IRQHandler+0x60>
	{
	    if (__DMA2_Stream1_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8002022:	4b42      	ldr	r3, [pc, #264]	@ (800212c <DMA2_Stream1_IRQHandler+0x14c>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002028:	2b00      	cmp	r3, #0
 800202a:	d009      	beq.n	8002040 <DMA2_Stream1_IRQHandler+0x60>
	    {
	    	__DMA2_Stream1_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 800202c:	4b3f      	ldr	r3, [pc, #252]	@ (800212c <DMA2_Stream1_IRQHandler+0x14c>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002032:	4798      	blx	r3
	    	DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF1;
 8002034:	4b3b      	ldr	r3, [pc, #236]	@ (8002124 <DMA2_Stream1_IRQHandler+0x144>)
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	4a3a      	ldr	r2, [pc, #232]	@ (8002124 <DMA2_Stream1_IRQHandler+0x144>)
 800203a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800203e:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_TEIF1)
 8002040:	4b39      	ldr	r3, [pc, #228]	@ (8002128 <DMA2_Stream1_IRQHandler+0x148>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002048:	2b00      	cmp	r3, #0
 800204a:	d00e      	beq.n	800206a <DMA2_Stream1_IRQHandler+0x8a>
	{
	    if (__DMA2_Stream1_Config__ -> ISR_Routines.Transfer_Error_ISR)
 800204c:	4b37      	ldr	r3, [pc, #220]	@ (800212c <DMA2_Stream1_IRQHandler+0x14c>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002052:	2b00      	cmp	r3, #0
 8002054:	d009      	beq.n	800206a <DMA2_Stream1_IRQHandler+0x8a>
	    {
	    	__DMA2_Stream1_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8002056:	4b35      	ldr	r3, [pc, #212]	@ (800212c <DMA2_Stream1_IRQHandler+0x14c>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800205c:	4798      	blx	r3
	    	DMA2 -> LIFCR |= DMA_LIFCR_CTEIF1;
 800205e:	4b31      	ldr	r3, [pc, #196]	@ (8002124 <DMA2_Stream1_IRQHandler+0x144>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	4a30      	ldr	r2, [pc, #192]	@ (8002124 <DMA2_Stream1_IRQHandler+0x144>)
 8002064:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002068:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_HTIF1)
 800206a:	4b2f      	ldr	r3, [pc, #188]	@ (8002128 <DMA2_Stream1_IRQHandler+0x148>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002072:	2b00      	cmp	r3, #0
 8002074:	d026      	beq.n	80020c4 <DMA2_Stream1_IRQHandler+0xe4>
	{
	    if (__DMA2_Stream1_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8002076:	4b2d      	ldr	r3, [pc, #180]	@ (800212c <DMA2_Stream1_IRQHandler+0x14c>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800207c:	2b00      	cmp	r3, #0
 800207e:	d021      	beq.n	80020c4 <DMA2_Stream1_IRQHandler+0xe4>
	    {
	    	__DMA2_Stream1_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8002080:	4b2a      	ldr	r3, [pc, #168]	@ (800212c <DMA2_Stream1_IRQHandler+0x14c>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002086:	4798      	blx	r3
	    	DMA2 -> LIFCR |= DMA_LIFCR_CHTIF1;
 8002088:	4b26      	ldr	r3, [pc, #152]	@ (8002124 <DMA2_Stream1_IRQHandler+0x144>)
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	4a25      	ldr	r2, [pc, #148]	@ (8002124 <DMA2_Stream1_IRQHandler+0x144>)
 800208e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002092:	6093      	str	r3, [r2, #8]

	    	if(__DMA2_Stream1_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8002094:	4b25      	ldr	r3, [pc, #148]	@ (800212c <DMA2_Stream1_IRQHandler+0x14c>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800209a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800209e:	4293      	cmp	r3, r2
 80020a0:	d110      	bne.n	80020c4 <DMA2_Stream1_IRQHandler+0xe4>
	    	{
	    		if((__DMA2_Stream1_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80020a2:	4b22      	ldr	r3, [pc, #136]	@ (800212c <DMA2_Stream1_IRQHandler+0x14c>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d004      	beq.n	80020bc <DMA2_Stream1_IRQHandler+0xdc>
	    		{
	    			__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80020b2:	4b1e      	ldr	r3, [pc, #120]	@ (800212c <DMA2_Stream1_IRQHandler+0x14c>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020b8:	4798      	blx	r3
 80020ba:	e003      	b.n	80020c4 <DMA2_Stream1_IRQHandler+0xe4>
	    		}
	    		else
	    		{
	    			__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80020bc:	4b1b      	ldr	r3, [pc, #108]	@ (800212c <DMA2_Stream1_IRQHandler+0x14c>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020c2:	4798      	blx	r3
	    		}
	    	}
	    }
	}

	if(DMA_LISR & DMA_LISR_TCIF1)
 80020c4:	4b18      	ldr	r3, [pc, #96]	@ (8002128 <DMA2_Stream1_IRQHandler+0x148>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d026      	beq.n	800211e <DMA2_Stream1_IRQHandler+0x13e>
	{
	    if (__DMA2_Stream1_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 80020d0:	4b16      	ldr	r3, [pc, #88]	@ (800212c <DMA2_Stream1_IRQHandler+0x14c>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d021      	beq.n	800211e <DMA2_Stream1_IRQHandler+0x13e>
	    {
	    	__DMA2_Stream1_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80020da:	4b14      	ldr	r3, [pc, #80]	@ (800212c <DMA2_Stream1_IRQHandler+0x14c>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020e0:	4798      	blx	r3
	    	DMA2 -> LIFCR |= DMA_LIFCR_CTCIF1;
 80020e2:	4b10      	ldr	r3, [pc, #64]	@ (8002124 <DMA2_Stream1_IRQHandler+0x144>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	4a0f      	ldr	r2, [pc, #60]	@ (8002124 <DMA2_Stream1_IRQHandler+0x144>)
 80020e8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80020ec:	6093      	str	r3, [r2, #8]

	    	if(__DMA2_Stream1_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80020ee:	4b0f      	ldr	r3, [pc, #60]	@ (800212c <DMA2_Stream1_IRQHandler+0x14c>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020f4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d110      	bne.n	800211e <DMA2_Stream1_IRQHandler+0x13e>
	    	{
	    		if((__DMA2_Stream1_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80020fc:	4b0b      	ldr	r3, [pc, #44]	@ (800212c <DMA2_Stream1_IRQHandler+0x14c>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d004      	beq.n	8002116 <DMA2_Stream1_IRQHandler+0x136>
	    		{
	    			__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800210c:	4b07      	ldr	r3, [pc, #28]	@ (800212c <DMA2_Stream1_IRQHandler+0x14c>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002112:	4798      	blx	r3
	    			__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
	    		}
	    	}
	    }
	}
}
 8002114:	e003      	b.n	800211e <DMA2_Stream1_IRQHandler+0x13e>
	    			__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8002116:	4b05      	ldr	r3, [pc, #20]	@ (800212c <DMA2_Stream1_IRQHandler+0x14c>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800211c:	4798      	blx	r3
}
 800211e:	bf00      	nop
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	40026400 	.word	0x40026400
 8002128:	200000d8 	.word	0x200000d8
 800212c:	200000bc 	.word	0x200000bc

08002130 <DMA2_Stream2_IRQHandler>:


void DMA2_Stream2_IRQHandler(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
	DMA_LISR = DMA2 -> LISR;
 8002134:	4b4f      	ldr	r3, [pc, #316]	@ (8002274 <DMA2_Stream2_IRQHandler+0x144>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a4f      	ldr	r2, [pc, #316]	@ (8002278 <DMA2_Stream2_IRQHandler+0x148>)
 800213a:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF2)
 800213c:	4b4e      	ldr	r3, [pc, #312]	@ (8002278 <DMA2_Stream2_IRQHandler+0x148>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d00e      	beq.n	8002166 <DMA2_Stream2_IRQHandler+0x36>
	{
	    if (__DMA2_Stream2_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8002148:	4b4c      	ldr	r3, [pc, #304]	@ (800227c <DMA2_Stream2_IRQHandler+0x14c>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800214e:	2b00      	cmp	r3, #0
 8002150:	d009      	beq.n	8002166 <DMA2_Stream2_IRQHandler+0x36>
	    {
	    	__DMA2_Stream2_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8002152:	4b4a      	ldr	r3, [pc, #296]	@ (800227c <DMA2_Stream2_IRQHandler+0x14c>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002158:	4798      	blx	r3
	    	DMA2 -> LIFCR |= DMA_LIFCR_CFEIF2;
 800215a:	4b46      	ldr	r3, [pc, #280]	@ (8002274 <DMA2_Stream2_IRQHandler+0x144>)
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	4a45      	ldr	r2, [pc, #276]	@ (8002274 <DMA2_Stream2_IRQHandler+0x144>)
 8002160:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002164:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_DMEIF2)
 8002166:	4b44      	ldr	r3, [pc, #272]	@ (8002278 <DMA2_Stream2_IRQHandler+0x148>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d00e      	beq.n	8002190 <DMA2_Stream2_IRQHandler+0x60>
	{
	    if (__DMA2_Stream2_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8002172:	4b42      	ldr	r3, [pc, #264]	@ (800227c <DMA2_Stream2_IRQHandler+0x14c>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002178:	2b00      	cmp	r3, #0
 800217a:	d009      	beq.n	8002190 <DMA2_Stream2_IRQHandler+0x60>
	    {
	    	__DMA2_Stream2_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 800217c:	4b3f      	ldr	r3, [pc, #252]	@ (800227c <DMA2_Stream2_IRQHandler+0x14c>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002182:	4798      	blx	r3
	    	DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF2;
 8002184:	4b3b      	ldr	r3, [pc, #236]	@ (8002274 <DMA2_Stream2_IRQHandler+0x144>)
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	4a3a      	ldr	r2, [pc, #232]	@ (8002274 <DMA2_Stream2_IRQHandler+0x144>)
 800218a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800218e:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_TEIF2)
 8002190:	4b39      	ldr	r3, [pc, #228]	@ (8002278 <DMA2_Stream2_IRQHandler+0x148>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d00e      	beq.n	80021ba <DMA2_Stream2_IRQHandler+0x8a>
	{
	    if (__DMA2_Stream2_Config__ -> ISR_Routines.Transfer_Error_ISR)
 800219c:	4b37      	ldr	r3, [pc, #220]	@ (800227c <DMA2_Stream2_IRQHandler+0x14c>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d009      	beq.n	80021ba <DMA2_Stream2_IRQHandler+0x8a>
	    {
	    	__DMA2_Stream2_Config__ ->ISR_Routines.Transfer_Error_ISR();
 80021a6:	4b35      	ldr	r3, [pc, #212]	@ (800227c <DMA2_Stream2_IRQHandler+0x14c>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ac:	4798      	blx	r3
	    	DMA2 -> LIFCR |= DMA_LIFCR_CTEIF2;
 80021ae:	4b31      	ldr	r3, [pc, #196]	@ (8002274 <DMA2_Stream2_IRQHandler+0x144>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	4a30      	ldr	r2, [pc, #192]	@ (8002274 <DMA2_Stream2_IRQHandler+0x144>)
 80021b4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80021b8:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_HTIF2)
 80021ba:	4b2f      	ldr	r3, [pc, #188]	@ (8002278 <DMA2_Stream2_IRQHandler+0x148>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d026      	beq.n	8002214 <DMA2_Stream2_IRQHandler+0xe4>
	{
	    if (__DMA2_Stream2_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 80021c6:	4b2d      	ldr	r3, [pc, #180]	@ (800227c <DMA2_Stream2_IRQHandler+0x14c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d021      	beq.n	8002214 <DMA2_Stream2_IRQHandler+0xe4>
	    {
	    	__DMA2_Stream2_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80021d0:	4b2a      	ldr	r3, [pc, #168]	@ (800227c <DMA2_Stream2_IRQHandler+0x14c>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021d6:	4798      	blx	r3
	    	DMA2 -> LIFCR |= DMA_LIFCR_CHTIF2;
 80021d8:	4b26      	ldr	r3, [pc, #152]	@ (8002274 <DMA2_Stream2_IRQHandler+0x144>)
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	4a25      	ldr	r2, [pc, #148]	@ (8002274 <DMA2_Stream2_IRQHandler+0x144>)
 80021de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80021e2:	6093      	str	r3, [r2, #8]

	    	if(__DMA2_Stream2_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80021e4:	4b25      	ldr	r3, [pc, #148]	@ (800227c <DMA2_Stream2_IRQHandler+0x14c>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021ea:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d110      	bne.n	8002214 <DMA2_Stream2_IRQHandler+0xe4>
	    	{
	    		if((__DMA2_Stream2_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80021f2:	4b22      	ldr	r3, [pc, #136]	@ (800227c <DMA2_Stream2_IRQHandler+0x14c>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d004      	beq.n	800220c <DMA2_Stream2_IRQHandler+0xdc>
	    		{
	    			__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8002202:	4b1e      	ldr	r3, [pc, #120]	@ (800227c <DMA2_Stream2_IRQHandler+0x14c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002208:	4798      	blx	r3
 800220a:	e003      	b.n	8002214 <DMA2_Stream2_IRQHandler+0xe4>
	    		}
	    		else
	    		{
	    			__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800220c:	4b1b      	ldr	r3, [pc, #108]	@ (800227c <DMA2_Stream2_IRQHandler+0x14c>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002212:	4798      	blx	r3
	    		}
	    	}
	    }
	}

	if(DMA_LISR & DMA_LISR_TCIF2)
 8002214:	4b18      	ldr	r3, [pc, #96]	@ (8002278 <DMA2_Stream2_IRQHandler+0x148>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d026      	beq.n	800226e <DMA2_Stream2_IRQHandler+0x13e>
	{
	    if (__DMA2_Stream2_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8002220:	4b16      	ldr	r3, [pc, #88]	@ (800227c <DMA2_Stream2_IRQHandler+0x14c>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002226:	2b00      	cmp	r3, #0
 8002228:	d021      	beq.n	800226e <DMA2_Stream2_IRQHandler+0x13e>
	    {
	    	__DMA2_Stream2_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 800222a:	4b14      	ldr	r3, [pc, #80]	@ (800227c <DMA2_Stream2_IRQHandler+0x14c>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002230:	4798      	blx	r3
	    	DMA2 -> LIFCR |= DMA_LIFCR_CTCIF2;
 8002232:	4b10      	ldr	r3, [pc, #64]	@ (8002274 <DMA2_Stream2_IRQHandler+0x144>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	4a0f      	ldr	r2, [pc, #60]	@ (8002274 <DMA2_Stream2_IRQHandler+0x144>)
 8002238:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800223c:	6093      	str	r3, [r2, #8]

	    	if(__DMA2_Stream2_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800223e:	4b0f      	ldr	r3, [pc, #60]	@ (800227c <DMA2_Stream2_IRQHandler+0x14c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002244:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002248:	4293      	cmp	r3, r2
 800224a:	d110      	bne.n	800226e <DMA2_Stream2_IRQHandler+0x13e>
	    	{
	    		if((__DMA2_Stream2_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800224c:	4b0b      	ldr	r3, [pc, #44]	@ (800227c <DMA2_Stream2_IRQHandler+0x14c>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d004      	beq.n	8002266 <DMA2_Stream2_IRQHandler+0x136>
	    		{
	    			__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800225c:	4b07      	ldr	r3, [pc, #28]	@ (800227c <DMA2_Stream2_IRQHandler+0x14c>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002262:	4798      	blx	r3
	    			__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
	    		}
	    	}
	    }
	}
}
 8002264:	e003      	b.n	800226e <DMA2_Stream2_IRQHandler+0x13e>
	    			__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8002266:	4b05      	ldr	r3, [pc, #20]	@ (800227c <DMA2_Stream2_IRQHandler+0x14c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800226c:	4798      	blx	r3
}
 800226e:	bf00      	nop
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	40026400 	.word	0x40026400
 8002278:	200000d8 	.word	0x200000d8
 800227c:	200000c0 	.word	0x200000c0

08002280 <DMA2_Stream3_IRQHandler>:

void DMA2_Stream3_IRQHandler(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
	DMA_LISR = DMA2 -> LISR;
 8002284:	4b4f      	ldr	r3, [pc, #316]	@ (80023c4 <DMA2_Stream3_IRQHandler+0x144>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a4f      	ldr	r2, [pc, #316]	@ (80023c8 <DMA2_Stream3_IRQHandler+0x148>)
 800228a:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF3)
 800228c:	4b4e      	ldr	r3, [pc, #312]	@ (80023c8 <DMA2_Stream3_IRQHandler+0x148>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d00e      	beq.n	80022b6 <DMA2_Stream3_IRQHandler+0x36>
	{
	    if (__DMA2_Stream3_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8002298:	4b4c      	ldr	r3, [pc, #304]	@ (80023cc <DMA2_Stream3_IRQHandler+0x14c>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d009      	beq.n	80022b6 <DMA2_Stream3_IRQHandler+0x36>
	    {
	    	__DMA2_Stream3_Config__ ->ISR_Routines.FIFO_Error_ISR();
 80022a2:	4b4a      	ldr	r3, [pc, #296]	@ (80023cc <DMA2_Stream3_IRQHandler+0x14c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022a8:	4798      	blx	r3
	    	DMA2 -> LIFCR |= DMA_LIFCR_CFEIF3;
 80022aa:	4b46      	ldr	r3, [pc, #280]	@ (80023c4 <DMA2_Stream3_IRQHandler+0x144>)
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	4a45      	ldr	r2, [pc, #276]	@ (80023c4 <DMA2_Stream3_IRQHandler+0x144>)
 80022b0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80022b4:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_DMEIF3)
 80022b6:	4b44      	ldr	r3, [pc, #272]	@ (80023c8 <DMA2_Stream3_IRQHandler+0x148>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d00e      	beq.n	80022e0 <DMA2_Stream3_IRQHandler+0x60>
	{
	    if (__DMA2_Stream3_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 80022c2:	4b42      	ldr	r3, [pc, #264]	@ (80023cc <DMA2_Stream3_IRQHandler+0x14c>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d009      	beq.n	80022e0 <DMA2_Stream3_IRQHandler+0x60>
	    {
	    	__DMA2_Stream3_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 80022cc:	4b3f      	ldr	r3, [pc, #252]	@ (80023cc <DMA2_Stream3_IRQHandler+0x14c>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d2:	4798      	blx	r3
	    	DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF3;
 80022d4:	4b3b      	ldr	r3, [pc, #236]	@ (80023c4 <DMA2_Stream3_IRQHandler+0x144>)
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	4a3a      	ldr	r2, [pc, #232]	@ (80023c4 <DMA2_Stream3_IRQHandler+0x144>)
 80022da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022de:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_TEIF3)
 80022e0:	4b39      	ldr	r3, [pc, #228]	@ (80023c8 <DMA2_Stream3_IRQHandler+0x148>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d00e      	beq.n	800230a <DMA2_Stream3_IRQHandler+0x8a>
	{
	    if (__DMA2_Stream3_Config__ -> ISR_Routines.Transfer_Error_ISR)
 80022ec:	4b37      	ldr	r3, [pc, #220]	@ (80023cc <DMA2_Stream3_IRQHandler+0x14c>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d009      	beq.n	800230a <DMA2_Stream3_IRQHandler+0x8a>
	    {
	    	__DMA2_Stream3_Config__ ->ISR_Routines.Transfer_Error_ISR();
 80022f6:	4b35      	ldr	r3, [pc, #212]	@ (80023cc <DMA2_Stream3_IRQHandler+0x14c>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022fc:	4798      	blx	r3
	    	DMA2 -> LIFCR |= DMA_LIFCR_CTEIF3;
 80022fe:	4b31      	ldr	r3, [pc, #196]	@ (80023c4 <DMA2_Stream3_IRQHandler+0x144>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	4a30      	ldr	r2, [pc, #192]	@ (80023c4 <DMA2_Stream3_IRQHandler+0x144>)
 8002304:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002308:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_HTIF3)
 800230a:	4b2f      	ldr	r3, [pc, #188]	@ (80023c8 <DMA2_Stream3_IRQHandler+0x148>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d026      	beq.n	8002364 <DMA2_Stream3_IRQHandler+0xe4>
	{
	    if (__DMA2_Stream3_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8002316:	4b2d      	ldr	r3, [pc, #180]	@ (80023cc <DMA2_Stream3_IRQHandler+0x14c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800231c:	2b00      	cmp	r3, #0
 800231e:	d021      	beq.n	8002364 <DMA2_Stream3_IRQHandler+0xe4>
	    {
	    	__DMA2_Stream3_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8002320:	4b2a      	ldr	r3, [pc, #168]	@ (80023cc <DMA2_Stream3_IRQHandler+0x14c>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002326:	4798      	blx	r3
	    	DMA2 -> LIFCR |= DMA_LIFCR_CHTIF3;
 8002328:	4b26      	ldr	r3, [pc, #152]	@ (80023c4 <DMA2_Stream3_IRQHandler+0x144>)
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	4a25      	ldr	r2, [pc, #148]	@ (80023c4 <DMA2_Stream3_IRQHandler+0x144>)
 800232e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002332:	6093      	str	r3, [r2, #8]

	    	if(__DMA2_Stream3_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8002334:	4b25      	ldr	r3, [pc, #148]	@ (80023cc <DMA2_Stream3_IRQHandler+0x14c>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800233a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800233e:	4293      	cmp	r3, r2
 8002340:	d110      	bne.n	8002364 <DMA2_Stream3_IRQHandler+0xe4>
	    	{
	    		if((__DMA2_Stream3_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8002342:	4b22      	ldr	r3, [pc, #136]	@ (80023cc <DMA2_Stream3_IRQHandler+0x14c>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d004      	beq.n	800235c <DMA2_Stream3_IRQHandler+0xdc>
	    		{
	    			__DMA2_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8002352:	4b1e      	ldr	r3, [pc, #120]	@ (80023cc <DMA2_Stream3_IRQHandler+0x14c>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002358:	4798      	blx	r3
 800235a:	e003      	b.n	8002364 <DMA2_Stream3_IRQHandler+0xe4>
	    		}
	    		else
	    		{
	    			__DMA2_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800235c:	4b1b      	ldr	r3, [pc, #108]	@ (80023cc <DMA2_Stream3_IRQHandler+0x14c>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002362:	4798      	blx	r3
	    		}
	    	}
	    }
	}

	if(DMA_LISR & DMA_LISR_TCIF3)
 8002364:	4b18      	ldr	r3, [pc, #96]	@ (80023c8 <DMA2_Stream3_IRQHandler+0x148>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d026      	beq.n	80023be <DMA2_Stream3_IRQHandler+0x13e>
	{
	    if (__DMA2_Stream3_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8002370:	4b16      	ldr	r3, [pc, #88]	@ (80023cc <DMA2_Stream3_IRQHandler+0x14c>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002376:	2b00      	cmp	r3, #0
 8002378:	d021      	beq.n	80023be <DMA2_Stream3_IRQHandler+0x13e>
	    {
	    	__DMA2_Stream3_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 800237a:	4b14      	ldr	r3, [pc, #80]	@ (80023cc <DMA2_Stream3_IRQHandler+0x14c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002380:	4798      	blx	r3
	    	DMA2 -> LIFCR |= DMA_LIFCR_CTCIF3;
 8002382:	4b10      	ldr	r3, [pc, #64]	@ (80023c4 <DMA2_Stream3_IRQHandler+0x144>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	4a0f      	ldr	r2, [pc, #60]	@ (80023c4 <DMA2_Stream3_IRQHandler+0x144>)
 8002388:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800238c:	6093      	str	r3, [r2, #8]

	    	if(__DMA2_Stream3_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800238e:	4b0f      	ldr	r3, [pc, #60]	@ (80023cc <DMA2_Stream3_IRQHandler+0x14c>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002394:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002398:	4293      	cmp	r3, r2
 800239a:	d110      	bne.n	80023be <DMA2_Stream3_IRQHandler+0x13e>
	    	{
	    		if((__DMA2_Stream3_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800239c:	4b0b      	ldr	r3, [pc, #44]	@ (80023cc <DMA2_Stream3_IRQHandler+0x14c>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d004      	beq.n	80023b6 <DMA2_Stream3_IRQHandler+0x136>
	    		{
	    			__DMA2_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80023ac:	4b07      	ldr	r3, [pc, #28]	@ (80023cc <DMA2_Stream3_IRQHandler+0x14c>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023b2:	4798      	blx	r3
	    			__DMA2_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
	    		}
	    	}
	    }
	}
}
 80023b4:	e003      	b.n	80023be <DMA2_Stream3_IRQHandler+0x13e>
	    			__DMA2_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80023b6:	4b05      	ldr	r3, [pc, #20]	@ (80023cc <DMA2_Stream3_IRQHandler+0x14c>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023bc:	4798      	blx	r3
}
 80023be:	bf00      	nop
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	40026400 	.word	0x40026400
 80023c8:	200000d8 	.word	0x200000d8
 80023cc:	200000c4 	.word	0x200000c4

080023d0 <DMA2_Stream4_IRQHandler>:

void DMA2_Stream4_IRQHandler(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
	DMA_HISR = DMA2 -> HISR;
 80023d4:	4b4f      	ldr	r3, [pc, #316]	@ (8002514 <DMA2_Stream4_IRQHandler+0x144>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	4a4f      	ldr	r2, [pc, #316]	@ (8002518 <DMA2_Stream4_IRQHandler+0x148>)
 80023da:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF4)
 80023dc:	4b4e      	ldr	r3, [pc, #312]	@ (8002518 <DMA2_Stream4_IRQHandler+0x148>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0301 	and.w	r3, r3, #1
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d00e      	beq.n	8002406 <DMA2_Stream4_IRQHandler+0x36>
	{
	    if (__DMA2_Stream4_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80023e8:	4b4c      	ldr	r3, [pc, #304]	@ (800251c <DMA2_Stream4_IRQHandler+0x14c>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d009      	beq.n	8002406 <DMA2_Stream4_IRQHandler+0x36>
	    {
	    	__DMA2_Stream4_Config__ ->ISR_Routines.FIFO_Error_ISR();
 80023f2:	4b4a      	ldr	r3, [pc, #296]	@ (800251c <DMA2_Stream4_IRQHandler+0x14c>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023f8:	4798      	blx	r3
	    	DMA2 -> LIFCR |= DMA_HIFCR_CFEIF5;
 80023fa:	4b46      	ldr	r3, [pc, #280]	@ (8002514 <DMA2_Stream4_IRQHandler+0x144>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	4a45      	ldr	r2, [pc, #276]	@ (8002514 <DMA2_Stream4_IRQHandler+0x144>)
 8002400:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002404:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_HISR & DMA_HISR_DMEIF4)
 8002406:	4b44      	ldr	r3, [pc, #272]	@ (8002518 <DMA2_Stream4_IRQHandler+0x148>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0304 	and.w	r3, r3, #4
 800240e:	2b00      	cmp	r3, #0
 8002410:	d00e      	beq.n	8002430 <DMA2_Stream4_IRQHandler+0x60>
	{
	    if (__DMA2_Stream4_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8002412:	4b42      	ldr	r3, [pc, #264]	@ (800251c <DMA2_Stream4_IRQHandler+0x14c>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002418:	2b00      	cmp	r3, #0
 800241a:	d009      	beq.n	8002430 <DMA2_Stream4_IRQHandler+0x60>
	    {
	    	__DMA2_Stream4_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 800241c:	4b3f      	ldr	r3, [pc, #252]	@ (800251c <DMA2_Stream4_IRQHandler+0x14c>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002422:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF4;
 8002424:	4b3b      	ldr	r3, [pc, #236]	@ (8002514 <DMA2_Stream4_IRQHandler+0x144>)
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	4a3a      	ldr	r2, [pc, #232]	@ (8002514 <DMA2_Stream4_IRQHandler+0x144>)
 800242a:	f043 0304 	orr.w	r3, r3, #4
 800242e:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_TEIF4)
 8002430:	4b39      	ldr	r3, [pc, #228]	@ (8002518 <DMA2_Stream4_IRQHandler+0x148>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0308 	and.w	r3, r3, #8
 8002438:	2b00      	cmp	r3, #0
 800243a:	d00e      	beq.n	800245a <DMA2_Stream4_IRQHandler+0x8a>
	{
	    if (__DMA2_Stream4_Config__ -> ISR_Routines.Transfer_Error_ISR)
 800243c:	4b37      	ldr	r3, [pc, #220]	@ (800251c <DMA2_Stream4_IRQHandler+0x14c>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002442:	2b00      	cmp	r3, #0
 8002444:	d009      	beq.n	800245a <DMA2_Stream4_IRQHandler+0x8a>
	    {
	    	__DMA2_Stream4_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8002446:	4b35      	ldr	r3, [pc, #212]	@ (800251c <DMA2_Stream4_IRQHandler+0x14c>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800244c:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CTEIF4;
 800244e:	4b31      	ldr	r3, [pc, #196]	@ (8002514 <DMA2_Stream4_IRQHandler+0x144>)
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	4a30      	ldr	r2, [pc, #192]	@ (8002514 <DMA2_Stream4_IRQHandler+0x144>)
 8002454:	f043 0308 	orr.w	r3, r3, #8
 8002458:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_HTIF4)
 800245a:	4b2f      	ldr	r3, [pc, #188]	@ (8002518 <DMA2_Stream4_IRQHandler+0x148>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0310 	and.w	r3, r3, #16
 8002462:	2b00      	cmp	r3, #0
 8002464:	d026      	beq.n	80024b4 <DMA2_Stream4_IRQHandler+0xe4>
	{
	    if (__DMA2_Stream4_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8002466:	4b2d      	ldr	r3, [pc, #180]	@ (800251c <DMA2_Stream4_IRQHandler+0x14c>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800246c:	2b00      	cmp	r3, #0
 800246e:	d021      	beq.n	80024b4 <DMA2_Stream4_IRQHandler+0xe4>
	    {
	    	__DMA2_Stream4_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8002470:	4b2a      	ldr	r3, [pc, #168]	@ (800251c <DMA2_Stream4_IRQHandler+0x14c>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002476:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CHTIF4;
 8002478:	4b26      	ldr	r3, [pc, #152]	@ (8002514 <DMA2_Stream4_IRQHandler+0x144>)
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	4a25      	ldr	r2, [pc, #148]	@ (8002514 <DMA2_Stream4_IRQHandler+0x144>)
 800247e:	f043 0310 	orr.w	r3, r3, #16
 8002482:	60d3      	str	r3, [r2, #12]

	    	if(__DMA2_Stream4_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8002484:	4b25      	ldr	r3, [pc, #148]	@ (800251c <DMA2_Stream4_IRQHandler+0x14c>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800248a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800248e:	4293      	cmp	r3, r2
 8002490:	d110      	bne.n	80024b4 <DMA2_Stream4_IRQHandler+0xe4>
	    	{
	    		if((__DMA2_Stream4_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8002492:	4b22      	ldr	r3, [pc, #136]	@ (800251c <DMA2_Stream4_IRQHandler+0x14c>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d004      	beq.n	80024ac <DMA2_Stream4_IRQHandler+0xdc>
	    		{
	    			__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80024a2:	4b1e      	ldr	r3, [pc, #120]	@ (800251c <DMA2_Stream4_IRQHandler+0x14c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024a8:	4798      	blx	r3
 80024aa:	e003      	b.n	80024b4 <DMA2_Stream4_IRQHandler+0xe4>
	    		}
	    		else
	    		{
	    			__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80024ac:	4b1b      	ldr	r3, [pc, #108]	@ (800251c <DMA2_Stream4_IRQHandler+0x14c>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024b2:	4798      	blx	r3
	    		}
	    	}
	    }
	}

	if(DMA_HISR & DMA_HISR_TCIF4)
 80024b4:	4b18      	ldr	r3, [pc, #96]	@ (8002518 <DMA2_Stream4_IRQHandler+0x148>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0320 	and.w	r3, r3, #32
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d026      	beq.n	800250e <DMA2_Stream4_IRQHandler+0x13e>
	{
	    if (__DMA2_Stream4_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 80024c0:	4b16      	ldr	r3, [pc, #88]	@ (800251c <DMA2_Stream4_IRQHandler+0x14c>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d021      	beq.n	800250e <DMA2_Stream4_IRQHandler+0x13e>
	    {
	    	__DMA2_Stream4_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80024ca:	4b14      	ldr	r3, [pc, #80]	@ (800251c <DMA2_Stream4_IRQHandler+0x14c>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024d0:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CTCIF4;
 80024d2:	4b10      	ldr	r3, [pc, #64]	@ (8002514 <DMA2_Stream4_IRQHandler+0x144>)
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	4a0f      	ldr	r2, [pc, #60]	@ (8002514 <DMA2_Stream4_IRQHandler+0x144>)
 80024d8:	f043 0320 	orr.w	r3, r3, #32
 80024dc:	60d3      	str	r3, [r2, #12]

	    	if(__DMA2_Stream4_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80024de:	4b0f      	ldr	r3, [pc, #60]	@ (800251c <DMA2_Stream4_IRQHandler+0x14c>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024e4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d110      	bne.n	800250e <DMA2_Stream4_IRQHandler+0x13e>
	    	{
	    		if((__DMA2_Stream4_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80024ec:	4b0b      	ldr	r3, [pc, #44]	@ (800251c <DMA2_Stream4_IRQHandler+0x14c>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d004      	beq.n	8002506 <DMA2_Stream4_IRQHandler+0x136>
	    		{
	    			__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80024fc:	4b07      	ldr	r3, [pc, #28]	@ (800251c <DMA2_Stream4_IRQHandler+0x14c>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002502:	4798      	blx	r3
	    			__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
	    		}
	    	}
	    }
	}
}
 8002504:	e003      	b.n	800250e <DMA2_Stream4_IRQHandler+0x13e>
	    			__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8002506:	4b05      	ldr	r3, [pc, #20]	@ (800251c <DMA2_Stream4_IRQHandler+0x14c>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800250c:	4798      	blx	r3
}
 800250e:	bf00      	nop
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	40026400 	.word	0x40026400
 8002518:	200000dc 	.word	0x200000dc
 800251c:	200000c8 	.word	0x200000c8

08002520 <DMA2_Stream5_IRQHandler>:




void DMA2_Stream5_IRQHandler(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
	DMA_HISR = DMA2 -> HISR;
 8002524:	4b4f      	ldr	r3, [pc, #316]	@ (8002664 <DMA2_Stream5_IRQHandler+0x144>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	4a4f      	ldr	r2, [pc, #316]	@ (8002668 <DMA2_Stream5_IRQHandler+0x148>)
 800252a:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF5)
 800252c:	4b4e      	ldr	r3, [pc, #312]	@ (8002668 <DMA2_Stream5_IRQHandler+0x148>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002534:	2b00      	cmp	r3, #0
 8002536:	d00e      	beq.n	8002556 <DMA2_Stream5_IRQHandler+0x36>
	{
	    if (__DMA2_Stream5_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8002538:	4b4c      	ldr	r3, [pc, #304]	@ (800266c <DMA2_Stream5_IRQHandler+0x14c>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800253e:	2b00      	cmp	r3, #0
 8002540:	d009      	beq.n	8002556 <DMA2_Stream5_IRQHandler+0x36>
	    {
	    	__DMA2_Stream5_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8002542:	4b4a      	ldr	r3, [pc, #296]	@ (800266c <DMA2_Stream5_IRQHandler+0x14c>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002548:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CFEIF5;
 800254a:	4b46      	ldr	r3, [pc, #280]	@ (8002664 <DMA2_Stream5_IRQHandler+0x144>)
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	4a45      	ldr	r2, [pc, #276]	@ (8002664 <DMA2_Stream5_IRQHandler+0x144>)
 8002550:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002554:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_DMEIF5)
 8002556:	4b44      	ldr	r3, [pc, #272]	@ (8002668 <DMA2_Stream5_IRQHandler+0x148>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00e      	beq.n	8002580 <DMA2_Stream5_IRQHandler+0x60>
	{
	    if (__DMA2_Stream5_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8002562:	4b42      	ldr	r3, [pc, #264]	@ (800266c <DMA2_Stream5_IRQHandler+0x14c>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002568:	2b00      	cmp	r3, #0
 800256a:	d009      	beq.n	8002580 <DMA2_Stream5_IRQHandler+0x60>
	    {
	    	__DMA2_Stream5_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 800256c:	4b3f      	ldr	r3, [pc, #252]	@ (800266c <DMA2_Stream5_IRQHandler+0x14c>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002572:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF5;
 8002574:	4b3b      	ldr	r3, [pc, #236]	@ (8002664 <DMA2_Stream5_IRQHandler+0x144>)
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	4a3a      	ldr	r2, [pc, #232]	@ (8002664 <DMA2_Stream5_IRQHandler+0x144>)
 800257a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800257e:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_TEIF5)
 8002580:	4b39      	ldr	r3, [pc, #228]	@ (8002668 <DMA2_Stream5_IRQHandler+0x148>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002588:	2b00      	cmp	r3, #0
 800258a:	d00e      	beq.n	80025aa <DMA2_Stream5_IRQHandler+0x8a>
	{
	    if (__DMA2_Stream5_Config__ -> ISR_Routines.Transfer_Error_ISR)
 800258c:	4b37      	ldr	r3, [pc, #220]	@ (800266c <DMA2_Stream5_IRQHandler+0x14c>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002592:	2b00      	cmp	r3, #0
 8002594:	d009      	beq.n	80025aa <DMA2_Stream5_IRQHandler+0x8a>
	    {
	    	__DMA2_Stream5_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8002596:	4b35      	ldr	r3, [pc, #212]	@ (800266c <DMA2_Stream5_IRQHandler+0x14c>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800259c:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CTEIF5;
 800259e:	4b31      	ldr	r3, [pc, #196]	@ (8002664 <DMA2_Stream5_IRQHandler+0x144>)
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	4a30      	ldr	r2, [pc, #192]	@ (8002664 <DMA2_Stream5_IRQHandler+0x144>)
 80025a4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80025a8:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_HTIF5)
 80025aa:	4b2f      	ldr	r3, [pc, #188]	@ (8002668 <DMA2_Stream5_IRQHandler+0x148>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d026      	beq.n	8002604 <DMA2_Stream5_IRQHandler+0xe4>
	{
	    if (__DMA2_Stream5_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 80025b6:	4b2d      	ldr	r3, [pc, #180]	@ (800266c <DMA2_Stream5_IRQHandler+0x14c>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d021      	beq.n	8002604 <DMA2_Stream5_IRQHandler+0xe4>
	    {
	    	__DMA2_Stream5_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80025c0:	4b2a      	ldr	r3, [pc, #168]	@ (800266c <DMA2_Stream5_IRQHandler+0x14c>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025c6:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CHTIF5;
 80025c8:	4b26      	ldr	r3, [pc, #152]	@ (8002664 <DMA2_Stream5_IRQHandler+0x144>)
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	4a25      	ldr	r2, [pc, #148]	@ (8002664 <DMA2_Stream5_IRQHandler+0x144>)
 80025ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80025d2:	60d3      	str	r3, [r2, #12]

	    	if(__DMA2_Stream5_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80025d4:	4b25      	ldr	r3, [pc, #148]	@ (800266c <DMA2_Stream5_IRQHandler+0x14c>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025da:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80025de:	4293      	cmp	r3, r2
 80025e0:	d110      	bne.n	8002604 <DMA2_Stream5_IRQHandler+0xe4>
	    	{
	    		if((__DMA2_Stream5_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80025e2:	4b22      	ldr	r3, [pc, #136]	@ (800266c <DMA2_Stream5_IRQHandler+0x14c>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d004      	beq.n	80025fc <DMA2_Stream5_IRQHandler+0xdc>
	    		{
	    			__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80025f2:	4b1e      	ldr	r3, [pc, #120]	@ (800266c <DMA2_Stream5_IRQHandler+0x14c>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025f8:	4798      	blx	r3
 80025fa:	e003      	b.n	8002604 <DMA2_Stream5_IRQHandler+0xe4>
	    		}
	    		else
	    		{
	    			__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80025fc:	4b1b      	ldr	r3, [pc, #108]	@ (800266c <DMA2_Stream5_IRQHandler+0x14c>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002602:	4798      	blx	r3
	    		}
	    	}
	    }
	}

	if(DMA_HISR & DMA_HISR_TCIF5)
 8002604:	4b18      	ldr	r3, [pc, #96]	@ (8002668 <DMA2_Stream5_IRQHandler+0x148>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800260c:	2b00      	cmp	r3, #0
 800260e:	d026      	beq.n	800265e <DMA2_Stream5_IRQHandler+0x13e>
	{
	    if (__DMA2_Stream5_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8002610:	4b16      	ldr	r3, [pc, #88]	@ (800266c <DMA2_Stream5_IRQHandler+0x14c>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002616:	2b00      	cmp	r3, #0
 8002618:	d021      	beq.n	800265e <DMA2_Stream5_IRQHandler+0x13e>
	    {
	    	__DMA2_Stream5_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 800261a:	4b14      	ldr	r3, [pc, #80]	@ (800266c <DMA2_Stream5_IRQHandler+0x14c>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002620:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CTCIF5;
 8002622:	4b10      	ldr	r3, [pc, #64]	@ (8002664 <DMA2_Stream5_IRQHandler+0x144>)
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	4a0f      	ldr	r2, [pc, #60]	@ (8002664 <DMA2_Stream5_IRQHandler+0x144>)
 8002628:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800262c:	60d3      	str	r3, [r2, #12]

	    	if(__DMA2_Stream5_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800262e:	4b0f      	ldr	r3, [pc, #60]	@ (800266c <DMA2_Stream5_IRQHandler+0x14c>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002634:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002638:	4293      	cmp	r3, r2
 800263a:	d110      	bne.n	800265e <DMA2_Stream5_IRQHandler+0x13e>
	    	{
	    		if((__DMA2_Stream5_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800263c:	4b0b      	ldr	r3, [pc, #44]	@ (800266c <DMA2_Stream5_IRQHandler+0x14c>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d004      	beq.n	8002656 <DMA2_Stream5_IRQHandler+0x136>
	    		{
	    			__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800264c:	4b07      	ldr	r3, [pc, #28]	@ (800266c <DMA2_Stream5_IRQHandler+0x14c>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002652:	4798      	blx	r3
	    			__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
	    		}
	    	}
	    }
	}
}
 8002654:	e003      	b.n	800265e <DMA2_Stream5_IRQHandler+0x13e>
	    			__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8002656:	4b05      	ldr	r3, [pc, #20]	@ (800266c <DMA2_Stream5_IRQHandler+0x14c>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800265c:	4798      	blx	r3
}
 800265e:	bf00      	nop
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	40026400 	.word	0x40026400
 8002668:	200000dc 	.word	0x200000dc
 800266c:	200000cc 	.word	0x200000cc

08002670 <DMA2_Stream6_IRQHandler>:



void DMA2_Stream6_IRQHandler(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
	DMA_HISR = DMA2 -> HISR;
 8002674:	4b4f      	ldr	r3, [pc, #316]	@ (80027b4 <DMA2_Stream6_IRQHandler+0x144>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	4a4f      	ldr	r2, [pc, #316]	@ (80027b8 <DMA2_Stream6_IRQHandler+0x148>)
 800267a:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF6)
 800267c:	4b4e      	ldr	r3, [pc, #312]	@ (80027b8 <DMA2_Stream6_IRQHandler+0x148>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d00e      	beq.n	80026a6 <DMA2_Stream6_IRQHandler+0x36>
	{
	    if (__DMA2_Stream6_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8002688:	4b4c      	ldr	r3, [pc, #304]	@ (80027bc <DMA2_Stream6_IRQHandler+0x14c>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800268e:	2b00      	cmp	r3, #0
 8002690:	d009      	beq.n	80026a6 <DMA2_Stream6_IRQHandler+0x36>
	    {
	    	__DMA2_Stream6_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8002692:	4b4a      	ldr	r3, [pc, #296]	@ (80027bc <DMA2_Stream6_IRQHandler+0x14c>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002698:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CFEIF6;
 800269a:	4b46      	ldr	r3, [pc, #280]	@ (80027b4 <DMA2_Stream6_IRQHandler+0x144>)
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	4a45      	ldr	r2, [pc, #276]	@ (80027b4 <DMA2_Stream6_IRQHandler+0x144>)
 80026a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026a4:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_DMEIF6)
 80026a6:	4b44      	ldr	r3, [pc, #272]	@ (80027b8 <DMA2_Stream6_IRQHandler+0x148>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00e      	beq.n	80026d0 <DMA2_Stream6_IRQHandler+0x60>
	{
	    if (__DMA2_Stream6_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 80026b2:	4b42      	ldr	r3, [pc, #264]	@ (80027bc <DMA2_Stream6_IRQHandler+0x14c>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d009      	beq.n	80026d0 <DMA2_Stream6_IRQHandler+0x60>
	    {
	    	__DMA2_Stream6_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 80026bc:	4b3f      	ldr	r3, [pc, #252]	@ (80027bc <DMA2_Stream6_IRQHandler+0x14c>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c2:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF6;
 80026c4:	4b3b      	ldr	r3, [pc, #236]	@ (80027b4 <DMA2_Stream6_IRQHandler+0x144>)
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	4a3a      	ldr	r2, [pc, #232]	@ (80027b4 <DMA2_Stream6_IRQHandler+0x144>)
 80026ca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026ce:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_TEIF6)
 80026d0:	4b39      	ldr	r3, [pc, #228]	@ (80027b8 <DMA2_Stream6_IRQHandler+0x148>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d00e      	beq.n	80026fa <DMA2_Stream6_IRQHandler+0x8a>
	{
	    if (__DMA2_Stream6_Config__ -> ISR_Routines.Transfer_Error_ISR)
 80026dc:	4b37      	ldr	r3, [pc, #220]	@ (80027bc <DMA2_Stream6_IRQHandler+0x14c>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d009      	beq.n	80026fa <DMA2_Stream6_IRQHandler+0x8a>
	    {
	    	__DMA2_Stream6_Config__ ->ISR_Routines.Transfer_Error_ISR();
 80026e6:	4b35      	ldr	r3, [pc, #212]	@ (80027bc <DMA2_Stream6_IRQHandler+0x14c>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ec:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CTEIF6;
 80026ee:	4b31      	ldr	r3, [pc, #196]	@ (80027b4 <DMA2_Stream6_IRQHandler+0x144>)
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	4a30      	ldr	r2, [pc, #192]	@ (80027b4 <DMA2_Stream6_IRQHandler+0x144>)
 80026f4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80026f8:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_HTIF6)
 80026fa:	4b2f      	ldr	r3, [pc, #188]	@ (80027b8 <DMA2_Stream6_IRQHandler+0x148>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d026      	beq.n	8002754 <DMA2_Stream6_IRQHandler+0xe4>
	{
	    if (__DMA2_Stream6_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8002706:	4b2d      	ldr	r3, [pc, #180]	@ (80027bc <DMA2_Stream6_IRQHandler+0x14c>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800270c:	2b00      	cmp	r3, #0
 800270e:	d021      	beq.n	8002754 <DMA2_Stream6_IRQHandler+0xe4>
	    {
	    	__DMA2_Stream6_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8002710:	4b2a      	ldr	r3, [pc, #168]	@ (80027bc <DMA2_Stream6_IRQHandler+0x14c>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002716:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CHTIF6;
 8002718:	4b26      	ldr	r3, [pc, #152]	@ (80027b4 <DMA2_Stream6_IRQHandler+0x144>)
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	4a25      	ldr	r2, [pc, #148]	@ (80027b4 <DMA2_Stream6_IRQHandler+0x144>)
 800271e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002722:	60d3      	str	r3, [r2, #12]

	    	if(__DMA2_Stream6_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8002724:	4b25      	ldr	r3, [pc, #148]	@ (80027bc <DMA2_Stream6_IRQHandler+0x14c>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800272a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800272e:	4293      	cmp	r3, r2
 8002730:	d110      	bne.n	8002754 <DMA2_Stream6_IRQHandler+0xe4>
	    	{
	    		if((__DMA2_Stream6_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8002732:	4b22      	ldr	r3, [pc, #136]	@ (80027bc <DMA2_Stream6_IRQHandler+0x14c>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d004      	beq.n	800274c <DMA2_Stream6_IRQHandler+0xdc>
	    		{
	    			__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8002742:	4b1e      	ldr	r3, [pc, #120]	@ (80027bc <DMA2_Stream6_IRQHandler+0x14c>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002748:	4798      	blx	r3
 800274a:	e003      	b.n	8002754 <DMA2_Stream6_IRQHandler+0xe4>
	    		}
	    		else
	    		{
	    			__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800274c:	4b1b      	ldr	r3, [pc, #108]	@ (80027bc <DMA2_Stream6_IRQHandler+0x14c>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002752:	4798      	blx	r3
	    		}
	    	}
	    }
	}

	if(DMA_HISR & DMA_HISR_TCIF6)
 8002754:	4b18      	ldr	r3, [pc, #96]	@ (80027b8 <DMA2_Stream6_IRQHandler+0x148>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d026      	beq.n	80027ae <DMA2_Stream6_IRQHandler+0x13e>
	{
	    if (__DMA2_Stream6_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8002760:	4b16      	ldr	r3, [pc, #88]	@ (80027bc <DMA2_Stream6_IRQHandler+0x14c>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002766:	2b00      	cmp	r3, #0
 8002768:	d021      	beq.n	80027ae <DMA2_Stream6_IRQHandler+0x13e>
	    {
	    	__DMA2_Stream6_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 800276a:	4b14      	ldr	r3, [pc, #80]	@ (80027bc <DMA2_Stream6_IRQHandler+0x14c>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002770:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CTCIF6;
 8002772:	4b10      	ldr	r3, [pc, #64]	@ (80027b4 <DMA2_Stream6_IRQHandler+0x144>)
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	4a0f      	ldr	r2, [pc, #60]	@ (80027b4 <DMA2_Stream6_IRQHandler+0x144>)
 8002778:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800277c:	60d3      	str	r3, [r2, #12]

	    	if(__DMA2_Stream6_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800277e:	4b0f      	ldr	r3, [pc, #60]	@ (80027bc <DMA2_Stream6_IRQHandler+0x14c>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002784:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002788:	4293      	cmp	r3, r2
 800278a:	d110      	bne.n	80027ae <DMA2_Stream6_IRQHandler+0x13e>
	    	{
	    		if((__DMA2_Stream6_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800278c:	4b0b      	ldr	r3, [pc, #44]	@ (80027bc <DMA2_Stream6_IRQHandler+0x14c>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d004      	beq.n	80027a6 <DMA2_Stream6_IRQHandler+0x136>
	    		{
	    			__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800279c:	4b07      	ldr	r3, [pc, #28]	@ (80027bc <DMA2_Stream6_IRQHandler+0x14c>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027a2:	4798      	blx	r3
	    			__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
	    		}
	    	}
	    }
	}
}
 80027a4:	e003      	b.n	80027ae <DMA2_Stream6_IRQHandler+0x13e>
	    			__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80027a6:	4b05      	ldr	r3, [pc, #20]	@ (80027bc <DMA2_Stream6_IRQHandler+0x14c>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027ac:	4798      	blx	r3
}
 80027ae:	bf00      	nop
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	40026400 	.word	0x40026400
 80027b8:	200000dc 	.word	0x200000dc
 80027bc:	200000d0 	.word	0x200000d0

080027c0 <DMA2_Stream7_IRQHandler>:


void DMA2_Stream7_IRQHandler(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
	DMA_HISR = DMA2 -> HISR;
 80027c4:	4b4f      	ldr	r3, [pc, #316]	@ (8002904 <DMA2_Stream7_IRQHandler+0x144>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	4a4f      	ldr	r2, [pc, #316]	@ (8002908 <DMA2_Stream7_IRQHandler+0x148>)
 80027ca:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF7)
 80027cc:	4b4e      	ldr	r3, [pc, #312]	@ (8002908 <DMA2_Stream7_IRQHandler+0x148>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00e      	beq.n	80027f6 <DMA2_Stream7_IRQHandler+0x36>
	{
	    if (__DMA2_Stream7_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80027d8:	4b4c      	ldr	r3, [pc, #304]	@ (800290c <DMA2_Stream7_IRQHandler+0x14c>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d009      	beq.n	80027f6 <DMA2_Stream7_IRQHandler+0x36>
	    {
	    	__DMA2_Stream7_Config__ ->ISR_Routines.FIFO_Error_ISR();
 80027e2:	4b4a      	ldr	r3, [pc, #296]	@ (800290c <DMA2_Stream7_IRQHandler+0x14c>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027e8:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CFEIF7;
 80027ea:	4b46      	ldr	r3, [pc, #280]	@ (8002904 <DMA2_Stream7_IRQHandler+0x144>)
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	4a45      	ldr	r2, [pc, #276]	@ (8002904 <DMA2_Stream7_IRQHandler+0x144>)
 80027f0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80027f4:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_DMEIF7)
 80027f6:	4b44      	ldr	r3, [pc, #272]	@ (8002908 <DMA2_Stream7_IRQHandler+0x148>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00e      	beq.n	8002820 <DMA2_Stream7_IRQHandler+0x60>
	{
	    if (__DMA2_Stream7_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8002802:	4b42      	ldr	r3, [pc, #264]	@ (800290c <DMA2_Stream7_IRQHandler+0x14c>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002808:	2b00      	cmp	r3, #0
 800280a:	d009      	beq.n	8002820 <DMA2_Stream7_IRQHandler+0x60>
	    {
	    	__DMA2_Stream7_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 800280c:	4b3f      	ldr	r3, [pc, #252]	@ (800290c <DMA2_Stream7_IRQHandler+0x14c>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002812:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF7;
 8002814:	4b3b      	ldr	r3, [pc, #236]	@ (8002904 <DMA2_Stream7_IRQHandler+0x144>)
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	4a3a      	ldr	r2, [pc, #232]	@ (8002904 <DMA2_Stream7_IRQHandler+0x144>)
 800281a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800281e:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_TEIF7)
 8002820:	4b39      	ldr	r3, [pc, #228]	@ (8002908 <DMA2_Stream7_IRQHandler+0x148>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d00e      	beq.n	800284a <DMA2_Stream7_IRQHandler+0x8a>
	{
	    if (__DMA2_Stream7_Config__ -> ISR_Routines.Transfer_Error_ISR)
 800282c:	4b37      	ldr	r3, [pc, #220]	@ (800290c <DMA2_Stream7_IRQHandler+0x14c>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002832:	2b00      	cmp	r3, #0
 8002834:	d009      	beq.n	800284a <DMA2_Stream7_IRQHandler+0x8a>
	    {
	    	__DMA2_Stream7_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8002836:	4b35      	ldr	r3, [pc, #212]	@ (800290c <DMA2_Stream7_IRQHandler+0x14c>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800283c:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CTEIF7;
 800283e:	4b31      	ldr	r3, [pc, #196]	@ (8002904 <DMA2_Stream7_IRQHandler+0x144>)
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	4a30      	ldr	r2, [pc, #192]	@ (8002904 <DMA2_Stream7_IRQHandler+0x144>)
 8002844:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002848:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_HTIF7)
 800284a:	4b2f      	ldr	r3, [pc, #188]	@ (8002908 <DMA2_Stream7_IRQHandler+0x148>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d026      	beq.n	80028a4 <DMA2_Stream7_IRQHandler+0xe4>
	{
	    if (__DMA2_Stream7_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8002856:	4b2d      	ldr	r3, [pc, #180]	@ (800290c <DMA2_Stream7_IRQHandler+0x14c>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800285c:	2b00      	cmp	r3, #0
 800285e:	d021      	beq.n	80028a4 <DMA2_Stream7_IRQHandler+0xe4>
	    {
	    	__DMA2_Stream7_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8002860:	4b2a      	ldr	r3, [pc, #168]	@ (800290c <DMA2_Stream7_IRQHandler+0x14c>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002866:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CHTIF7;
 8002868:	4b26      	ldr	r3, [pc, #152]	@ (8002904 <DMA2_Stream7_IRQHandler+0x144>)
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	4a25      	ldr	r2, [pc, #148]	@ (8002904 <DMA2_Stream7_IRQHandler+0x144>)
 800286e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002872:	60d3      	str	r3, [r2, #12]

	    	if(__DMA2_Stream7_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8002874:	4b25      	ldr	r3, [pc, #148]	@ (800290c <DMA2_Stream7_IRQHandler+0x14c>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800287a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800287e:	4293      	cmp	r3, r2
 8002880:	d110      	bne.n	80028a4 <DMA2_Stream7_IRQHandler+0xe4>
	    	{
	    		if((__DMA2_Stream7_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8002882:	4b22      	ldr	r3, [pc, #136]	@ (800290c <DMA2_Stream7_IRQHandler+0x14c>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d004      	beq.n	800289c <DMA2_Stream7_IRQHandler+0xdc>
	    		{
	    			__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8002892:	4b1e      	ldr	r3, [pc, #120]	@ (800290c <DMA2_Stream7_IRQHandler+0x14c>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002898:	4798      	blx	r3
 800289a:	e003      	b.n	80028a4 <DMA2_Stream7_IRQHandler+0xe4>
	    		}
	    		else
	    		{
	    			__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800289c:	4b1b      	ldr	r3, [pc, #108]	@ (800290c <DMA2_Stream7_IRQHandler+0x14c>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028a2:	4798      	blx	r3
	    		}
	    	}
	    }
	}

	if(DMA_HISR & DMA_HISR_TCIF7)
 80028a4:	4b18      	ldr	r3, [pc, #96]	@ (8002908 <DMA2_Stream7_IRQHandler+0x148>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d026      	beq.n	80028fe <DMA2_Stream7_IRQHandler+0x13e>
	{
	    if (__DMA2_Stream7_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 80028b0:	4b16      	ldr	r3, [pc, #88]	@ (800290c <DMA2_Stream7_IRQHandler+0x14c>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d021      	beq.n	80028fe <DMA2_Stream7_IRQHandler+0x13e>
	    {
	    	__DMA2_Stream7_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80028ba:	4b14      	ldr	r3, [pc, #80]	@ (800290c <DMA2_Stream7_IRQHandler+0x14c>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028c0:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CTCIF7;
 80028c2:	4b10      	ldr	r3, [pc, #64]	@ (8002904 <DMA2_Stream7_IRQHandler+0x144>)
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	4a0f      	ldr	r2, [pc, #60]	@ (8002904 <DMA2_Stream7_IRQHandler+0x144>)
 80028c8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80028cc:	60d3      	str	r3, [r2, #12]

	    	if(__DMA2_Stream7_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80028ce:	4b0f      	ldr	r3, [pc, #60]	@ (800290c <DMA2_Stream7_IRQHandler+0x14c>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028d4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80028d8:	4293      	cmp	r3, r2
 80028da:	d110      	bne.n	80028fe <DMA2_Stream7_IRQHandler+0x13e>
	    	{
	    		if((__DMA2_Stream7_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80028dc:	4b0b      	ldr	r3, [pc, #44]	@ (800290c <DMA2_Stream7_IRQHandler+0x14c>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d004      	beq.n	80028f6 <DMA2_Stream7_IRQHandler+0x136>
	    		{
	    			__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80028ec:	4b07      	ldr	r3, [pc, #28]	@ (800290c <DMA2_Stream7_IRQHandler+0x14c>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028f2:	4798      	blx	r3
	    			__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
	    		}
	    	}
	    }
	}
}
 80028f4:	e003      	b.n	80028fe <DMA2_Stream7_IRQHandler+0x13e>
	    			__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80028f6:	4b05      	ldr	r3, [pc, #20]	@ (800290c <DMA2_Stream7_IRQHandler+0x14c>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028fc:	4798      	blx	r3
}
 80028fe:	bf00      	nop
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	40026400 	.word	0x40026400
 8002908:	200000dc 	.word	0x200000dc
 800290c:	200000d4 	.word	0x200000d4

08002910 <DMA_Clock_Enable>:
 * the RCC AHB1 peripheral clock enable register.
 *
 * @param[in] config Pointer to the `DMA_Config` structure that contains the DMA controller configuration.
 */
void DMA_Clock_Enable(DMA_Config *config)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
	if(config -> Request.Controller == DMA1){
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a0c      	ldr	r2, [pc, #48]	@ (8002950 <DMA_Clock_Enable+0x40>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d105      	bne.n	800292e <DMA_Clock_Enable+0x1e>
		RCC -> AHB1ENR |= RCC_AHB1ENR_DMA1EN;
 8002922:	4b0c      	ldr	r3, [pc, #48]	@ (8002954 <DMA_Clock_Enable+0x44>)
 8002924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002926:	4a0b      	ldr	r2, [pc, #44]	@ (8002954 <DMA_Clock_Enable+0x44>)
 8002928:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800292c:	6313      	str	r3, [r2, #48]	@ 0x30
	}
	if(config -> Request.Controller == DMA2)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a09      	ldr	r2, [pc, #36]	@ (8002958 <DMA_Clock_Enable+0x48>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d105      	bne.n	8002944 <DMA_Clock_Enable+0x34>
		{
		RCC -> AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 8002938:	4b06      	ldr	r3, [pc, #24]	@ (8002954 <DMA_Clock_Enable+0x44>)
 800293a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800293c:	4a05      	ldr	r2, [pc, #20]	@ (8002954 <DMA_Clock_Enable+0x44>)
 800293e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002942:	6313      	str	r3, [r2, #48]	@ 0x30
		}
}
 8002944:	bf00      	nop
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr
 8002950:	40026000 	.word	0x40026000
 8002954:	40023800 	.word	0x40023800
 8002958:	40026400 	.word	0x40026400

0800295c <DMA_Init>:
 * @param[in] config Pointer to the `DMA_Config` structure containing the configuration parameters.
 *
 * @return int8_t Returns 1 on successful initialization, or -1 if an error occurs.
 */
int8_t DMA_Init(DMA_Config *config)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
//	DMA_Clock_Disable(config);
    DMA_Clock_Enable(config);  // Enable the clock for the specified DMA controller
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f7ff ffd3 	bl	8002910 <DMA_Clock_Enable>

    if (config->Request.Stream->CR & DMA_SxCR_EN)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0301 	and.w	r3, r3, #1
 8002974:	2b00      	cmp	r3, #0
 8002976:	d00f      	beq.n	8002998 <DMA_Init+0x3c>
    {
    	config->Request.Stream->CR &= ~DMA_SxCR_EN;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f022 0201 	bic.w	r2, r2, #1
 8002986:	601a      	str	r2, [r3, #0]
        while (config->Request.Stream->CR & DMA_SxCR_EN);  // Wait until disabled
 8002988:	bf00      	nop
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0301 	and.w	r3, r3, #1
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1f8      	bne.n	800298a <DMA_Init+0x2e>
    }


    config->Request.Stream->CR |= config->Request.channel << DMA_SxCR_CHSEL_Pos;  // Set the DMA channel
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	6819      	ldr	r1, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	7a1b      	ldrb	r3, [r3, #8]
 80029a2:	065a      	lsls	r2, r3, #25
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	430a      	orrs	r2, r1
 80029aa:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->circular_mode;  // Configure circular mode
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	6819      	ldr	r1, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	699a      	ldr	r2, [r3, #24]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	430a      	orrs	r2, r1
 80029bc:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->flow_control;  // Set flow control
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	6819      	ldr	r1, [r3, #0]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	68da      	ldr	r2, [r3, #12]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	430a      	orrs	r2, r1
 80029ce:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->priority_level;  // Set priority level
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	6819      	ldr	r1, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	695a      	ldr	r2, [r3, #20]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	430a      	orrs	r2, r1
 80029e0:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->memory_data_size;  // Set memory data size
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	6819      	ldr	r1, [r3, #0]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	430a      	orrs	r2, r1
 80029f2:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->peripheral_data_size;  // Set peripheral data size
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	6819      	ldr	r1, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	430a      	orrs	r2, r1
 8002a04:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->transfer_direction;  // Set transfer direction
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	6819      	ldr	r1, [r3, #0]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	691a      	ldr	r2, [r3, #16]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	430a      	orrs	r2, r1
 8002a16:	601a      	str	r2, [r3, #0]

    // Configure DMA interrupts if enabled


     if(config->interrupts != DMA_Configuration.DMA_Interrupts.Disable)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	69db      	ldr	r3, [r3, #28]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	f000 80f4 	beq.w	8002c0c <DMA_Init+0x2b0>
    {

        if(config->interrupts |= DMA_Configuration.DMA_Interrupts.Fifo_Error)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	69db      	ldr	r3, [r3, #28]
 8002a28:	2280      	movs	r2, #128	@ 0x80
 8002a2a:	431a      	orrs	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	61da      	str	r2, [r3, #28]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	69db      	ldr	r3, [r3, #28]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d008      	beq.n	8002a4a <DMA_Init+0xee>
        {
        	config->Request.Stream->FCR |= config->interrupts;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	6959      	ldr	r1, [r3, #20]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	69da      	ldr	r2, [r3, #28]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	430a      	orrs	r2, r1
 8002a48:	615a      	str	r2, [r3, #20]
        }

        if(config->interrupts |= DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	69db      	ldr	r3, [r3, #28]
 8002a4e:	2210      	movs	r2, #16
 8002a50:	431a      	orrs	r2, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	61da      	str	r2, [r3, #28]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	69db      	ldr	r3, [r3, #28]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d007      	beq.n	8002a6e <DMA_Init+0x112>
        {
        	config->Request.Stream->CR |= DMA_SxCR_TCIE;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f042 0210 	orr.w	r2, r2, #16
 8002a6c:	601a      	str	r2, [r3, #0]
        }

        if(config->interrupts |= DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	69db      	ldr	r3, [r3, #28]
 8002a72:	2208      	movs	r2, #8
 8002a74:	431a      	orrs	r2, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	61da      	str	r2, [r3, #28]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	69db      	ldr	r3, [r3, #28]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d007      	beq.n	8002a92 <DMA_Init+0x136>
        {
        	config->Request.Stream->CR |= DMA_SxCR_HTIE;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f042 0208 	orr.w	r2, r2, #8
 8002a90:	601a      	str	r2, [r3, #0]
        }

        if(config->interrupts |= DMA_Configuration.DMA_Interrupts.Transfer_Error)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	69db      	ldr	r3, [r3, #28]
 8002a96:	2204      	movs	r2, #4
 8002a98:	431a      	orrs	r2, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	61da      	str	r2, [r3, #28]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	69db      	ldr	r3, [r3, #28]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d007      	beq.n	8002ab6 <DMA_Init+0x15a>
        {
        	config->Request.Stream->CR |= DMA_SxCR_TEIE;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f042 0204 	orr.w	r2, r2, #4
 8002ab4:	601a      	str	r2, [r3, #0]
        }
        if(config->interrupts |= DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	69db      	ldr	r3, [r3, #28]
 8002aba:	2202      	movs	r2, #2
 8002abc:	431a      	orrs	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	61da      	str	r2, [r3, #28]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	69db      	ldr	r3, [r3, #28]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d007      	beq.n	8002ada <DMA_Init+0x17e>
        {
        	config->Request.Stream->CR |= DMA_SxCR_DMEIE;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f042 0202 	orr.w	r2, r2, #2
 8002ad8:	601a      	str	r2, [r3, #0]
        }

        // Enable the corresponding NVIC interrupt for the DMA stream
        if(config->Request.Controller == DMA1)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a68      	ldr	r2, [pc, #416]	@ (8002c80 <DMA_Init+0x324>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d147      	bne.n	8002b74 <DMA_Init+0x218>
        {
            if(config->Request.Stream == DMA1_Stream0){
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	4a66      	ldr	r2, [pc, #408]	@ (8002c84 <DMA_Init+0x328>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d103      	bne.n	8002af6 <DMA_Init+0x19a>
            	NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002aee:	200b      	movs	r0, #11
 8002af0:	f7fe fc70 	bl	80013d4 <__NVIC_EnableIRQ>
 8002af4:	e08a      	b.n	8002c0c <DMA_Init+0x2b0>
            }
            else if(config->Request.Stream == DMA1_Stream1){
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	4a63      	ldr	r2, [pc, #396]	@ (8002c88 <DMA_Init+0x32c>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d103      	bne.n	8002b08 <DMA_Init+0x1ac>
            	NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002b00:	200c      	movs	r0, #12
 8002b02:	f7fe fc67 	bl	80013d4 <__NVIC_EnableIRQ>
 8002b06:	e081      	b.n	8002c0c <DMA_Init+0x2b0>
            }
            else if(config->Request.Stream == DMA1_Stream2){
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	4a5f      	ldr	r2, [pc, #380]	@ (8002c8c <DMA_Init+0x330>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d103      	bne.n	8002b1a <DMA_Init+0x1be>
            	NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002b12:	200d      	movs	r0, #13
 8002b14:	f7fe fc5e 	bl	80013d4 <__NVIC_EnableIRQ>
 8002b18:	e078      	b.n	8002c0c <DMA_Init+0x2b0>
            }
            else if(config->Request.Stream == DMA1_Stream3){
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	4a5c      	ldr	r2, [pc, #368]	@ (8002c90 <DMA_Init+0x334>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d103      	bne.n	8002b2c <DMA_Init+0x1d0>
            	NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002b24:	200e      	movs	r0, #14
 8002b26:	f7fe fc55 	bl	80013d4 <__NVIC_EnableIRQ>
 8002b2a:	e06f      	b.n	8002c0c <DMA_Init+0x2b0>
            }
            else if(config->Request.Stream == DMA1_Stream4){
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	4a58      	ldr	r2, [pc, #352]	@ (8002c94 <DMA_Init+0x338>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d103      	bne.n	8002b3e <DMA_Init+0x1e2>
            	NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002b36:	200f      	movs	r0, #15
 8002b38:	f7fe fc4c 	bl	80013d4 <__NVIC_EnableIRQ>
 8002b3c:	e066      	b.n	8002c0c <DMA_Init+0x2b0>
            }
            else if(config->Request.Stream == DMA1_Stream5){
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	4a55      	ldr	r2, [pc, #340]	@ (8002c98 <DMA_Init+0x33c>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d103      	bne.n	8002b50 <DMA_Init+0x1f4>
            	NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002b48:	2010      	movs	r0, #16
 8002b4a:	f7fe fc43 	bl	80013d4 <__NVIC_EnableIRQ>
 8002b4e:	e05d      	b.n	8002c0c <DMA_Init+0x2b0>
            }
            else if(config->Request.Stream == DMA1_Stream6) {
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	4a51      	ldr	r2, [pc, #324]	@ (8002c9c <DMA_Init+0x340>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d103      	bne.n	8002b62 <DMA_Init+0x206>
            	NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002b5a:	2011      	movs	r0, #17
 8002b5c:	f7fe fc3a 	bl	80013d4 <__NVIC_EnableIRQ>
 8002b60:	e054      	b.n	8002c0c <DMA_Init+0x2b0>
            }
            else if(config->Request.Stream == DMA1_Stream7){
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	4a4e      	ldr	r2, [pc, #312]	@ (8002ca0 <DMA_Init+0x344>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d14f      	bne.n	8002c0c <DMA_Init+0x2b0>
            	NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8002b6c:	202f      	movs	r0, #47	@ 0x2f
 8002b6e:	f7fe fc31 	bl	80013d4 <__NVIC_EnableIRQ>
 8002b72:	e04b      	b.n	8002c0c <DMA_Init+0x2b0>
            }
        }
        else if(config->Request.Controller == DMA2)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a4a      	ldr	r2, [pc, #296]	@ (8002ca4 <DMA_Init+0x348>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d146      	bne.n	8002c0c <DMA_Init+0x2b0>
        {
            if(config->Request.Stream == DMA2_Stream0){
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	4a49      	ldr	r2, [pc, #292]	@ (8002ca8 <DMA_Init+0x34c>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d103      	bne.n	8002b90 <DMA_Init+0x234>
            	NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002b88:	2038      	movs	r0, #56	@ 0x38
 8002b8a:	f7fe fc23 	bl	80013d4 <__NVIC_EnableIRQ>
 8002b8e:	e03d      	b.n	8002c0c <DMA_Init+0x2b0>
            }
            else if(config->Request.Stream == DMA2_Stream1){
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	4a45      	ldr	r2, [pc, #276]	@ (8002cac <DMA_Init+0x350>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d103      	bne.n	8002ba2 <DMA_Init+0x246>
            	NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002b9a:	2039      	movs	r0, #57	@ 0x39
 8002b9c:	f7fe fc1a 	bl	80013d4 <__NVIC_EnableIRQ>
 8002ba0:	e034      	b.n	8002c0c <DMA_Init+0x2b0>
            }
            else if(config->Request.Stream == DMA2_Stream2){
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	4a42      	ldr	r2, [pc, #264]	@ (8002cb0 <DMA_Init+0x354>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d103      	bne.n	8002bb4 <DMA_Init+0x258>
            	NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002bac:	203a      	movs	r0, #58	@ 0x3a
 8002bae:	f7fe fc11 	bl	80013d4 <__NVIC_EnableIRQ>
 8002bb2:	e02b      	b.n	8002c0c <DMA_Init+0x2b0>
            }
            else if(config->Request.Stream == DMA2_Stream3){
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	4a3e      	ldr	r2, [pc, #248]	@ (8002cb4 <DMA_Init+0x358>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d103      	bne.n	8002bc6 <DMA_Init+0x26a>
            	NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002bbe:	203b      	movs	r0, #59	@ 0x3b
 8002bc0:	f7fe fc08 	bl	80013d4 <__NVIC_EnableIRQ>
 8002bc4:	e022      	b.n	8002c0c <DMA_Init+0x2b0>
            }
            else if(config->Request.Stream == DMA2_Stream4){
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	4a3b      	ldr	r2, [pc, #236]	@ (8002cb8 <DMA_Init+0x35c>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d103      	bne.n	8002bd8 <DMA_Init+0x27c>
            	NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8002bd0:	203c      	movs	r0, #60	@ 0x3c
 8002bd2:	f7fe fbff 	bl	80013d4 <__NVIC_EnableIRQ>
 8002bd6:	e019      	b.n	8002c0c <DMA_Init+0x2b0>
            }
            else if(config->Request.Stream == DMA2_Stream5){
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	4a37      	ldr	r2, [pc, #220]	@ (8002cbc <DMA_Init+0x360>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d103      	bne.n	8002bea <DMA_Init+0x28e>
            	NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8002be2:	2044      	movs	r0, #68	@ 0x44
 8002be4:	f7fe fbf6 	bl	80013d4 <__NVIC_EnableIRQ>
 8002be8:	e010      	b.n	8002c0c <DMA_Init+0x2b0>
            }
            else if(config->Request.Stream == DMA2_Stream6){
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	4a34      	ldr	r2, [pc, #208]	@ (8002cc0 <DMA_Init+0x364>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d103      	bne.n	8002bfc <DMA_Init+0x2a0>
            	NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002bf4:	2045      	movs	r0, #69	@ 0x45
 8002bf6:	f7fe fbed 	bl	80013d4 <__NVIC_EnableIRQ>
 8002bfa:	e007      	b.n	8002c0c <DMA_Init+0x2b0>
            }
            else if(config->Request.Stream == DMA2_Stream7){
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	4a30      	ldr	r2, [pc, #192]	@ (8002cc4 <DMA_Init+0x368>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d102      	bne.n	8002c0c <DMA_Init+0x2b0>
//            	NVIC_SetPriority(DMA2_Stream7_IRQn,0);
            	NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002c06:	2046      	movs	r0, #70	@ 0x46
 8002c08:	f7fe fbe4 	bl	80013d4 <__NVIC_EnableIRQ>
            }
        }
    }

    // Configure memory and peripheral pointer increments
    config->Request.Stream->CR |= config->memory_pointer_increment;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	8c1b      	ldrh	r3, [r3, #32]
 8002c16:	4619      	mov	r1, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->peripheral_pointer_increment;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	430a      	orrs	r2, r1
 8002c32:	601a      	str	r2, [r3, #0]

    // Configure circular mode
    if(config->circular_mode == DMA_Configuration.Circular_Mode.Enable)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d108      	bne.n	8002c52 <DMA_Init+0x2f6>
    {
        config->Request.Stream->CR |= DMA_SxCR_CIRC;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c4e:	601a      	str	r2, [r3, #0]
 8002c50:	e010      	b.n	8002c74 <DMA_Init+0x318>
    }
    else if(config->circular_mode == DMA_Configuration.Circular_Mode.Disable)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	2200      	movs	r2, #0
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d108      	bne.n	8002c6e <DMA_Init+0x312>
    {
        config->Request.Stream->CR &= ~DMA_SxCR_CIRC;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c6a:	601a      	str	r2, [r3, #0]
 8002c6c:	e002      	b.n	8002c74 <DMA_Init+0x318>
    }
    else
    {
        return -1;  // Return -1 if circular mode configuration is invalid
 8002c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c72:	e000      	b.n	8002c76 <DMA_Init+0x31a>
    }

    return 1;  // Return 1 on successful initialization
 8002c74:	2301      	movs	r3, #1
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	40026000 	.word	0x40026000
 8002c84:	40026010 	.word	0x40026010
 8002c88:	40026028 	.word	0x40026028
 8002c8c:	40026040 	.word	0x40026040
 8002c90:	40026058 	.word	0x40026058
 8002c94:	40026070 	.word	0x40026070
 8002c98:	40026088 	.word	0x40026088
 8002c9c:	400260a0 	.word	0x400260a0
 8002ca0:	400260b8 	.word	0x400260b8
 8002ca4:	40026400 	.word	0x40026400
 8002ca8:	40026410 	.word	0x40026410
 8002cac:	40026428 	.word	0x40026428
 8002cb0:	40026440 	.word	0x40026440
 8002cb4:	40026458 	.word	0x40026458
 8002cb8:	40026470 	.word	0x40026470
 8002cbc:	40026488 	.word	0x40026488
 8002cc0:	400264a0 	.word	0x400264a0
 8002cc4:	400264b8 	.word	0x400264b8

08002cc8 <DMA_Set_Target>:
 * memory increment before applying the new settings.
 *
 * @param[in] config Pointer to the `DMA_Config` structure containing the target configuration.
 */
void DMA_Set_Target(DMA_Config *config)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
	config -> Request.Stream -> CR &= ~DMA_SxCR_EN;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f022 0201 	bic.w	r2, r2, #1
 8002cde:	601a      	str	r2, [r3, #0]



	if(config -> circular_mode == DMA_Configuration.Circular_Mode.Disable)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	699b      	ldr	r3, [r3, #24]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d108      	bne.n	8002cfc <DMA_Set_Target+0x34>
	{
		config -> Request.Stream -> CR &= ~DMA_SxCR_CIRC;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002cf8:	601a      	str	r2, [r3, #0]
 8002cfa:	e00d      	b.n	8002d18 <DMA_Set_Target+0x50>
	}
	else if(config -> circular_mode == DMA_Configuration.Circular_Mode.Enable)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d107      	bne.n	8002d18 <DMA_Set_Target+0x50>
	{
		config -> Request.Stream -> CR |= DMA_SxCR_CIRC;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d16:	601a      	str	r2, [r3, #0]
	}

    // Clear previous data size and memory increment settings
    config -> Request.Stream -> CR &= ~(DMA_SxCR_MSIZE | DMA_SxCR_PSIZE | DMA_SxCR_MINC);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f422 42f8 	bic.w	r2, r2, #31744	@ 0x7c00
 8002d26:	601a      	str	r2, [r3, #0]

    // Set the peripheral data size
    config -> Request.Stream -> CR |= config -> peripheral_data_size;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	6819      	ldr	r1, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	430a      	orrs	r2, r1
 8002d38:	601a      	str	r2, [r3, #0]

    // Set the memory data size
    config -> Request.Stream -> CR |= config -> memory_data_size;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	6819      	ldr	r1, [r3, #0]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	601a      	str	r2, [r3, #0]

    // Set the number of data items to be transferred
    config -> Request.Stream -> NDTR = config -> buffer_length;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	605a      	str	r2, [r3, #4]

    // Set memory pointer increment mode
    config -> Request.Stream -> CR |= DMA_SxCR_MINC;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002d64:	601a      	str	r2, [r3, #0]

    // Set the memory address
    config -> Request.Stream -> M0AR = (uint32_t)config->memory_address;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002d6e:	60da      	str	r2, [r3, #12]

    // Set the peripheral address
    config -> Request.Stream -> PAR = (uint32_t)config->peripheral_address;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002d78:	609a      	str	r2, [r3, #8]
}
 8002d7a:	bf00      	nop
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
	...

08002d88 <DMA_Set_Trigger>:
 * number and the DMA controller (DMA1 or DMA2).
 *
 * @param[in] config Pointer to the `DMA_Config` structure that contains the configuration settings.
 */
void DMA_Set_Trigger(DMA_Config *config)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b087      	sub	sp, #28
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
    // Bit shift values for streams 0 to 7
    static const uint8_t LIFCR_Shifts[4] = {0, 6, 16, 22};
    static const uint8_t HIFCR_Shifts[4] = {0, 6, 16, 22};

    DMA_TypeDef *controller = config->Request.Controller;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	617b      	str	r3, [r7, #20]
    DMA_Stream_TypeDef *stream = config->Request.Stream;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	613b      	str	r3, [r7, #16]
    uint32_t shift;

    if (controller == DMA1 || controller == DMA2)
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	4a43      	ldr	r2, [pc, #268]	@ (8002eac <DMA_Set_Trigger+0x124>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d003      	beq.n	8002dac <DMA_Set_Trigger+0x24>
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	4a42      	ldr	r2, [pc, #264]	@ (8002eb0 <DMA_Set_Trigger+0x128>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d178      	bne.n	8002e9e <DMA_Set_Trigger+0x116>
    {
        // Determine the correct shift value and clear the corresponding flags in LIFCR or HIFCR
        if (stream >= DMA1_Stream0 && stream <= DMA1_Stream3)
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	4a41      	ldr	r2, [pc, #260]	@ (8002eb4 <DMA_Set_Trigger+0x12c>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d918      	bls.n	8002de6 <DMA_Set_Trigger+0x5e>
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	4a40      	ldr	r2, [pc, #256]	@ (8002eb8 <DMA_Set_Trigger+0x130>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d814      	bhi.n	8002de6 <DMA_Set_Trigger+0x5e>
        {
            shift = LIFCR_Shifts[stream - DMA1_Stream0];
 8002dbc:	693a      	ldr	r2, [r7, #16]
 8002dbe:	4b3f      	ldr	r3, [pc, #252]	@ (8002ebc <DMA_Set_Trigger+0x134>)
 8002dc0:	4413      	add	r3, r2
 8002dc2:	10db      	asrs	r3, r3, #3
 8002dc4:	4a3e      	ldr	r2, [pc, #248]	@ (8002ec0 <DMA_Set_Trigger+0x138>)
 8002dc6:	fb02 f303 	mul.w	r3, r2, r3
 8002dca:	461a      	mov	r2, r3
 8002dcc:	4b3d      	ldr	r3, [pc, #244]	@ (8002ec4 <DMA_Set_Trigger+0x13c>)
 8002dce:	5c9b      	ldrb	r3, [r3, r2]
 8002dd0:	60fb      	str	r3, [r7, #12]
            controller->LIFCR |= 0x3F << shift;  // Clear interrupt flags for the stream
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	213f      	movs	r1, #63	@ 0x3f
 8002dd8:	68fa      	ldr	r2, [r7, #12]
 8002dda:	fa01 f202 	lsl.w	r2, r1, r2
 8002dde:	431a      	orrs	r2, r3
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	609a      	str	r2, [r3, #8]
 8002de4:	e055      	b.n	8002e92 <DMA_Set_Trigger+0x10a>
        }
        else if (stream >= DMA1_Stream4 && stream <= DMA1_Stream7)
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	4a37      	ldr	r2, [pc, #220]	@ (8002ec8 <DMA_Set_Trigger+0x140>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d918      	bls.n	8002e20 <DMA_Set_Trigger+0x98>
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	4a36      	ldr	r2, [pc, #216]	@ (8002ecc <DMA_Set_Trigger+0x144>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d814      	bhi.n	8002e20 <DMA_Set_Trigger+0x98>
        {
            shift = HIFCR_Shifts[stream - DMA1_Stream4];
 8002df6:	693a      	ldr	r2, [r7, #16]
 8002df8:	4b35      	ldr	r3, [pc, #212]	@ (8002ed0 <DMA_Set_Trigger+0x148>)
 8002dfa:	4413      	add	r3, r2
 8002dfc:	10db      	asrs	r3, r3, #3
 8002dfe:	4a30      	ldr	r2, [pc, #192]	@ (8002ec0 <DMA_Set_Trigger+0x138>)
 8002e00:	fb02 f303 	mul.w	r3, r2, r3
 8002e04:	461a      	mov	r2, r3
 8002e06:	4b33      	ldr	r3, [pc, #204]	@ (8002ed4 <DMA_Set_Trigger+0x14c>)
 8002e08:	5c9b      	ldrb	r3, [r3, r2]
 8002e0a:	60fb      	str	r3, [r7, #12]
            controller->HIFCR |= 0x3F << shift;  // Clear interrupt flags for the stream
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	213f      	movs	r1, #63	@ 0x3f
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	fa01 f202 	lsl.w	r2, r1, r2
 8002e18:	431a      	orrs	r2, r3
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	60da      	str	r2, [r3, #12]
 8002e1e:	e038      	b.n	8002e92 <DMA_Set_Trigger+0x10a>
        }
        else if (stream >= DMA2_Stream0 && stream <= DMA2_Stream3)
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	4a2d      	ldr	r2, [pc, #180]	@ (8002ed8 <DMA_Set_Trigger+0x150>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d918      	bls.n	8002e5a <DMA_Set_Trigger+0xd2>
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	4a2c      	ldr	r2, [pc, #176]	@ (8002edc <DMA_Set_Trigger+0x154>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d814      	bhi.n	8002e5a <DMA_Set_Trigger+0xd2>
        {
            shift = LIFCR_Shifts[stream - DMA2_Stream0];
 8002e30:	693a      	ldr	r2, [r7, #16]
 8002e32:	4b2b      	ldr	r3, [pc, #172]	@ (8002ee0 <DMA_Set_Trigger+0x158>)
 8002e34:	4413      	add	r3, r2
 8002e36:	10db      	asrs	r3, r3, #3
 8002e38:	4a21      	ldr	r2, [pc, #132]	@ (8002ec0 <DMA_Set_Trigger+0x138>)
 8002e3a:	fb02 f303 	mul.w	r3, r2, r3
 8002e3e:	461a      	mov	r2, r3
 8002e40:	4b20      	ldr	r3, [pc, #128]	@ (8002ec4 <DMA_Set_Trigger+0x13c>)
 8002e42:	5c9b      	ldrb	r3, [r3, r2]
 8002e44:	60fb      	str	r3, [r7, #12]
            controller->LIFCR |= 0x3F << shift;  // Clear interrupt flags for the stream
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	213f      	movs	r1, #63	@ 0x3f
 8002e4c:	68fa      	ldr	r2, [r7, #12]
 8002e4e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e52:	431a      	orrs	r2, r3
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	609a      	str	r2, [r3, #8]
 8002e58:	e01b      	b.n	8002e92 <DMA_Set_Trigger+0x10a>
        }
        else if (stream >= DMA2_Stream4 && stream <= DMA2_Stream7)
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	4a21      	ldr	r2, [pc, #132]	@ (8002ee4 <DMA_Set_Trigger+0x15c>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d917      	bls.n	8002e92 <DMA_Set_Trigger+0x10a>
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	4a20      	ldr	r2, [pc, #128]	@ (8002ee8 <DMA_Set_Trigger+0x160>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d813      	bhi.n	8002e92 <DMA_Set_Trigger+0x10a>
        {
            shift = HIFCR_Shifts[stream - DMA2_Stream4];
 8002e6a:	693a      	ldr	r2, [r7, #16]
 8002e6c:	4b1f      	ldr	r3, [pc, #124]	@ (8002eec <DMA_Set_Trigger+0x164>)
 8002e6e:	4413      	add	r3, r2
 8002e70:	10db      	asrs	r3, r3, #3
 8002e72:	4a13      	ldr	r2, [pc, #76]	@ (8002ec0 <DMA_Set_Trigger+0x138>)
 8002e74:	fb02 f303 	mul.w	r3, r2, r3
 8002e78:	461a      	mov	r2, r3
 8002e7a:	4b16      	ldr	r3, [pc, #88]	@ (8002ed4 <DMA_Set_Trigger+0x14c>)
 8002e7c:	5c9b      	ldrb	r3, [r3, r2]
 8002e7e:	60fb      	str	r3, [r7, #12]
            controller->HIFCR |= 0x3F << shift;  // Clear interrupt flags for the stream
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	213f      	movs	r1, #63	@ 0x3f
 8002e86:	68fa      	ldr	r2, [r7, #12]
 8002e88:	fa01 f202 	lsl.w	r2, r1, r2
 8002e8c:	431a      	orrs	r2, r3
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	60da      	str	r2, [r3, #12]
        }

        stream->CR |= DMA_SxCR_EN;  // Enable the DMA stream
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f043 0201 	orr.w	r2, r3, #1
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	601a      	str	r2, [r3, #0]
    }
}
 8002e9e:	bf00      	nop
 8002ea0:	371c      	adds	r7, #28
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	40026000 	.word	0x40026000
 8002eb0:	40026400 	.word	0x40026400
 8002eb4:	4002600f 	.word	0x4002600f
 8002eb8:	40026058 	.word	0x40026058
 8002ebc:	bffd9ff0 	.word	0xbffd9ff0
 8002ec0:	aaaaaaab 	.word	0xaaaaaaab
 8002ec4:	08005e60 	.word	0x08005e60
 8002ec8:	4002606f 	.word	0x4002606f
 8002ecc:	400260b8 	.word	0x400260b8
 8002ed0:	bffd9f90 	.word	0xbffd9f90
 8002ed4:	08005e64 	.word	0x08005e64
 8002ed8:	4002640f 	.word	0x4002640f
 8002edc:	40026458 	.word	0x40026458
 8002ee0:	bffd9bf0 	.word	0xbffd9bf0
 8002ee4:	4002646f 	.word	0x4002646f
 8002ee8:	400264b8 	.word	0x400264b8
 8002eec:	bffd9b90 	.word	0xbffd9b90

08002ef0 <__NVIC_EnableIRQ>:
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	db0b      	blt.n	8002f1a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f02:	79fb      	ldrb	r3, [r7, #7]
 8002f04:	f003 021f 	and.w	r2, r3, #31
 8002f08:	4907      	ldr	r1, [pc, #28]	@ (8002f28 <__NVIC_EnableIRQ+0x38>)
 8002f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f0e:	095b      	lsrs	r3, r3, #5
 8002f10:	2001      	movs	r0, #1
 8002f12:	fa00 f202 	lsl.w	r2, r0, r2
 8002f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002f1a:	bf00      	nop
 8002f1c:	370c      	adds	r7, #12
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	e000e100 	.word	0xe000e100

08002f2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	4603      	mov	r3, r0
 8002f34:	6039      	str	r1, [r7, #0]
 8002f36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	db0a      	blt.n	8002f56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	b2da      	uxtb	r2, r3
 8002f44:	490c      	ldr	r1, [pc, #48]	@ (8002f78 <__NVIC_SetPriority+0x4c>)
 8002f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f4a:	0112      	lsls	r2, r2, #4
 8002f4c:	b2d2      	uxtb	r2, r2
 8002f4e:	440b      	add	r3, r1
 8002f50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f54:	e00a      	b.n	8002f6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	b2da      	uxtb	r2, r3
 8002f5a:	4908      	ldr	r1, [pc, #32]	@ (8002f7c <__NVIC_SetPriority+0x50>)
 8002f5c:	79fb      	ldrb	r3, [r7, #7]
 8002f5e:	f003 030f 	and.w	r3, r3, #15
 8002f62:	3b04      	subs	r3, #4
 8002f64:	0112      	lsls	r2, r2, #4
 8002f66:	b2d2      	uxtb	r2, r2
 8002f68:	440b      	add	r3, r1
 8002f6a:	761a      	strb	r2, [r3, #24]
}
 8002f6c:	bf00      	nop
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr
 8002f78:	e000e100 	.word	0xe000e100
 8002f7c:	e000ed00 	.word	0xe000ed00

08002f80 <EXTI0_IRQHandler>:
 * @brief Interrupt handler for EXTI line 0.
 *
 * This ISR handles interrupts for pin 0, invoking the associated callback
 * function if one is registered.
 */
void EXTI0_IRQHandler(void) {
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
    if (EXTI_ISR[0]) EXTI_ISR[0](); // Invoke registered callback
 8002f84:	4b07      	ldr	r3, [pc, #28]	@ (8002fa4 <EXTI0_IRQHandler+0x24>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d002      	beq.n	8002f92 <EXTI0_IRQHandler+0x12>
 8002f8c:	4b05      	ldr	r3, [pc, #20]	@ (8002fa4 <EXTI0_IRQHandler+0x24>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR0;        // Clear interrupt flag
 8002f92:	4b05      	ldr	r3, [pc, #20]	@ (8002fa8 <EXTI0_IRQHandler+0x28>)
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	4a04      	ldr	r2, [pc, #16]	@ (8002fa8 <EXTI0_IRQHandler+0x28>)
 8002f98:	f043 0301 	orr.w	r3, r3, #1
 8002f9c:	6153      	str	r3, [r2, #20]
}
 8002f9e:	bf00      	nop
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	200000e0 	.word	0x200000e0
 8002fa8:	40013c00 	.word	0x40013c00

08002fac <EXTI1_IRQHandler>:

/**
 * @brief Interrupt handler for EXTI line 1.
 */
void EXTI1_IRQHandler(void) {
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
    if (EXTI_ISR[1]) EXTI_ISR[1]();
 8002fb0:	4b07      	ldr	r3, [pc, #28]	@ (8002fd0 <EXTI1_IRQHandler+0x24>)
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d002      	beq.n	8002fbe <EXTI1_IRQHandler+0x12>
 8002fb8:	4b05      	ldr	r3, [pc, #20]	@ (8002fd0 <EXTI1_IRQHandler+0x24>)
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR1;
 8002fbe:	4b05      	ldr	r3, [pc, #20]	@ (8002fd4 <EXTI1_IRQHandler+0x28>)
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	4a04      	ldr	r2, [pc, #16]	@ (8002fd4 <EXTI1_IRQHandler+0x28>)
 8002fc4:	f043 0302 	orr.w	r3, r3, #2
 8002fc8:	6153      	str	r3, [r2, #20]
}
 8002fca:	bf00      	nop
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	200000e0 	.word	0x200000e0
 8002fd4:	40013c00 	.word	0x40013c00

08002fd8 <EXTI2_IRQHandler>:

/**
 * @brief Interrupt handler for EXTI line 2.
 */
void EXTI2_IRQHandler(void) {
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	af00      	add	r7, sp, #0
    if (EXTI_ISR[2]) EXTI_ISR[2]();
 8002fdc:	4b07      	ldr	r3, [pc, #28]	@ (8002ffc <EXTI2_IRQHandler+0x24>)
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d002      	beq.n	8002fea <EXTI2_IRQHandler+0x12>
 8002fe4:	4b05      	ldr	r3, [pc, #20]	@ (8002ffc <EXTI2_IRQHandler+0x24>)
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR2;
 8002fea:	4b05      	ldr	r3, [pc, #20]	@ (8003000 <EXTI2_IRQHandler+0x28>)
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	4a04      	ldr	r2, [pc, #16]	@ (8003000 <EXTI2_IRQHandler+0x28>)
 8002ff0:	f043 0304 	orr.w	r3, r3, #4
 8002ff4:	6153      	str	r3, [r2, #20]
}
 8002ff6:	bf00      	nop
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	200000e0 	.word	0x200000e0
 8003000:	40013c00 	.word	0x40013c00

08003004 <EXTI3_IRQHandler>:

/**
 * @brief Interrupt handler for EXTI line 3.
 */
void EXTI3_IRQHandler(void) {
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
    if (EXTI_ISR[3]) EXTI_ISR[3]();
 8003008:	4b07      	ldr	r3, [pc, #28]	@ (8003028 <EXTI3_IRQHandler+0x24>)
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d002      	beq.n	8003016 <EXTI3_IRQHandler+0x12>
 8003010:	4b05      	ldr	r3, [pc, #20]	@ (8003028 <EXTI3_IRQHandler+0x24>)
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR3;
 8003016:	4b05      	ldr	r3, [pc, #20]	@ (800302c <EXTI3_IRQHandler+0x28>)
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	4a04      	ldr	r2, [pc, #16]	@ (800302c <EXTI3_IRQHandler+0x28>)
 800301c:	f043 0308 	orr.w	r3, r3, #8
 8003020:	6153      	str	r3, [r2, #20]
}
 8003022:	bf00      	nop
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	200000e0 	.word	0x200000e0
 800302c:	40013c00 	.word	0x40013c00

08003030 <EXTI4_IRQHandler>:

/**
 * @brief Interrupt handler for EXTI line 4.
 */
void EXTI4_IRQHandler(void) {
 8003030:	b580      	push	{r7, lr}
 8003032:	af00      	add	r7, sp, #0
    if (EXTI_ISR[4]) EXTI_ISR[4]();
 8003034:	4b07      	ldr	r3, [pc, #28]	@ (8003054 <EXTI4_IRQHandler+0x24>)
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d002      	beq.n	8003042 <EXTI4_IRQHandler+0x12>
 800303c:	4b05      	ldr	r3, [pc, #20]	@ (8003054 <EXTI4_IRQHandler+0x24>)
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR4;
 8003042:	4b05      	ldr	r3, [pc, #20]	@ (8003058 <EXTI4_IRQHandler+0x28>)
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	4a04      	ldr	r2, [pc, #16]	@ (8003058 <EXTI4_IRQHandler+0x28>)
 8003048:	f043 0310 	orr.w	r3, r3, #16
 800304c:	6153      	str	r3, [r2, #20]
}
 800304e:	bf00      	nop
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	200000e0 	.word	0x200000e0
 8003058:	40013c00 	.word	0x40013c00

0800305c <EXTI9_5_IRQHandler>:
/**
 * @brief Interrupt handler for EXTI lines 5 to 9.
 *
 * Handles interrupts for pins 5 to 9, checking each pin for active flags.
 */
void EXTI9_5_IRQHandler(void) {
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
    for (int i = 5; i <= 9; ++i) {
 8003062:	2305      	movs	r3, #5
 8003064:	607b      	str	r3, [r7, #4]
 8003066:	e020      	b.n	80030aa <EXTI9_5_IRQHandler+0x4e>
        if ((EXTI->PR & (1 << i)) && EXTI_ISR[i]) {
 8003068:	4b14      	ldr	r3, [pc, #80]	@ (80030bc <EXTI9_5_IRQHandler+0x60>)
 800306a:	695b      	ldr	r3, [r3, #20]
 800306c:	2101      	movs	r1, #1
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	fa01 f202 	lsl.w	r2, r1, r2
 8003074:	4013      	ands	r3, r2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d014      	beq.n	80030a4 <EXTI9_5_IRQHandler+0x48>
 800307a:	4a11      	ldr	r2, [pc, #68]	@ (80030c0 <EXTI9_5_IRQHandler+0x64>)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00e      	beq.n	80030a4 <EXTI9_5_IRQHandler+0x48>
            EXTI_ISR[i]();        // Invoke callback for pin `i`
 8003086:	4a0e      	ldr	r2, [pc, #56]	@ (80030c0 <EXTI9_5_IRQHandler+0x64>)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800308e:	4798      	blx	r3
            EXTI->PR |= (1 << i); // Clear interrupt flag
 8003090:	4b0a      	ldr	r3, [pc, #40]	@ (80030bc <EXTI9_5_IRQHandler+0x60>)
 8003092:	695b      	ldr	r3, [r3, #20]
 8003094:	2101      	movs	r1, #1
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	fa01 f202 	lsl.w	r2, r1, r2
 800309c:	4611      	mov	r1, r2
 800309e:	4a07      	ldr	r2, [pc, #28]	@ (80030bc <EXTI9_5_IRQHandler+0x60>)
 80030a0:	430b      	orrs	r3, r1
 80030a2:	6153      	str	r3, [r2, #20]
    for (int i = 5; i <= 9; ++i) {
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	3301      	adds	r3, #1
 80030a8:	607b      	str	r3, [r7, #4]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2b09      	cmp	r3, #9
 80030ae:	dddb      	ble.n	8003068 <EXTI9_5_IRQHandler+0xc>
        }
    }
}
 80030b0:	bf00      	nop
 80030b2:	bf00      	nop
 80030b4:	3708      	adds	r7, #8
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	40013c00 	.word	0x40013c00
 80030c0:	200000e0 	.word	0x200000e0

080030c4 <EXTI15_10_IRQHandler>:
/**
 * @brief Interrupt handler for EXTI lines 10 to 15.
 *
 * Handles interrupts for pins 10 to 15, checking each pin for active flags.
 */
void EXTI15_10_IRQHandler(void) {
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
    for (int i = 10; i <= 15; ++i) {
 80030ca:	230a      	movs	r3, #10
 80030cc:	607b      	str	r3, [r7, #4]
 80030ce:	e020      	b.n	8003112 <EXTI15_10_IRQHandler+0x4e>
        if ((EXTI->PR & (1 << i)) && EXTI_ISR[i]) {
 80030d0:	4b14      	ldr	r3, [pc, #80]	@ (8003124 <EXTI15_10_IRQHandler+0x60>)
 80030d2:	695b      	ldr	r3, [r3, #20]
 80030d4:	2101      	movs	r1, #1
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	fa01 f202 	lsl.w	r2, r1, r2
 80030dc:	4013      	ands	r3, r2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d014      	beq.n	800310c <EXTI15_10_IRQHandler+0x48>
 80030e2:	4a11      	ldr	r2, [pc, #68]	@ (8003128 <EXTI15_10_IRQHandler+0x64>)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d00e      	beq.n	800310c <EXTI15_10_IRQHandler+0x48>
            EXTI_ISR[i]();        // Invoke callback for pin `i`
 80030ee:	4a0e      	ldr	r2, [pc, #56]	@ (8003128 <EXTI15_10_IRQHandler+0x64>)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030f6:	4798      	blx	r3
            EXTI->PR |= (1 << i); // Clear interrupt flag
 80030f8:	4b0a      	ldr	r3, [pc, #40]	@ (8003124 <EXTI15_10_IRQHandler+0x60>)
 80030fa:	695b      	ldr	r3, [r3, #20]
 80030fc:	2101      	movs	r1, #1
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	fa01 f202 	lsl.w	r2, r1, r2
 8003104:	4611      	mov	r1, r2
 8003106:	4a07      	ldr	r2, [pc, #28]	@ (8003124 <EXTI15_10_IRQHandler+0x60>)
 8003108:	430b      	orrs	r3, r1
 800310a:	6153      	str	r3, [r2, #20]
    for (int i = 10; i <= 15; ++i) {
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	3301      	adds	r3, #1
 8003110:	607b      	str	r3, [r7, #4]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2b0f      	cmp	r3, #15
 8003116:	dddb      	ble.n	80030d0 <EXTI15_10_IRQHandler+0xc>
        }
    }
}
 8003118:	bf00      	nop
 800311a:	bf00      	nop
 800311c:	3708      	adds	r7, #8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	40013c00 	.word	0x40013c00
 8003128:	200000e0 	.word	0x200000e0

0800312c <GPIO_Interrupt_Setup>:
 * @param pin Pin number (0-15) to configure.
 * @param edge_select Interrupt edge selection (rising, falling, or both).
 * @param priority Interrupt priority level.
 * @param attach_ISR Pointer to the ISR function to invoke on interrupt.
 */
void GPIO_Interrupt_Setup(GPIO_TypeDef *Port, int pin, int edge_select, uint32_t priority, void (*attach_ISR)) {
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]
 8003138:	603b      	str	r3, [r7, #0]
    int port_data = PORT_TO_INDEX(Port);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	4a6d      	ldr	r2, [pc, #436]	@ (80032f4 <GPIO_Interrupt_Setup+0x1c8>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d032      	beq.n	80031a8 <GPIO_Interrupt_Setup+0x7c>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	4a6c      	ldr	r2, [pc, #432]	@ (80032f8 <GPIO_Interrupt_Setup+0x1cc>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d02c      	beq.n	80031a4 <GPIO_Interrupt_Setup+0x78>
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	4a6b      	ldr	r2, [pc, #428]	@ (80032fc <GPIO_Interrupt_Setup+0x1d0>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d026      	beq.n	80031a0 <GPIO_Interrupt_Setup+0x74>
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	4a6a      	ldr	r2, [pc, #424]	@ (8003300 <GPIO_Interrupt_Setup+0x1d4>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d020      	beq.n	800319c <GPIO_Interrupt_Setup+0x70>
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	4a69      	ldr	r2, [pc, #420]	@ (8003304 <GPIO_Interrupt_Setup+0x1d8>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d01a      	beq.n	8003198 <GPIO_Interrupt_Setup+0x6c>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	4a68      	ldr	r2, [pc, #416]	@ (8003308 <GPIO_Interrupt_Setup+0x1dc>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d014      	beq.n	8003194 <GPIO_Interrupt_Setup+0x68>
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	4a67      	ldr	r2, [pc, #412]	@ (800330c <GPIO_Interrupt_Setup+0x1e0>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d00e      	beq.n	8003190 <GPIO_Interrupt_Setup+0x64>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	4a66      	ldr	r2, [pc, #408]	@ (8003310 <GPIO_Interrupt_Setup+0x1e4>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d008      	beq.n	800318c <GPIO_Interrupt_Setup+0x60>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	4a65      	ldr	r2, [pc, #404]	@ (8003314 <GPIO_Interrupt_Setup+0x1e8>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d101      	bne.n	8003186 <GPIO_Interrupt_Setup+0x5a>
 8003182:	2308      	movs	r3, #8
 8003184:	e011      	b.n	80031aa <GPIO_Interrupt_Setup+0x7e>
 8003186:	f04f 33ff 	mov.w	r3, #4294967295
 800318a:	e00e      	b.n	80031aa <GPIO_Interrupt_Setup+0x7e>
 800318c:	2307      	movs	r3, #7
 800318e:	e00c      	b.n	80031aa <GPIO_Interrupt_Setup+0x7e>
 8003190:	2306      	movs	r3, #6
 8003192:	e00a      	b.n	80031aa <GPIO_Interrupt_Setup+0x7e>
 8003194:	2305      	movs	r3, #5
 8003196:	e008      	b.n	80031aa <GPIO_Interrupt_Setup+0x7e>
 8003198:	2304      	movs	r3, #4
 800319a:	e006      	b.n	80031aa <GPIO_Interrupt_Setup+0x7e>
 800319c:	2303      	movs	r3, #3
 800319e:	e004      	b.n	80031aa <GPIO_Interrupt_Setup+0x7e>
 80031a0:	2302      	movs	r3, #2
 80031a2:	e002      	b.n	80031aa <GPIO_Interrupt_Setup+0x7e>
 80031a4:	2301      	movs	r3, #1
 80031a6:	e000      	b.n	80031aa <GPIO_Interrupt_Setup+0x7e>
 80031a8:	2300      	movs	r3, #0
 80031aa:	617b      	str	r3, [r7, #20]

    if (port_data < 0 || pin < 0 || pin > 15) return; // Validate inputs
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	f2c0 809c 	blt.w	80032ec <GPIO_Interrupt_Setup+0x1c0>
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	f2c0 8098 	blt.w	80032ec <GPIO_Interrupt_Setup+0x1c0>
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	2b0f      	cmp	r3, #15
 80031c0:	f300 8094 	bgt.w	80032ec <GPIO_Interrupt_Setup+0x1c0>

    // Map GPIO port to EXTI line
    SYSCFG->EXTICR[pin / 4] |= port_data << ((pin % 4) * 4);
 80031c4:	4954      	ldr	r1, [pc, #336]	@ (8003318 <GPIO_Interrupt_Setup+0x1ec>)
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	da00      	bge.n	80031ce <GPIO_Interrupt_Setup+0xa2>
 80031cc:	3303      	adds	r3, #3
 80031ce:	109b      	asrs	r3, r3, #2
 80031d0:	461a      	mov	r2, r3
 80031d2:	1c93      	adds	r3, r2, #2
 80031d4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	4258      	negs	r0, r3
 80031dc:	f003 0303 	and.w	r3, r3, #3
 80031e0:	f000 0003 	and.w	r0, r0, #3
 80031e4:	bf58      	it	pl
 80031e6:	4243      	negpl	r3, r0
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	6978      	ldr	r0, [r7, #20]
 80031ec:	fa00 f303 	lsl.w	r3, r0, r3
 80031f0:	4849      	ldr	r0, [pc, #292]	@ (8003318 <GPIO_Interrupt_Setup+0x1ec>)
 80031f2:	4319      	orrs	r1, r3
 80031f4:	1c93      	adds	r3, r2, #2
 80031f6:	f840 1023 	str.w	r1, [r0, r3, lsl #2]

    // Enable EXTI interrupt mask
    EXTI->IMR |= (1 << pin);
 80031fa:	4b48      	ldr	r3, [pc, #288]	@ (800331c <GPIO_Interrupt_Setup+0x1f0>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2101      	movs	r1, #1
 8003200:	68ba      	ldr	r2, [r7, #8]
 8003202:	fa01 f202 	lsl.w	r2, r1, r2
 8003206:	4611      	mov	r1, r2
 8003208:	4a44      	ldr	r2, [pc, #272]	@ (800331c <GPIO_Interrupt_Setup+0x1f0>)
 800320a:	430b      	orrs	r3, r1
 800320c:	6013      	str	r3, [r2, #0]

    // Configure rising/falling edge triggers
    EXTI->RTSR &= ~(1 << pin); // Clear rising edge trigger
 800320e:	4b43      	ldr	r3, [pc, #268]	@ (800331c <GPIO_Interrupt_Setup+0x1f0>)
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	2101      	movs	r1, #1
 8003214:	68ba      	ldr	r2, [r7, #8]
 8003216:	fa01 f202 	lsl.w	r2, r1, r2
 800321a:	43d2      	mvns	r2, r2
 800321c:	4611      	mov	r1, r2
 800321e:	4a3f      	ldr	r2, [pc, #252]	@ (800331c <GPIO_Interrupt_Setup+0x1f0>)
 8003220:	400b      	ands	r3, r1
 8003222:	6093      	str	r3, [r2, #8]
    EXTI->FTSR &= ~(1 << pin); // Clear falling edge trigger
 8003224:	4b3d      	ldr	r3, [pc, #244]	@ (800331c <GPIO_Interrupt_Setup+0x1f0>)
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	2101      	movs	r1, #1
 800322a:	68ba      	ldr	r2, [r7, #8]
 800322c:	fa01 f202 	lsl.w	r2, r1, r2
 8003230:	43d2      	mvns	r2, r2
 8003232:	4611      	mov	r1, r2
 8003234:	4a39      	ldr	r2, [pc, #228]	@ (800331c <GPIO_Interrupt_Setup+0x1f0>)
 8003236:	400b      	ands	r3, r1
 8003238:	60d3      	str	r3, [r2, #12]
    switch (edge_select) {
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2b02      	cmp	r3, #2
 800323e:	d01f      	beq.n	8003280 <GPIO_Interrupt_Setup+0x154>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2b02      	cmp	r3, #2
 8003244:	dc31      	bgt.n	80032aa <GPIO_Interrupt_Setup+0x17e>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d003      	beq.n	8003254 <GPIO_Interrupt_Setup+0x128>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d00b      	beq.n	800326a <GPIO_Interrupt_Setup+0x13e>
 8003252:	e02a      	b.n	80032aa <GPIO_Interrupt_Setup+0x17e>
        case 0:
            EXTI->RTSR |= (1 << pin);
 8003254:	4b31      	ldr	r3, [pc, #196]	@ (800331c <GPIO_Interrupt_Setup+0x1f0>)
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	2101      	movs	r1, #1
 800325a:	68ba      	ldr	r2, [r7, #8]
 800325c:	fa01 f202 	lsl.w	r2, r1, r2
 8003260:	4611      	mov	r1, r2
 8003262:	4a2e      	ldr	r2, [pc, #184]	@ (800331c <GPIO_Interrupt_Setup+0x1f0>)
 8003264:	430b      	orrs	r3, r1
 8003266:	6093      	str	r3, [r2, #8]
            break;
 8003268:	e01f      	b.n	80032aa <GPIO_Interrupt_Setup+0x17e>
        case 1:
            EXTI->FTSR |= (1 << pin);
 800326a:	4b2c      	ldr	r3, [pc, #176]	@ (800331c <GPIO_Interrupt_Setup+0x1f0>)
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	2101      	movs	r1, #1
 8003270:	68ba      	ldr	r2, [r7, #8]
 8003272:	fa01 f202 	lsl.w	r2, r1, r2
 8003276:	4611      	mov	r1, r2
 8003278:	4a28      	ldr	r2, [pc, #160]	@ (800331c <GPIO_Interrupt_Setup+0x1f0>)
 800327a:	430b      	orrs	r3, r1
 800327c:	60d3      	str	r3, [r2, #12]
            break;
 800327e:	e014      	b.n	80032aa <GPIO_Interrupt_Setup+0x17e>
        case 2:
            EXTI->RTSR |= (1 << pin);
 8003280:	4b26      	ldr	r3, [pc, #152]	@ (800331c <GPIO_Interrupt_Setup+0x1f0>)
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	2101      	movs	r1, #1
 8003286:	68ba      	ldr	r2, [r7, #8]
 8003288:	fa01 f202 	lsl.w	r2, r1, r2
 800328c:	4611      	mov	r1, r2
 800328e:	4a23      	ldr	r2, [pc, #140]	@ (800331c <GPIO_Interrupt_Setup+0x1f0>)
 8003290:	430b      	orrs	r3, r1
 8003292:	6093      	str	r3, [r2, #8]
            EXTI->FTSR |= (1 << pin);
 8003294:	4b21      	ldr	r3, [pc, #132]	@ (800331c <GPIO_Interrupt_Setup+0x1f0>)
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	2101      	movs	r1, #1
 800329a:	68ba      	ldr	r2, [r7, #8]
 800329c:	fa01 f202 	lsl.w	r2, r1, r2
 80032a0:	4611      	mov	r1, r2
 80032a2:	4a1e      	ldr	r2, [pc, #120]	@ (800331c <GPIO_Interrupt_Setup+0x1f0>)
 80032a4:	430b      	orrs	r3, r1
 80032a6:	60d3      	str	r3, [r2, #12]
            break;
 80032a8:	bf00      	nop
    }

    // Register the callback function
    EXTI_ISR[pin] = attach_ISR;
 80032aa:	6a3a      	ldr	r2, [r7, #32]
 80032ac:	491c      	ldr	r1, [pc, #112]	@ (8003320 <GPIO_Interrupt_Setup+0x1f4>)
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    // Configure NVIC for the EXTI line
    IRQn_Type irq = (pin <= 4) ? (IRQn_Type)(EXTI0_IRQn + pin) :
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	2b04      	cmp	r3, #4
 80032b8:	dc05      	bgt.n	80032c6 <GPIO_Interrupt_Setup+0x19a>
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	3306      	adds	r3, #6
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	b25b      	sxtb	r3, r3
 80032c4:	e005      	b.n	80032d2 <GPIO_Interrupt_Setup+0x1a6>
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	2b09      	cmp	r3, #9
 80032ca:	dc01      	bgt.n	80032d0 <GPIO_Interrupt_Setup+0x1a4>
 80032cc:	2317      	movs	r3, #23
 80032ce:	e000      	b.n	80032d2 <GPIO_Interrupt_Setup+0x1a6>
 80032d0:	2328      	movs	r3, #40	@ 0x28
 80032d2:	74fb      	strb	r3, [r7, #19]
                    (pin <= 9) ? EXTI9_5_IRQn : EXTI15_10_IRQn;

    NVIC_SetPriority(irq, priority); // Set interrupt priority
 80032d4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80032d8:	6839      	ldr	r1, [r7, #0]
 80032da:	4618      	mov	r0, r3
 80032dc:	f7ff fe26 	bl	8002f2c <__NVIC_SetPriority>
    NVIC_EnableIRQ(irq);             // Enable NVIC interrupt
 80032e0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7ff fe03 	bl	8002ef0 <__NVIC_EnableIRQ>
 80032ea:	e000      	b.n	80032ee <GPIO_Interrupt_Setup+0x1c2>
    if (port_data < 0 || pin < 0 || pin > 15) return; // Validate inputs
 80032ec:	bf00      	nop
}
 80032ee:	3718      	adds	r7, #24
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	40020000 	.word	0x40020000
 80032f8:	40020400 	.word	0x40020400
 80032fc:	40020800 	.word	0x40020800
 8003300:	40020c00 	.word	0x40020c00
 8003304:	40021000 	.word	0x40021000
 8003308:	40021400 	.word	0x40021400
 800330c:	40021800 	.word	0x40021800
 8003310:	40021c00 	.word	0x40021c00
 8003314:	40022000 	.word	0x40022000
 8003318:	40013800 	.word	0x40013800
 800331c:	40013c00 	.word	0x40013c00
 8003320:	200000e0 	.word	0x200000e0

08003324 <GPIO_Clock_Enable>:
 * @brief Enables the clock for a specific GPIO port.
 *
 * @param PORT Pointer to GPIO port base address.
 * @return GPIO_SUCCESS on success, GPIO_INVALID_PORT on failure.
 */
int GPIO_Clock_Enable(GPIO_TypeDef *PORT) {
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)PORT) {
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4a30      	ldr	r2, [pc, #192]	@ (80033f0 <GPIO_Clock_Enable+0xcc>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d04b      	beq.n	80033cc <GPIO_Clock_Enable+0xa8>
 8003334:	4a2e      	ldr	r2, [pc, #184]	@ (80033f0 <GPIO_Clock_Enable+0xcc>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d84f      	bhi.n	80033da <GPIO_Clock_Enable+0xb6>
 800333a:	4a2e      	ldr	r2, [pc, #184]	@ (80033f4 <GPIO_Clock_Enable+0xd0>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d03e      	beq.n	80033be <GPIO_Clock_Enable+0x9a>
 8003340:	4a2c      	ldr	r2, [pc, #176]	@ (80033f4 <GPIO_Clock_Enable+0xd0>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d849      	bhi.n	80033da <GPIO_Clock_Enable+0xb6>
 8003346:	4a2c      	ldr	r2, [pc, #176]	@ (80033f8 <GPIO_Clock_Enable+0xd4>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d031      	beq.n	80033b0 <GPIO_Clock_Enable+0x8c>
 800334c:	4a2a      	ldr	r2, [pc, #168]	@ (80033f8 <GPIO_Clock_Enable+0xd4>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d843      	bhi.n	80033da <GPIO_Clock_Enable+0xb6>
 8003352:	4a2a      	ldr	r2, [pc, #168]	@ (80033fc <GPIO_Clock_Enable+0xd8>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d024      	beq.n	80033a2 <GPIO_Clock_Enable+0x7e>
 8003358:	4a28      	ldr	r2, [pc, #160]	@ (80033fc <GPIO_Clock_Enable+0xd8>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d83d      	bhi.n	80033da <GPIO_Clock_Enable+0xb6>
 800335e:	4a28      	ldr	r2, [pc, #160]	@ (8003400 <GPIO_Clock_Enable+0xdc>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d017      	beq.n	8003394 <GPIO_Clock_Enable+0x70>
 8003364:	4a26      	ldr	r2, [pc, #152]	@ (8003400 <GPIO_Clock_Enable+0xdc>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d837      	bhi.n	80033da <GPIO_Clock_Enable+0xb6>
 800336a:	4a26      	ldr	r2, [pc, #152]	@ (8003404 <GPIO_Clock_Enable+0xe0>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d003      	beq.n	8003378 <GPIO_Clock_Enable+0x54>
 8003370:	4a25      	ldr	r2, [pc, #148]	@ (8003408 <GPIO_Clock_Enable+0xe4>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d007      	beq.n	8003386 <GPIO_Clock_Enable+0x62>
 8003376:	e030      	b.n	80033da <GPIO_Clock_Enable+0xb6>
        case (uint32_t)GPIOA: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN; break;
 8003378:	4b24      	ldr	r3, [pc, #144]	@ (800340c <GPIO_Clock_Enable+0xe8>)
 800337a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800337c:	4a23      	ldr	r2, [pc, #140]	@ (800340c <GPIO_Clock_Enable+0xe8>)
 800337e:	f043 0301 	orr.w	r3, r3, #1
 8003382:	6313      	str	r3, [r2, #48]	@ 0x30
 8003384:	e02c      	b.n	80033e0 <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOB: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN; break;
 8003386:	4b21      	ldr	r3, [pc, #132]	@ (800340c <GPIO_Clock_Enable+0xe8>)
 8003388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800338a:	4a20      	ldr	r2, [pc, #128]	@ (800340c <GPIO_Clock_Enable+0xe8>)
 800338c:	f043 0302 	orr.w	r3, r3, #2
 8003390:	6313      	str	r3, [r2, #48]	@ 0x30
 8003392:	e025      	b.n	80033e0 <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOC: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN; break;
 8003394:	4b1d      	ldr	r3, [pc, #116]	@ (800340c <GPIO_Clock_Enable+0xe8>)
 8003396:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003398:	4a1c      	ldr	r2, [pc, #112]	@ (800340c <GPIO_Clock_Enable+0xe8>)
 800339a:	f043 0304 	orr.w	r3, r3, #4
 800339e:	6313      	str	r3, [r2, #48]	@ 0x30
 80033a0:	e01e      	b.n	80033e0 <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOD: RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN; break;
 80033a2:	4b1a      	ldr	r3, [pc, #104]	@ (800340c <GPIO_Clock_Enable+0xe8>)
 80033a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033a6:	4a19      	ldr	r2, [pc, #100]	@ (800340c <GPIO_Clock_Enable+0xe8>)
 80033a8:	f043 0308 	orr.w	r3, r3, #8
 80033ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80033ae:	e017      	b.n	80033e0 <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOE: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN; break;
 80033b0:	4b16      	ldr	r3, [pc, #88]	@ (800340c <GPIO_Clock_Enable+0xe8>)
 80033b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b4:	4a15      	ldr	r2, [pc, #84]	@ (800340c <GPIO_Clock_Enable+0xe8>)
 80033b6:	f043 0310 	orr.w	r3, r3, #16
 80033ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80033bc:	e010      	b.n	80033e0 <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOF: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOFEN; break;
 80033be:	4b13      	ldr	r3, [pc, #76]	@ (800340c <GPIO_Clock_Enable+0xe8>)
 80033c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c2:	4a12      	ldr	r2, [pc, #72]	@ (800340c <GPIO_Clock_Enable+0xe8>)
 80033c4:	f043 0320 	orr.w	r3, r3, #32
 80033c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80033ca:	e009      	b.n	80033e0 <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOH: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN; break;
 80033cc:	4b0f      	ldr	r3, [pc, #60]	@ (800340c <GPIO_Clock_Enable+0xe8>)
 80033ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033d0:	4a0e      	ldr	r2, [pc, #56]	@ (800340c <GPIO_Clock_Enable+0xe8>)
 80033d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80033d8:	e002      	b.n	80033e0 <GPIO_Clock_Enable+0xbc>
        default: return GPIO_INVALID_PORT;
 80033da:	f04f 33ff 	mov.w	r3, #4294967295
 80033de:	e000      	b.n	80033e2 <GPIO_Clock_Enable+0xbe>
    }
    return GPIO_SUCCESS;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	370c      	adds	r7, #12
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	40021c00 	.word	0x40021c00
 80033f4:	40021400 	.word	0x40021400
 80033f8:	40021000 	.word	0x40021000
 80033fc:	40020c00 	.word	0x40020c00
 8003400:	40020800 	.word	0x40020800
 8003404:	40020000 	.word	0x40020000
 8003408:	40020400 	.word	0x40020400
 800340c:	40023800 	.word	0x40023800

08003410 <GPIO_Pin_Init>:


GPIO_Status GPIO_Pin_Init(GPIO_TypeDef *Port, uint8_t pin, uint8_t mode, uint8_t output_type, uint8_t speed, uint8_t pull, uint8_t alternate_function) {
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	4608      	mov	r0, r1
 800341a:	4611      	mov	r1, r2
 800341c:	461a      	mov	r2, r3
 800341e:	4603      	mov	r3, r0
 8003420:	70fb      	strb	r3, [r7, #3]
 8003422:	460b      	mov	r3, r1
 8003424:	70bb      	strb	r3, [r7, #2]
 8003426:	4613      	mov	r3, r2
 8003428:	707b      	strb	r3, [r7, #1]
//    if (pin > 15 || mode > 3 || speed > 3 || pull > 2) return GPIO_INVALID_PIN;

    GPIO_Clock_Enable(Port);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f7ff ff7a 	bl	8003324 <GPIO_Clock_Enable>

    // Reset and set mode
    Port->MODER &= ~(3 << PIN_POS(pin));
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	78fa      	ldrb	r2, [r7, #3]
 8003436:	0052      	lsls	r2, r2, #1
 8003438:	2103      	movs	r1, #3
 800343a:	fa01 f202 	lsl.w	r2, r1, r2
 800343e:	43d2      	mvns	r2, r2
 8003440:	401a      	ands	r2, r3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	601a      	str	r2, [r3, #0]
    Port->MODER |= mode << PIN_POS(pin);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	78b9      	ldrb	r1, [r7, #2]
 800344c:	78fa      	ldrb	r2, [r7, #3]
 800344e:	0052      	lsls	r2, r2, #1
 8003450:	fa01 f202 	lsl.w	r2, r1, r2
 8003454:	431a      	orrs	r2, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	601a      	str	r2, [r3, #0]

    // Reset and set output type
    Port->OTYPER &= ~(1 << pin);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	78fa      	ldrb	r2, [r7, #3]
 8003460:	2101      	movs	r1, #1
 8003462:	fa01 f202 	lsl.w	r2, r1, r2
 8003466:	43d2      	mvns	r2, r2
 8003468:	401a      	ands	r2, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	605a      	str	r2, [r3, #4]
    if (output_type != GPIO_Configuration.Output_Type.None) {
 800346e:	2202      	movs	r2, #2
 8003470:	787b      	ldrb	r3, [r7, #1]
 8003472:	4293      	cmp	r3, r2
 8003474:	d008      	beq.n	8003488 <GPIO_Pin_Init+0x78>
        Port->OTYPER |= output_type << pin;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	7879      	ldrb	r1, [r7, #1]
 800347c:	78fa      	ldrb	r2, [r7, #3]
 800347e:	fa01 f202 	lsl.w	r2, r1, r2
 8003482:	431a      	orrs	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	605a      	str	r2, [r3, #4]
    }

    // Reset and set speed
    Port->OSPEEDR &= ~(3 << PIN_POS(pin));
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	78fa      	ldrb	r2, [r7, #3]
 800348e:	0052      	lsls	r2, r2, #1
 8003490:	2103      	movs	r1, #3
 8003492:	fa01 f202 	lsl.w	r2, r1, r2
 8003496:	43d2      	mvns	r2, r2
 8003498:	401a      	ands	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	609a      	str	r2, [r3, #8]
    if (speed != GPIO_Configuration.Speed.None) {
 800349e:	2204      	movs	r2, #4
 80034a0:	7c3b      	ldrb	r3, [r7, #16]
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d009      	beq.n	80034ba <GPIO_Pin_Init+0xaa>
        Port->OSPEEDR |= speed << PIN_POS(pin);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	7c39      	ldrb	r1, [r7, #16]
 80034ac:	78fa      	ldrb	r2, [r7, #3]
 80034ae:	0052      	lsls	r2, r2, #1
 80034b0:	fa01 f202 	lsl.w	r2, r1, r2
 80034b4:	431a      	orrs	r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	609a      	str	r2, [r3, #8]
    }

    // Reset and set pull-up/pull-down
    Port->PUPDR &= ~(3 << PIN_POS(pin));
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	78fa      	ldrb	r2, [r7, #3]
 80034c0:	0052      	lsls	r2, r2, #1
 80034c2:	2103      	movs	r1, #3
 80034c4:	fa01 f202 	lsl.w	r2, r1, r2
 80034c8:	43d2      	mvns	r2, r2
 80034ca:	401a      	ands	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	60da      	str	r2, [r3, #12]
    if (pull != GPIO_Configuration.Pull.None) {
 80034d0:	2204      	movs	r2, #4
 80034d2:	7d3b      	ldrb	r3, [r7, #20]
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d009      	beq.n	80034ec <GPIO_Pin_Init+0xdc>
        Port->PUPDR |= pull << PIN_POS(pin);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	7d39      	ldrb	r1, [r7, #20]
 80034de:	78fa      	ldrb	r2, [r7, #3]
 80034e0:	0052      	lsls	r2, r2, #1
 80034e2:	fa01 f202 	lsl.w	r2, r1, r2
 80034e6:	431a      	orrs	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	60da      	str	r2, [r3, #12]
    }

    // Set alternate function
    if (mode == GPIO_Configuration.Mode.Alternate_Function) {
 80034ec:	2202      	movs	r2, #2
 80034ee:	78bb      	ldrb	r3, [r7, #2]
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d12f      	bne.n	8003554 <GPIO_Pin_Init+0x144>
        if (pin < GPIO_AF_SPLIT_POINT) {
 80034f4:	78fb      	ldrb	r3, [r7, #3]
 80034f6:	2b07      	cmp	r3, #7
 80034f8:	d815      	bhi.n	8003526 <GPIO_Pin_Init+0x116>
            Port->AFR[0] &= ~(0xF << (pin * 4));
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a1b      	ldr	r3, [r3, #32]
 80034fe:	78fa      	ldrb	r2, [r7, #3]
 8003500:	0092      	lsls	r2, r2, #2
 8003502:	210f      	movs	r1, #15
 8003504:	fa01 f202 	lsl.w	r2, r1, r2
 8003508:	43d2      	mvns	r2, r2
 800350a:	401a      	ands	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	621a      	str	r2, [r3, #32]
            Port->AFR[0] |= alternate_function << (pin * 4);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a1b      	ldr	r3, [r3, #32]
 8003514:	7e39      	ldrb	r1, [r7, #24]
 8003516:	78fa      	ldrb	r2, [r7, #3]
 8003518:	0092      	lsls	r2, r2, #2
 800351a:	fa01 f202 	lsl.w	r2, r1, r2
 800351e:	431a      	orrs	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	621a      	str	r2, [r3, #32]
 8003524:	e016      	b.n	8003554 <GPIO_Pin_Init+0x144>
        } else {
            Port->AFR[1] &= ~(0xF << ((pin - GPIO_AF_SPLIT_POINT) * 4));
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800352a:	78fa      	ldrb	r2, [r7, #3]
 800352c:	3a08      	subs	r2, #8
 800352e:	0092      	lsls	r2, r2, #2
 8003530:	210f      	movs	r1, #15
 8003532:	fa01 f202 	lsl.w	r2, r1, r2
 8003536:	43d2      	mvns	r2, r2
 8003538:	401a      	ands	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	625a      	str	r2, [r3, #36]	@ 0x24
            Port->AFR[1] |= alternate_function << ((pin - GPIO_AF_SPLIT_POINT) * 4);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003542:	7e39      	ldrb	r1, [r7, #24]
 8003544:	78fa      	ldrb	r2, [r7, #3]
 8003546:	3a08      	subs	r2, #8
 8003548:	0092      	lsls	r2, r2, #2
 800354a:	fa01 f202 	lsl.w	r2, r1, r2
 800354e:	431a      	orrs	r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    }

    return GPIO_SUCCESS;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
	...

08003560 <I2C1_DMA_TX_ISR>:
volatile bool I2C2_DMA_RX_ISR_Flag = 0;
volatile bool I2C3_DMA_RX_ISR_Flag = 0;


void I2C1_DMA_TX_ISR(void)
{
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0
	I2C1_DMA_TX_ISR_Flag = 1;
 8003564:	4b03      	ldr	r3, [pc, #12]	@ (8003574 <I2C1_DMA_TX_ISR+0x14>)
 8003566:	2201      	movs	r2, #1
 8003568:	701a      	strb	r2, [r3, #0]
}
 800356a:	bf00      	nop
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr
 8003574:	20000330 	.word	0x20000330

08003578 <I2C2_DMA_TX_ISR>:

void I2C2_DMA_TX_ISR(void)
{
 8003578:	b480      	push	{r7}
 800357a:	af00      	add	r7, sp, #0
	I2C2_DMA_TX_ISR_Flag = 1;
 800357c:	4b03      	ldr	r3, [pc, #12]	@ (800358c <I2C2_DMA_TX_ISR+0x14>)
 800357e:	2201      	movs	r2, #1
 8003580:	701a      	strb	r2, [r3, #0]
}
 8003582:	bf00      	nop
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr
 800358c:	20000331 	.word	0x20000331

08003590 <I2C3_DMA_TX_ISR>:

void I2C3_DMA_TX_ISR(void)
{
 8003590:	b480      	push	{r7}
 8003592:	af00      	add	r7, sp, #0
	I2C3_DMA_TX_ISR_Flag = 1;
 8003594:	4b03      	ldr	r3, [pc, #12]	@ (80035a4 <I2C3_DMA_TX_ISR+0x14>)
 8003596:	2201      	movs	r2, #1
 8003598:	701a      	strb	r2, [r3, #0]
}
 800359a:	bf00      	nop
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr
 80035a4:	20000332 	.word	0x20000332

080035a8 <I2C1_DMA_RX_ISR>:

void I2C1_DMA_RX_ISR(void)
{
 80035a8:	b480      	push	{r7}
 80035aa:	af00      	add	r7, sp, #0
	I2C1_DMA_RX_ISR_Flag = 1;
 80035ac:	4b03      	ldr	r3, [pc, #12]	@ (80035bc <I2C1_DMA_RX_ISR+0x14>)
 80035ae:	2201      	movs	r2, #1
 80035b0:	701a      	strb	r2, [r3, #0]
}
 80035b2:	bf00      	nop
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr
 80035bc:	20000333 	.word	0x20000333

080035c0 <I2C2_DMA_RX_ISR>:

void I2C2_DMA_RX_ISR(void)
{
 80035c0:	b480      	push	{r7}
 80035c2:	af00      	add	r7, sp, #0
	I2C2_DMA_RX_ISR_Flag = 1;
 80035c4:	4b03      	ldr	r3, [pc, #12]	@ (80035d4 <I2C2_DMA_RX_ISR+0x14>)
 80035c6:	2201      	movs	r2, #1
 80035c8:	701a      	strb	r2, [r3, #0]
}
 80035ca:	bf00      	nop
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr
 80035d4:	20000334 	.word	0x20000334

080035d8 <I2C3_DMA_RX_ISR>:

void I2C3_DMA_RX_ISR(void)
{
 80035d8:	b480      	push	{r7}
 80035da:	af00      	add	r7, sp, #0
	I2C3_DMA_RX_ISR_Flag = 1;
 80035dc:	4b03      	ldr	r3, [pc, #12]	@ (80035ec <I2C3_DMA_RX_ISR+0x14>)
 80035de:	2201      	movs	r2, #1
 80035e0:	701a      	strb	r2, [r3, #0]
}
 80035e2:	bf00      	nop
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr
 80035ec:	20000335 	.word	0x20000335

080035f0 <pin_setup>:


#define I2C_TIMEOUT  0xFFFF

static void pin_setup(I2C_Config *config)
{
 80035f0:	b590      	push	{r4, r7, lr}
 80035f2:	b087      	sub	sp, #28
 80035f4:	af04      	add	r7, sp, #16
 80035f6:	6078      	str	r0, [r7, #4]
	if(config->Port == I2C1)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a5a      	ldr	r2, [pc, #360]	@ (8003768 <pin_setup+0x178>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d152      	bne.n	80036a8 <pin_setup+0xb8>
	{
		if(config->SCL_Pin == I2C_Configuration.Pin.__I2C1__.SCL.PB6) GPIO_Pin_Init(GPIOB, 6, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Open_Drain, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.I2C_1);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	791b      	ldrb	r3, [r3, #4]
 8003606:	461a      	mov	r2, r3
 8003608:	23ce      	movs	r3, #206	@ 0xce
 800360a:	429a      	cmp	r2, r3
 800360c:	d10e      	bne.n	800362c <pin_setup+0x3c>
 800360e:	2002      	movs	r0, #2
 8003610:	2401      	movs	r4, #1
 8003612:	2303      	movs	r3, #3
 8003614:	2200      	movs	r2, #0
 8003616:	2104      	movs	r1, #4
 8003618:	9102      	str	r1, [sp, #8]
 800361a:	9201      	str	r2, [sp, #4]
 800361c:	9300      	str	r3, [sp, #0]
 800361e:	4623      	mov	r3, r4
 8003620:	4602      	mov	r2, r0
 8003622:	2106      	movs	r1, #6
 8003624:	4851      	ldr	r0, [pc, #324]	@ (800376c <pin_setup+0x17c>)
 8003626:	f7ff fef3 	bl	8003410 <GPIO_Pin_Init>
 800362a:	e013      	b.n	8003654 <pin_setup+0x64>
		else if(config->SCL_Pin == I2C_Configuration.Pin.__I2C1__.SCL.PB8) GPIO_Pin_Init(GPIOB, 8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Open_Drain, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.I2C_1);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	791b      	ldrb	r3, [r3, #4]
 8003630:	461a      	mov	r2, r3
 8003632:	23d0      	movs	r3, #208	@ 0xd0
 8003634:	429a      	cmp	r2, r3
 8003636:	d10d      	bne.n	8003654 <pin_setup+0x64>
 8003638:	2002      	movs	r0, #2
 800363a:	2401      	movs	r4, #1
 800363c:	2303      	movs	r3, #3
 800363e:	2200      	movs	r2, #0
 8003640:	2104      	movs	r1, #4
 8003642:	9102      	str	r1, [sp, #8]
 8003644:	9201      	str	r2, [sp, #4]
 8003646:	9300      	str	r3, [sp, #0]
 8003648:	4623      	mov	r3, r4
 800364a:	4602      	mov	r2, r0
 800364c:	2108      	movs	r1, #8
 800364e:	4847      	ldr	r0, [pc, #284]	@ (800376c <pin_setup+0x17c>)
 8003650:	f7ff fede 	bl	8003410 <GPIO_Pin_Init>

		if(config->SDA_Pin == I2C_Configuration.Pin.__I2C1__.SDA.PB7) GPIO_Pin_Init(GPIOB, 7, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Open_Drain, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.I2C_1);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	795b      	ldrb	r3, [r3, #5]
 8003658:	461a      	mov	r2, r3
 800365a:	23cf      	movs	r3, #207	@ 0xcf
 800365c:	429a      	cmp	r2, r3
 800365e:	d10e      	bne.n	800367e <pin_setup+0x8e>
 8003660:	2002      	movs	r0, #2
 8003662:	2401      	movs	r4, #1
 8003664:	2303      	movs	r3, #3
 8003666:	2200      	movs	r2, #0
 8003668:	2104      	movs	r1, #4
 800366a:	9102      	str	r1, [sp, #8]
 800366c:	9201      	str	r2, [sp, #4]
 800366e:	9300      	str	r3, [sp, #0]
 8003670:	4623      	mov	r3, r4
 8003672:	4602      	mov	r2, r0
 8003674:	2107      	movs	r1, #7
 8003676:	483d      	ldr	r0, [pc, #244]	@ (800376c <pin_setup+0x17c>)
 8003678:	f7ff feca 	bl	8003410 <GPIO_Pin_Init>
	else if(config->Port == I2C3)
	{
		if(config->SCL_Pin == I2C_Configuration.Pin.__I2C3__.SCL.PA8) GPIO_Pin_Init(GPIOA, 8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Open_Drain, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.I2C_3);
		if(config->SDA_Pin == I2C_Configuration.Pin.__I2C3__.SDA.PC9) GPIO_Pin_Init(GPIOC, 9, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Open_Drain, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.I2C_3);
	}
}
 800367c:	e070      	b.n	8003760 <pin_setup+0x170>
		else if(config->SDA_Pin == I2C_Configuration.Pin.__I2C1__.SDA.PB9) GPIO_Pin_Init(GPIOB, 9, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Open_Drain, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.I2C_1);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	795b      	ldrb	r3, [r3, #5]
 8003682:	461a      	mov	r2, r3
 8003684:	23d1      	movs	r3, #209	@ 0xd1
 8003686:	429a      	cmp	r2, r3
 8003688:	d16a      	bne.n	8003760 <pin_setup+0x170>
 800368a:	2002      	movs	r0, #2
 800368c:	2401      	movs	r4, #1
 800368e:	2303      	movs	r3, #3
 8003690:	2200      	movs	r2, #0
 8003692:	2104      	movs	r1, #4
 8003694:	9102      	str	r1, [sp, #8]
 8003696:	9201      	str	r2, [sp, #4]
 8003698:	9300      	str	r3, [sp, #0]
 800369a:	4623      	mov	r3, r4
 800369c:	4602      	mov	r2, r0
 800369e:	2109      	movs	r1, #9
 80036a0:	4832      	ldr	r0, [pc, #200]	@ (800376c <pin_setup+0x17c>)
 80036a2:	f7ff feb5 	bl	8003410 <GPIO_Pin_Init>
}
 80036a6:	e05b      	b.n	8003760 <pin_setup+0x170>
	else if(config->Port == I2C2)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a30      	ldr	r2, [pc, #192]	@ (8003770 <pin_setup+0x180>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d128      	bne.n	8003704 <pin_setup+0x114>
		if(config->SCL_Pin == I2C_Configuration.Pin.__I2C2__.SCL.PB10) GPIO_Pin_Init(GPIOB, 10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Open_Drain, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.I2C_2);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	791b      	ldrb	r3, [r3, #4]
 80036b6:	461a      	mov	r2, r3
 80036b8:	23d3      	movs	r3, #211	@ 0xd3
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d10d      	bne.n	80036da <pin_setup+0xea>
 80036be:	2002      	movs	r0, #2
 80036c0:	2401      	movs	r4, #1
 80036c2:	2303      	movs	r3, #3
 80036c4:	2200      	movs	r2, #0
 80036c6:	2104      	movs	r1, #4
 80036c8:	9102      	str	r1, [sp, #8]
 80036ca:	9201      	str	r2, [sp, #4]
 80036cc:	9300      	str	r3, [sp, #0]
 80036ce:	4623      	mov	r3, r4
 80036d0:	4602      	mov	r2, r0
 80036d2:	210a      	movs	r1, #10
 80036d4:	4825      	ldr	r0, [pc, #148]	@ (800376c <pin_setup+0x17c>)
 80036d6:	f7ff fe9b 	bl	8003410 <GPIO_Pin_Init>
		if(config->SDA_Pin == I2C_Configuration.Pin.__I2C2__.SDA.PB11) GPIO_Pin_Init(GPIOB, 11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Open_Drain, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.I2C_2);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	795b      	ldrb	r3, [r3, #5]
 80036de:	461a      	mov	r2, r3
 80036e0:	23d2      	movs	r3, #210	@ 0xd2
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d13c      	bne.n	8003760 <pin_setup+0x170>
 80036e6:	2002      	movs	r0, #2
 80036e8:	2401      	movs	r4, #1
 80036ea:	2303      	movs	r3, #3
 80036ec:	2200      	movs	r2, #0
 80036ee:	2104      	movs	r1, #4
 80036f0:	9102      	str	r1, [sp, #8]
 80036f2:	9201      	str	r2, [sp, #4]
 80036f4:	9300      	str	r3, [sp, #0]
 80036f6:	4623      	mov	r3, r4
 80036f8:	4602      	mov	r2, r0
 80036fa:	210b      	movs	r1, #11
 80036fc:	481b      	ldr	r0, [pc, #108]	@ (800376c <pin_setup+0x17c>)
 80036fe:	f7ff fe87 	bl	8003410 <GPIO_Pin_Init>
}
 8003702:	e02d      	b.n	8003760 <pin_setup+0x170>
	else if(config->Port == I2C3)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a1a      	ldr	r2, [pc, #104]	@ (8003774 <pin_setup+0x184>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d128      	bne.n	8003760 <pin_setup+0x170>
		if(config->SCL_Pin == I2C_Configuration.Pin.__I2C3__.SCL.PA8) GPIO_Pin_Init(GPIOA, 8, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Open_Drain, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.I2C_3);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	791b      	ldrb	r3, [r3, #4]
 8003712:	461a      	mov	r2, r3
 8003714:	236c      	movs	r3, #108	@ 0x6c
 8003716:	429a      	cmp	r2, r3
 8003718:	d10d      	bne.n	8003736 <pin_setup+0x146>
 800371a:	2002      	movs	r0, #2
 800371c:	2401      	movs	r4, #1
 800371e:	2303      	movs	r3, #3
 8003720:	2200      	movs	r2, #0
 8003722:	2104      	movs	r1, #4
 8003724:	9102      	str	r1, [sp, #8]
 8003726:	9201      	str	r2, [sp, #4]
 8003728:	9300      	str	r3, [sp, #0]
 800372a:	4623      	mov	r3, r4
 800372c:	4602      	mov	r2, r0
 800372e:	2108      	movs	r1, #8
 8003730:	4811      	ldr	r0, [pc, #68]	@ (8003778 <pin_setup+0x188>)
 8003732:	f7ff fe6d 	bl	8003410 <GPIO_Pin_Init>
		if(config->SDA_Pin == I2C_Configuration.Pin.__I2C3__.SDA.PC9) GPIO_Pin_Init(GPIOC, 9, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Open_Drain, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.I2C_3);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	795b      	ldrb	r3, [r3, #5]
 800373a:	461a      	mov	r2, r3
 800373c:	f240 1335 	movw	r3, #309	@ 0x135
 8003740:	429a      	cmp	r2, r3
 8003742:	d10d      	bne.n	8003760 <pin_setup+0x170>
 8003744:	2002      	movs	r0, #2
 8003746:	2401      	movs	r4, #1
 8003748:	2303      	movs	r3, #3
 800374a:	2200      	movs	r2, #0
 800374c:	2104      	movs	r1, #4
 800374e:	9102      	str	r1, [sp, #8]
 8003750:	9201      	str	r2, [sp, #4]
 8003752:	9300      	str	r3, [sp, #0]
 8003754:	4623      	mov	r3, r4
 8003756:	4602      	mov	r2, r0
 8003758:	2109      	movs	r1, #9
 800375a:	4808      	ldr	r0, [pc, #32]	@ (800377c <pin_setup+0x18c>)
 800375c:	f7ff fe58 	bl	8003410 <GPIO_Pin_Init>
}
 8003760:	bf00      	nop
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	bd90      	pop	{r4, r7, pc}
 8003768:	40005400 	.word	0x40005400
 800376c:	40020400 	.word	0x40020400
 8003770:	40005800 	.word	0x40005800
 8003774:	40005c00 	.word	0x40005c00
 8003778:	40020000 	.word	0x40020000
 800377c:	40020800 	.word	0x40020800

08003780 <I2C_Clock_Enable>:

void I2C_Clock_Enable(I2C_Config *config)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
	if(config->Port == I2C1)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a13      	ldr	r2, [pc, #76]	@ (80037dc <I2C_Clock_Enable+0x5c>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d106      	bne.n	80037a0 <I2C_Clock_Enable+0x20>
	{
		RCC -> APB1ENR |= RCC_APB1ENR_I2C1EN;
 8003792:	4b13      	ldr	r3, [pc, #76]	@ (80037e0 <I2C_Clock_Enable+0x60>)
 8003794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003796:	4a12      	ldr	r2, [pc, #72]	@ (80037e0 <I2C_Clock_Enable+0x60>)
 8003798:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800379c:	6413      	str	r3, [r2, #64]	@ 0x40
	}
	else if(config->Port == I2C3)
	{
		RCC -> APB1ENR |= RCC_APB1ENR_I2C3EN;
	}
}
 800379e:	e016      	b.n	80037ce <I2C_Clock_Enable+0x4e>
	else if(config->Port == I2C2)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a0f      	ldr	r2, [pc, #60]	@ (80037e4 <I2C_Clock_Enable+0x64>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d106      	bne.n	80037b8 <I2C_Clock_Enable+0x38>
		RCC -> APB1ENR |= RCC_APB1ENR_I2C2EN;
 80037aa:	4b0d      	ldr	r3, [pc, #52]	@ (80037e0 <I2C_Clock_Enable+0x60>)
 80037ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ae:	4a0c      	ldr	r2, [pc, #48]	@ (80037e0 <I2C_Clock_Enable+0x60>)
 80037b0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80037b4:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80037b6:	e00a      	b.n	80037ce <I2C_Clock_Enable+0x4e>
	else if(config->Port == I2C3)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a0a      	ldr	r2, [pc, #40]	@ (80037e8 <I2C_Clock_Enable+0x68>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d105      	bne.n	80037ce <I2C_Clock_Enable+0x4e>
		RCC -> APB1ENR |= RCC_APB1ENR_I2C3EN;
 80037c2:	4b07      	ldr	r3, [pc, #28]	@ (80037e0 <I2C_Clock_Enable+0x60>)
 80037c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c6:	4a06      	ldr	r2, [pc, #24]	@ (80037e0 <I2C_Clock_Enable+0x60>)
 80037c8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80037cc:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80037ce:	bf00      	nop
 80037d0:	370c      	adds	r7, #12
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	40005400 	.word	0x40005400
 80037e0:	40023800 	.word	0x40023800
 80037e4:	40005800 	.word	0x40005800
 80037e8:	40005c00 	.word	0x40005c00

080037ec <I2C_Init>:
	config->Mode = I2C_Configuration.Mode.Master;
	I2C_Clock_Disable(config);
}

void I2C_Init(I2C_Config *config)
{
 80037ec:	b590      	push	{r4, r7, lr}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
	pin_setup(config);
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f7ff fefb 	bl	80035f0 <pin_setup>
	I2C_Clock_Enable(config);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f7ff ffc0 	bl	8003780 <I2C_Clock_Enable>

	config -> Port -> CR1 &= ~I2C_CR1_PE;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f022 0201 	bic.w	r2, r2, #1
 800380e:	601a      	str	r2, [r3, #0]
	config -> Port -> CR1 |= I2C_CR1_SWRST;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800381e:	601a      	str	r2, [r3, #0]
	config->Port -> CR1 &= ~I2C_CR1_SWRST;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800382e:	601a      	str	r2, [r3, #0]
	config -> Port -> CR1 &= ~I2C_CR1_NOSTRETCH;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800383e:	601a      	str	r2, [r3, #0]


	if(config -> Interrupts_Enable == I2C_Configuration.Interrupts_Enable.Disable)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	7b5b      	ldrb	r3, [r3, #13]
 8003844:	461a      	mov	r2, r3
 8003846:	2300      	movs	r3, #0
 8003848:	429a      	cmp	r2, r3
 800384a:	d108      	bne.n	800385e <I2C_Init+0x72>
	{
		config -> Port -> CR2 &= ~(I2C_CR2_ITBUFEN | I2C_CR2_ITERREN | I2C_CR2_ITEVTEN);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	685a      	ldr	r2, [r3, #4]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800385a:	605a      	str	r2, [r3, #4]
 800385c:	e029      	b.n	80038b2 <I2C_Init+0xc6>
	}
	else
	{
		if(config->Interrupts_Enable == I2C_Configuration.Interrupts_Enable.Buffer)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	7b5b      	ldrb	r3, [r3, #13]
 8003862:	461a      	mov	r2, r3
 8003864:	2303      	movs	r3, #3
 8003866:	429a      	cmp	r2, r3
 8003868:	d107      	bne.n	800387a <I2C_Init+0x8e>
		{
			config -> Port -> CR2 |= I2C_CR2_ITBUFEN;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	685a      	ldr	r2, [r3, #4]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003878:	605a      	str	r2, [r3, #4]
		}
		if(config->Interrupts_Enable == I2C_Configuration.Interrupts_Enable.Error)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	7b5b      	ldrb	r3, [r3, #13]
 800387e:	461a      	mov	r2, r3
 8003880:	2301      	movs	r3, #1
 8003882:	429a      	cmp	r2, r3
 8003884:	d107      	bne.n	8003896 <I2C_Init+0xaa>
		{
			config -> Port -> CR2 |= I2C_CR2_ITERREN;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	685a      	ldr	r2, [r3, #4]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003894:	605a      	str	r2, [r3, #4]
		}
		if(config->Interrupts_Enable == I2C_Configuration.Interrupts_Enable.Event)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	7b5b      	ldrb	r3, [r3, #13]
 800389a:	461a      	mov	r2, r3
 800389c:	2302      	movs	r3, #2
 800389e:	429a      	cmp	r2, r3
 80038a0:	d107      	bne.n	80038b2 <I2C_Init+0xc6>
		{
			config -> Port -> CR2 |= I2C_CR2_ITEVTEN;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	685a      	ldr	r2, [r3, #4]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038b0:	605a      	str	r2, [r3, #4]
	}

	//CCR ==> [Tr + Tw]/(1/48000000)
	//TRISE ==> [Tr/(1/48000000)]

	if(config->Speed_Mode == I2C_Configuration.Speed_Mode.FM_Mode)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	2201      	movs	r2, #1
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d111      	bne.n	80038e0 <I2C_Init+0xf4>
	{
		config->Port -> CR2 |= 42; //42MHz
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	685a      	ldr	r2, [r3, #4]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f042 022a 	orr.w	r2, r2, #42	@ 0x2a
 80038ca:	605a      	str	r2, [r3, #4]
		config->Port -> CCR = (0<<15) | (1<<14) | 52;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f244 0234 	movw	r2, #16436	@ 0x4034
 80038d4:	61da      	str	r2, [r3, #28]
		config->Port -> TRISE = 13;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	220d      	movs	r2, #13
 80038dc:	621a      	str	r2, [r3, #32]
 80038de:	e00c      	b.n	80038fa <I2C_Init+0x10e>
	}
	else
	{
		config-> Port  -> CR2 = 42;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	222a      	movs	r2, #42	@ 0x2a
 80038e6:	605a      	str	r2, [r3, #4]
		config->Port -> CCR = (0<<15) | (1<<14) | 210;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f244 02d2 	movw	r2, #16594	@ 0x40d2
 80038f0:	61da      	str	r2, [r3, #28]
		config->Port  -> TRISE = 43;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	222b      	movs	r2, #43	@ 0x2b
 80038f8:	621a      	str	r2, [r3, #32]
	}

	if((config -> DMA_Control & I2C_Configuration.DMA_Control.RX_DMA_Enable) == true)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	7b9b      	ldrb	r3, [r3, #14]
 80038fe:	2202      	movs	r2, #2
 8003900:	4013      	ands	r3, r2
 8003902:	b2db      	uxtb	r3, r3
 8003904:	2b01      	cmp	r3, #1
 8003906:	f040 8095 	bne.w	8003a34 <I2C_Init+0x248>
	{
		config -> Port -> CR2 |= I2C_CR2_LAST;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	685a      	ldr	r2, [r3, #4]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003918:	605a      	str	r2, [r3, #4]

		if(config->Port == I2C1)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a9a      	ldr	r2, [pc, #616]	@ (8003b88 <I2C_Init+0x39c>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d126      	bne.n	8003972 <I2C_Init+0x186>
		{
			xI2C1_RX.ISR_Routines.Full_Transfer_Commplete_ISR = I2C1_DMA_RX_ISR;
 8003924:	4b99      	ldr	r3, [pc, #612]	@ (8003b8c <I2C_Init+0x3a0>)
 8003926:	4a9a      	ldr	r2, [pc, #616]	@ (8003b90 <I2C_Init+0x3a4>)
 8003928:	64da      	str	r2, [r3, #76]	@ 0x4c
//			config -> Port -> CR2 |= I2C_CR2_DMAEN;
			xI2C1_RX.Request = DMA_Configuration.Request.I2C1_RX;
 800392a:	4a98      	ldr	r2, [pc, #608]	@ (8003b8c <I2C_Init+0x3a0>)
 800392c:	4b99      	ldr	r3, [pc, #612]	@ (8003b94 <I2C_Init+0x3a8>)
 800392e:	4614      	mov	r4, r2
 8003930:	3378      	adds	r3, #120	@ 0x78
 8003932:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003936:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			xI2C1_RX.circular_mode = DMA_Configuration.Circular_Mode.Disable;
 800393a:	2200      	movs	r2, #0
 800393c:	4b93      	ldr	r3, [pc, #588]	@ (8003b8c <I2C_Init+0x3a0>)
 800393e:	619a      	str	r2, [r3, #24]
			xI2C1_RX.flow_control = DMA_Configuration.Flow_Control.DMA_Control;
 8003940:	2200      	movs	r2, #0
 8003942:	4b92      	ldr	r3, [pc, #584]	@ (8003b8c <I2C_Init+0x3a0>)
 8003944:	60da      	str	r2, [r3, #12]
			xI2C1_RX.memory_data_size = DMA_Configuration.Memory_Data_Size.byte;
 8003946:	2200      	movs	r2, #0
 8003948:	4b90      	ldr	r3, [pc, #576]	@ (8003b8c <I2C_Init+0x3a0>)
 800394a:	629a      	str	r2, [r3, #40]	@ 0x28
			xI2C1_RX.memory_pointer_increment = DMA_Configuration.Memory_Pointer_Increment.Enable;
 800394c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003950:	b29a      	uxth	r2, r3
 8003952:	4b8e      	ldr	r3, [pc, #568]	@ (8003b8c <I2C_Init+0x3a0>)
 8003954:	841a      	strh	r2, [r3, #32]
			xI2C1_RX.peripheral_data_size = DMA_Configuration.Peripheral_Data_Size.byte;
 8003956:	2200      	movs	r2, #0
 8003958:	4b8c      	ldr	r3, [pc, #560]	@ (8003b8c <I2C_Init+0x3a0>)
 800395a:	625a      	str	r2, [r3, #36]	@ 0x24
			xI2C1_RX.transfer_direction = DMA_Configuration.Transfer_Direction.Peripheral_to_memory;
 800395c:	2200      	movs	r2, #0
 800395e:	4b8b      	ldr	r3, [pc, #556]	@ (8003b8c <I2C_Init+0x3a0>)
 8003960:	611a      	str	r2, [r3, #16]
			xI2C1_RX.priority_level = DMA_Configuration.Priority_Level.Very_high;
 8003962:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003966:	4b89      	ldr	r3, [pc, #548]	@ (8003b8c <I2C_Init+0x3a0>)
 8003968:	615a      	str	r2, [r3, #20]
			DMA_Init(&xI2C1_RX);
 800396a:	4888      	ldr	r0, [pc, #544]	@ (8003b8c <I2C_Init+0x3a0>)
 800396c:	f7fe fff6 	bl	800295c <DMA_Init>
 8003970:	e060      	b.n	8003a34 <I2C_Init+0x248>

		}

		else if(config->Port == I2C2)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a88      	ldr	r2, [pc, #544]	@ (8003b98 <I2C_Init+0x3ac>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d12b      	bne.n	80039d4 <I2C_Init+0x1e8>
		{
			xI2C2_RX.Request = DMA_Configuration.Request.I2C2_RX;
 800397c:	4a87      	ldr	r2, [pc, #540]	@ (8003b9c <I2C_Init+0x3b0>)
 800397e:	4b85      	ldr	r3, [pc, #532]	@ (8003b94 <I2C_Init+0x3a8>)
 8003980:	4614      	mov	r4, r2
 8003982:	3390      	adds	r3, #144	@ 0x90
 8003984:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003988:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			xI2C2_RX.circular_mode = DMA_Configuration.Circular_Mode.Disable;
 800398c:	2200      	movs	r2, #0
 800398e:	4b83      	ldr	r3, [pc, #524]	@ (8003b9c <I2C_Init+0x3b0>)
 8003990:	619a      	str	r2, [r3, #24]
			xI2C2_RX.flow_control = DMA_Configuration.Flow_Control.DMA_Control;
 8003992:	2200      	movs	r2, #0
 8003994:	4b81      	ldr	r3, [pc, #516]	@ (8003b9c <I2C_Init+0x3b0>)
 8003996:	60da      	str	r2, [r3, #12]
			xI2C2_RX.memory_data_size = DMA_Configuration.Memory_Data_Size.byte;
 8003998:	2200      	movs	r2, #0
 800399a:	4b80      	ldr	r3, [pc, #512]	@ (8003b9c <I2C_Init+0x3b0>)
 800399c:	629a      	str	r2, [r3, #40]	@ 0x28
			xI2C2_RX.memory_pointer_increment = DMA_Configuration.Memory_Pointer_Increment.Enable;
 800399e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	4b7d      	ldr	r3, [pc, #500]	@ (8003b9c <I2C_Init+0x3b0>)
 80039a6:	841a      	strh	r2, [r3, #32]
			xI2C2_RX.peripheral_data_size = DMA_Configuration.Peripheral_Data_Size.byte;
 80039a8:	2200      	movs	r2, #0
 80039aa:	4b7c      	ldr	r3, [pc, #496]	@ (8003b9c <I2C_Init+0x3b0>)
 80039ac:	625a      	str	r2, [r3, #36]	@ 0x24
			xI2C2_RX.peripheral_pointer_increment = DMA_Configuration.Peripheral_Pointer_Increment.Enable;
 80039ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80039b2:	b29a      	uxth	r2, r3
 80039b4:	4b79      	ldr	r3, [pc, #484]	@ (8003b9c <I2C_Init+0x3b0>)
 80039b6:	845a      	strh	r2, [r3, #34]	@ 0x22
			xI2C2_RX.transfer_direction = DMA_Configuration.Transfer_Direction.Peripheral_to_memory;
 80039b8:	2200      	movs	r2, #0
 80039ba:	4b78      	ldr	r3, [pc, #480]	@ (8003b9c <I2C_Init+0x3b0>)
 80039bc:	611a      	str	r2, [r3, #16]
			xI2C2_RX.priority_level = DMA_Configuration.Priority_Level.Very_high;
 80039be:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80039c2:	4b76      	ldr	r3, [pc, #472]	@ (8003b9c <I2C_Init+0x3b0>)
 80039c4:	615a      	str	r2, [r3, #20]
			xI2C2_RX.ISR_Routines.Full_Transfer_Commplete_ISR = I2C2_DMA_RX_ISR;
 80039c6:	4b75      	ldr	r3, [pc, #468]	@ (8003b9c <I2C_Init+0x3b0>)
 80039c8:	4a75      	ldr	r2, [pc, #468]	@ (8003ba0 <I2C_Init+0x3b4>)
 80039ca:	64da      	str	r2, [r3, #76]	@ 0x4c
			DMA_Init(&xI2C2_RX);
 80039cc:	4873      	ldr	r0, [pc, #460]	@ (8003b9c <I2C_Init+0x3b0>)
 80039ce:	f7fe ffc5 	bl	800295c <DMA_Init>
 80039d2:	e02f      	b.n	8003a34 <I2C_Init+0x248>
		}

		else if(config->Port == I2C3)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a72      	ldr	r2, [pc, #456]	@ (8003ba4 <I2C_Init+0x3b8>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d12a      	bne.n	8003a34 <I2C_Init+0x248>
		{
			xI2C3_RX.Request = DMA_Configuration.Request.I2C3_RX;
 80039de:	4a72      	ldr	r2, [pc, #456]	@ (8003ba8 <I2C_Init+0x3bc>)
 80039e0:	4b6c      	ldr	r3, [pc, #432]	@ (8003b94 <I2C_Init+0x3a8>)
 80039e2:	4614      	mov	r4, r2
 80039e4:	33a8      	adds	r3, #168	@ 0xa8
 80039e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80039ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			xI2C3_RX.circular_mode = DMA_Configuration.Circular_Mode.Disable;
 80039ee:	2200      	movs	r2, #0
 80039f0:	4b6d      	ldr	r3, [pc, #436]	@ (8003ba8 <I2C_Init+0x3bc>)
 80039f2:	619a      	str	r2, [r3, #24]
			xI2C3_RX.flow_control = DMA_Configuration.Flow_Control.DMA_Control;
 80039f4:	2200      	movs	r2, #0
 80039f6:	4b6c      	ldr	r3, [pc, #432]	@ (8003ba8 <I2C_Init+0x3bc>)
 80039f8:	60da      	str	r2, [r3, #12]
			xI2C3_RX.memory_data_size = DMA_Configuration.Memory_Data_Size.byte;
 80039fa:	2200      	movs	r2, #0
 80039fc:	4b6a      	ldr	r3, [pc, #424]	@ (8003ba8 <I2C_Init+0x3bc>)
 80039fe:	629a      	str	r2, [r3, #40]	@ 0x28
			xI2C3_RX.memory_pointer_increment = DMA_Configuration.Memory_Pointer_Increment.Enable;
 8003a00:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003a04:	b29a      	uxth	r2, r3
 8003a06:	4b68      	ldr	r3, [pc, #416]	@ (8003ba8 <I2C_Init+0x3bc>)
 8003a08:	841a      	strh	r2, [r3, #32]
			xI2C3_RX.peripheral_data_size = DMA_Configuration.Peripheral_Data_Size.byte;
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	4b66      	ldr	r3, [pc, #408]	@ (8003ba8 <I2C_Init+0x3bc>)
 8003a0e:	625a      	str	r2, [r3, #36]	@ 0x24
			xI2C3_RX.peripheral_pointer_increment = DMA_Configuration.Peripheral_Pointer_Increment.Enable;
 8003a10:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003a14:	b29a      	uxth	r2, r3
 8003a16:	4b64      	ldr	r3, [pc, #400]	@ (8003ba8 <I2C_Init+0x3bc>)
 8003a18:	845a      	strh	r2, [r3, #34]	@ 0x22
			xI2C3_RX.transfer_direction = DMA_Configuration.Transfer_Direction.Peripheral_to_memory;
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	4b62      	ldr	r3, [pc, #392]	@ (8003ba8 <I2C_Init+0x3bc>)
 8003a1e:	611a      	str	r2, [r3, #16]
			xI2C3_RX.priority_level = DMA_Configuration.Priority_Level.Very_high;
 8003a20:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003a24:	4b60      	ldr	r3, [pc, #384]	@ (8003ba8 <I2C_Init+0x3bc>)
 8003a26:	615a      	str	r2, [r3, #20]
			xI2C3_RX.ISR_Routines.Full_Transfer_Commplete_ISR = I2C3_DMA_RX_ISR;
 8003a28:	4b5f      	ldr	r3, [pc, #380]	@ (8003ba8 <I2C_Init+0x3bc>)
 8003a2a:	4a60      	ldr	r2, [pc, #384]	@ (8003bac <I2C_Init+0x3c0>)
 8003a2c:	64da      	str	r2, [r3, #76]	@ 0x4c
			DMA_Init(&xI2C3_RX);
 8003a2e:	485e      	ldr	r0, [pc, #376]	@ (8003ba8 <I2C_Init+0x3bc>)
 8003a30:	f7fe ff94 	bl	800295c <DMA_Init>
		}

	}

	if((config -> DMA_Control & I2C_Configuration.DMA_Control.TX_DMA_Enable) == true)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	7b9b      	ldrb	r3, [r3, #14]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	f040 8095 	bne.w	8003b6e <I2C_Init+0x382>
	{
		config -> Port -> CR2 |= I2C_CR2_LAST;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	685a      	ldr	r2, [r3, #4]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003a52:	605a      	str	r2, [r3, #4]

		if(config->Port == I2C1)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a4b      	ldr	r2, [pc, #300]	@ (8003b88 <I2C_Init+0x39c>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d126      	bne.n	8003aac <I2C_Init+0x2c0>
		{
			xI2C1_TX.ISR_Routines.Full_Transfer_Commplete_ISR = I2C1_DMA_TX_ISR;
 8003a5e:	4b54      	ldr	r3, [pc, #336]	@ (8003bb0 <I2C_Init+0x3c4>)
 8003a60:	4a54      	ldr	r2, [pc, #336]	@ (8003bb4 <I2C_Init+0x3c8>)
 8003a62:	64da      	str	r2, [r3, #76]	@ 0x4c

//			config -> Port -> CR2 |= I2C_CR2_DMAEN;
			xI2C1_TX.Request = DMA_Configuration.Request.I2C1_TX;
 8003a64:	4a52      	ldr	r2, [pc, #328]	@ (8003bb0 <I2C_Init+0x3c4>)
 8003a66:	4b4b      	ldr	r3, [pc, #300]	@ (8003b94 <I2C_Init+0x3a8>)
 8003a68:	4614      	mov	r4, r2
 8003a6a:	3384      	adds	r3, #132	@ 0x84
 8003a6c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003a70:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			xI2C1_TX.circular_mode = DMA_Configuration.Circular_Mode.Disable;
 8003a74:	2200      	movs	r2, #0
 8003a76:	4b4e      	ldr	r3, [pc, #312]	@ (8003bb0 <I2C_Init+0x3c4>)
 8003a78:	619a      	str	r2, [r3, #24]
			xI2C1_TX.flow_control = DMA_Configuration.Flow_Control.DMA_Control;
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	4b4c      	ldr	r3, [pc, #304]	@ (8003bb0 <I2C_Init+0x3c4>)
 8003a7e:	60da      	str	r2, [r3, #12]
			xI2C1_TX.memory_data_size = DMA_Configuration.Memory_Data_Size.byte;
 8003a80:	2200      	movs	r2, #0
 8003a82:	4b4b      	ldr	r3, [pc, #300]	@ (8003bb0 <I2C_Init+0x3c4>)
 8003a84:	629a      	str	r2, [r3, #40]	@ 0x28
			xI2C1_TX.memory_pointer_increment = DMA_Configuration.Memory_Pointer_Increment.Enable;
 8003a86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003a8a:	b29a      	uxth	r2, r3
 8003a8c:	4b48      	ldr	r3, [pc, #288]	@ (8003bb0 <I2C_Init+0x3c4>)
 8003a8e:	841a      	strh	r2, [r3, #32]
			xI2C1_TX.peripheral_data_size = DMA_Configuration.Peripheral_Data_Size.byte;
 8003a90:	2200      	movs	r2, #0
 8003a92:	4b47      	ldr	r3, [pc, #284]	@ (8003bb0 <I2C_Init+0x3c4>)
 8003a94:	625a      	str	r2, [r3, #36]	@ 0x24
			xI2C1_TX.transfer_direction = DMA_Configuration.Transfer_Direction.Memory_to_peripheral;
 8003a96:	2240      	movs	r2, #64	@ 0x40
 8003a98:	4b45      	ldr	r3, [pc, #276]	@ (8003bb0 <I2C_Init+0x3c4>)
 8003a9a:	611a      	str	r2, [r3, #16]
			xI2C1_TX.priority_level = DMA_Configuration.Priority_Level.Very_high;
 8003a9c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003aa0:	4b43      	ldr	r3, [pc, #268]	@ (8003bb0 <I2C_Init+0x3c4>)
 8003aa2:	615a      	str	r2, [r3, #20]
			DMA_Init(&xI2C1_TX);
 8003aa4:	4842      	ldr	r0, [pc, #264]	@ (8003bb0 <I2C_Init+0x3c4>)
 8003aa6:	f7fe ff59 	bl	800295c <DMA_Init>
 8003aaa:	e060      	b.n	8003b6e <I2C_Init+0x382>

		}

		else if(config->Port == I2C2)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a39      	ldr	r2, [pc, #228]	@ (8003b98 <I2C_Init+0x3ac>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d12b      	bne.n	8003b0e <I2C_Init+0x322>
		{
			xI2C2_TX.ISR_Routines.Full_Transfer_Commplete_ISR = I2C2_DMA_TX_ISR;
 8003ab6:	4b40      	ldr	r3, [pc, #256]	@ (8003bb8 <I2C_Init+0x3cc>)
 8003ab8:	4a40      	ldr	r2, [pc, #256]	@ (8003bbc <I2C_Init+0x3d0>)
 8003aba:	64da      	str	r2, [r3, #76]	@ 0x4c
			xI2C2_TX.Request = DMA_Configuration.Request.I2C2_TX;
 8003abc:	4a3e      	ldr	r2, [pc, #248]	@ (8003bb8 <I2C_Init+0x3cc>)
 8003abe:	4b35      	ldr	r3, [pc, #212]	@ (8003b94 <I2C_Init+0x3a8>)
 8003ac0:	4614      	mov	r4, r2
 8003ac2:	339c      	adds	r3, #156	@ 0x9c
 8003ac4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003ac8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			xI2C2_TX.circular_mode = DMA_Configuration.Circular_Mode.Disable;
 8003acc:	2200      	movs	r2, #0
 8003ace:	4b3a      	ldr	r3, [pc, #232]	@ (8003bb8 <I2C_Init+0x3cc>)
 8003ad0:	619a      	str	r2, [r3, #24]
			xI2C2_TX.flow_control = DMA_Configuration.Flow_Control.DMA_Control;
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	4b38      	ldr	r3, [pc, #224]	@ (8003bb8 <I2C_Init+0x3cc>)
 8003ad6:	60da      	str	r2, [r3, #12]
			xI2C2_TX.memory_data_size = DMA_Configuration.Memory_Data_Size.byte;
 8003ad8:	2200      	movs	r2, #0
 8003ada:	4b37      	ldr	r3, [pc, #220]	@ (8003bb8 <I2C_Init+0x3cc>)
 8003adc:	629a      	str	r2, [r3, #40]	@ 0x28
			xI2C2_TX.memory_pointer_increment = DMA_Configuration.Memory_Pointer_Increment.Enable;
 8003ade:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003ae2:	b29a      	uxth	r2, r3
 8003ae4:	4b34      	ldr	r3, [pc, #208]	@ (8003bb8 <I2C_Init+0x3cc>)
 8003ae6:	841a      	strh	r2, [r3, #32]
			xI2C2_TX.peripheral_data_size = DMA_Configuration.Peripheral_Data_Size.byte;
 8003ae8:	2200      	movs	r2, #0
 8003aea:	4b33      	ldr	r3, [pc, #204]	@ (8003bb8 <I2C_Init+0x3cc>)
 8003aec:	625a      	str	r2, [r3, #36]	@ 0x24
			xI2C2_TX.peripheral_pointer_increment = DMA_Configuration.Peripheral_Pointer_Increment.Enable;
 8003aee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	4b30      	ldr	r3, [pc, #192]	@ (8003bb8 <I2C_Init+0x3cc>)
 8003af6:	845a      	strh	r2, [r3, #34]	@ 0x22
			xI2C2_TX.transfer_direction = DMA_Configuration.Transfer_Direction.Memory_to_peripheral;
 8003af8:	2240      	movs	r2, #64	@ 0x40
 8003afa:	4b2f      	ldr	r3, [pc, #188]	@ (8003bb8 <I2C_Init+0x3cc>)
 8003afc:	611a      	str	r2, [r3, #16]
			xI2C2_TX.priority_level = DMA_Configuration.Priority_Level.Very_high;
 8003afe:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003b02:	4b2d      	ldr	r3, [pc, #180]	@ (8003bb8 <I2C_Init+0x3cc>)
 8003b04:	615a      	str	r2, [r3, #20]
			DMA_Init(&xI2C2_TX);
 8003b06:	482c      	ldr	r0, [pc, #176]	@ (8003bb8 <I2C_Init+0x3cc>)
 8003b08:	f7fe ff28 	bl	800295c <DMA_Init>
 8003b0c:	e02f      	b.n	8003b6e <I2C_Init+0x382>
		}

		else if(config->Port == I2C3)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a24      	ldr	r2, [pc, #144]	@ (8003ba4 <I2C_Init+0x3b8>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d12a      	bne.n	8003b6e <I2C_Init+0x382>
		{
			xI2C3_TX.ISR_Routines.Full_Transfer_Commplete_ISR = I2C3_DMA_TX_ISR;
 8003b18:	4b29      	ldr	r3, [pc, #164]	@ (8003bc0 <I2C_Init+0x3d4>)
 8003b1a:	4a2a      	ldr	r2, [pc, #168]	@ (8003bc4 <I2C_Init+0x3d8>)
 8003b1c:	64da      	str	r2, [r3, #76]	@ 0x4c
			xI2C3_TX.Request = DMA_Configuration.Request.I2C3_TX;
 8003b1e:	4a28      	ldr	r2, [pc, #160]	@ (8003bc0 <I2C_Init+0x3d4>)
 8003b20:	4b1c      	ldr	r3, [pc, #112]	@ (8003b94 <I2C_Init+0x3a8>)
 8003b22:	4614      	mov	r4, r2
 8003b24:	33b4      	adds	r3, #180	@ 0xb4
 8003b26:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003b2a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			xI2C3_TX.circular_mode = DMA_Configuration.Circular_Mode.Disable;
 8003b2e:	2200      	movs	r2, #0
 8003b30:	4b23      	ldr	r3, [pc, #140]	@ (8003bc0 <I2C_Init+0x3d4>)
 8003b32:	619a      	str	r2, [r3, #24]
			xI2C3_TX.flow_control = DMA_Configuration.Flow_Control.DMA_Control;
 8003b34:	2200      	movs	r2, #0
 8003b36:	4b22      	ldr	r3, [pc, #136]	@ (8003bc0 <I2C_Init+0x3d4>)
 8003b38:	60da      	str	r2, [r3, #12]
			xI2C3_TX.memory_data_size = DMA_Configuration.Memory_Data_Size.byte;
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	4b20      	ldr	r3, [pc, #128]	@ (8003bc0 <I2C_Init+0x3d4>)
 8003b3e:	629a      	str	r2, [r3, #40]	@ 0x28
			xI2C3_TX.memory_pointer_increment = DMA_Configuration.Memory_Pointer_Increment.Enable;
 8003b40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003b44:	b29a      	uxth	r2, r3
 8003b46:	4b1e      	ldr	r3, [pc, #120]	@ (8003bc0 <I2C_Init+0x3d4>)
 8003b48:	841a      	strh	r2, [r3, #32]
			xI2C3_TX.peripheral_data_size = DMA_Configuration.Peripheral_Data_Size.byte;
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	4b1c      	ldr	r3, [pc, #112]	@ (8003bc0 <I2C_Init+0x3d4>)
 8003b4e:	625a      	str	r2, [r3, #36]	@ 0x24
			xI2C3_TX.peripheral_pointer_increment = DMA_Configuration.Peripheral_Pointer_Increment.Enable;
 8003b50:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003b54:	b29a      	uxth	r2, r3
 8003b56:	4b1a      	ldr	r3, [pc, #104]	@ (8003bc0 <I2C_Init+0x3d4>)
 8003b58:	845a      	strh	r2, [r3, #34]	@ 0x22
			xI2C3_TX.transfer_direction = DMA_Configuration.Transfer_Direction.Memory_to_peripheral;
 8003b5a:	2240      	movs	r2, #64	@ 0x40
 8003b5c:	4b18      	ldr	r3, [pc, #96]	@ (8003bc0 <I2C_Init+0x3d4>)
 8003b5e:	611a      	str	r2, [r3, #16]
			xI2C3_TX.priority_level = DMA_Configuration.Priority_Level.Very_high;
 8003b60:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003b64:	4b16      	ldr	r3, [pc, #88]	@ (8003bc0 <I2C_Init+0x3d4>)
 8003b66:	615a      	str	r2, [r3, #20]
			DMA_Init(&xI2C3_TX);
 8003b68:	4815      	ldr	r0, [pc, #84]	@ (8003bc0 <I2C_Init+0x3d4>)
 8003b6a:	f7fe fef7 	bl	800295c <DMA_Init>
		}

	}

	config -> Port -> CR1 |= I2C_CR1_PE;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f042 0201 	orr.w	r2, r2, #1
 8003b7c:	601a      	str	r2, [r3, #0]

}
 8003b7e:	bf00      	nop
 8003b80:	370c      	adds	r7, #12
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd90      	pop	{r4, r7, pc}
 8003b86:	bf00      	nop
 8003b88:	40005400 	.word	0x40005400
 8003b8c:	20000228 	.word	0x20000228
 8003b90:	080035a9 	.word	0x080035a9
 8003b94:	08005e68 	.word	0x08005e68
 8003b98:	40005800 	.word	0x40005800
 8003b9c:	20000280 	.word	0x20000280
 8003ba0:	080035c1 	.word	0x080035c1
 8003ba4:	40005c00 	.word	0x40005c00
 8003ba8:	200002d8 	.word	0x200002d8
 8003bac:	080035d9 	.word	0x080035d9
 8003bb0:	20000120 	.word	0x20000120
 8003bb4:	08003561 	.word	0x08003561
 8003bb8:	20000178 	.word	0x20000178
 8003bbc:	08003579 	.word	0x08003579
 8003bc0:	200001d0 	.word	0x200001d0
 8003bc4:	08003591 	.word	0x08003591

08003bc8 <I2C_Master_Start>:


int8_t I2C_Master_Start(I2C_Config *config)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
	int time_out = 1000;
 8003bd0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003bd4:	60fb      	str	r3, [r7, #12]

	while(config -> Port -> SR2 & I2C_SR2_BUSY){
 8003bd6:	e008      	b.n	8003bea <I2C_Master_Start+0x22>
		if(time_out == 0)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d102      	bne.n	8003be4 <I2C_Master_Start+0x1c>
		{
			return -1;
 8003bde:	f04f 33ff 	mov.w	r3, #4294967295
 8003be2:	e029      	b.n	8003c38 <I2C_Master_Start+0x70>
		}
		time_out--;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	3b01      	subs	r3, #1
 8003be8:	60fb      	str	r3, [r7, #12]
	while(config -> Port -> SR2 & I2C_SR2_BUSY){
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	699b      	ldr	r3, [r3, #24]
 8003bf0:	f003 0302 	and.w	r3, r3, #2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d1ef      	bne.n	8003bd8 <I2C_Master_Start+0x10>
	}

	time_out = 1000;
 8003bf8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003bfc:	60fb      	str	r3, [r7, #12]
	config -> Port -> CR1 |= I2C_CR1_START;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c0c:	601a      	str	r2, [r3, #0]
//	config -> Port -> CR1 |= I2C_CR1_START;
	while( !(config -> Port -> SR1 & I2C_SR1_SB))
 8003c0e:	e008      	b.n	8003c22 <I2C_Master_Start+0x5a>
	{
		if(time_out == 0)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d102      	bne.n	8003c1c <I2C_Master_Start+0x54>
		{
			return -1;
 8003c16:	f04f 33ff 	mov.w	r3, #4294967295
 8003c1a:	e00d      	b.n	8003c38 <I2C_Master_Start+0x70>
		}
		time_out--;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	60fb      	str	r3, [r7, #12]
	while( !(config -> Port -> SR1 & I2C_SR1_SB))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	695b      	ldr	r3, [r3, #20]
 8003c28:	f003 0301 	and.w	r3, r3, #1
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d0ef      	beq.n	8003c10 <I2C_Master_Start+0x48>
	}
	(void)config ->  Port -> SR1;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	695b      	ldr	r3, [r3, #20]
	return 0;
 8003c36:	2300      	movs	r3, #0
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3714      	adds	r7, #20
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <I2C_Master_Address>:

void I2C_Master_Address(I2C_Config *config, uint8_t address, uint8_t read_write)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	70fb      	strb	r3, [r7, #3]
 8003c50:	4613      	mov	r3, r2
 8003c52:	70bb      	strb	r3, [r7, #2]
	config -> Port -> DR = address << 1  | read_write;
 8003c54:	78fb      	ldrb	r3, [r7, #3]
 8003c56:	005a      	lsls	r2, r3, #1
 8003c58:	78bb      	ldrb	r3, [r7, #2]
 8003c5a:	431a      	orrs	r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	611a      	str	r2, [r3, #16]
	while((config -> Port -> SR1 & I2C_SR1_ADDR) == 0){;}
 8003c62:	bf00      	nop
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d0f8      	beq.n	8003c64 <I2C_Master_Address+0x20>
	while((config -> Port -> SR1 & 2))
 8003c72:	e00c      	b.n	8003c8e <I2C_Master_Address+0x4a>
	{
		(void)config->Port -> SR1;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	695b      	ldr	r3, [r3, #20]
		(void)config->Port -> SR2;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	699b      	ldr	r3, [r3, #24]
		if((config -> Port -> SR1 & 2) == 0)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d007      	beq.n	8003c9e <I2C_Master_Address+0x5a>
	while((config -> Port -> SR1 & 2))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	695b      	ldr	r3, [r3, #20]
 8003c94:	f003 0302 	and.w	r3, r3, #2
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d1eb      	bne.n	8003c74 <I2C_Master_Address+0x30>
		{
			break;
		}
	}
}
 8003c9c:	e000      	b.n	8003ca0 <I2C_Master_Address+0x5c>
			break;
 8003c9e:	bf00      	nop
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <I2C_Master_Send_Byte>:


void I2C_Master_Send_Byte(I2C_Config *config, uint8_t data)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	70fb      	strb	r3, [r7, #3]
	while((config -> Port-> SR1 & 0x80) == 0){}
 8003cb8:	bf00      	nop
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	695b      	ldr	r3, [r3, #20]
 8003cc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d0f8      	beq.n	8003cba <I2C_Master_Send_Byte+0xe>
	config -> Port -> DR = data;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	78fa      	ldrb	r2, [r7, #3]
 8003cce:	611a      	str	r2, [r3, #16]
	while((config -> Port -> SR1 & 0x80) == 0){}
 8003cd0:	bf00      	nop
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	695b      	ldr	r3, [r3, #20]
 8003cd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d0f8      	beq.n	8003cd2 <I2C_Master_Send_Byte+0x26>
}
 8003ce0:	bf00      	nop
 8003ce2:	bf00      	nop
 8003ce4:	370c      	adds	r7, #12
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr

08003cee <I2C_Master_Receive_Byte>:

int I2C_Master_Receive_Byte(I2C_Config *config)
{
 8003cee:	b480      	push	{r7}
 8003cf0:	b085      	sub	sp, #20
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
	volatile int temp;
	config -> Port -> CR1 |= I2C_CR1_ACK;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003d04:	601a      	str	r2, [r3, #0]
	while((config -> Port -> SR1 & I2C_SR1_RXNE) == 0){}
 8003d06:	bf00      	nop
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	695b      	ldr	r3, [r3, #20]
 8003d0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d0f8      	beq.n	8003d08 <I2C_Master_Receive_Byte+0x1a>
	temp = config -> Port -> DR;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	60fb      	str	r3, [r7, #12]
	config -> Port -> CR1 &= ~I2C_CR1_ACK;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d2c:	601a      	str	r2, [r3, #0]
	return temp;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3714      	adds	r7, #20
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <I2C_Master_Stop>:
{
	config -> Port -> CR1 |= I2C_CR1_ACK;
}

void I2C_Master_Stop(I2C_Config *config)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
	config -> Port -> CR1 |= I2C_CR1_STOP;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d52:	601a      	str	r2, [r3, #0]
}
 8003d54:	bf00      	nop
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <I2C_Master_Write_Register>:


void I2C_Master_Write_Register(I2C_Config *config, uint8_t device_address, uint8_t reg_address, uint8_t data)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	4608      	mov	r0, r1
 8003d6a:	4611      	mov	r1, r2
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	4603      	mov	r3, r0
 8003d70:	70fb      	strb	r3, [r7, #3]
 8003d72:	460b      	mov	r3, r1
 8003d74:	70bb      	strb	r3, [r7, #2]
 8003d76:	4613      	mov	r3, r2
 8003d78:	707b      	strb	r3, [r7, #1]
	I2C_Master_Start(config);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f7ff ff24 	bl	8003bc8 <I2C_Master_Start>
	I2C_Master_Address(config, device_address,0);
 8003d80:	78fb      	ldrb	r3, [r7, #3]
 8003d82:	2200      	movs	r2, #0
 8003d84:	4619      	mov	r1, r3
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f7ff ff5c 	bl	8003c44 <I2C_Master_Address>
	I2C_Master_Send_Byte(config, reg_address);
 8003d8c:	78bb      	ldrb	r3, [r7, #2]
 8003d8e:	4619      	mov	r1, r3
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f7ff ff8b 	bl	8003cac <I2C_Master_Send_Byte>
	I2C_Master_Send_Byte(config, data);
 8003d96:	787b      	ldrb	r3, [r7, #1]
 8003d98:	4619      	mov	r1, r3
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f7ff ff86 	bl	8003cac <I2C_Master_Send_Byte>
	I2C_Master_Stop(config);
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f7ff ffcb 	bl	8003d3c <I2C_Master_Stop>
}
 8003da6:	bf00      	nop
 8003da8:	3708      	adds	r7, #8
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}

08003dae <I2C_Master_Read_Register>:

int I2C_Master_Read_Register(I2C_Config *config, uint8_t device_address, uint8_t reg_address)
{
 8003dae:	b580      	push	{r7, lr}
 8003db0:	b084      	sub	sp, #16
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
 8003db6:	460b      	mov	r3, r1
 8003db8:	70fb      	strb	r3, [r7, #3]
 8003dba:	4613      	mov	r3, r2
 8003dbc:	70bb      	strb	r3, [r7, #2]
	volatile int temp;
	I2C_Master_Start(config);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f7ff ff02 	bl	8003bc8 <I2C_Master_Start>
	I2C_Master_Address(config, device_address, 0);
 8003dc4:	78fb      	ldrb	r3, [r7, #3]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	4619      	mov	r1, r3
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f7ff ff3a 	bl	8003c44 <I2C_Master_Address>
	I2C_Master_Send_Byte(config, reg_address);
 8003dd0:	78bb      	ldrb	r3, [r7, #2]
 8003dd2:	4619      	mov	r1, r3
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f7ff ff69 	bl	8003cac <I2C_Master_Send_Byte>
	I2C_Master_Stop(config);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f7ff ffae 	bl	8003d3c <I2C_Master_Stop>
	I2C_Master_Start(config);
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f7ff fef1 	bl	8003bc8 <I2C_Master_Start>
	I2C_Master_Address(config, device_address, 1);
 8003de6:	78fb      	ldrb	r3, [r7, #3]
 8003de8:	2201      	movs	r2, #1
 8003dea:	4619      	mov	r1, r3
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f7ff ff29 	bl	8003c44 <I2C_Master_Address>
	temp = I2C_Master_Receive_Byte(config);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f7ff ff7b 	bl	8003cee <I2C_Master_Receive_Byte>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	60fb      	str	r3, [r7, #12]
	I2C_Master_Stop(config);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f7ff ff9d 	bl	8003d3c <I2C_Master_Stop>
	return temp;
 8003e02:	68fb      	ldr	r3, [r7, #12]
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3710      	adds	r7, #16
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <I2C_Master_Read_Registers_Bulk>:
	       return data;

}

int I2C_Master_Read_Registers_Bulk(I2C_Config *config, uint8_t device_address, uint8_t reg_address, uint8_t *data, uint16_t length)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	607b      	str	r3, [r7, #4]
 8003e16:	460b      	mov	r3, r1
 8003e18:	72fb      	strb	r3, [r7, #11]
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	72bb      	strb	r3, [r7, #10]

	if(config -> DMA_Control == I2C_Configuration.DMA_Control.Disable)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	7b9b      	ldrb	r3, [r3, #14]
 8003e22:	2200      	movs	r2, #0
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d119      	bne.n	8003e5c <I2C_Master_Read_Registers_Bulk+0x50>
	{
		I2C_Master_Start(config);
 8003e28:	68f8      	ldr	r0, [r7, #12]
 8003e2a:	f7ff fecd 	bl	8003bc8 <I2C_Master_Start>
		I2C_Master_Address(config, device_address, 0);
 8003e2e:	7afb      	ldrb	r3, [r7, #11]
 8003e30:	2200      	movs	r2, #0
 8003e32:	4619      	mov	r1, r3
 8003e34:	68f8      	ldr	r0, [r7, #12]
 8003e36:	f7ff ff05 	bl	8003c44 <I2C_Master_Address>
		I2C_Master_Send_Byte(config, reg_address);
 8003e3a:	7abb      	ldrb	r3, [r7, #10]
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	68f8      	ldr	r0, [r7, #12]
 8003e40:	f7ff ff34 	bl	8003cac <I2C_Master_Send_Byte>
		I2C_Master_Stop(config);
 8003e44:	68f8      	ldr	r0, [r7, #12]
 8003e46:	f7ff ff79 	bl	8003d3c <I2C_Master_Stop>
		I2C_Master_Start(config);
 8003e4a:	68f8      	ldr	r0, [r7, #12]
 8003e4c:	f7ff febc 	bl	8003bc8 <I2C_Master_Start>
		I2C_Master_Address(config, device_address, 1);
 8003e50:	7afb      	ldrb	r3, [r7, #11]
 8003e52:	2201      	movs	r2, #1
 8003e54:	4619      	mov	r1, r3
 8003e56:	68f8      	ldr	r0, [r7, #12]
 8003e58:	f7ff fef4 	bl	8003c44 <I2C_Master_Address>
	}

	if(config->Port == I2C1)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a57      	ldr	r2, [pc, #348]	@ (8003fc0 <I2C_Master_Read_Registers_Bulk+0x1b4>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d112      	bne.n	8003e8c <I2C_Master_Read_Registers_Bulk+0x80>
	{
		xI2C1_RX.memory_address = (uint32_t)&data[0];
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a56      	ldr	r2, [pc, #344]	@ (8003fc4 <I2C_Master_Read_Registers_Bulk+0x1b8>)
 8003e6a:	6313      	str	r3, [r2, #48]	@ 0x30
		xI2C1_RX.peripheral_address = (uint32_t)&config->Port->DR;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	3310      	adds	r3, #16
 8003e72:	461a      	mov	r2, r3
 8003e74:	4b53      	ldr	r3, [pc, #332]	@ (8003fc4 <I2C_Master_Read_Registers_Bulk+0x1b8>)
 8003e76:	62da      	str	r2, [r3, #44]	@ 0x2c
		xI2C1_RX.buffer_length = length;
 8003e78:	4a52      	ldr	r2, [pc, #328]	@ (8003fc4 <I2C_Master_Read_Registers_Bulk+0x1b8>)
 8003e7a:	8b3b      	ldrh	r3, [r7, #24]
 8003e7c:	8693      	strh	r3, [r2, #52]	@ 0x34
		DMA_Set_Target(&xI2C1_RX);
 8003e7e:	4851      	ldr	r0, [pc, #324]	@ (8003fc4 <I2C_Master_Read_Registers_Bulk+0x1b8>)
 8003e80:	f7fe ff22 	bl	8002cc8 <DMA_Set_Target>
		DMA_Set_Trigger(&xI2C1_RX);
 8003e84:	484f      	ldr	r0, [pc, #316]	@ (8003fc4 <I2C_Master_Read_Registers_Bulk+0x1b8>)
 8003e86:	f7fe ff7f 	bl	8002d88 <DMA_Set_Trigger>
 8003e8a:	e032      	b.n	8003ef2 <I2C_Master_Read_Registers_Bulk+0xe6>
	}
	else if(config->Port == I2C2)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a4d      	ldr	r2, [pc, #308]	@ (8003fc8 <I2C_Master_Read_Registers_Bulk+0x1bc>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d112      	bne.n	8003ebc <I2C_Master_Read_Registers_Bulk+0xb0>
	{
		xI2C2_RX.memory_address = (uint32_t)&data[0];
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a4c      	ldr	r2, [pc, #304]	@ (8003fcc <I2C_Master_Read_Registers_Bulk+0x1c0>)
 8003e9a:	6313      	str	r3, [r2, #48]	@ 0x30
		xI2C2_RX.peripheral_address = (uint32_t)&config->Port->DR;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	3310      	adds	r3, #16
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	4b49      	ldr	r3, [pc, #292]	@ (8003fcc <I2C_Master_Read_Registers_Bulk+0x1c0>)
 8003ea6:	62da      	str	r2, [r3, #44]	@ 0x2c
		xI2C2_RX.buffer_length = length;
 8003ea8:	4a48      	ldr	r2, [pc, #288]	@ (8003fcc <I2C_Master_Read_Registers_Bulk+0x1c0>)
 8003eaa:	8b3b      	ldrh	r3, [r7, #24]
 8003eac:	8693      	strh	r3, [r2, #52]	@ 0x34
		DMA_Set_Target(&xI2C2_RX);
 8003eae:	4847      	ldr	r0, [pc, #284]	@ (8003fcc <I2C_Master_Read_Registers_Bulk+0x1c0>)
 8003eb0:	f7fe ff0a 	bl	8002cc8 <DMA_Set_Target>
		DMA_Set_Trigger(&xI2C2_RX);
 8003eb4:	4845      	ldr	r0, [pc, #276]	@ (8003fcc <I2C_Master_Read_Registers_Bulk+0x1c0>)
 8003eb6:	f7fe ff67 	bl	8002d88 <DMA_Set_Trigger>
 8003eba:	e01a      	b.n	8003ef2 <I2C_Master_Read_Registers_Bulk+0xe6>
	}
	else if(config->Port == I2C3)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a43      	ldr	r2, [pc, #268]	@ (8003fd0 <I2C_Master_Read_Registers_Bulk+0x1c4>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d112      	bne.n	8003eec <I2C_Master_Read_Registers_Bulk+0xe0>
	{
		xI2C3_RX.memory_address = (uint32_t)&data[0];
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a42      	ldr	r2, [pc, #264]	@ (8003fd4 <I2C_Master_Read_Registers_Bulk+0x1c8>)
 8003eca:	6313      	str	r3, [r2, #48]	@ 0x30
		xI2C3_RX.peripheral_address = (uint32_t)&config->Port->DR;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	3310      	adds	r3, #16
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	4b3f      	ldr	r3, [pc, #252]	@ (8003fd4 <I2C_Master_Read_Registers_Bulk+0x1c8>)
 8003ed6:	62da      	str	r2, [r3, #44]	@ 0x2c
		xI2C3_RX.buffer_length = length;
 8003ed8:	4a3e      	ldr	r2, [pc, #248]	@ (8003fd4 <I2C_Master_Read_Registers_Bulk+0x1c8>)
 8003eda:	8b3b      	ldrh	r3, [r7, #24]
 8003edc:	8693      	strh	r3, [r2, #52]	@ 0x34
		DMA_Set_Target(&xI2C3_RX);
 8003ede:	483d      	ldr	r0, [pc, #244]	@ (8003fd4 <I2C_Master_Read_Registers_Bulk+0x1c8>)
 8003ee0:	f7fe fef2 	bl	8002cc8 <DMA_Set_Target>
		DMA_Set_Trigger(&xI2C3_RX);
 8003ee4:	483b      	ldr	r0, [pc, #236]	@ (8003fd4 <I2C_Master_Read_Registers_Bulk+0x1c8>)
 8003ee6:	f7fe ff4f 	bl	8002d88 <DMA_Set_Trigger>
 8003eea:	e002      	b.n	8003ef2 <I2C_Master_Read_Registers_Bulk+0xe6>
	}
	else
	{
		return -1;
 8003eec:	f04f 33ff 	mov.w	r3, #4294967295
 8003ef0:	e062      	b.n	8003fb8 <I2C_Master_Read_Registers_Bulk+0x1ac>
	}


	config->Port->CR2 |= I2C_CR2_DMAEN;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	685a      	ldr	r2, [r3, #4]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f00:	605a      	str	r2, [r3, #4]
	I2C_Master_Start(config);
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f7ff fe60 	bl	8003bc8 <I2C_Master_Start>
	I2C_Master_Address(config, device_address, 0);
 8003f08:	7afb      	ldrb	r3, [r7, #11]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	68f8      	ldr	r0, [r7, #12]
 8003f10:	f7ff fe98 	bl	8003c44 <I2C_Master_Address>
	I2C_Master_Send_Byte(config, reg_address);
 8003f14:	7abb      	ldrb	r3, [r7, #10]
 8003f16:	4619      	mov	r1, r3
 8003f18:	68f8      	ldr	r0, [r7, #12]
 8003f1a:	f7ff fec7 	bl	8003cac <I2C_Master_Send_Byte>
	I2C_Master_Stop(config);
 8003f1e:	68f8      	ldr	r0, [r7, #12]
 8003f20:	f7ff ff0c 	bl	8003d3c <I2C_Master_Stop>
	I2C_Master_Start(config);
 8003f24:	68f8      	ldr	r0, [r7, #12]
 8003f26:	f7ff fe4f 	bl	8003bc8 <I2C_Master_Start>
	I2C_Master_Address(config, device_address, 1);
 8003f2a:	7afb      	ldrb	r3, [r7, #11]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	4619      	mov	r1, r3
 8003f30:	68f8      	ldr	r0, [r7, #12]
 8003f32:	f7ff fe87 	bl	8003c44 <I2C_Master_Address>

	if(config->Port == I2C1)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a21      	ldr	r2, [pc, #132]	@ (8003fc0 <I2C_Master_Read_Registers_Bulk+0x1b4>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d10c      	bne.n	8003f5a <I2C_Master_Read_Registers_Bulk+0x14e>
	{
		while(I2C1_DMA_RX_ISR_Flag == false){}
 8003f40:	bf00      	nop
 8003f42:	4b25      	ldr	r3, [pc, #148]	@ (8003fd8 <I2C_Master_Read_Registers_Bulk+0x1cc>)
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	f083 0301 	eor.w	r3, r3, #1
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1f7      	bne.n	8003f42 <I2C_Master_Read_Registers_Bulk+0x136>
		I2C1_DMA_RX_ISR_Flag = true;
 8003f52:	4b21      	ldr	r3, [pc, #132]	@ (8003fd8 <I2C_Master_Read_Registers_Bulk+0x1cc>)
 8003f54:	2201      	movs	r2, #1
 8003f56:	701a      	strb	r2, [r3, #0]
 8003f58:	e022      	b.n	8003fa0 <I2C_Master_Read_Registers_Bulk+0x194>
	}
	else if(config->Port == I2C2)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a1a      	ldr	r2, [pc, #104]	@ (8003fc8 <I2C_Master_Read_Registers_Bulk+0x1bc>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d10c      	bne.n	8003f7e <I2C_Master_Read_Registers_Bulk+0x172>
	{
		while(I2C2_DMA_RX_ISR_Flag == false){}
 8003f64:	bf00      	nop
 8003f66:	4b1d      	ldr	r3, [pc, #116]	@ (8003fdc <I2C_Master_Read_Registers_Bulk+0x1d0>)
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	f083 0301 	eor.w	r3, r3, #1
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d1f7      	bne.n	8003f66 <I2C_Master_Read_Registers_Bulk+0x15a>
		I2C2_DMA_RX_ISR_Flag = true;
 8003f76:	4b19      	ldr	r3, [pc, #100]	@ (8003fdc <I2C_Master_Read_Registers_Bulk+0x1d0>)
 8003f78:	2201      	movs	r2, #1
 8003f7a:	701a      	strb	r2, [r3, #0]
 8003f7c:	e010      	b.n	8003fa0 <I2C_Master_Read_Registers_Bulk+0x194>
	}
	else if(config->Port == I2C3)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a13      	ldr	r2, [pc, #76]	@ (8003fd0 <I2C_Master_Read_Registers_Bulk+0x1c4>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d10b      	bne.n	8003fa0 <I2C_Master_Read_Registers_Bulk+0x194>
	{
		while(I2C3_DMA_RX_ISR_Flag == false){}
 8003f88:	bf00      	nop
 8003f8a:	4b15      	ldr	r3, [pc, #84]	@ (8003fe0 <I2C_Master_Read_Registers_Bulk+0x1d4>)
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	f083 0301 	eor.w	r3, r3, #1
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d1f7      	bne.n	8003f8a <I2C_Master_Read_Registers_Bulk+0x17e>
		I2C3_DMA_RX_ISR_Flag = true;
 8003f9a:	4b11      	ldr	r3, [pc, #68]	@ (8003fe0 <I2C_Master_Read_Registers_Bulk+0x1d4>)
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	701a      	strb	r2, [r3, #0]
	}


	config->Port->CR2 &= ~I2C_CR2_DMAEN;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	685a      	ldr	r2, [r3, #4]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003fae:	605a      	str	r2, [r3, #4]
	I2C_Master_Stop(config);
 8003fb0:	68f8      	ldr	r0, [r7, #12]
 8003fb2:	f7ff fec3 	bl	8003d3c <I2C_Master_Stop>

	return 1;
 8003fb6:	2301      	movs	r3, #1
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3710      	adds	r7, #16
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	40005400 	.word	0x40005400
 8003fc4:	20000228 	.word	0x20000228
 8003fc8:	40005800 	.word	0x40005800
 8003fcc:	20000280 	.word	0x20000280
 8003fd0:	40005c00 	.word	0x40005c00
 8003fd4:	200002d8 	.word	0x200002d8
 8003fd8:	20000333 	.word	0x20000333
 8003fdc:	20000334 	.word	0x20000334
 8003fe0:	20000335 	.word	0x20000335

08003fe4 <TIM1_BRK_TIM9_IRQHandler>:
Timer_Config *__timer_13_config__;
Timer_Config *__timer_14_config__;



void TIM1_BRK_TIM9_IRQHandler(void) {
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	af00      	add	r7, sp, #0
    if (__timer_1_config__ ->ISR_Routines.Break_ISR) {
 8003fe8:	4b2b      	ldr	r3, [pc, #172]	@ (8004098 <TIM1_BRK_TIM9_IRQHandler+0xb4>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d00a      	beq.n	800400a <TIM1_BRK_TIM9_IRQHandler+0x26>
    	__timer_1_config__ ->ISR_Routines.Break_ISR();
 8003ff4:	4b28      	ldr	r3, [pc, #160]	@ (8004098 <TIM1_BRK_TIM9_IRQHandler+0xb4>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003ffc:	4798      	blx	r3
    	TIM1->SR &= ~TIM_SR_BIF;  // Clear the Break interrupt flag
 8003ffe:	4b27      	ldr	r3, [pc, #156]	@ (800409c <TIM1_BRK_TIM9_IRQHandler+0xb8>)
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	4a26      	ldr	r2, [pc, #152]	@ (800409c <TIM1_BRK_TIM9_IRQHandler+0xb8>)
 8004004:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004008:	6113      	str	r3, [r2, #16]
    }

    if (__timer_9_config__ ->ISR_Routines.Capture_Compare_1_ISR){
 800400a:	4b25      	ldr	r3, [pc, #148]	@ (80040a0 <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00a      	beq.n	800402c <TIM1_BRK_TIM9_IRQHandler+0x48>
    	__timer_9_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 8004016:	4b22      	ldr	r3, [pc, #136]	@ (80040a0 <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800401e:	4798      	blx	r3
    	TIM9->SR &= ~TIM_SR_CC1IF;  // Clear the Break interrupt flag
 8004020:	4b20      	ldr	r3, [pc, #128]	@ (80040a4 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8004022:	691b      	ldr	r3, [r3, #16]
 8004024:	4a1f      	ldr	r2, [pc, #124]	@ (80040a4 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8004026:	f023 0302 	bic.w	r3, r3, #2
 800402a:	6113      	str	r3, [r2, #16]
    }

    if (__timer_9_config__ ->ISR_Routines.Capture_Compare_2_ISR){
 800402c:	4b1c      	ldr	r3, [pc, #112]	@ (80040a0 <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00a      	beq.n	800404e <TIM1_BRK_TIM9_IRQHandler+0x6a>
    	__timer_9_config__ ->ISR_Routines.Capture_Compare_2_ISR();
 8004038:	4b19      	ldr	r3, [pc, #100]	@ (80040a0 <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004040:	4798      	blx	r3
    	TIM9->SR &= ~TIM_SR_CC2IF;  // Clear the Break interrupt flag
 8004042:	4b18      	ldr	r3, [pc, #96]	@ (80040a4 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	4a17      	ldr	r2, [pc, #92]	@ (80040a4 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8004048:	f023 0304 	bic.w	r3, r3, #4
 800404c:	6113      	str	r3, [r2, #16]
    }

    if (__timer_9_config__ ->ISR_Routines.Update_ISR){
 800404e:	4b14      	ldr	r3, [pc, #80]	@ (80040a0 <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00a      	beq.n	8004070 <TIM1_BRK_TIM9_IRQHandler+0x8c>
    	__timer_9_config__ ->ISR_Routines.Update_ISR();
 800405a:	4b11      	ldr	r3, [pc, #68]	@ (80040a0 <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004062:	4798      	blx	r3
    	TIM9->SR &= ~TIM_SR_UIF;  // Clear the Break interrupt flag
 8004064:	4b0f      	ldr	r3, [pc, #60]	@ (80040a4 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	4a0e      	ldr	r2, [pc, #56]	@ (80040a4 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 800406a:	f023 0301 	bic.w	r3, r3, #1
 800406e:	6113      	str	r3, [r2, #16]
    }

    if (__timer_9_config__ ->ISR_Routines.Trigger_ISR){
 8004070:	4b0b      	ldr	r3, [pc, #44]	@ (80040a0 <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004078:	2b00      	cmp	r3, #0
 800407a:	d00a      	beq.n	8004092 <TIM1_BRK_TIM9_IRQHandler+0xae>
    	__timer_9_config__ ->ISR_Routines.Trigger_ISR();
 800407c:	4b08      	ldr	r3, [pc, #32]	@ (80040a0 <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004084:	4798      	blx	r3
    	TIM9->SR &= ~TIM_SR_TIF;  // Clear the Break interrupt flag
 8004086:	4b07      	ldr	r3, [pc, #28]	@ (80040a4 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	4a06      	ldr	r2, [pc, #24]	@ (80040a4 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 800408c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004090:	6113      	str	r3, [r2, #16]
    }

}
 8004092:	bf00      	nop
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	20000338 	.word	0x20000338
 800409c:	40010000 	.word	0x40010000
 80040a0:	20000358 	.word	0x20000358
 80040a4:	40014000 	.word	0x40014000

080040a8 <TIM1_UP_TIM10_IRQHandler>:

void TIM1_UP_TIM10_IRQHandler(void) {
 80040a8:	b580      	push	{r7, lr}
 80040aa:	af00      	add	r7, sp, #0
    if (__timer_1_config__ ->ISR_Routines.Update_ISR) {
 80040ac:	4b1a      	ldr	r3, [pc, #104]	@ (8004118 <TIM1_UP_TIM10_IRQHandler+0x70>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d00a      	beq.n	80040ce <TIM1_UP_TIM10_IRQHandler+0x26>
    	__timer_1_config__ ->ISR_Routines.Update_ISR();
 80040b8:	4b17      	ldr	r3, [pc, #92]	@ (8004118 <TIM1_UP_TIM10_IRQHandler+0x70>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80040c0:	4798      	blx	r3
    	TIM1->SR &= ~TIM_SR_UIF;  // Clear the Update interrupt flag
 80040c2:	4b16      	ldr	r3, [pc, #88]	@ (800411c <TIM1_UP_TIM10_IRQHandler+0x74>)
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	4a15      	ldr	r2, [pc, #84]	@ (800411c <TIM1_UP_TIM10_IRQHandler+0x74>)
 80040c8:	f023 0301 	bic.w	r3, r3, #1
 80040cc:	6113      	str	r3, [r2, #16]
    }

    if (__timer_10_config__ ->ISR_Routines.Update_ISR) {
 80040ce:	4b14      	ldr	r3, [pc, #80]	@ (8004120 <TIM1_UP_TIM10_IRQHandler+0x78>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00a      	beq.n	80040f0 <TIM1_UP_TIM10_IRQHandler+0x48>
    	__timer_10_config__ ->ISR_Routines.Update_ISR();
 80040da:	4b11      	ldr	r3, [pc, #68]	@ (8004120 <TIM1_UP_TIM10_IRQHandler+0x78>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80040e2:	4798      	blx	r3
    	TIM10->SR &= ~TIM_SR_UIF;  // Clear the Update interrupt flag
 80040e4:	4b0f      	ldr	r3, [pc, #60]	@ (8004124 <TIM1_UP_TIM10_IRQHandler+0x7c>)
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	4a0e      	ldr	r2, [pc, #56]	@ (8004124 <TIM1_UP_TIM10_IRQHandler+0x7c>)
 80040ea:	f023 0301 	bic.w	r3, r3, #1
 80040ee:	6113      	str	r3, [r2, #16]
    }

    if (__timer_10_config__ ->ISR_Routines.Capture_Compare_1_ISR) {
 80040f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004120 <TIM1_UP_TIM10_IRQHandler+0x78>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d00a      	beq.n	8004112 <TIM1_UP_TIM10_IRQHandler+0x6a>
    	__timer_10_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 80040fc:	4b08      	ldr	r3, [pc, #32]	@ (8004120 <TIM1_UP_TIM10_IRQHandler+0x78>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004104:	4798      	blx	r3
    	TIM10->SR &= ~TIM_SR_CC1IF;  // Clear the Update interrupt flag
 8004106:	4b07      	ldr	r3, [pc, #28]	@ (8004124 <TIM1_UP_TIM10_IRQHandler+0x7c>)
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	4a06      	ldr	r2, [pc, #24]	@ (8004124 <TIM1_UP_TIM10_IRQHandler+0x7c>)
 800410c:	f023 0302 	bic.w	r3, r3, #2
 8004110:	6113      	str	r3, [r2, #16]
    }

}
 8004112:	bf00      	nop
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	20000338 	.word	0x20000338
 800411c:	40010000 	.word	0x40010000
 8004120:	2000035c 	.word	0x2000035c
 8004124:	40014400 	.word	0x40014400

08004128 <TIM1_TRG_COM_TIM11_IRQHandler>:

void TIM1_TRG_COM_TIM11_IRQHandler(void) {
 8004128:	b580      	push	{r7, lr}
 800412a:	af00      	add	r7, sp, #0
    if (__timer_1_config__ ->ISR_Routines.Trigger_ISR) {
 800412c:	4b22      	ldr	r3, [pc, #136]	@ (80041b8 <TIM1_TRG_COM_TIM11_IRQHandler+0x90>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00a      	beq.n	800414e <TIM1_TRG_COM_TIM11_IRQHandler+0x26>
    	__timer_1_config__ ->ISR_Routines.Trigger_ISR();
 8004138:	4b1f      	ldr	r3, [pc, #124]	@ (80041b8 <TIM1_TRG_COM_TIM11_IRQHandler+0x90>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004140:	4798      	blx	r3

    	TIM1->SR &= ~TIM_SR_TIF;  // Clear the Trigger interrupt flag
 8004142:	4b1e      	ldr	r3, [pc, #120]	@ (80041bc <TIM1_TRG_COM_TIM11_IRQHandler+0x94>)
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	4a1d      	ldr	r2, [pc, #116]	@ (80041bc <TIM1_TRG_COM_TIM11_IRQHandler+0x94>)
 8004148:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800414c:	6113      	str	r3, [r2, #16]
    }

    if (__timer_1_config__ ->ISR_Routines.Commutation_ISR) {
 800414e:	4b1a      	ldr	r3, [pc, #104]	@ (80041b8 <TIM1_TRG_COM_TIM11_IRQHandler+0x90>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00a      	beq.n	8004170 <TIM1_TRG_COM_TIM11_IRQHandler+0x48>
    	__timer_1_config__ ->ISR_Routines.Commutation_ISR();
 800415a:	4b17      	ldr	r3, [pc, #92]	@ (80041b8 <TIM1_TRG_COM_TIM11_IRQHandler+0x90>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004162:	4798      	blx	r3

    	TIM1->SR &= ~TIM_SR_COMIF;  // Clear the Trigger interrupt flag
 8004164:	4b15      	ldr	r3, [pc, #84]	@ (80041bc <TIM1_TRG_COM_TIM11_IRQHandler+0x94>)
 8004166:	691b      	ldr	r3, [r3, #16]
 8004168:	4a14      	ldr	r2, [pc, #80]	@ (80041bc <TIM1_TRG_COM_TIM11_IRQHandler+0x94>)
 800416a:	f023 0320 	bic.w	r3, r3, #32
 800416e:	6113      	str	r3, [r2, #16]
    }

    if (__timer_11_config__ ->ISR_Routines.Update_ISR) {
 8004170:	4b13      	ldr	r3, [pc, #76]	@ (80041c0 <TIM1_TRG_COM_TIM11_IRQHandler+0x98>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00a      	beq.n	8004192 <TIM1_TRG_COM_TIM11_IRQHandler+0x6a>
    	__timer_11_config__ ->ISR_Routines.Update_ISR();
 800417c:	4b10      	ldr	r3, [pc, #64]	@ (80041c0 <TIM1_TRG_COM_TIM11_IRQHandler+0x98>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004184:	4798      	blx	r3
    	TIM11->SR &= ~TIM_SR_UIF;  // Clear the Update interrupt flag
 8004186:	4b0f      	ldr	r3, [pc, #60]	@ (80041c4 <TIM1_TRG_COM_TIM11_IRQHandler+0x9c>)
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	4a0e      	ldr	r2, [pc, #56]	@ (80041c4 <TIM1_TRG_COM_TIM11_IRQHandler+0x9c>)
 800418c:	f023 0301 	bic.w	r3, r3, #1
 8004190:	6113      	str	r3, [r2, #16]
    }

    if (__timer_11_config__ ->ISR_Routines.Capture_Compare_1_ISR) {
 8004192:	4b0b      	ldr	r3, [pc, #44]	@ (80041c0 <TIM1_TRG_COM_TIM11_IRQHandler+0x98>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00a      	beq.n	80041b4 <TIM1_TRG_COM_TIM11_IRQHandler+0x8c>
    	__timer_11_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 800419e:	4b08      	ldr	r3, [pc, #32]	@ (80041c0 <TIM1_TRG_COM_TIM11_IRQHandler+0x98>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041a6:	4798      	blx	r3
    	TIM11->SR &= ~TIM_SR_CC1IF;  // Clear the Update interrupt flag
 80041a8:	4b06      	ldr	r3, [pc, #24]	@ (80041c4 <TIM1_TRG_COM_TIM11_IRQHandler+0x9c>)
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	4a05      	ldr	r2, [pc, #20]	@ (80041c4 <TIM1_TRG_COM_TIM11_IRQHandler+0x9c>)
 80041ae:	f023 0302 	bic.w	r3, r3, #2
 80041b2:	6113      	str	r3, [r2, #16]
    }

}
 80041b4:	bf00      	nop
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	20000338 	.word	0x20000338
 80041bc:	40010000 	.word	0x40010000
 80041c0:	20000360 	.word	0x20000360
 80041c4:	40014800 	.word	0x40014800

080041c8 <TIM1_CC_IRQHandler>:

void TIM1_CC_IRQHandler(void) {
 80041c8:	b580      	push	{r7, lr}
 80041ca:	af00      	add	r7, sp, #0
    if (__timer_1_config__ ->ISR_Routines.Capture_Compare_1_ISR) {
 80041cc:	4b22      	ldr	r3, [pc, #136]	@ (8004258 <TIM1_CC_IRQHandler+0x90>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00a      	beq.n	80041ee <TIM1_CC_IRQHandler+0x26>
    	__timer_1_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 80041d8:	4b1f      	ldr	r3, [pc, #124]	@ (8004258 <TIM1_CC_IRQHandler+0x90>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041e0:	4798      	blx	r3

    	TIM1->SR &= ~TIM_SR_CC1IF;  // Clear the Capture Compare interrupt flag
 80041e2:	4b1e      	ldr	r3, [pc, #120]	@ (800425c <TIM1_CC_IRQHandler+0x94>)
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	4a1d      	ldr	r2, [pc, #116]	@ (800425c <TIM1_CC_IRQHandler+0x94>)
 80041e8:	f023 0302 	bic.w	r3, r3, #2
 80041ec:	6113      	str	r3, [r2, #16]
    }

    if (__timer_1_config__ ->ISR_Routines.Capture_Compare_2_ISR) {
 80041ee:	4b1a      	ldr	r3, [pc, #104]	@ (8004258 <TIM1_CC_IRQHandler+0x90>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00a      	beq.n	8004210 <TIM1_CC_IRQHandler+0x48>
    	__timer_1_config__ ->ISR_Routines.Capture_Compare_2_ISR();
 80041fa:	4b17      	ldr	r3, [pc, #92]	@ (8004258 <TIM1_CC_IRQHandler+0x90>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004202:	4798      	blx	r3

    	TIM1->SR &= ~TIM_SR_CC2IF;  // Clear the Capture Compare interrupt flag
 8004204:	4b15      	ldr	r3, [pc, #84]	@ (800425c <TIM1_CC_IRQHandler+0x94>)
 8004206:	691b      	ldr	r3, [r3, #16]
 8004208:	4a14      	ldr	r2, [pc, #80]	@ (800425c <TIM1_CC_IRQHandler+0x94>)
 800420a:	f023 0304 	bic.w	r3, r3, #4
 800420e:	6113      	str	r3, [r2, #16]
    }

    if (__timer_1_config__ ->ISR_Routines.Capture_Compare_3_ISR) {
 8004210:	4b11      	ldr	r3, [pc, #68]	@ (8004258 <TIM1_CC_IRQHandler+0x90>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004218:	2b00      	cmp	r3, #0
 800421a:	d00a      	beq.n	8004232 <TIM1_CC_IRQHandler+0x6a>
    	__timer_1_config__ ->ISR_Routines.Capture_Compare_3_ISR();
 800421c:	4b0e      	ldr	r3, [pc, #56]	@ (8004258 <TIM1_CC_IRQHandler+0x90>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004224:	4798      	blx	r3

    	TIM1->SR &= ~TIM_SR_CC3IF;  // Clear the Capture Compare interrupt flag
 8004226:	4b0d      	ldr	r3, [pc, #52]	@ (800425c <TIM1_CC_IRQHandler+0x94>)
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	4a0c      	ldr	r2, [pc, #48]	@ (800425c <TIM1_CC_IRQHandler+0x94>)
 800422c:	f023 0308 	bic.w	r3, r3, #8
 8004230:	6113      	str	r3, [r2, #16]
    }

    if (__timer_1_config__ ->ISR_Routines.Capture_Compare_4_ISR) {
 8004232:	4b09      	ldr	r3, [pc, #36]	@ (8004258 <TIM1_CC_IRQHandler+0x90>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800423a:	2b00      	cmp	r3, #0
 800423c:	d00a      	beq.n	8004254 <TIM1_CC_IRQHandler+0x8c>
    	__timer_1_config__ ->ISR_Routines.Capture_Compare_4_ISR();
 800423e:	4b06      	ldr	r3, [pc, #24]	@ (8004258 <TIM1_CC_IRQHandler+0x90>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004246:	4798      	blx	r3

    	TIM1->SR &= ~TIM_SR_CC4IF;  // Clear the Capture Compare interrupt flag
 8004248:	4b04      	ldr	r3, [pc, #16]	@ (800425c <TIM1_CC_IRQHandler+0x94>)
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	4a03      	ldr	r2, [pc, #12]	@ (800425c <TIM1_CC_IRQHandler+0x94>)
 800424e:	f023 0310 	bic.w	r3, r3, #16
 8004252:	6113      	str	r3, [r2, #16]
    }
}
 8004254:	bf00      	nop
 8004256:	bd80      	pop	{r7, pc}
 8004258:	20000338 	.word	0x20000338
 800425c:	40010000 	.word	0x40010000

08004260 <TIM2_IRQHandler>:


void TIM2_IRQHandler(void)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	af00      	add	r7, sp, #0
    if (__timer_2_config__ ->ISR_Routines.Capture_Compare_1_ISR) {
 8004264:	4b39      	ldr	r3, [pc, #228]	@ (800434c <TIM2_IRQHandler+0xec>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800426c:	2b00      	cmp	r3, #0
 800426e:	d00c      	beq.n	800428a <TIM2_IRQHandler+0x2a>
    	__timer_2_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 8004270:	4b36      	ldr	r3, [pc, #216]	@ (800434c <TIM2_IRQHandler+0xec>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004278:	4798      	blx	r3

    	TIM2->SR &= ~TIM_SR_CC1IF;  // Clear the Capture Compare interrupt flag
 800427a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004284:	f023 0302 	bic.w	r3, r3, #2
 8004288:	6113      	str	r3, [r2, #16]
    }
    if (__timer_2_config__ ->ISR_Routines.Capture_Compare_2_ISR) {
 800428a:	4b30      	ldr	r3, [pc, #192]	@ (800434c <TIM2_IRQHandler+0xec>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00c      	beq.n	80042b0 <TIM2_IRQHandler+0x50>
    	__timer_2_config__ ->ISR_Routines.Capture_Compare_2_ISR();
 8004296:	4b2d      	ldr	r3, [pc, #180]	@ (800434c <TIM2_IRQHandler+0xec>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800429e:	4798      	blx	r3

    	TIM2->SR &= ~TIM_SR_CC2IF;  // Clear the Capture Compare interrupt flag
 80042a0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80042aa:	f023 0304 	bic.w	r3, r3, #4
 80042ae:	6113      	str	r3, [r2, #16]
    }
    if (__timer_2_config__ ->ISR_Routines.Capture_Compare_3_ISR) {
 80042b0:	4b26      	ldr	r3, [pc, #152]	@ (800434c <TIM2_IRQHandler+0xec>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d00c      	beq.n	80042d6 <TIM2_IRQHandler+0x76>
    	__timer_2_config__ ->ISR_Routines.Capture_Compare_3_ISR();
 80042bc:	4b23      	ldr	r3, [pc, #140]	@ (800434c <TIM2_IRQHandler+0xec>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80042c4:	4798      	blx	r3

    	TIM2->SR &= ~TIM_SR_CC3IF;  // Clear the Capture Compare interrupt flag
 80042c6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80042d0:	f023 0308 	bic.w	r3, r3, #8
 80042d4:	6113      	str	r3, [r2, #16]
    }
    if (__timer_2_config__ ->ISR_Routines.Capture_Compare_4_ISR) {
 80042d6:	4b1d      	ldr	r3, [pc, #116]	@ (800434c <TIM2_IRQHandler+0xec>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00c      	beq.n	80042fc <TIM2_IRQHandler+0x9c>
    	__timer_2_config__ ->ISR_Routines.Capture_Compare_4_ISR();
 80042e2:	4b1a      	ldr	r3, [pc, #104]	@ (800434c <TIM2_IRQHandler+0xec>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80042ea:	4798      	blx	r3

    	TIM2->SR &= ~TIM_SR_CC4IF;  // Clear the Capture Compare interrupt flag
 80042ec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80042f6:	f023 0310 	bic.w	r3, r3, #16
 80042fa:	6113      	str	r3, [r2, #16]
    }
    if (__timer_2_config__ ->ISR_Routines.Update_ISR) {
 80042fc:	4b13      	ldr	r3, [pc, #76]	@ (800434c <TIM2_IRQHandler+0xec>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004304:	2b00      	cmp	r3, #0
 8004306:	d00c      	beq.n	8004322 <TIM2_IRQHandler+0xc2>
    	__timer_2_config__ ->ISR_Routines.Update_ISR();
 8004308:	4b10      	ldr	r3, [pc, #64]	@ (800434c <TIM2_IRQHandler+0xec>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004310:	4798      	blx	r3

    	TIM2->SR &= ~TIM_SR_UIF;  // Clear the Capture Compare interrupt flag
 8004312:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800431c:	f023 0301 	bic.w	r3, r3, #1
 8004320:	6113      	str	r3, [r2, #16]
    }
    if (__timer_2_config__ ->ISR_Routines.Trigger_ISR) {
 8004322:	4b0a      	ldr	r3, [pc, #40]	@ (800434c <TIM2_IRQHandler+0xec>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800432a:	2b00      	cmp	r3, #0
 800432c:	d00c      	beq.n	8004348 <TIM2_IRQHandler+0xe8>
    	__timer_2_config__ ->ISR_Routines.Trigger_ISR();
 800432e:	4b07      	ldr	r3, [pc, #28]	@ (800434c <TIM2_IRQHandler+0xec>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004336:	4798      	blx	r3

    	TIM2->SR &= ~TIM_SR_TIF;  // Clear the Capture Compare interrupt flag
 8004338:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004342:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004346:	6113      	str	r3, [r2, #16]
    }
}
 8004348:	bf00      	nop
 800434a:	bd80      	pop	{r7, pc}
 800434c:	2000033c 	.word	0x2000033c

08004350 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	af00      	add	r7, sp, #0
    if (__timer_3_config__ ->ISR_Routines.Capture_Compare_1_ISR) {
 8004354:	4b33      	ldr	r3, [pc, #204]	@ (8004424 <TIM3_IRQHandler+0xd4>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800435c:	2b00      	cmp	r3, #0
 800435e:	d00a      	beq.n	8004376 <TIM3_IRQHandler+0x26>
    	__timer_3_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 8004360:	4b30      	ldr	r3, [pc, #192]	@ (8004424 <TIM3_IRQHandler+0xd4>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004368:	4798      	blx	r3

    	TIM3->SR &= ~TIM_SR_CC1IF;  // Clear the Capture Compare interrupt flag
 800436a:	4b2f      	ldr	r3, [pc, #188]	@ (8004428 <TIM3_IRQHandler+0xd8>)
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	4a2e      	ldr	r2, [pc, #184]	@ (8004428 <TIM3_IRQHandler+0xd8>)
 8004370:	f023 0302 	bic.w	r3, r3, #2
 8004374:	6113      	str	r3, [r2, #16]
    }
    if (__timer_3_config__ ->ISR_Routines.Capture_Compare_2_ISR) {
 8004376:	4b2b      	ldr	r3, [pc, #172]	@ (8004424 <TIM3_IRQHandler+0xd4>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00a      	beq.n	8004398 <TIM3_IRQHandler+0x48>
    	__timer_3_config__ ->ISR_Routines.Capture_Compare_2_ISR();
 8004382:	4b28      	ldr	r3, [pc, #160]	@ (8004424 <TIM3_IRQHandler+0xd4>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800438a:	4798      	blx	r3

    	TIM3->SR &= ~TIM_SR_CC2IF;  // Clear the Capture Compare interrupt flag
 800438c:	4b26      	ldr	r3, [pc, #152]	@ (8004428 <TIM3_IRQHandler+0xd8>)
 800438e:	691b      	ldr	r3, [r3, #16]
 8004390:	4a25      	ldr	r2, [pc, #148]	@ (8004428 <TIM3_IRQHandler+0xd8>)
 8004392:	f023 0304 	bic.w	r3, r3, #4
 8004396:	6113      	str	r3, [r2, #16]
    }
    if (__timer_3_config__ ->ISR_Routines.Capture_Compare_3_ISR) {
 8004398:	4b22      	ldr	r3, [pc, #136]	@ (8004424 <TIM3_IRQHandler+0xd4>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d00a      	beq.n	80043ba <TIM3_IRQHandler+0x6a>
    	__timer_3_config__ ->ISR_Routines.Capture_Compare_3_ISR();
 80043a4:	4b1f      	ldr	r3, [pc, #124]	@ (8004424 <TIM3_IRQHandler+0xd4>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80043ac:	4798      	blx	r3

    	TIM3->SR &= ~TIM_SR_CC3IF;  // Clear the Capture Compare interrupt flag
 80043ae:	4b1e      	ldr	r3, [pc, #120]	@ (8004428 <TIM3_IRQHandler+0xd8>)
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	4a1d      	ldr	r2, [pc, #116]	@ (8004428 <TIM3_IRQHandler+0xd8>)
 80043b4:	f023 0308 	bic.w	r3, r3, #8
 80043b8:	6113      	str	r3, [r2, #16]
    }
    if (__timer_3_config__ ->ISR_Routines.Capture_Compare_4_ISR) {
 80043ba:	4b1a      	ldr	r3, [pc, #104]	@ (8004424 <TIM3_IRQHandler+0xd4>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00a      	beq.n	80043dc <TIM3_IRQHandler+0x8c>
    	__timer_3_config__ ->ISR_Routines.Capture_Compare_4_ISR();
 80043c6:	4b17      	ldr	r3, [pc, #92]	@ (8004424 <TIM3_IRQHandler+0xd4>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80043ce:	4798      	blx	r3

    	TIM3->SR &= ~TIM_SR_CC4IF;  // Clear the Capture Compare interrupt flag
 80043d0:	4b15      	ldr	r3, [pc, #84]	@ (8004428 <TIM3_IRQHandler+0xd8>)
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	4a14      	ldr	r2, [pc, #80]	@ (8004428 <TIM3_IRQHandler+0xd8>)
 80043d6:	f023 0310 	bic.w	r3, r3, #16
 80043da:	6113      	str	r3, [r2, #16]
    }
    if (__timer_3_config__ ->ISR_Routines.Update_ISR) {
 80043dc:	4b11      	ldr	r3, [pc, #68]	@ (8004424 <TIM3_IRQHandler+0xd4>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d00a      	beq.n	80043fe <TIM3_IRQHandler+0xae>
    	__timer_3_config__ ->ISR_Routines.Update_ISR();
 80043e8:	4b0e      	ldr	r3, [pc, #56]	@ (8004424 <TIM3_IRQHandler+0xd4>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80043f0:	4798      	blx	r3

    	TIM3->SR &= ~TIM_SR_UIF;  // Clear the Capture Compare interrupt flag
 80043f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004428 <TIM3_IRQHandler+0xd8>)
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	4a0c      	ldr	r2, [pc, #48]	@ (8004428 <TIM3_IRQHandler+0xd8>)
 80043f8:	f023 0301 	bic.w	r3, r3, #1
 80043fc:	6113      	str	r3, [r2, #16]
    }
    if (__timer_3_config__ ->ISR_Routines.Trigger_ISR) {
 80043fe:	4b09      	ldr	r3, [pc, #36]	@ (8004424 <TIM3_IRQHandler+0xd4>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004406:	2b00      	cmp	r3, #0
 8004408:	d00a      	beq.n	8004420 <TIM3_IRQHandler+0xd0>
    	__timer_3_config__ ->ISR_Routines.Trigger_ISR();
 800440a:	4b06      	ldr	r3, [pc, #24]	@ (8004424 <TIM3_IRQHandler+0xd4>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004412:	4798      	blx	r3

    	TIM3->SR &= ~TIM_SR_TIF;  // Clear the Capture Compare interrupt flag
 8004414:	4b04      	ldr	r3, [pc, #16]	@ (8004428 <TIM3_IRQHandler+0xd8>)
 8004416:	691b      	ldr	r3, [r3, #16]
 8004418:	4a03      	ldr	r2, [pc, #12]	@ (8004428 <TIM3_IRQHandler+0xd8>)
 800441a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800441e:	6113      	str	r3, [r2, #16]
    }
}
 8004420:	bf00      	nop
 8004422:	bd80      	pop	{r7, pc}
 8004424:	20000340 	.word	0x20000340
 8004428:	40000400 	.word	0x40000400

0800442c <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	af00      	add	r7, sp, #0
    if (__timer_4_config__ ->ISR_Routines.Capture_Compare_1_ISR) {
 8004430:	4b33      	ldr	r3, [pc, #204]	@ (8004500 <TIM4_IRQHandler+0xd4>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004438:	2b00      	cmp	r3, #0
 800443a:	d00a      	beq.n	8004452 <TIM4_IRQHandler+0x26>
    	__timer_4_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 800443c:	4b30      	ldr	r3, [pc, #192]	@ (8004500 <TIM4_IRQHandler+0xd4>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004444:	4798      	blx	r3

    	TIM4->SR &= ~TIM_SR_CC1IF;  // Clear the Capture Compare interrupt flag
 8004446:	4b2f      	ldr	r3, [pc, #188]	@ (8004504 <TIM4_IRQHandler+0xd8>)
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	4a2e      	ldr	r2, [pc, #184]	@ (8004504 <TIM4_IRQHandler+0xd8>)
 800444c:	f023 0302 	bic.w	r3, r3, #2
 8004450:	6113      	str	r3, [r2, #16]
    }
    if (__timer_4_config__ ->ISR_Routines.Capture_Compare_2_ISR) {
 8004452:	4b2b      	ldr	r3, [pc, #172]	@ (8004500 <TIM4_IRQHandler+0xd4>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800445a:	2b00      	cmp	r3, #0
 800445c:	d00a      	beq.n	8004474 <TIM4_IRQHandler+0x48>
    	__timer_4_config__ ->ISR_Routines.Capture_Compare_2_ISR();
 800445e:	4b28      	ldr	r3, [pc, #160]	@ (8004500 <TIM4_IRQHandler+0xd4>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004466:	4798      	blx	r3

    	TIM4->SR &= ~TIM_SR_CC2IF;  // Clear the Capture Compare interrupt flag
 8004468:	4b26      	ldr	r3, [pc, #152]	@ (8004504 <TIM4_IRQHandler+0xd8>)
 800446a:	691b      	ldr	r3, [r3, #16]
 800446c:	4a25      	ldr	r2, [pc, #148]	@ (8004504 <TIM4_IRQHandler+0xd8>)
 800446e:	f023 0304 	bic.w	r3, r3, #4
 8004472:	6113      	str	r3, [r2, #16]
    }
    if (__timer_4_config__ ->ISR_Routines.Capture_Compare_3_ISR) {
 8004474:	4b22      	ldr	r3, [pc, #136]	@ (8004500 <TIM4_IRQHandler+0xd4>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800447c:	2b00      	cmp	r3, #0
 800447e:	d00a      	beq.n	8004496 <TIM4_IRQHandler+0x6a>
    	__timer_4_config__ ->ISR_Routines.Capture_Compare_3_ISR();
 8004480:	4b1f      	ldr	r3, [pc, #124]	@ (8004500 <TIM4_IRQHandler+0xd4>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004488:	4798      	blx	r3

    	TIM4->SR &= ~TIM_SR_CC3IF;  // Clear the Capture Compare interrupt flag
 800448a:	4b1e      	ldr	r3, [pc, #120]	@ (8004504 <TIM4_IRQHandler+0xd8>)
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	4a1d      	ldr	r2, [pc, #116]	@ (8004504 <TIM4_IRQHandler+0xd8>)
 8004490:	f023 0308 	bic.w	r3, r3, #8
 8004494:	6113      	str	r3, [r2, #16]
    }
    if (__timer_4_config__ ->ISR_Routines.Capture_Compare_4_ISR) {
 8004496:	4b1a      	ldr	r3, [pc, #104]	@ (8004500 <TIM4_IRQHandler+0xd4>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d00a      	beq.n	80044b8 <TIM4_IRQHandler+0x8c>
    	__timer_4_config__ ->ISR_Routines.Capture_Compare_4_ISR();
 80044a2:	4b17      	ldr	r3, [pc, #92]	@ (8004500 <TIM4_IRQHandler+0xd4>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80044aa:	4798      	blx	r3

    	TIM4->SR &= ~TIM_SR_CC4IF;  // Clear the Capture Compare interrupt flag
 80044ac:	4b15      	ldr	r3, [pc, #84]	@ (8004504 <TIM4_IRQHandler+0xd8>)
 80044ae:	691b      	ldr	r3, [r3, #16]
 80044b0:	4a14      	ldr	r2, [pc, #80]	@ (8004504 <TIM4_IRQHandler+0xd8>)
 80044b2:	f023 0310 	bic.w	r3, r3, #16
 80044b6:	6113      	str	r3, [r2, #16]
    }
    if (__timer_4_config__ ->ISR_Routines.Update_ISR) {
 80044b8:	4b11      	ldr	r3, [pc, #68]	@ (8004500 <TIM4_IRQHandler+0xd4>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d00a      	beq.n	80044da <TIM4_IRQHandler+0xae>
    	__timer_4_config__ ->ISR_Routines.Update_ISR();
 80044c4:	4b0e      	ldr	r3, [pc, #56]	@ (8004500 <TIM4_IRQHandler+0xd4>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80044cc:	4798      	blx	r3

    	TIM4->SR &= ~TIM_SR_UIF;  // Clear the Capture Compare interrupt flag
 80044ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004504 <TIM4_IRQHandler+0xd8>)
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	4a0c      	ldr	r2, [pc, #48]	@ (8004504 <TIM4_IRQHandler+0xd8>)
 80044d4:	f023 0301 	bic.w	r3, r3, #1
 80044d8:	6113      	str	r3, [r2, #16]
    }
    if (__timer_4_config__ ->ISR_Routines.Trigger_ISR) {
 80044da:	4b09      	ldr	r3, [pc, #36]	@ (8004500 <TIM4_IRQHandler+0xd4>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00a      	beq.n	80044fc <TIM4_IRQHandler+0xd0>
    	__timer_4_config__ ->ISR_Routines.Trigger_ISR();
 80044e6:	4b06      	ldr	r3, [pc, #24]	@ (8004500 <TIM4_IRQHandler+0xd4>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80044ee:	4798      	blx	r3

    	TIM4->SR &= ~TIM_SR_TIF;  // Clear the Capture Compare interrupt flag
 80044f0:	4b04      	ldr	r3, [pc, #16]	@ (8004504 <TIM4_IRQHandler+0xd8>)
 80044f2:	691b      	ldr	r3, [r3, #16]
 80044f4:	4a03      	ldr	r2, [pc, #12]	@ (8004504 <TIM4_IRQHandler+0xd8>)
 80044f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044fa:	6113      	str	r3, [r2, #16]
    }
}
 80044fc:	bf00      	nop
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	20000344 	.word	0x20000344
 8004504:	40000800 	.word	0x40000800

08004508 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	af00      	add	r7, sp, #0
    if (__timer_5_config__ ->ISR_Routines.Capture_Compare_1_ISR) {
 800450c:	4b33      	ldr	r3, [pc, #204]	@ (80045dc <TIM5_IRQHandler+0xd4>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004514:	2b00      	cmp	r3, #0
 8004516:	d00a      	beq.n	800452e <TIM5_IRQHandler+0x26>
    	__timer_5_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 8004518:	4b30      	ldr	r3, [pc, #192]	@ (80045dc <TIM5_IRQHandler+0xd4>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004520:	4798      	blx	r3

    	TIM5->SR &= ~TIM_SR_CC1IF;  // Clear the Capture Compare interrupt flag
 8004522:	4b2f      	ldr	r3, [pc, #188]	@ (80045e0 <TIM5_IRQHandler+0xd8>)
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	4a2e      	ldr	r2, [pc, #184]	@ (80045e0 <TIM5_IRQHandler+0xd8>)
 8004528:	f023 0302 	bic.w	r3, r3, #2
 800452c:	6113      	str	r3, [r2, #16]
    }
    if (__timer_5_config__ ->ISR_Routines.Capture_Compare_2_ISR) {
 800452e:	4b2b      	ldr	r3, [pc, #172]	@ (80045dc <TIM5_IRQHandler+0xd4>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00a      	beq.n	8004550 <TIM5_IRQHandler+0x48>
    	__timer_5_config__ ->ISR_Routines.Capture_Compare_2_ISR();
 800453a:	4b28      	ldr	r3, [pc, #160]	@ (80045dc <TIM5_IRQHandler+0xd4>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004542:	4798      	blx	r3

    	TIM5->SR &= ~TIM_SR_CC2IF;  // Clear the Capture Compare interrupt flag
 8004544:	4b26      	ldr	r3, [pc, #152]	@ (80045e0 <TIM5_IRQHandler+0xd8>)
 8004546:	691b      	ldr	r3, [r3, #16]
 8004548:	4a25      	ldr	r2, [pc, #148]	@ (80045e0 <TIM5_IRQHandler+0xd8>)
 800454a:	f023 0304 	bic.w	r3, r3, #4
 800454e:	6113      	str	r3, [r2, #16]
    }
    if (__timer_5_config__ ->ISR_Routines.Capture_Compare_3_ISR) {
 8004550:	4b22      	ldr	r3, [pc, #136]	@ (80045dc <TIM5_IRQHandler+0xd4>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004558:	2b00      	cmp	r3, #0
 800455a:	d00a      	beq.n	8004572 <TIM5_IRQHandler+0x6a>
    	__timer_5_config__ ->ISR_Routines.Capture_Compare_3_ISR();
 800455c:	4b1f      	ldr	r3, [pc, #124]	@ (80045dc <TIM5_IRQHandler+0xd4>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004564:	4798      	blx	r3

    	TIM5->SR &= ~TIM_SR_CC3IF;  // Clear the Capture Compare interrupt flag
 8004566:	4b1e      	ldr	r3, [pc, #120]	@ (80045e0 <TIM5_IRQHandler+0xd8>)
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	4a1d      	ldr	r2, [pc, #116]	@ (80045e0 <TIM5_IRQHandler+0xd8>)
 800456c:	f023 0308 	bic.w	r3, r3, #8
 8004570:	6113      	str	r3, [r2, #16]
    }
    if (__timer_5_config__ ->ISR_Routines.Capture_Compare_4_ISR) {
 8004572:	4b1a      	ldr	r3, [pc, #104]	@ (80045dc <TIM5_IRQHandler+0xd4>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00a      	beq.n	8004594 <TIM5_IRQHandler+0x8c>
    	__timer_5_config__ ->ISR_Routines.Capture_Compare_4_ISR();
 800457e:	4b17      	ldr	r3, [pc, #92]	@ (80045dc <TIM5_IRQHandler+0xd4>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004586:	4798      	blx	r3

    	TIM5->SR &= ~TIM_SR_CC4IF;  // Clear the Capture Compare interrupt flag
 8004588:	4b15      	ldr	r3, [pc, #84]	@ (80045e0 <TIM5_IRQHandler+0xd8>)
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	4a14      	ldr	r2, [pc, #80]	@ (80045e0 <TIM5_IRQHandler+0xd8>)
 800458e:	f023 0310 	bic.w	r3, r3, #16
 8004592:	6113      	str	r3, [r2, #16]
    }
    if (__timer_5_config__ ->ISR_Routines.Update_ISR) {
 8004594:	4b11      	ldr	r3, [pc, #68]	@ (80045dc <TIM5_IRQHandler+0xd4>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800459c:	2b00      	cmp	r3, #0
 800459e:	d00a      	beq.n	80045b6 <TIM5_IRQHandler+0xae>
    	__timer_5_config__ ->ISR_Routines.Update_ISR();
 80045a0:	4b0e      	ldr	r3, [pc, #56]	@ (80045dc <TIM5_IRQHandler+0xd4>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80045a8:	4798      	blx	r3

    	TIM5->SR &= ~TIM_SR_UIF;  // Clear the Capture Compare interrupt flag
 80045aa:	4b0d      	ldr	r3, [pc, #52]	@ (80045e0 <TIM5_IRQHandler+0xd8>)
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	4a0c      	ldr	r2, [pc, #48]	@ (80045e0 <TIM5_IRQHandler+0xd8>)
 80045b0:	f023 0301 	bic.w	r3, r3, #1
 80045b4:	6113      	str	r3, [r2, #16]
    }
    if (__timer_5_config__ ->ISR_Routines.Trigger_ISR) {
 80045b6:	4b09      	ldr	r3, [pc, #36]	@ (80045dc <TIM5_IRQHandler+0xd4>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00a      	beq.n	80045d8 <TIM5_IRQHandler+0xd0>
    	__timer_5_config__ ->ISR_Routines.Trigger_ISR();
 80045c2:	4b06      	ldr	r3, [pc, #24]	@ (80045dc <TIM5_IRQHandler+0xd4>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80045ca:	4798      	blx	r3

    	TIM5->SR &= ~TIM_SR_TIF;  // Clear the Capture Compare interrupt flag
 80045cc:	4b04      	ldr	r3, [pc, #16]	@ (80045e0 <TIM5_IRQHandler+0xd8>)
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	4a03      	ldr	r2, [pc, #12]	@ (80045e0 <TIM5_IRQHandler+0xd8>)
 80045d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045d6:	6113      	str	r3, [r2, #16]
    }
}
 80045d8:	bf00      	nop
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	20000348 	.word	0x20000348
 80045e0:	40000c00 	.word	0x40000c00

080045e4 <TIM6_DAC_IRQHandler>:

void TIM6_DAC_IRQHandler(void)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	af00      	add	r7, sp, #0
    if (__timer_6_config__->ISR_Routines.Update_ISR) {
 80045e8:	4b09      	ldr	r3, [pc, #36]	@ (8004610 <TIM6_DAC_IRQHandler+0x2c>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d00a      	beq.n	800460a <TIM6_DAC_IRQHandler+0x26>
    	__timer_6_config__->ISR_Routines.Update_ISR();
 80045f4:	4b06      	ldr	r3, [pc, #24]	@ (8004610 <TIM6_DAC_IRQHandler+0x2c>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80045fc:	4798      	blx	r3
    	  TIM6->SR &= ~TIM_SR_UIF;  // Clear the Capture Compare interrupt flag
 80045fe:	4b05      	ldr	r3, [pc, #20]	@ (8004614 <TIM6_DAC_IRQHandler+0x30>)
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	4a04      	ldr	r2, [pc, #16]	@ (8004614 <TIM6_DAC_IRQHandler+0x30>)
 8004604:	f023 0301 	bic.w	r3, r3, #1
 8004608:	6113      	str	r3, [r2, #16]

    }

}
 800460a:	bf00      	nop
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	2000034c 	.word	0x2000034c
 8004614:	40001000 	.word	0x40001000

08004618 <TIM7_IRQHandler>:

void TIM7_IRQHandler(void)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	af00      	add	r7, sp, #0
    if (__timer_7_config__->ISR_Routines.Update_ISR) {
 800461c:	4b09      	ldr	r3, [pc, #36]	@ (8004644 <TIM7_IRQHandler+0x2c>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004624:	2b00      	cmp	r3, #0
 8004626:	d00a      	beq.n	800463e <TIM7_IRQHandler+0x26>
    	__timer_7_config__->ISR_Routines.Update_ISR();
 8004628:	4b06      	ldr	r3, [pc, #24]	@ (8004644 <TIM7_IRQHandler+0x2c>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004630:	4798      	blx	r3

    	TIM7->SR &= ~TIM_SR_UIF;  // Clear the Capture Compare interrupt flag
 8004632:	4b05      	ldr	r3, [pc, #20]	@ (8004648 <TIM7_IRQHandler+0x30>)
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	4a04      	ldr	r2, [pc, #16]	@ (8004648 <TIM7_IRQHandler+0x30>)
 8004638:	f023 0301 	bic.w	r3, r3, #1
 800463c:	6113      	str	r3, [r2, #16]
    }
}
 800463e:	bf00      	nop
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	20000350 	.word	0x20000350
 8004648:	40001400 	.word	0x40001400

0800464c <TIM8_BRK_TIM12_IRQHandler>:
//		(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_4))
//{
//	NVIC_EnableIRQ(TIM8_CC_IRQn);
//}

void TIM8_BRK_TIM12_IRQHandler(void) {
 800464c:	b580      	push	{r7, lr}
 800464e:	af00      	add	r7, sp, #0
    if (__timer_8_config__ ->ISR_Routines.Break_ISR) {
 8004650:	4b2b      	ldr	r3, [pc, #172]	@ (8004700 <TIM8_BRK_TIM12_IRQHandler+0xb4>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004658:	2b00      	cmp	r3, #0
 800465a:	d00a      	beq.n	8004672 <TIM8_BRK_TIM12_IRQHandler+0x26>
    	__timer_8_config__ ->ISR_Routines.Break_ISR();
 800465c:	4b28      	ldr	r3, [pc, #160]	@ (8004700 <TIM8_BRK_TIM12_IRQHandler+0xb4>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004664:	4798      	blx	r3
    	TIM1->SR &= ~TIM_SR_BIF;  // Clear the Break interrupt flag
 8004666:	4b27      	ldr	r3, [pc, #156]	@ (8004704 <TIM8_BRK_TIM12_IRQHandler+0xb8>)
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	4a26      	ldr	r2, [pc, #152]	@ (8004704 <TIM8_BRK_TIM12_IRQHandler+0xb8>)
 800466c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004670:	6113      	str	r3, [r2, #16]
    }

    if (__timer_12_config__ ->ISR_Routines.Capture_Compare_1_ISR){
 8004672:	4b25      	ldr	r3, [pc, #148]	@ (8004708 <TIM8_BRK_TIM12_IRQHandler+0xbc>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00a      	beq.n	8004694 <TIM8_BRK_TIM12_IRQHandler+0x48>
    	__timer_12_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 800467e:	4b22      	ldr	r3, [pc, #136]	@ (8004708 <TIM8_BRK_TIM12_IRQHandler+0xbc>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004686:	4798      	blx	r3
    	TIM9->SR &= ~TIM_SR_CC1IF;  // Clear the Break interrupt flag
 8004688:	4b20      	ldr	r3, [pc, #128]	@ (800470c <TIM8_BRK_TIM12_IRQHandler+0xc0>)
 800468a:	691b      	ldr	r3, [r3, #16]
 800468c:	4a1f      	ldr	r2, [pc, #124]	@ (800470c <TIM8_BRK_TIM12_IRQHandler+0xc0>)
 800468e:	f023 0302 	bic.w	r3, r3, #2
 8004692:	6113      	str	r3, [r2, #16]
    }

    if (__timer_12_config__ ->ISR_Routines.Capture_Compare_2_ISR){
 8004694:	4b1c      	ldr	r3, [pc, #112]	@ (8004708 <TIM8_BRK_TIM12_IRQHandler+0xbc>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800469c:	2b00      	cmp	r3, #0
 800469e:	d00a      	beq.n	80046b6 <TIM8_BRK_TIM12_IRQHandler+0x6a>
    	__timer_12_config__ ->ISR_Routines.Capture_Compare_2_ISR();
 80046a0:	4b19      	ldr	r3, [pc, #100]	@ (8004708 <TIM8_BRK_TIM12_IRQHandler+0xbc>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046a8:	4798      	blx	r3
    	TIM9->SR &= ~TIM_SR_CC2IF;  // Clear the Break interrupt flag
 80046aa:	4b18      	ldr	r3, [pc, #96]	@ (800470c <TIM8_BRK_TIM12_IRQHandler+0xc0>)
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	4a17      	ldr	r2, [pc, #92]	@ (800470c <TIM8_BRK_TIM12_IRQHandler+0xc0>)
 80046b0:	f023 0304 	bic.w	r3, r3, #4
 80046b4:	6113      	str	r3, [r2, #16]
    }

    if (__timer_12_config__ ->ISR_Routines.Update_ISR){
 80046b6:	4b14      	ldr	r3, [pc, #80]	@ (8004708 <TIM8_BRK_TIM12_IRQHandler+0xbc>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d00a      	beq.n	80046d8 <TIM8_BRK_TIM12_IRQHandler+0x8c>
    	__timer_12_config__ ->ISR_Routines.Update_ISR();
 80046c2:	4b11      	ldr	r3, [pc, #68]	@ (8004708 <TIM8_BRK_TIM12_IRQHandler+0xbc>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80046ca:	4798      	blx	r3
    	TIM9->SR &= ~TIM_SR_UIF;  // Clear the Break interrupt flag
 80046cc:	4b0f      	ldr	r3, [pc, #60]	@ (800470c <TIM8_BRK_TIM12_IRQHandler+0xc0>)
 80046ce:	691b      	ldr	r3, [r3, #16]
 80046d0:	4a0e      	ldr	r2, [pc, #56]	@ (800470c <TIM8_BRK_TIM12_IRQHandler+0xc0>)
 80046d2:	f023 0301 	bic.w	r3, r3, #1
 80046d6:	6113      	str	r3, [r2, #16]
    }

    if (__timer_12_config__ ->ISR_Routines.Trigger_ISR){
 80046d8:	4b0b      	ldr	r3, [pc, #44]	@ (8004708 <TIM8_BRK_TIM12_IRQHandler+0xbc>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d00a      	beq.n	80046fa <TIM8_BRK_TIM12_IRQHandler+0xae>
    	__timer_12_config__ ->ISR_Routines.Trigger_ISR();
 80046e4:	4b08      	ldr	r3, [pc, #32]	@ (8004708 <TIM8_BRK_TIM12_IRQHandler+0xbc>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80046ec:	4798      	blx	r3
    	TIM9->SR &= ~TIM_SR_TIF;  // Clear the Break interrupt flag
 80046ee:	4b07      	ldr	r3, [pc, #28]	@ (800470c <TIM8_BRK_TIM12_IRQHandler+0xc0>)
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	4a06      	ldr	r2, [pc, #24]	@ (800470c <TIM8_BRK_TIM12_IRQHandler+0xc0>)
 80046f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046f8:	6113      	str	r3, [r2, #16]
    }

}
 80046fa:	bf00      	nop
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	20000354 	.word	0x20000354
 8004704:	40010000 	.word	0x40010000
 8004708:	20000364 	.word	0x20000364
 800470c:	40014000 	.word	0x40014000

08004710 <TIM8_UP_TIM13_IRQHandler>:

void TIM8_UP_TIM13_IRQHandler(void) {
 8004710:	b580      	push	{r7, lr}
 8004712:	af00      	add	r7, sp, #0
    if (__timer_1_config__ ->ISR_Routines.Update_ISR) {
 8004714:	4b1a      	ldr	r3, [pc, #104]	@ (8004780 <TIM8_UP_TIM13_IRQHandler+0x70>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800471c:	2b00      	cmp	r3, #0
 800471e:	d00a      	beq.n	8004736 <TIM8_UP_TIM13_IRQHandler+0x26>
    	__timer_1_config__ ->ISR_Routines.Update_ISR();
 8004720:	4b17      	ldr	r3, [pc, #92]	@ (8004780 <TIM8_UP_TIM13_IRQHandler+0x70>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004728:	4798      	blx	r3
    	TIM1->SR &= ~TIM_SR_UIF;  // Clear the Update interrupt flag
 800472a:	4b16      	ldr	r3, [pc, #88]	@ (8004784 <TIM8_UP_TIM13_IRQHandler+0x74>)
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	4a15      	ldr	r2, [pc, #84]	@ (8004784 <TIM8_UP_TIM13_IRQHandler+0x74>)
 8004730:	f023 0301 	bic.w	r3, r3, #1
 8004734:	6113      	str	r3, [r2, #16]
    }

    if (__timer_13_config__ ->ISR_Routines.Update_ISR) {
 8004736:	4b14      	ldr	r3, [pc, #80]	@ (8004788 <TIM8_UP_TIM13_IRQHandler+0x78>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800473e:	2b00      	cmp	r3, #0
 8004740:	d00a      	beq.n	8004758 <TIM8_UP_TIM13_IRQHandler+0x48>
    	__timer_13_config__ ->ISR_Routines.Update_ISR();
 8004742:	4b11      	ldr	r3, [pc, #68]	@ (8004788 <TIM8_UP_TIM13_IRQHandler+0x78>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800474a:	4798      	blx	r3
    	TIM13->SR &= ~TIM_SR_UIF;  // Clear the Update interrupt flag
 800474c:	4b0f      	ldr	r3, [pc, #60]	@ (800478c <TIM8_UP_TIM13_IRQHandler+0x7c>)
 800474e:	691b      	ldr	r3, [r3, #16]
 8004750:	4a0e      	ldr	r2, [pc, #56]	@ (800478c <TIM8_UP_TIM13_IRQHandler+0x7c>)
 8004752:	f023 0301 	bic.w	r3, r3, #1
 8004756:	6113      	str	r3, [r2, #16]
    }

    if (__timer_13_config__ ->ISR_Routines.Capture_Compare_1_ISR) {
 8004758:	4b0b      	ldr	r3, [pc, #44]	@ (8004788 <TIM8_UP_TIM13_IRQHandler+0x78>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004760:	2b00      	cmp	r3, #0
 8004762:	d00a      	beq.n	800477a <TIM8_UP_TIM13_IRQHandler+0x6a>
    	__timer_13_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 8004764:	4b08      	ldr	r3, [pc, #32]	@ (8004788 <TIM8_UP_TIM13_IRQHandler+0x78>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800476c:	4798      	blx	r3
    	TIM13->SR &= ~TIM_SR_CC1IF;  // Clear the Update interrupt flag
 800476e:	4b07      	ldr	r3, [pc, #28]	@ (800478c <TIM8_UP_TIM13_IRQHandler+0x7c>)
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	4a06      	ldr	r2, [pc, #24]	@ (800478c <TIM8_UP_TIM13_IRQHandler+0x7c>)
 8004774:	f023 0302 	bic.w	r3, r3, #2
 8004778:	6113      	str	r3, [r2, #16]
    }

}
 800477a:	bf00      	nop
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	20000338 	.word	0x20000338
 8004784:	40010000 	.word	0x40010000
 8004788:	20000368 	.word	0x20000368
 800478c:	40001c00 	.word	0x40001c00

08004790 <TIM8_TRG_COM_TIM14_IRQHandler>:

void TIM8_TRG_COM_TIM14_IRQHandler(void) {
 8004790:	b580      	push	{r7, lr}
 8004792:	af00      	add	r7, sp, #0
    if (__timer_8_config__ ->ISR_Routines.Trigger_ISR) {
 8004794:	4b22      	ldr	r3, [pc, #136]	@ (8004820 <TIM8_TRG_COM_TIM14_IRQHandler+0x90>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800479c:	2b00      	cmp	r3, #0
 800479e:	d00a      	beq.n	80047b6 <TIM8_TRG_COM_TIM14_IRQHandler+0x26>
    	__timer_8_config__ ->ISR_Routines.Trigger_ISR();
 80047a0:	4b1f      	ldr	r3, [pc, #124]	@ (8004820 <TIM8_TRG_COM_TIM14_IRQHandler+0x90>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80047a8:	4798      	blx	r3

    	TIM8->SR &= ~TIM_SR_TIF;  // Clear the Trigger interrupt flag
 80047aa:	4b1e      	ldr	r3, [pc, #120]	@ (8004824 <TIM8_TRG_COM_TIM14_IRQHandler+0x94>)
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	4a1d      	ldr	r2, [pc, #116]	@ (8004824 <TIM8_TRG_COM_TIM14_IRQHandler+0x94>)
 80047b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047b4:	6113      	str	r3, [r2, #16]
    }

    if (__timer_8_config__ ->ISR_Routines.Commutation_ISR) {
 80047b6:	4b1a      	ldr	r3, [pc, #104]	@ (8004820 <TIM8_TRG_COM_TIM14_IRQHandler+0x90>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00a      	beq.n	80047d8 <TIM8_TRG_COM_TIM14_IRQHandler+0x48>
    	__timer_8_config__ ->ISR_Routines.Commutation_ISR();
 80047c2:	4b17      	ldr	r3, [pc, #92]	@ (8004820 <TIM8_TRG_COM_TIM14_IRQHandler+0x90>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80047ca:	4798      	blx	r3

    	TIM8->SR &= ~TIM_SR_COMIF;  // Clear the Trigger interrupt flag
 80047cc:	4b15      	ldr	r3, [pc, #84]	@ (8004824 <TIM8_TRG_COM_TIM14_IRQHandler+0x94>)
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	4a14      	ldr	r2, [pc, #80]	@ (8004824 <TIM8_TRG_COM_TIM14_IRQHandler+0x94>)
 80047d2:	f023 0320 	bic.w	r3, r3, #32
 80047d6:	6113      	str	r3, [r2, #16]
    }

    if (__timer_14_config__ ->ISR_Routines.Update_ISR) {
 80047d8:	4b13      	ldr	r3, [pc, #76]	@ (8004828 <TIM8_TRG_COM_TIM14_IRQHandler+0x98>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d00a      	beq.n	80047fa <TIM8_TRG_COM_TIM14_IRQHandler+0x6a>
    	__timer_14_config__ ->ISR_Routines.Update_ISR();
 80047e4:	4b10      	ldr	r3, [pc, #64]	@ (8004828 <TIM8_TRG_COM_TIM14_IRQHandler+0x98>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80047ec:	4798      	blx	r3
    	TIM14->SR &= ~TIM_SR_UIF;  // Clear the Update interrupt flag
 80047ee:	4b0f      	ldr	r3, [pc, #60]	@ (800482c <TIM8_TRG_COM_TIM14_IRQHandler+0x9c>)
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	4a0e      	ldr	r2, [pc, #56]	@ (800482c <TIM8_TRG_COM_TIM14_IRQHandler+0x9c>)
 80047f4:	f023 0301 	bic.w	r3, r3, #1
 80047f8:	6113      	str	r3, [r2, #16]
    }

    if (__timer_14_config__ ->ISR_Routines.Capture_Compare_1_ISR) {
 80047fa:	4b0b      	ldr	r3, [pc, #44]	@ (8004828 <TIM8_TRG_COM_TIM14_IRQHandler+0x98>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00a      	beq.n	800481c <TIM8_TRG_COM_TIM14_IRQHandler+0x8c>
    	__timer_14_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 8004806:	4b08      	ldr	r3, [pc, #32]	@ (8004828 <TIM8_TRG_COM_TIM14_IRQHandler+0x98>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800480e:	4798      	blx	r3
    	TIM14->SR &= ~TIM_SR_CC1IF;  // Clear the Update interrupt flag
 8004810:	4b06      	ldr	r3, [pc, #24]	@ (800482c <TIM8_TRG_COM_TIM14_IRQHandler+0x9c>)
 8004812:	691b      	ldr	r3, [r3, #16]
 8004814:	4a05      	ldr	r2, [pc, #20]	@ (800482c <TIM8_TRG_COM_TIM14_IRQHandler+0x9c>)
 8004816:	f023 0302 	bic.w	r3, r3, #2
 800481a:	6113      	str	r3, [r2, #16]
    }

}
 800481c:	bf00      	nop
 800481e:	bd80      	pop	{r7, pc}
 8004820:	20000354 	.word	0x20000354
 8004824:	40010400 	.word	0x40010400
 8004828:	2000036c 	.word	0x2000036c
 800482c:	40002000 	.word	0x40002000

08004830 <TIM8_CC_IRQHandler>:

void TIM8_CC_IRQHandler(void) {
 8004830:	b580      	push	{r7, lr}
 8004832:	af00      	add	r7, sp, #0
    if (__timer_8_config__ ->ISR_Routines.Capture_Compare_1_ISR) {
 8004834:	4b22      	ldr	r3, [pc, #136]	@ (80048c0 <TIM8_CC_IRQHandler+0x90>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800483c:	2b00      	cmp	r3, #0
 800483e:	d00a      	beq.n	8004856 <TIM8_CC_IRQHandler+0x26>
    	__timer_8_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 8004840:	4b1f      	ldr	r3, [pc, #124]	@ (80048c0 <TIM8_CC_IRQHandler+0x90>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004848:	4798      	blx	r3

    	TIM8->SR &= ~TIM_SR_CC1IF;  // Clear the Capture Compare interrupt flag
 800484a:	4b1e      	ldr	r3, [pc, #120]	@ (80048c4 <TIM8_CC_IRQHandler+0x94>)
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	4a1d      	ldr	r2, [pc, #116]	@ (80048c4 <TIM8_CC_IRQHandler+0x94>)
 8004850:	f023 0302 	bic.w	r3, r3, #2
 8004854:	6113      	str	r3, [r2, #16]
    }

    if (__timer_8_config__ ->ISR_Routines.Capture_Compare_2_ISR) {
 8004856:	4b1a      	ldr	r3, [pc, #104]	@ (80048c0 <TIM8_CC_IRQHandler+0x90>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800485e:	2b00      	cmp	r3, #0
 8004860:	d00a      	beq.n	8004878 <TIM8_CC_IRQHandler+0x48>
    	__timer_8_config__ ->ISR_Routines.Capture_Compare_2_ISR();
 8004862:	4b17      	ldr	r3, [pc, #92]	@ (80048c0 <TIM8_CC_IRQHandler+0x90>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800486a:	4798      	blx	r3

    	TIM8->SR &= ~TIM_SR_CC2IF;  // Clear the Capture Compare interrupt flag
 800486c:	4b15      	ldr	r3, [pc, #84]	@ (80048c4 <TIM8_CC_IRQHandler+0x94>)
 800486e:	691b      	ldr	r3, [r3, #16]
 8004870:	4a14      	ldr	r2, [pc, #80]	@ (80048c4 <TIM8_CC_IRQHandler+0x94>)
 8004872:	f023 0304 	bic.w	r3, r3, #4
 8004876:	6113      	str	r3, [r2, #16]
    }

    if (__timer_8_config__ ->ISR_Routines.Capture_Compare_3_ISR) {
 8004878:	4b11      	ldr	r3, [pc, #68]	@ (80048c0 <TIM8_CC_IRQHandler+0x90>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00a      	beq.n	800489a <TIM8_CC_IRQHandler+0x6a>
    	__timer_8_config__ ->ISR_Routines.Capture_Compare_3_ISR();
 8004884:	4b0e      	ldr	r3, [pc, #56]	@ (80048c0 <TIM8_CC_IRQHandler+0x90>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800488c:	4798      	blx	r3

    	TIM8->SR &= ~TIM_SR_CC3IF;  // Clear the Capture Compare interrupt flag
 800488e:	4b0d      	ldr	r3, [pc, #52]	@ (80048c4 <TIM8_CC_IRQHandler+0x94>)
 8004890:	691b      	ldr	r3, [r3, #16]
 8004892:	4a0c      	ldr	r2, [pc, #48]	@ (80048c4 <TIM8_CC_IRQHandler+0x94>)
 8004894:	f023 0308 	bic.w	r3, r3, #8
 8004898:	6113      	str	r3, [r2, #16]
    }

    if (__timer_8_config__ ->ISR_Routines.Capture_Compare_4_ISR) {
 800489a:	4b09      	ldr	r3, [pc, #36]	@ (80048c0 <TIM8_CC_IRQHandler+0x90>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00a      	beq.n	80048bc <TIM8_CC_IRQHandler+0x8c>
    	__timer_8_config__ ->ISR_Routines.Capture_Compare_4_ISR();
 80048a6:	4b06      	ldr	r3, [pc, #24]	@ (80048c0 <TIM8_CC_IRQHandler+0x90>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80048ae:	4798      	blx	r3

    	TIM8->SR &= ~TIM_SR_CC4IF;  // Clear the Capture Compare interrupt flag
 80048b0:	4b04      	ldr	r3, [pc, #16]	@ (80048c4 <TIM8_CC_IRQHandler+0x94>)
 80048b2:	691b      	ldr	r3, [r3, #16]
 80048b4:	4a03      	ldr	r2, [pc, #12]	@ (80048c4 <TIM8_CC_IRQHandler+0x94>)
 80048b6:	f023 0310 	bic.w	r3, r3, #16
 80048ba:	6113      	str	r3, [r2, #16]
    }
}
 80048bc:	bf00      	nop
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	20000354 	.word	0x20000354
 80048c4:	40010400 	.word	0x40010400

080048c8 <UART4_IRQHandler>:




void UART4_IRQHandler(void)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	af00      	add	r7, sp, #0
	USART_SR = UART4 -> SR;
 80048cc:	4b57      	ldr	r3, [pc, #348]	@ (8004a2c <UART4_IRQHandler+0x164>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	b29a      	uxth	r2, r3
 80048d2:	4b57      	ldr	r3, [pc, #348]	@ (8004a30 <UART4_IRQHandler+0x168>)
 80048d4:	801a      	strh	r2, [r3, #0]
	if(USART_SR & USART_SR_CTS)
 80048d6:	4b56      	ldr	r3, [pc, #344]	@ (8004a30 <UART4_IRQHandler+0x168>)
 80048d8:	881b      	ldrh	r3, [r3, #0]
 80048da:	b29b      	uxth	r3, r3
 80048dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d010      	beq.n	8004906 <UART4_IRQHandler+0x3e>
	{
	    if (__usart_4_config__ ->ISR_Routines.CTS_ISR) {
 80048e4:	4b53      	ldr	r3, [pc, #332]	@ (8004a34 <UART4_IRQHandler+0x16c>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d00a      	beq.n	8004906 <UART4_IRQHandler+0x3e>
	    	__usart_4_config__ ->ISR_Routines.CTS_ISR();
 80048f0:	4b50      	ldr	r3, [pc, #320]	@ (8004a34 <UART4_IRQHandler+0x16c>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80048f8:	4798      	blx	r3
	    	UART4->SR &= ~USART_SR_CTS;  // Clear the Break interrupt flag
 80048fa:	4b4c      	ldr	r3, [pc, #304]	@ (8004a2c <UART4_IRQHandler+0x164>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a4b      	ldr	r2, [pc, #300]	@ (8004a2c <UART4_IRQHandler+0x164>)
 8004900:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004904:	6013      	str	r3, [r2, #0]
	    }
	}

	if(USART_SR & USART_SR_LBD)
 8004906:	4b4a      	ldr	r3, [pc, #296]	@ (8004a30 <UART4_IRQHandler+0x168>)
 8004908:	881b      	ldrh	r3, [r3, #0]
 800490a:	b29b      	uxth	r3, r3
 800490c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004910:	2b00      	cmp	r3, #0
 8004912:	d010      	beq.n	8004936 <UART4_IRQHandler+0x6e>
	{
	    if (__usart_4_config__ ->ISR_Routines.LIN_Break_Detection_ISR) {
 8004914:	4b47      	ldr	r3, [pc, #284]	@ (8004a34 <UART4_IRQHandler+0x16c>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d00a      	beq.n	8004936 <UART4_IRQHandler+0x6e>
	    	__usart_4_config__ ->ISR_Routines.LIN_Break_Detection_ISR();
 8004920:	4b44      	ldr	r3, [pc, #272]	@ (8004a34 <UART4_IRQHandler+0x16c>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004928:	4798      	blx	r3
	    	UART4->SR &= ~USART_SR_LBD;  // Clear the Break interrupt flag
 800492a:	4b40      	ldr	r3, [pc, #256]	@ (8004a2c <UART4_IRQHandler+0x164>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a3f      	ldr	r2, [pc, #252]	@ (8004a2c <UART4_IRQHandler+0x164>)
 8004930:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004934:	6013      	str	r3, [r2, #0]
	    }
	}

	if(USART_SR & USART_SR_TXE)
 8004936:	4b3e      	ldr	r3, [pc, #248]	@ (8004a30 <UART4_IRQHandler+0x168>)
 8004938:	881b      	ldrh	r3, [r3, #0]
 800493a:	b29b      	uxth	r3, r3
 800493c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004940:	2b00      	cmp	r3, #0
 8004942:	d010      	beq.n	8004966 <UART4_IRQHandler+0x9e>
	{
	    if (__usart_4_config__ ->ISR_Routines.Transmit_Empty_ISR) {
 8004944:	4b3b      	ldr	r3, [pc, #236]	@ (8004a34 <UART4_IRQHandler+0x16c>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00a      	beq.n	8004966 <UART4_IRQHandler+0x9e>
	    	__usart_4_config__ ->ISR_Routines.Transmit_Empty_ISR();
 8004950:	4b38      	ldr	r3, [pc, #224]	@ (8004a34 <UART4_IRQHandler+0x16c>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004958:	4798      	blx	r3
	    	UART4->SR &= ~USART_SR_TXE;  // Clear the Break interrupt flag
 800495a:	4b34      	ldr	r3, [pc, #208]	@ (8004a2c <UART4_IRQHandler+0x164>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a33      	ldr	r2, [pc, #204]	@ (8004a2c <UART4_IRQHandler+0x164>)
 8004960:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004964:	6013      	str	r3, [r2, #0]
	    }
	}


	if(USART_SR & USART_SR_TC)
 8004966:	4b32      	ldr	r3, [pc, #200]	@ (8004a30 <UART4_IRQHandler+0x168>)
 8004968:	881b      	ldrh	r3, [r3, #0]
 800496a:	b29b      	uxth	r3, r3
 800496c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004970:	2b00      	cmp	r3, #0
 8004972:	d010      	beq.n	8004996 <UART4_IRQHandler+0xce>
	{
	    if (__usart_4_config__ ->ISR_Routines.Transmission_Complete_ISR) {
 8004974:	4b2f      	ldr	r3, [pc, #188]	@ (8004a34 <UART4_IRQHandler+0x16c>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800497c:	2b00      	cmp	r3, #0
 800497e:	d00a      	beq.n	8004996 <UART4_IRQHandler+0xce>
	    	__usart_4_config__ ->ISR_Routines.Transmission_Complete_ISR();
 8004980:	4b2c      	ldr	r3, [pc, #176]	@ (8004a34 <UART4_IRQHandler+0x16c>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8004988:	4798      	blx	r3
	    	UART4->SR &= ~USART_SR_TC;  // Clear the Break interrupt flag
 800498a:	4b28      	ldr	r3, [pc, #160]	@ (8004a2c <UART4_IRQHandler+0x164>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a27      	ldr	r2, [pc, #156]	@ (8004a2c <UART4_IRQHandler+0x164>)
 8004990:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004994:	6013      	str	r3, [r2, #0]
	    }
	}

	if(USART_SR & USART_SR_RXNE)
 8004996:	4b26      	ldr	r3, [pc, #152]	@ (8004a30 <UART4_IRQHandler+0x168>)
 8004998:	881b      	ldrh	r3, [r3, #0]
 800499a:	b29b      	uxth	r3, r3
 800499c:	f003 0320 	and.w	r3, r3, #32
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d010      	beq.n	80049c6 <UART4_IRQHandler+0xfe>
	{
	    if (__usart_4_config__ ->ISR_Routines.Receiver_Empty_ISR) {
 80049a4:	4b23      	ldr	r3, [pc, #140]	@ (8004a34 <UART4_IRQHandler+0x16c>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d00a      	beq.n	80049c6 <UART4_IRQHandler+0xfe>
	    	__usart_4_config__ ->ISR_Routines.Receiver_Empty_ISR();
 80049b0:	4b20      	ldr	r3, [pc, #128]	@ (8004a34 <UART4_IRQHandler+0x16c>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80049b8:	4798      	blx	r3
	    	UART4->SR &= ~USART_SR_RXNE;  // Clear the Break interrupt flag
 80049ba:	4b1c      	ldr	r3, [pc, #112]	@ (8004a2c <UART4_IRQHandler+0x164>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a1b      	ldr	r2, [pc, #108]	@ (8004a2c <UART4_IRQHandler+0x164>)
 80049c0:	f023 0320 	bic.w	r3, r3, #32
 80049c4:	6013      	str	r3, [r2, #0]
	    }
	}


	if(USART_SR & USART_SR_IDLE)
 80049c6:	4b1a      	ldr	r3, [pc, #104]	@ (8004a30 <UART4_IRQHandler+0x168>)
 80049c8:	881b      	ldrh	r3, [r3, #0]
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	f003 0310 	and.w	r3, r3, #16
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d010      	beq.n	80049f6 <UART4_IRQHandler+0x12e>
	{
	    if (__usart_4_config__ ->ISR_Routines.Idle_Line_ISR) {
 80049d4:	4b17      	ldr	r3, [pc, #92]	@ (8004a34 <UART4_IRQHandler+0x16c>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d00a      	beq.n	80049f6 <UART4_IRQHandler+0x12e>
	    	__usart_4_config__ ->ISR_Routines.Idle_Line_ISR();
 80049e0:	4b14      	ldr	r3, [pc, #80]	@ (8004a34 <UART4_IRQHandler+0x16c>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80049e8:	4798      	blx	r3
	    	UART4->SR &= ~USART_SR_IDLE;  // Clear the Break interrupt flag
 80049ea:	4b10      	ldr	r3, [pc, #64]	@ (8004a2c <UART4_IRQHandler+0x164>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a0f      	ldr	r2, [pc, #60]	@ (8004a2c <UART4_IRQHandler+0x164>)
 80049f0:	f023 0310 	bic.w	r3, r3, #16
 80049f4:	6013      	str	r3, [r2, #0]
	    }
	}

	if(USART_SR & USART_SR_PE)
 80049f6:	4b0e      	ldr	r3, [pc, #56]	@ (8004a30 <UART4_IRQHandler+0x168>)
 80049f8:	881b      	ldrh	r3, [r3, #0]
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	f003 0301 	and.w	r3, r3, #1
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d010      	beq.n	8004a26 <UART4_IRQHandler+0x15e>
	{
	    if (__usart_4_config__ ->ISR_Routines.Parity_ISR) {
 8004a04:	4b0b      	ldr	r3, [pc, #44]	@ (8004a34 <UART4_IRQHandler+0x16c>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00a      	beq.n	8004a26 <UART4_IRQHandler+0x15e>
	    	__usart_4_config__ ->ISR_Routines.Parity_ISR();
 8004a10:	4b08      	ldr	r3, [pc, #32]	@ (8004a34 <UART4_IRQHandler+0x16c>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004a18:	4798      	blx	r3
	    	UART4->SR &= ~USART_SR_PE;  // Clear the Break interrupt flag
 8004a1a:	4b04      	ldr	r3, [pc, #16]	@ (8004a2c <UART4_IRQHandler+0x164>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a03      	ldr	r2, [pc, #12]	@ (8004a2c <UART4_IRQHandler+0x164>)
 8004a20:	f023 0301 	bic.w	r3, r3, #1
 8004a24:	6013      	str	r3, [r2, #0]
	    }
	}

}
 8004a26:	bf00      	nop
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	40004c00 	.word	0x40004c00
 8004a30:	20000378 	.word	0x20000378
 8004a34:	20000374 	.word	0x20000374

08004a38 <USART1_IRQHandler>:


void USART1_IRQHandler(void)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	af00      	add	r7, sp, #0
	USART_SR = USART1 -> SR;
 8004a3c:	4b57      	ldr	r3, [pc, #348]	@ (8004b9c <USART1_IRQHandler+0x164>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	b29a      	uxth	r2, r3
 8004a42:	4b57      	ldr	r3, [pc, #348]	@ (8004ba0 <USART1_IRQHandler+0x168>)
 8004a44:	801a      	strh	r2, [r3, #0]
	if(USART_SR & USART_SR_CTS)
 8004a46:	4b56      	ldr	r3, [pc, #344]	@ (8004ba0 <USART1_IRQHandler+0x168>)
 8004a48:	881b      	ldrh	r3, [r3, #0]
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d010      	beq.n	8004a76 <USART1_IRQHandler+0x3e>
	{
	    if (__usart_1_config__ ->ISR_Routines.CTS_ISR) {
 8004a54:	4b53      	ldr	r3, [pc, #332]	@ (8004ba4 <USART1_IRQHandler+0x16c>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d00a      	beq.n	8004a76 <USART1_IRQHandler+0x3e>
	    	__usart_1_config__ ->ISR_Routines.CTS_ISR();
 8004a60:	4b50      	ldr	r3, [pc, #320]	@ (8004ba4 <USART1_IRQHandler+0x16c>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004a68:	4798      	blx	r3
	    	USART1->SR &= ~USART_SR_CTS;  // Clear the Break interrupt flag
 8004a6a:	4b4c      	ldr	r3, [pc, #304]	@ (8004b9c <USART1_IRQHandler+0x164>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a4b      	ldr	r2, [pc, #300]	@ (8004b9c <USART1_IRQHandler+0x164>)
 8004a70:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004a74:	6013      	str	r3, [r2, #0]
	    }
	}

	if(USART_SR & USART_SR_LBD)
 8004a76:	4b4a      	ldr	r3, [pc, #296]	@ (8004ba0 <USART1_IRQHandler+0x168>)
 8004a78:	881b      	ldrh	r3, [r3, #0]
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d010      	beq.n	8004aa6 <USART1_IRQHandler+0x6e>
	{
	    if (__usart_1_config__ ->ISR_Routines.LIN_Break_Detection_ISR) {
 8004a84:	4b47      	ldr	r3, [pc, #284]	@ (8004ba4 <USART1_IRQHandler+0x16c>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d00a      	beq.n	8004aa6 <USART1_IRQHandler+0x6e>
	    	__usart_1_config__ ->ISR_Routines.LIN_Break_Detection_ISR();
 8004a90:	4b44      	ldr	r3, [pc, #272]	@ (8004ba4 <USART1_IRQHandler+0x16c>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a98:	4798      	blx	r3
	    	USART1->SR &= ~USART_SR_LBD;  // Clear the Break interrupt flag
 8004a9a:	4b40      	ldr	r3, [pc, #256]	@ (8004b9c <USART1_IRQHandler+0x164>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a3f      	ldr	r2, [pc, #252]	@ (8004b9c <USART1_IRQHandler+0x164>)
 8004aa0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004aa4:	6013      	str	r3, [r2, #0]
	    }
	}

	if(USART_SR & USART_SR_TXE)
 8004aa6:	4b3e      	ldr	r3, [pc, #248]	@ (8004ba0 <USART1_IRQHandler+0x168>)
 8004aa8:	881b      	ldrh	r3, [r3, #0]
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d010      	beq.n	8004ad6 <USART1_IRQHandler+0x9e>
	{
	    if (__usart_1_config__ ->ISR_Routines.Transmit_Empty_ISR) {
 8004ab4:	4b3b      	ldr	r3, [pc, #236]	@ (8004ba4 <USART1_IRQHandler+0x16c>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d00a      	beq.n	8004ad6 <USART1_IRQHandler+0x9e>
	    	__usart_1_config__ ->ISR_Routines.Transmit_Empty_ISR();
 8004ac0:	4b38      	ldr	r3, [pc, #224]	@ (8004ba4 <USART1_IRQHandler+0x16c>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004ac8:	4798      	blx	r3
	    	USART1->SR &= ~USART_SR_TXE;  // Clear the Break interrupt flag
 8004aca:	4b34      	ldr	r3, [pc, #208]	@ (8004b9c <USART1_IRQHandler+0x164>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a33      	ldr	r2, [pc, #204]	@ (8004b9c <USART1_IRQHandler+0x164>)
 8004ad0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ad4:	6013      	str	r3, [r2, #0]
	    }
	}


	if(USART_SR & USART_SR_TC)
 8004ad6:	4b32      	ldr	r3, [pc, #200]	@ (8004ba0 <USART1_IRQHandler+0x168>)
 8004ad8:	881b      	ldrh	r3, [r3, #0]
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d010      	beq.n	8004b06 <USART1_IRQHandler+0xce>
	{
	    if (__usart_1_config__ ->ISR_Routines.Transmission_Complete_ISR) {
 8004ae4:	4b2f      	ldr	r3, [pc, #188]	@ (8004ba4 <USART1_IRQHandler+0x16c>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d00a      	beq.n	8004b06 <USART1_IRQHandler+0xce>
	    	__usart_1_config__ ->ISR_Routines.Transmission_Complete_ISR();
 8004af0:	4b2c      	ldr	r3, [pc, #176]	@ (8004ba4 <USART1_IRQHandler+0x16c>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8004af8:	4798      	blx	r3
	    	USART1->SR &= ~USART_SR_TC;  // Clear the Break interrupt flag
 8004afa:	4b28      	ldr	r3, [pc, #160]	@ (8004b9c <USART1_IRQHandler+0x164>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a27      	ldr	r2, [pc, #156]	@ (8004b9c <USART1_IRQHandler+0x164>)
 8004b00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b04:	6013      	str	r3, [r2, #0]
	    }
	}

	if(USART_SR & USART_SR_RXNE)
 8004b06:	4b26      	ldr	r3, [pc, #152]	@ (8004ba0 <USART1_IRQHandler+0x168>)
 8004b08:	881b      	ldrh	r3, [r3, #0]
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	f003 0320 	and.w	r3, r3, #32
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d010      	beq.n	8004b36 <USART1_IRQHandler+0xfe>
	{
	    if (__usart_1_config__ ->ISR_Routines.Receiver_Empty_ISR) {
 8004b14:	4b23      	ldr	r3, [pc, #140]	@ (8004ba4 <USART1_IRQHandler+0x16c>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d00a      	beq.n	8004b36 <USART1_IRQHandler+0xfe>
	    	__usart_1_config__ ->ISR_Routines.Receiver_Empty_ISR();
 8004b20:	4b20      	ldr	r3, [pc, #128]	@ (8004ba4 <USART1_IRQHandler+0x16c>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8004b28:	4798      	blx	r3
	    	USART1->SR &= ~USART_SR_RXNE;  // Clear the Break interrupt flag
 8004b2a:	4b1c      	ldr	r3, [pc, #112]	@ (8004b9c <USART1_IRQHandler+0x164>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a1b      	ldr	r2, [pc, #108]	@ (8004b9c <USART1_IRQHandler+0x164>)
 8004b30:	f023 0320 	bic.w	r3, r3, #32
 8004b34:	6013      	str	r3, [r2, #0]
	    }
	}


	if(USART_SR & USART_SR_IDLE)
 8004b36:	4b1a      	ldr	r3, [pc, #104]	@ (8004ba0 <USART1_IRQHandler+0x168>)
 8004b38:	881b      	ldrh	r3, [r3, #0]
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	f003 0310 	and.w	r3, r3, #16
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d010      	beq.n	8004b66 <USART1_IRQHandler+0x12e>
	{
	    if (__usart_1_config__ ->ISR_Routines.Idle_Line_ISR) {
 8004b44:	4b17      	ldr	r3, [pc, #92]	@ (8004ba4 <USART1_IRQHandler+0x16c>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d00a      	beq.n	8004b66 <USART1_IRQHandler+0x12e>
	    	__usart_1_config__ ->ISR_Routines.Idle_Line_ISR();
 8004b50:	4b14      	ldr	r3, [pc, #80]	@ (8004ba4 <USART1_IRQHandler+0x16c>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004b58:	4798      	blx	r3
	    	USART1->SR &= ~USART_SR_IDLE;  // Clear the Break interrupt flag
 8004b5a:	4b10      	ldr	r3, [pc, #64]	@ (8004b9c <USART1_IRQHandler+0x164>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a0f      	ldr	r2, [pc, #60]	@ (8004b9c <USART1_IRQHandler+0x164>)
 8004b60:	f023 0310 	bic.w	r3, r3, #16
 8004b64:	6013      	str	r3, [r2, #0]
	    }
	}

	if(USART_SR & USART_SR_PE)
 8004b66:	4b0e      	ldr	r3, [pc, #56]	@ (8004ba0 <USART1_IRQHandler+0x168>)
 8004b68:	881b      	ldrh	r3, [r3, #0]
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	f003 0301 	and.w	r3, r3, #1
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d010      	beq.n	8004b96 <USART1_IRQHandler+0x15e>
	{
	    if (__usart_1_config__ ->ISR_Routines.Parity_ISR) {
 8004b74:	4b0b      	ldr	r3, [pc, #44]	@ (8004ba4 <USART1_IRQHandler+0x16c>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d00a      	beq.n	8004b96 <USART1_IRQHandler+0x15e>
	    	__usart_1_config__ ->ISR_Routines.Parity_ISR();
 8004b80:	4b08      	ldr	r3, [pc, #32]	@ (8004ba4 <USART1_IRQHandler+0x16c>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004b88:	4798      	blx	r3
	    	USART1->SR &= ~USART_SR_PE;  // Clear the Break interrupt flag
 8004b8a:	4b04      	ldr	r3, [pc, #16]	@ (8004b9c <USART1_IRQHandler+0x164>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a03      	ldr	r2, [pc, #12]	@ (8004b9c <USART1_IRQHandler+0x164>)
 8004b90:	f023 0301 	bic.w	r3, r3, #1
 8004b94:	6013      	str	r3, [r2, #0]
	    }
	}

}
 8004b96:	bf00      	nop
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	40011000 	.word	0x40011000
 8004ba0:	20000378 	.word	0x20000378
 8004ba4:	20000370 	.word	0x20000370

08004ba8 <__NVIC_SetPriority>:
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	4603      	mov	r3, r0
 8004bb0:	6039      	str	r1, [r7, #0]
 8004bb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	db0a      	blt.n	8004bd2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	b2da      	uxtb	r2, r3
 8004bc0:	490c      	ldr	r1, [pc, #48]	@ (8004bf4 <__NVIC_SetPriority+0x4c>)
 8004bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bc6:	0112      	lsls	r2, r2, #4
 8004bc8:	b2d2      	uxtb	r2, r2
 8004bca:	440b      	add	r3, r1
 8004bcc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004bd0:	e00a      	b.n	8004be8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	b2da      	uxtb	r2, r3
 8004bd6:	4908      	ldr	r1, [pc, #32]	@ (8004bf8 <__NVIC_SetPriority+0x50>)
 8004bd8:	79fb      	ldrb	r3, [r7, #7]
 8004bda:	f003 030f 	and.w	r3, r3, #15
 8004bde:	3b04      	subs	r3, #4
 8004be0:	0112      	lsls	r2, r2, #4
 8004be2:	b2d2      	uxtb	r2, r2
 8004be4:	440b      	add	r3, r1
 8004be6:	761a      	strb	r2, [r3, #24]
}
 8004be8:	bf00      	nop
 8004bea:	370c      	adds	r7, #12
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr
 8004bf4:	e000e100 	.word	0xe000e100
 8004bf8:	e000ed00 	.word	0xe000ed00

08004bfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b082      	sub	sp, #8
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	3b01      	subs	r3, #1
 8004c08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c0c:	d301      	bcc.n	8004c12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e00f      	b.n	8004c32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c12:	4a0a      	ldr	r2, [pc, #40]	@ (8004c3c <SysTick_Config+0x40>)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	3b01      	subs	r3, #1
 8004c18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c1a:	210f      	movs	r1, #15
 8004c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c20:	f7ff ffc2 	bl	8004ba8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c24:	4b05      	ldr	r3, [pc, #20]	@ (8004c3c <SysTick_Config+0x40>)
 8004c26:	2200      	movs	r2, #0
 8004c28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c2a:	4b04      	ldr	r3, [pc, #16]	@ (8004c3c <SysTick_Config+0x40>)
 8004c2c:	2207      	movs	r2, #7
 8004c2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c30:	2300      	movs	r3, #0
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3708      	adds	r7, #8
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	e000e010 	.word	0xe000e010

08004c40 <MCU_Clock_Setup>:
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
	SystemInit();
 8004c46:	f000 f933 	bl	8004eb0 <SystemInit>
	uint8_t pll_m = 8;
 8004c4a:	2308      	movs	r3, #8
 8004c4c:	71fb      	strb	r3, [r7, #7]
	uint16_t pll_n = 336; //192
 8004c4e:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8004c52:	80bb      	strh	r3, [r7, #4]
	uint8_t pll_p = 0;
 8004c54:	2300      	movs	r3, #0
 8004c56:	70fb      	strb	r3, [r7, #3]
	uint8_t pll_q = 7;
 8004c58:	2307      	movs	r3, #7
 8004c5a:	70bb      	strb	r3, [r7, #2]
	RCC->PLLCFGR = 0x00000000;
 8004c5c:	4b3c      	ldr	r3, [pc, #240]	@ (8004d50 <MCU_Clock_Setup+0x110>)
 8004c5e:	2200      	movs	r2, #0
 8004c60:	605a      	str	r2, [r3, #4]
	RCC -> CR |= RCC_CR_HSEON;
 8004c62:	4b3b      	ldr	r3, [pc, #236]	@ (8004d50 <MCU_Clock_Setup+0x110>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a3a      	ldr	r2, [pc, #232]	@ (8004d50 <MCU_Clock_Setup+0x110>)
 8004c68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c6c:	6013      	str	r3, [r2, #0]
	while(!(RCC -> CR & RCC_CR_HSERDY)){}
 8004c6e:	bf00      	nop
 8004c70:	4b37      	ldr	r3, [pc, #220]	@ (8004d50 <MCU_Clock_Setup+0x110>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d0f9      	beq.n	8004c70 <MCU_Clock_Setup+0x30>
	RCC -> APB1ENR |= RCC_APB1ENR_PWREN;
 8004c7c:	4b34      	ldr	r3, [pc, #208]	@ (8004d50 <MCU_Clock_Setup+0x110>)
 8004c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c80:	4a33      	ldr	r2, [pc, #204]	@ (8004d50 <MCU_Clock_Setup+0x110>)
 8004c82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c86:	6413      	str	r3, [r2, #64]	@ 0x40
	PWR ->CR |= PWR_CR_VOS;
 8004c88:	4b32      	ldr	r3, [pc, #200]	@ (8004d54 <MCU_Clock_Setup+0x114>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a31      	ldr	r2, [pc, #196]	@ (8004d54 <MCU_Clock_Setup+0x114>)
 8004c8e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004c92:	6013      	str	r3, [r2, #0]
	FLASH -> ACR |= FLASH_ACR_ICEN | FLASH_ACR_PRFTEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS;
 8004c94:	4b30      	ldr	r3, [pc, #192]	@ (8004d58 <MCU_Clock_Setup+0x118>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a2f      	ldr	r2, [pc, #188]	@ (8004d58 <MCU_Clock_Setup+0x118>)
 8004c9a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004c9e:	f043 0305 	orr.w	r3, r3, #5
 8004ca2:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR |= (pll_q << 24) | (pll_p << 16) | (pll_n << 6) | (pll_m << 0);
 8004ca4:	4b2a      	ldr	r3, [pc, #168]	@ (8004d50 <MCU_Clock_Setup+0x110>)
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	78ba      	ldrb	r2, [r7, #2]
 8004caa:	0611      	lsls	r1, r2, #24
 8004cac:	78fa      	ldrb	r2, [r7, #3]
 8004cae:	0412      	lsls	r2, r2, #16
 8004cb0:	4311      	orrs	r1, r2
 8004cb2:	88ba      	ldrh	r2, [r7, #4]
 8004cb4:	0192      	lsls	r2, r2, #6
 8004cb6:	4311      	orrs	r1, r2
 8004cb8:	79fa      	ldrb	r2, [r7, #7]
 8004cba:	430a      	orrs	r2, r1
 8004cbc:	4611      	mov	r1, r2
 8004cbe:	4a24      	ldr	r2, [pc, #144]	@ (8004d50 <MCU_Clock_Setup+0x110>)
 8004cc0:	430b      	orrs	r3, r1
 8004cc2:	6053      	str	r3, [r2, #4]
	RCC ->PLLCFGR |= 1 << 22;
 8004cc4:	4b22      	ldr	r3, [pc, #136]	@ (8004d50 <MCU_Clock_Setup+0x110>)
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	4a21      	ldr	r2, [pc, #132]	@ (8004d50 <MCU_Clock_Setup+0x110>)
 8004cca:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004cce:	6053      	str	r3, [r2, #4]
	RCC -> CFGR |= RCC_CFGR_HPRE_DIV1;
 8004cd0:	4b1f      	ldr	r3, [pc, #124]	@ (8004d50 <MCU_Clock_Setup+0x110>)
 8004cd2:	4a1f      	ldr	r2, [pc, #124]	@ (8004d50 <MCU_Clock_Setup+0x110>)
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE1_DIV4;
 8004cd8:	4b1d      	ldr	r3, [pc, #116]	@ (8004d50 <MCU_Clock_Setup+0x110>)
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	4a1c      	ldr	r2, [pc, #112]	@ (8004d50 <MCU_Clock_Setup+0x110>)
 8004cde:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 8004ce2:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE2_DIV2;
 8004ce4:	4b1a      	ldr	r3, [pc, #104]	@ (8004d50 <MCU_Clock_Setup+0x110>)
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	4a19      	ldr	r2, [pc, #100]	@ (8004d50 <MCU_Clock_Setup+0x110>)
 8004cea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cee:	6093      	str	r3, [r2, #8]
	RCC -> CR |= RCC_CR_PLLON;
 8004cf0:	4b17      	ldr	r3, [pc, #92]	@ (8004d50 <MCU_Clock_Setup+0x110>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a16      	ldr	r2, [pc, #88]	@ (8004d50 <MCU_Clock_Setup+0x110>)
 8004cf6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004cfa:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY)){}
 8004cfc:	bf00      	nop
 8004cfe:	4b14      	ldr	r3, [pc, #80]	@ (8004d50 <MCU_Clock_Setup+0x110>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d0f9      	beq.n	8004cfe <MCU_Clock_Setup+0xbe>
	RCC -> CFGR |= RCC_CFGR_SW_PLL;
 8004d0a:	4b11      	ldr	r3, [pc, #68]	@ (8004d50 <MCU_Clock_Setup+0x110>)
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	4a10      	ldr	r2, [pc, #64]	@ (8004d50 <MCU_Clock_Setup+0x110>)
 8004d10:	f043 0302 	orr.w	r3, r3, #2
 8004d14:	6093      	str	r3, [r2, #8]
	while((RCC -> CFGR & RCC_CFGR_SWS_PLL) != RCC_CFGR_SWS_PLL);
 8004d16:	bf00      	nop
 8004d18:	4b0d      	ldr	r3, [pc, #52]	@ (8004d50 <MCU_Clock_Setup+0x110>)
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	f003 0308 	and.w	r3, r3, #8
 8004d20:	2b08      	cmp	r3, #8
 8004d22:	d1f9      	bne.n	8004d18 <MCU_Clock_Setup+0xd8>
	SystemCoreClockUpdate();
 8004d24:	f000 f8d6 	bl	8004ed4 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock/168);
 8004d28:	4b0c      	ldr	r3, [pc, #48]	@ (8004d5c <MCU_Clock_Setup+0x11c>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	08db      	lsrs	r3, r3, #3
 8004d2e:	4a0c      	ldr	r2, [pc, #48]	@ (8004d60 <MCU_Clock_Setup+0x120>)
 8004d30:	fba2 2303 	umull	r2, r3, r2, r3
 8004d34:	085b      	lsrs	r3, r3, #1
 8004d36:	4618      	mov	r0, r3
 8004d38:	f7ff ff60 	bl	8004bfc <SysTick_Config>
	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8004d3c:	4b04      	ldr	r3, [pc, #16]	@ (8004d50 <MCU_Clock_Setup+0x110>)
 8004d3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d40:	4a03      	ldr	r2, [pc, #12]	@ (8004d50 <MCU_Clock_Setup+0x110>)
 8004d42:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004d46:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8004d48:	bf00      	nop
 8004d4a:	3708      	adds	r7, #8
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	40023800 	.word	0x40023800
 8004d54:	40007000 	.word	0x40007000
 8004d58:	40023c00 	.word	0x40023c00
 8004d5c:	20000000 	.word	0x20000000
 8004d60:	18618619 	.word	0x18618619

08004d64 <Hold_Button_ISR>:
// Hold Button
// C/F Degree Button


void Hold_Button_ISR(void)
{
 8004d64:	b480      	push	{r7}
 8004d66:	af00      	add	r7, sp, #0

}
 8004d68:	bf00      	nop
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr

08004d72 <Degree_Button_ISR>:

void Degree_Button_ISR(void)
{
 8004d72:	b480      	push	{r7}
 8004d74:	af00      	add	r7, sp, #0

}
 8004d76:	bf00      	nop
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <main>:




int main(void)
{
 8004d80:	b590      	push	{r4, r7, lr}
 8004d82:	b097      	sub	sp, #92	@ 0x5c
 8004d84:	af04      	add	r7, sp, #16
	MCU_Clock_Setup();
 8004d86:	f7ff ff5b 	bl	8004c40 <MCU_Clock_Setup>

	GPIO_Pin_Init(GPIOA, 5, GPIO_Configuration.Mode.Input, GPIO_Configuration.Output_Type.Open_Drain, GPIO_Configuration.Speed.None, GPIO_Configuration.Pull.Pull_Down, GPIO_Configuration.Alternate_Functions.None);
 8004d8a:	2000      	movs	r0, #0
 8004d8c:	2401      	movs	r4, #1
 8004d8e:	2304      	movs	r3, #4
 8004d90:	2202      	movs	r2, #2
 8004d92:	2100      	movs	r1, #0
 8004d94:	9102      	str	r1, [sp, #8]
 8004d96:	9201      	str	r2, [sp, #4]
 8004d98:	9300      	str	r3, [sp, #0]
 8004d9a:	4623      	mov	r3, r4
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	2105      	movs	r1, #5
 8004da0:	483b      	ldr	r0, [pc, #236]	@ (8004e90 <main+0x110>)
 8004da2:	f7fe fb35 	bl	8003410 <GPIO_Pin_Init>
	GPIO_Pin_Init(GPIOA, 6, GPIO_Configuration.Mode.Input, GPIO_Configuration.Output_Type.Open_Drain, GPIO_Configuration.Speed.None, GPIO_Configuration.Pull.Pull_Down, GPIO_Configuration.Alternate_Functions.None);
 8004da6:	2000      	movs	r0, #0
 8004da8:	2401      	movs	r4, #1
 8004daa:	2304      	movs	r3, #4
 8004dac:	2202      	movs	r2, #2
 8004dae:	2100      	movs	r1, #0
 8004db0:	9102      	str	r1, [sp, #8]
 8004db2:	9201      	str	r2, [sp, #4]
 8004db4:	9300      	str	r3, [sp, #0]
 8004db6:	4623      	mov	r3, r4
 8004db8:	4602      	mov	r2, r0
 8004dba:	2106      	movs	r1, #6
 8004dbc:	4834      	ldr	r0, [pc, #208]	@ (8004e90 <main+0x110>)
 8004dbe:	f7fe fb27 	bl	8003410 <GPIO_Pin_Init>

	GPIO_Interrupt_Setup(GPIOA, 5, GPIO_Configuration.Interrupt_Edge.RISING_EDGE, 0, Hold_Button_ISR);
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	4b33      	ldr	r3, [pc, #204]	@ (8004e94 <main+0x114>)
 8004dc8:	9300      	str	r3, [sp, #0]
 8004dca:	2300      	movs	r3, #0
 8004dcc:	2105      	movs	r1, #5
 8004dce:	4830      	ldr	r0, [pc, #192]	@ (8004e90 <main+0x110>)
 8004dd0:	f7fe f9ac 	bl	800312c <GPIO_Interrupt_Setup>
	GPIO_Interrupt_Setup(GPIOA, 6, GPIO_Configuration.Interrupt_Edge.RISING_EDGE, 0, Degree_Button_ISR);
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	4b2f      	ldr	r3, [pc, #188]	@ (8004e98 <main+0x118>)
 8004dda:	9300      	str	r3, [sp, #0]
 8004ddc:	2300      	movs	r3, #0
 8004dde:	2106      	movs	r1, #6
 8004de0:	482b      	ldr	r0, [pc, #172]	@ (8004e90 <main+0x110>)
 8004de2:	f7fe f9a3 	bl	800312c <GPIO_Interrupt_Setup>

	BME280.Port = I2C1;
 8004de6:	4b2d      	ldr	r3, [pc, #180]	@ (8004e9c <main+0x11c>)
 8004de8:	4a2d      	ldr	r2, [pc, #180]	@ (8004ea0 <main+0x120>)
 8004dea:	601a      	str	r2, [r3, #0]
	BME280.SCL_Pin = I2C_Configuration.Pin.__I2C1__.SCL.PB6;
 8004dec:	23ce      	movs	r3, #206	@ 0xce
 8004dee:	b2da      	uxtb	r2, r3
 8004df0:	4b2a      	ldr	r3, [pc, #168]	@ (8004e9c <main+0x11c>)
 8004df2:	711a      	strb	r2, [r3, #4]
	BME280.SDA_Pin = I2C_Configuration.Pin.__I2C1__.SDA.PB7;
 8004df4:	23cf      	movs	r3, #207	@ 0xcf
 8004df6:	b2da      	uxtb	r2, r3
 8004df8:	4b28      	ldr	r3, [pc, #160]	@ (8004e9c <main+0x11c>)
 8004dfa:	715a      	strb	r2, [r3, #5]
	BME280.Speed_Mode = I2C_Configuration.Speed_Mode.FM_Mode;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	461a      	mov	r2, r3
 8004e00:	4b26      	ldr	r3, [pc, #152]	@ (8004e9c <main+0x11c>)
 8004e02:	609a      	str	r2, [r3, #8]
	BME280.Mode = I2C_Configuration.Mode.Master;
 8004e04:	2201      	movs	r2, #1
 8004e06:	4b25      	ldr	r3, [pc, #148]	@ (8004e9c <main+0x11c>)
 8004e08:	731a      	strb	r2, [r3, #12]
	BME280.Interrupts_Enable = I2C_Configuration.Interrupts_Enable.Disable;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	b2da      	uxtb	r2, r3
 8004e0e:	4b23      	ldr	r3, [pc, #140]	@ (8004e9c <main+0x11c>)
 8004e10:	735a      	strb	r2, [r3, #13]
	BME280.DMA_Control = I2C_Configuration.DMA_Control.RX_DMA_Enable;
 8004e12:	2202      	movs	r2, #2
 8004e14:	4b21      	ldr	r3, [pc, #132]	@ (8004e9c <main+0x11c>)
 8004e16:	739a      	strb	r2, [r3, #14]

	I2C_Init(&BME280);
 8004e18:	4820      	ldr	r0, [pc, #128]	@ (8004e9c <main+0x11c>)
 8004e1a:	f7fe fce7 	bl	80037ec <I2C_Init>


	// Read ID

	BME280_Init(&BME280);
 8004e1e:	481f      	ldr	r0, [pc, #124]	@ (8004e9c <main+0x11c>)
 8004e20:	f7fb fe86 	bl	8000b30 <BME280_Init>

	bme280_raw raw_values;

	BME280_Get_Raw(&BME280, &raw_values);
 8004e24:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004e28:	4619      	mov	r1, r3
 8004e2a:	481c      	ldr	r0, [pc, #112]	@ (8004e9c <main+0x11c>)
 8004e2c:	f7fb ff60 	bl	8000cf0 <BME280_Get_Raw>


	float T_C  = BME280_Compensate_T(raw_values.Temperature_Raw) * 0.01f;
 8004e30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e32:	4618      	mov	r0, r3
 8004e34:	f7fb ff8a 	bl	8000d4c <BME280_Compensate_T>
 8004e38:	eef0 7a40 	vmov.f32	s15, s0
 8004e3c:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8004ea4 <main+0x124>
 8004e40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e44:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
	float P_kPa= BME280_Compensate_P(raw_values.Pressure_Raw) / 1000.0f;
 8004e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f7fb ffbc 	bl	8000dc8 <BME280_Compensate_P>
 8004e50:	eeb0 7a40 	vmov.f32	s14, s0
 8004e54:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8004ea8 <main+0x128>
 8004e58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004e5c:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
	float RH   = BME280_Compensate_H(raw_values.Humidity_Raw) / 1024.0f;
 8004e60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e62:	4618      	mov	r0, r3
 8004e64:	f7fc fa4e 	bl	8001304 <BME280_Compensate_H>
 8004e68:	eeb0 7a40 	vmov.f32	s14, s0
 8004e6c:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8004eac <main+0x12c>
 8004e70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004e74:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c


	psychro_t Data = psychro_from_bme280(T_C, RH, P_kPa);
 8004e78:	463b      	mov	r3, r7
 8004e7a:	ed97 1a10 	vldr	s2, [r7, #64]	@ 0x40
 8004e7e:	edd7 0a0f 	vldr	s1, [r7, #60]	@ 0x3c
 8004e82:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 8004e86:	4618      	mov	r0, r3
 8004e88:	f7fb fd30 	bl	80008ec <psychro_from_bme280>




	for(;;);
 8004e8c:	bf00      	nop
 8004e8e:	e7fd      	b.n	8004e8c <main+0x10c>
 8004e90:	40020000 	.word	0x40020000
 8004e94:	08004d65 	.word	0x08004d65
 8004e98:	08004d73 	.word	0x08004d73
 8004e9c:	2000037c 	.word	0x2000037c
 8004ea0:	40005400 	.word	0x40005400
 8004ea4:	3c23d70a 	.word	0x3c23d70a
 8004ea8:	447a0000 	.word	0x447a0000
 8004eac:	44800000 	.word	0x44800000

08004eb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004eb4:	4b06      	ldr	r3, [pc, #24]	@ (8004ed0 <SystemInit+0x20>)
 8004eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eba:	4a05      	ldr	r2, [pc, #20]	@ (8004ed0 <SystemInit+0x20>)
 8004ebc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004ec0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004ec4:	bf00      	nop
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop
 8004ed0:	e000ed00 	.word	0xe000ed00

08004ed4 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b087      	sub	sp, #28
 8004ed8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8004eda:	2300      	movs	r3, #0
 8004edc:	613b      	str	r3, [r7, #16]
 8004ede:	2300      	movs	r3, #0
 8004ee0:	617b      	str	r3, [r7, #20]
 8004ee2:	2302      	movs	r3, #2
 8004ee4:	60fb      	str	r3, [r7, #12]
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	60bb      	str	r3, [r7, #8]
 8004eea:	2302      	movs	r3, #2
 8004eec:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8004eee:	4b34      	ldr	r3, [pc, #208]	@ (8004fc0 <SystemCoreClockUpdate+0xec>)
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f003 030c 	and.w	r3, r3, #12
 8004ef6:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	2b08      	cmp	r3, #8
 8004efc:	d011      	beq.n	8004f22 <SystemCoreClockUpdate+0x4e>
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	2b08      	cmp	r3, #8
 8004f02:	d844      	bhi.n	8004f8e <SystemCoreClockUpdate+0xba>
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d003      	beq.n	8004f12 <SystemCoreClockUpdate+0x3e>
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	2b04      	cmp	r3, #4
 8004f0e:	d004      	beq.n	8004f1a <SystemCoreClockUpdate+0x46>
 8004f10:	e03d      	b.n	8004f8e <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8004f12:	4b2c      	ldr	r3, [pc, #176]	@ (8004fc4 <SystemCoreClockUpdate+0xf0>)
 8004f14:	4a2c      	ldr	r2, [pc, #176]	@ (8004fc8 <SystemCoreClockUpdate+0xf4>)
 8004f16:	601a      	str	r2, [r3, #0]
      break;
 8004f18:	e03d      	b.n	8004f96 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8004f1a:	4b2a      	ldr	r3, [pc, #168]	@ (8004fc4 <SystemCoreClockUpdate+0xf0>)
 8004f1c:	4a2b      	ldr	r2, [pc, #172]	@ (8004fcc <SystemCoreClockUpdate+0xf8>)
 8004f1e:	601a      	str	r2, [r3, #0]
      break;
 8004f20:	e039      	b.n	8004f96 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8004f22:	4b27      	ldr	r3, [pc, #156]	@ (8004fc0 <SystemCoreClockUpdate+0xec>)
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	0d9b      	lsrs	r3, r3, #22
 8004f28:	f003 0301 	and.w	r3, r3, #1
 8004f2c:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f2e:	4b24      	ldr	r3, [pc, #144]	@ (8004fc0 <SystemCoreClockUpdate+0xec>)
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f36:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00c      	beq.n	8004f58 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8004f3e:	4a23      	ldr	r2, [pc, #140]	@ (8004fcc <SystemCoreClockUpdate+0xf8>)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f46:	4a1e      	ldr	r2, [pc, #120]	@ (8004fc0 <SystemCoreClockUpdate+0xec>)
 8004f48:	6852      	ldr	r2, [r2, #4]
 8004f4a:	0992      	lsrs	r2, r2, #6
 8004f4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f50:	fb02 f303 	mul.w	r3, r2, r3
 8004f54:	617b      	str	r3, [r7, #20]
 8004f56:	e00b      	b.n	8004f70 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8004f58:	4a1b      	ldr	r2, [pc, #108]	@ (8004fc8 <SystemCoreClockUpdate+0xf4>)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f60:	4a17      	ldr	r2, [pc, #92]	@ (8004fc0 <SystemCoreClockUpdate+0xec>)
 8004f62:	6852      	ldr	r2, [r2, #4]
 8004f64:	0992      	lsrs	r2, r2, #6
 8004f66:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f6a:	fb02 f303 	mul.w	r3, r2, r3
 8004f6e:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8004f70:	4b13      	ldr	r3, [pc, #76]	@ (8004fc0 <SystemCoreClockUpdate+0xec>)
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	0c1b      	lsrs	r3, r3, #16
 8004f76:	f003 0303 	and.w	r3, r3, #3
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	005b      	lsls	r3, r3, #1
 8004f7e:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8004f80:	697a      	ldr	r2, [r7, #20]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f88:	4a0e      	ldr	r2, [pc, #56]	@ (8004fc4 <SystemCoreClockUpdate+0xf0>)
 8004f8a:	6013      	str	r3, [r2, #0]
      break;
 8004f8c:	e003      	b.n	8004f96 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8004f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8004fc4 <SystemCoreClockUpdate+0xf0>)
 8004f90:	4a0d      	ldr	r2, [pc, #52]	@ (8004fc8 <SystemCoreClockUpdate+0xf4>)
 8004f92:	601a      	str	r2, [r3, #0]
      break;
 8004f94:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8004f96:	4b0a      	ldr	r3, [pc, #40]	@ (8004fc0 <SystemCoreClockUpdate+0xec>)
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	091b      	lsrs	r3, r3, #4
 8004f9c:	f003 030f 	and.w	r3, r3, #15
 8004fa0:	4a0b      	ldr	r2, [pc, #44]	@ (8004fd0 <SystemCoreClockUpdate+0xfc>)
 8004fa2:	5cd3      	ldrb	r3, [r2, r3]
 8004fa4:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8004fa6:	4b07      	ldr	r3, [pc, #28]	@ (8004fc4 <SystemCoreClockUpdate+0xf0>)
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	fa22 f303 	lsr.w	r3, r2, r3
 8004fb0:	4a04      	ldr	r2, [pc, #16]	@ (8004fc4 <SystemCoreClockUpdate+0xf0>)
 8004fb2:	6013      	str	r3, [r2, #0]
}
 8004fb4:	bf00      	nop
 8004fb6:	371c      	adds	r7, #28
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr
 8004fc0:	40023800 	.word	0x40023800
 8004fc4:	20000000 	.word	0x20000000
 8004fc8:	00f42400 	.word	0x00f42400
 8004fcc:	017d7840 	.word	0x017d7840
 8004fd0:	0800626c 	.word	0x0800626c

08004fd4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004fd4:	480d      	ldr	r0, [pc, #52]	@ (800500c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004fd6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004fd8:	f7ff ff6a 	bl	8004eb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004fdc:	480c      	ldr	r0, [pc, #48]	@ (8005010 <LoopForever+0x6>)
  ldr r1, =_edata
 8004fde:	490d      	ldr	r1, [pc, #52]	@ (8005014 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004fe0:	4a0d      	ldr	r2, [pc, #52]	@ (8005018 <LoopForever+0xe>)
  movs r3, #0
 8004fe2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004fe4:	e002      	b.n	8004fec <LoopCopyDataInit>

08004fe6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004fe6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004fe8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004fea:	3304      	adds	r3, #4

08004fec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004fec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004fee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004ff0:	d3f9      	bcc.n	8004fe6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004ff2:	4a0a      	ldr	r2, [pc, #40]	@ (800501c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004ff4:	4c0a      	ldr	r4, [pc, #40]	@ (8005020 <LoopForever+0x16>)
  movs r3, #0
 8004ff6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004ff8:	e001      	b.n	8004ffe <LoopFillZerobss>

08004ffa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004ffa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004ffc:	3204      	adds	r2, #4

08004ffe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004ffe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005000:	d3fb      	bcc.n	8004ffa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8005002:	f000 f817 	bl	8005034 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005006:	f7ff febb 	bl	8004d80 <main>

0800500a <LoopForever>:

LoopForever:
  b LoopForever
 800500a:	e7fe      	b.n	800500a <LoopForever>
  ldr   r0, =_estack
 800500c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005010:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005014:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8005018:	080062e0 	.word	0x080062e0
  ldr r2, =_sbss
 800501c:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8005020:	200004d0 	.word	0x200004d0

08005024 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005024:	e7fe      	b.n	8005024 <ADC_IRQHandler>
	...

08005028 <__errno>:
 8005028:	4b01      	ldr	r3, [pc, #4]	@ (8005030 <__errno+0x8>)
 800502a:	6818      	ldr	r0, [r3, #0]
 800502c:	4770      	bx	lr
 800502e:	bf00      	nop
 8005030:	20000004 	.word	0x20000004

08005034 <__libc_init_array>:
 8005034:	b570      	push	{r4, r5, r6, lr}
 8005036:	4d0d      	ldr	r5, [pc, #52]	@ (800506c <__libc_init_array+0x38>)
 8005038:	4c0d      	ldr	r4, [pc, #52]	@ (8005070 <__libc_init_array+0x3c>)
 800503a:	1b64      	subs	r4, r4, r5
 800503c:	10a4      	asrs	r4, r4, #2
 800503e:	2600      	movs	r6, #0
 8005040:	42a6      	cmp	r6, r4
 8005042:	d109      	bne.n	8005058 <__libc_init_array+0x24>
 8005044:	4d0b      	ldr	r5, [pc, #44]	@ (8005074 <__libc_init_array+0x40>)
 8005046:	4c0c      	ldr	r4, [pc, #48]	@ (8005078 <__libc_init_array+0x44>)
 8005048:	f000 fefe 	bl	8005e48 <_init>
 800504c:	1b64      	subs	r4, r4, r5
 800504e:	10a4      	asrs	r4, r4, #2
 8005050:	2600      	movs	r6, #0
 8005052:	42a6      	cmp	r6, r4
 8005054:	d105      	bne.n	8005062 <__libc_init_array+0x2e>
 8005056:	bd70      	pop	{r4, r5, r6, pc}
 8005058:	f855 3b04 	ldr.w	r3, [r5], #4
 800505c:	4798      	blx	r3
 800505e:	3601      	adds	r6, #1
 8005060:	e7ee      	b.n	8005040 <__libc_init_array+0xc>
 8005062:	f855 3b04 	ldr.w	r3, [r5], #4
 8005066:	4798      	blx	r3
 8005068:	3601      	adds	r6, #1
 800506a:	e7f2      	b.n	8005052 <__libc_init_array+0x1e>
 800506c:	080062d8 	.word	0x080062d8
 8005070:	080062d8 	.word	0x080062d8
 8005074:	080062d8 	.word	0x080062d8
 8005078:	080062dc 	.word	0x080062dc

0800507c <expf>:
 800507c:	b508      	push	{r3, lr}
 800507e:	ed2d 8b02 	vpush	{d8}
 8005082:	eef0 8a40 	vmov.f32	s17, s0
 8005086:	f000 f9c3 	bl	8005410 <__ieee754_expf>
 800508a:	eeb0 8a40 	vmov.f32	s16, s0
 800508e:	eeb0 0a68 	vmov.f32	s0, s17
 8005092:	f000 f9a8 	bl	80053e6 <finitef>
 8005096:	b160      	cbz	r0, 80050b2 <expf+0x36>
 8005098:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 80050d8 <expf+0x5c>
 800509c:	eef4 8ae7 	vcmpe.f32	s17, s15
 80050a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050a4:	dd0a      	ble.n	80050bc <expf+0x40>
 80050a6:	f7ff ffbf 	bl	8005028 <__errno>
 80050aa:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 80050dc <expf+0x60>
 80050ae:	2322      	movs	r3, #34	@ 0x22
 80050b0:	6003      	str	r3, [r0, #0]
 80050b2:	eeb0 0a48 	vmov.f32	s0, s16
 80050b6:	ecbd 8b02 	vpop	{d8}
 80050ba:	bd08      	pop	{r3, pc}
 80050bc:	eddf 7a08 	vldr	s15, [pc, #32]	@ 80050e0 <expf+0x64>
 80050c0:	eef4 8ae7 	vcmpe.f32	s17, s15
 80050c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050c8:	d5f3      	bpl.n	80050b2 <expf+0x36>
 80050ca:	f7ff ffad 	bl	8005028 <__errno>
 80050ce:	2322      	movs	r3, #34	@ 0x22
 80050d0:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 80050e4 <expf+0x68>
 80050d4:	6003      	str	r3, [r0, #0]
 80050d6:	e7ec      	b.n	80050b2 <expf+0x36>
 80050d8:	42b17217 	.word	0x42b17217
 80050dc:	7f800000 	.word	0x7f800000
 80050e0:	c2cff1b5 	.word	0xc2cff1b5
 80050e4:	00000000 	.word	0x00000000

080050e8 <logf>:
 80050e8:	b508      	push	{r3, lr}
 80050ea:	ed2d 8b02 	vpush	{d8}
 80050ee:	eeb0 8a40 	vmov.f32	s16, s0
 80050f2:	f000 fa5b 	bl	80055ac <__ieee754_logf>
 80050f6:	eeb4 8a48 	vcmp.f32	s16, s16
 80050fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050fe:	d60f      	bvs.n	8005120 <logf+0x38>
 8005100:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8005104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005108:	dc0a      	bgt.n	8005120 <logf+0x38>
 800510a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800510e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005112:	d108      	bne.n	8005126 <logf+0x3e>
 8005114:	f7ff ff88 	bl	8005028 <__errno>
 8005118:	2322      	movs	r3, #34	@ 0x22
 800511a:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800513c <logf+0x54>
 800511e:	6003      	str	r3, [r0, #0]
 8005120:	ecbd 8b02 	vpop	{d8}
 8005124:	bd08      	pop	{r3, pc}
 8005126:	f7ff ff7f 	bl	8005028 <__errno>
 800512a:	ecbd 8b02 	vpop	{d8}
 800512e:	2321      	movs	r3, #33	@ 0x21
 8005130:	6003      	str	r3, [r0, #0]
 8005132:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005136:	4802      	ldr	r0, [pc, #8]	@ (8005140 <logf+0x58>)
 8005138:	f000 b960 	b.w	80053fc <nanf>
 800513c:	ff800000 	.word	0xff800000
 8005140:	0800627c 	.word	0x0800627c

08005144 <powf>:
 8005144:	b508      	push	{r3, lr}
 8005146:	ed2d 8b04 	vpush	{d8-d9}
 800514a:	eeb0 8a60 	vmov.f32	s16, s1
 800514e:	eeb0 9a40 	vmov.f32	s18, s0
 8005152:	f000 fb1d 	bl	8005790 <__ieee754_powf>
 8005156:	eeb4 8a48 	vcmp.f32	s16, s16
 800515a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800515e:	eef0 8a40 	vmov.f32	s17, s0
 8005162:	d63e      	bvs.n	80051e2 <powf+0x9e>
 8005164:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8005168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800516c:	d112      	bne.n	8005194 <powf+0x50>
 800516e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8005172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005176:	d039      	beq.n	80051ec <powf+0xa8>
 8005178:	eeb0 0a48 	vmov.f32	s0, s16
 800517c:	f000 f933 	bl	80053e6 <finitef>
 8005180:	b378      	cbz	r0, 80051e2 <powf+0x9e>
 8005182:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8005186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800518a:	d52a      	bpl.n	80051e2 <powf+0x9e>
 800518c:	f7ff ff4c 	bl	8005028 <__errno>
 8005190:	2322      	movs	r3, #34	@ 0x22
 8005192:	e014      	b.n	80051be <powf+0x7a>
 8005194:	f000 f927 	bl	80053e6 <finitef>
 8005198:	b998      	cbnz	r0, 80051c2 <powf+0x7e>
 800519a:	eeb0 0a49 	vmov.f32	s0, s18
 800519e:	f000 f922 	bl	80053e6 <finitef>
 80051a2:	b170      	cbz	r0, 80051c2 <powf+0x7e>
 80051a4:	eeb0 0a48 	vmov.f32	s0, s16
 80051a8:	f000 f91d 	bl	80053e6 <finitef>
 80051ac:	b148      	cbz	r0, 80051c2 <powf+0x7e>
 80051ae:	eef4 8a68 	vcmp.f32	s17, s17
 80051b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051b6:	d7e9      	bvc.n	800518c <powf+0x48>
 80051b8:	f7ff ff36 	bl	8005028 <__errno>
 80051bc:	2321      	movs	r3, #33	@ 0x21
 80051be:	6003      	str	r3, [r0, #0]
 80051c0:	e00f      	b.n	80051e2 <powf+0x9e>
 80051c2:	eef5 8a40 	vcmp.f32	s17, #0.0
 80051c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051ca:	d10a      	bne.n	80051e2 <powf+0x9e>
 80051cc:	eeb0 0a49 	vmov.f32	s0, s18
 80051d0:	f000 f909 	bl	80053e6 <finitef>
 80051d4:	b128      	cbz	r0, 80051e2 <powf+0x9e>
 80051d6:	eeb0 0a48 	vmov.f32	s0, s16
 80051da:	f000 f904 	bl	80053e6 <finitef>
 80051de:	2800      	cmp	r0, #0
 80051e0:	d1d4      	bne.n	800518c <powf+0x48>
 80051e2:	eeb0 0a68 	vmov.f32	s0, s17
 80051e6:	ecbd 8b04 	vpop	{d8-d9}
 80051ea:	bd08      	pop	{r3, pc}
 80051ec:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 80051f0:	e7f7      	b.n	80051e2 <powf+0x9e>
	...

080051f4 <sqrtf>:
 80051f4:	b508      	push	{r3, lr}
 80051f6:	ed2d 8b02 	vpush	{d8}
 80051fa:	eeb0 8a40 	vmov.f32	s16, s0
 80051fe:	f000 f903 	bl	8005408 <__ieee754_sqrtf>
 8005202:	eeb4 8a48 	vcmp.f32	s16, s16
 8005206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800520a:	d60c      	bvs.n	8005226 <sqrtf+0x32>
 800520c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800522c <sqrtf+0x38>
 8005210:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8005214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005218:	d505      	bpl.n	8005226 <sqrtf+0x32>
 800521a:	f7ff ff05 	bl	8005028 <__errno>
 800521e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8005222:	2321      	movs	r3, #33	@ 0x21
 8005224:	6003      	str	r3, [r0, #0]
 8005226:	ecbd 8b02 	vpop	{d8}
 800522a:	bd08      	pop	{r3, pc}
 800522c:	00000000 	.word	0x00000000

08005230 <atanf>:
 8005230:	b538      	push	{r3, r4, r5, lr}
 8005232:	ee10 5a10 	vmov	r5, s0
 8005236:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800523a:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800523e:	eef0 7a40 	vmov.f32	s15, s0
 8005242:	d310      	bcc.n	8005266 <atanf+0x36>
 8005244:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8005248:	d904      	bls.n	8005254 <atanf+0x24>
 800524a:	ee70 7a00 	vadd.f32	s15, s0, s0
 800524e:	eeb0 0a67 	vmov.f32	s0, s15
 8005252:	bd38      	pop	{r3, r4, r5, pc}
 8005254:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800538c <atanf+0x15c>
 8005258:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8005390 <atanf+0x160>
 800525c:	2d00      	cmp	r5, #0
 800525e:	bfc8      	it	gt
 8005260:	eef0 7a47 	vmovgt.f32	s15, s14
 8005264:	e7f3      	b.n	800524e <atanf+0x1e>
 8005266:	4b4b      	ldr	r3, [pc, #300]	@ (8005394 <atanf+0x164>)
 8005268:	429c      	cmp	r4, r3
 800526a:	d810      	bhi.n	800528e <atanf+0x5e>
 800526c:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8005270:	d20a      	bcs.n	8005288 <atanf+0x58>
 8005272:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8005398 <atanf+0x168>
 8005276:	ee30 7a07 	vadd.f32	s14, s0, s14
 800527a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800527e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8005282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005286:	dce2      	bgt.n	800524e <atanf+0x1e>
 8005288:	f04f 33ff 	mov.w	r3, #4294967295
 800528c:	e013      	b.n	80052b6 <atanf+0x86>
 800528e:	f000 f8a3 	bl	80053d8 <fabsf>
 8005292:	4b42      	ldr	r3, [pc, #264]	@ (800539c <atanf+0x16c>)
 8005294:	429c      	cmp	r4, r3
 8005296:	d84f      	bhi.n	8005338 <atanf+0x108>
 8005298:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800529c:	429c      	cmp	r4, r3
 800529e:	d841      	bhi.n	8005324 <atanf+0xf4>
 80052a0:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 80052a4:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80052a8:	eea0 7a27 	vfma.f32	s14, s0, s15
 80052ac:	2300      	movs	r3, #0
 80052ae:	ee30 0a27 	vadd.f32	s0, s0, s15
 80052b2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80052b6:	1c5a      	adds	r2, r3, #1
 80052b8:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80052bc:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80053a0 <atanf+0x170>
 80052c0:	eddf 5a38 	vldr	s11, [pc, #224]	@ 80053a4 <atanf+0x174>
 80052c4:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 80053a8 <atanf+0x178>
 80052c8:	ee66 6a06 	vmul.f32	s13, s12, s12
 80052cc:	eee6 5a87 	vfma.f32	s11, s13, s14
 80052d0:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 80053ac <atanf+0x17c>
 80052d4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80052d8:	eddf 5a35 	vldr	s11, [pc, #212]	@ 80053b0 <atanf+0x180>
 80052dc:	eee7 5a26 	vfma.f32	s11, s14, s13
 80052e0:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80053b4 <atanf+0x184>
 80052e4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80052e8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80053b8 <atanf+0x188>
 80052ec:	eee7 5a26 	vfma.f32	s11, s14, s13
 80052f0:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80053bc <atanf+0x18c>
 80052f4:	eea6 5a87 	vfma.f32	s10, s13, s14
 80052f8:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80053c0 <atanf+0x190>
 80052fc:	eea5 7a26 	vfma.f32	s14, s10, s13
 8005300:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 80053c4 <atanf+0x194>
 8005304:	eea7 5a26 	vfma.f32	s10, s14, s13
 8005308:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80053c8 <atanf+0x198>
 800530c:	eea5 7a26 	vfma.f32	s14, s10, s13
 8005310:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005314:	eea5 7a86 	vfma.f32	s14, s11, s12
 8005318:	ee27 7a87 	vmul.f32	s14, s15, s14
 800531c:	d121      	bne.n	8005362 <atanf+0x132>
 800531e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005322:	e794      	b.n	800524e <atanf+0x1e>
 8005324:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8005328:	ee30 7a67 	vsub.f32	s14, s0, s15
 800532c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005330:	2301      	movs	r3, #1
 8005332:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8005336:	e7be      	b.n	80052b6 <atanf+0x86>
 8005338:	4b24      	ldr	r3, [pc, #144]	@ (80053cc <atanf+0x19c>)
 800533a:	429c      	cmp	r4, r3
 800533c:	d80b      	bhi.n	8005356 <atanf+0x126>
 800533e:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8005342:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005346:	eea0 7a27 	vfma.f32	s14, s0, s15
 800534a:	2302      	movs	r3, #2
 800534c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8005350:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005354:	e7af      	b.n	80052b6 <atanf+0x86>
 8005356:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800535a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800535e:	2303      	movs	r3, #3
 8005360:	e7a9      	b.n	80052b6 <atanf+0x86>
 8005362:	4a1b      	ldr	r2, [pc, #108]	@ (80053d0 <atanf+0x1a0>)
 8005364:	491b      	ldr	r1, [pc, #108]	@ (80053d4 <atanf+0x1a4>)
 8005366:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800536a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800536e:	edd3 6a00 	vldr	s13, [r3]
 8005372:	ee37 7a66 	vsub.f32	s14, s14, s13
 8005376:	2d00      	cmp	r5, #0
 8005378:	ee37 7a67 	vsub.f32	s14, s14, s15
 800537c:	edd2 7a00 	vldr	s15, [r2]
 8005380:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005384:	bfb8      	it	lt
 8005386:	eef1 7a67 	vneglt.f32	s15, s15
 800538a:	e760      	b.n	800524e <atanf+0x1e>
 800538c:	bfc90fdb 	.word	0xbfc90fdb
 8005390:	3fc90fdb 	.word	0x3fc90fdb
 8005394:	3edfffff 	.word	0x3edfffff
 8005398:	7149f2ca 	.word	0x7149f2ca
 800539c:	3f97ffff 	.word	0x3f97ffff
 80053a0:	3c8569d7 	.word	0x3c8569d7
 80053a4:	3d4bda59 	.word	0x3d4bda59
 80053a8:	bd6ef16b 	.word	0xbd6ef16b
 80053ac:	3d886b35 	.word	0x3d886b35
 80053b0:	3dba2e6e 	.word	0x3dba2e6e
 80053b4:	3e124925 	.word	0x3e124925
 80053b8:	3eaaaaab 	.word	0x3eaaaaab
 80053bc:	bd15a221 	.word	0xbd15a221
 80053c0:	bd9d8795 	.word	0xbd9d8795
 80053c4:	bde38e38 	.word	0xbde38e38
 80053c8:	be4ccccd 	.word	0xbe4ccccd
 80053cc:	401bffff 	.word	0x401bffff
 80053d0:	08006290 	.word	0x08006290
 80053d4:	08006280 	.word	0x08006280

080053d8 <fabsf>:
 80053d8:	ee10 3a10 	vmov	r3, s0
 80053dc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80053e0:	ee00 3a10 	vmov	s0, r3
 80053e4:	4770      	bx	lr

080053e6 <finitef>:
 80053e6:	ee10 3a10 	vmov	r3, s0
 80053ea:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 80053ee:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 80053f2:	bfac      	ite	ge
 80053f4:	2000      	movge	r0, #0
 80053f6:	2001      	movlt	r0, #1
 80053f8:	4770      	bx	lr
	...

080053fc <nanf>:
 80053fc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8005404 <nanf+0x8>
 8005400:	4770      	bx	lr
 8005402:	bf00      	nop
 8005404:	7fc00000 	.word	0x7fc00000

08005408 <__ieee754_sqrtf>:
 8005408:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800540c:	4770      	bx	lr
	...

08005410 <__ieee754_expf>:
 8005410:	ee10 2a10 	vmov	r2, s0
 8005414:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 8005418:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800541c:	d902      	bls.n	8005424 <__ieee754_expf+0x14>
 800541e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005422:	4770      	bx	lr
 8005424:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 8005428:	d106      	bne.n	8005438 <__ieee754_expf+0x28>
 800542a:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 8005564 <__ieee754_expf+0x154>
 800542e:	2900      	cmp	r1, #0
 8005430:	bf18      	it	ne
 8005432:	eeb0 0a67 	vmovne.f32	s0, s15
 8005436:	4770      	bx	lr
 8005438:	484b      	ldr	r0, [pc, #300]	@ (8005568 <__ieee754_expf+0x158>)
 800543a:	4282      	cmp	r2, r0
 800543c:	dd02      	ble.n	8005444 <__ieee754_expf+0x34>
 800543e:	2000      	movs	r0, #0
 8005440:	f000 bcfc 	b.w	8005e3c <__math_oflowf>
 8005444:	2a00      	cmp	r2, #0
 8005446:	da05      	bge.n	8005454 <__ieee754_expf+0x44>
 8005448:	4a48      	ldr	r2, [pc, #288]	@ (800556c <__ieee754_expf+0x15c>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d902      	bls.n	8005454 <__ieee754_expf+0x44>
 800544e:	2000      	movs	r0, #0
 8005450:	f000 bcee 	b.w	8005e30 <__math_uflowf>
 8005454:	4a46      	ldr	r2, [pc, #280]	@ (8005570 <__ieee754_expf+0x160>)
 8005456:	4293      	cmp	r3, r2
 8005458:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800545c:	d952      	bls.n	8005504 <__ieee754_expf+0xf4>
 800545e:	4a45      	ldr	r2, [pc, #276]	@ (8005574 <__ieee754_expf+0x164>)
 8005460:	4293      	cmp	r3, r2
 8005462:	ea4f 0281 	mov.w	r2, r1, lsl #2
 8005466:	d834      	bhi.n	80054d2 <__ieee754_expf+0xc2>
 8005468:	4b43      	ldr	r3, [pc, #268]	@ (8005578 <__ieee754_expf+0x168>)
 800546a:	4413      	add	r3, r2
 800546c:	ed93 7a00 	vldr	s14, [r3]
 8005470:	4b42      	ldr	r3, [pc, #264]	@ (800557c <__ieee754_expf+0x16c>)
 8005472:	4413      	add	r3, r2
 8005474:	ee30 7a47 	vsub.f32	s14, s0, s14
 8005478:	f1c1 0201 	rsb	r2, r1, #1
 800547c:	edd3 7a00 	vldr	s15, [r3]
 8005480:	1a52      	subs	r2, r2, r1
 8005482:	ee37 0a67 	vsub.f32	s0, s14, s15
 8005486:	ee20 6a00 	vmul.f32	s12, s0, s0
 800548a:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 8005580 <__ieee754_expf+0x170>
 800548e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005584 <__ieee754_expf+0x174>
 8005492:	eee6 6a05 	vfma.f32	s13, s12, s10
 8005496:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 8005588 <__ieee754_expf+0x178>
 800549a:	eea6 5a86 	vfma.f32	s10, s13, s12
 800549e:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800558c <__ieee754_expf+0x17c>
 80054a2:	eee5 6a06 	vfma.f32	s13, s10, s12
 80054a6:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 8005590 <__ieee754_expf+0x180>
 80054aa:	eea6 5a86 	vfma.f32	s10, s13, s12
 80054ae:	eef0 6a40 	vmov.f32	s13, s0
 80054b2:	eee5 6a46 	vfms.f32	s13, s10, s12
 80054b6:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80054ba:	ee20 5a26 	vmul.f32	s10, s0, s13
 80054be:	bb92      	cbnz	r2, 8005526 <__ieee754_expf+0x116>
 80054c0:	ee76 6ac6 	vsub.f32	s13, s13, s12
 80054c4:	eec5 7a26 	vdiv.f32	s15, s10, s13
 80054c8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80054cc:	ee35 0ac0 	vsub.f32	s0, s11, s0
 80054d0:	4770      	bx	lr
 80054d2:	4b30      	ldr	r3, [pc, #192]	@ (8005594 <__ieee754_expf+0x184>)
 80054d4:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8005598 <__ieee754_expf+0x188>
 80054d8:	eddf 6a30 	vldr	s13, [pc, #192]	@ 800559c <__ieee754_expf+0x18c>
 80054dc:	4413      	add	r3, r2
 80054de:	edd3 7a00 	vldr	s15, [r3]
 80054e2:	eee0 7a07 	vfma.f32	s15, s0, s14
 80054e6:	eeb0 7a40 	vmov.f32	s14, s0
 80054ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80054ee:	ee17 2a90 	vmov	r2, s15
 80054f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054f6:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80054fa:	eddf 6a29 	vldr	s13, [pc, #164]	@ 80055a0 <__ieee754_expf+0x190>
 80054fe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005502:	e7be      	b.n	8005482 <__ieee754_expf+0x72>
 8005504:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 8005508:	d20b      	bcs.n	8005522 <__ieee754_expf+0x112>
 800550a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80055a4 <__ieee754_expf+0x194>
 800550e:	ee70 6a26 	vadd.f32	s13, s0, s13
 8005512:	eef4 6ae5 	vcmpe.f32	s13, s11
 8005516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800551a:	dd02      	ble.n	8005522 <__ieee754_expf+0x112>
 800551c:	ee30 0a25 	vadd.f32	s0, s0, s11
 8005520:	4770      	bx	lr
 8005522:	2200      	movs	r2, #0
 8005524:	e7af      	b.n	8005486 <__ieee754_expf+0x76>
 8005526:	ee36 6a66 	vsub.f32	s12, s12, s13
 800552a:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 800552e:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8005532:	bfb8      	it	lt
 8005534:	3264      	addlt	r2, #100	@ 0x64
 8005536:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800553a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800553e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8005542:	ee17 3a90 	vmov	r3, s15
 8005546:	bfab      	itete	ge
 8005548:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800554c:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8005550:	ee00 3a10 	vmovge	s0, r3
 8005554:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 80055a8 <__ieee754_expf+0x198>
 8005558:	bfbc      	itt	lt
 800555a:	ee00 3a10 	vmovlt	s0, r3
 800555e:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8005562:	4770      	bx	lr
 8005564:	00000000 	.word	0x00000000
 8005568:	42b17217 	.word	0x42b17217
 800556c:	42cff1b5 	.word	0x42cff1b5
 8005570:	3eb17218 	.word	0x3eb17218
 8005574:	3f851591 	.word	0x3f851591
 8005578:	080062a8 	.word	0x080062a8
 800557c:	080062a0 	.word	0x080062a0
 8005580:	3331bb4c 	.word	0x3331bb4c
 8005584:	b5ddea0e 	.word	0xb5ddea0e
 8005588:	388ab355 	.word	0x388ab355
 800558c:	bb360b61 	.word	0xbb360b61
 8005590:	3e2aaaab 	.word	0x3e2aaaab
 8005594:	080062b0 	.word	0x080062b0
 8005598:	3fb8aa3b 	.word	0x3fb8aa3b
 800559c:	3f317180 	.word	0x3f317180
 80055a0:	3717f7d1 	.word	0x3717f7d1
 80055a4:	7149f2ca 	.word	0x7149f2ca
 80055a8:	0d800000 	.word	0x0d800000

080055ac <__ieee754_logf>:
 80055ac:	ee10 3a10 	vmov	r3, s0
 80055b0:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80055b4:	d106      	bne.n	80055c4 <__ieee754_logf+0x18>
 80055b6:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 8005750 <__ieee754_logf+0x1a4>
 80055ba:	eddf 7a66 	vldr	s15, [pc, #408]	@ 8005754 <__ieee754_logf+0x1a8>
 80055be:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80055c2:	4770      	bx	lr
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	461a      	mov	r2, r3
 80055c8:	da02      	bge.n	80055d0 <__ieee754_logf+0x24>
 80055ca:	ee30 7a40 	vsub.f32	s14, s0, s0
 80055ce:	e7f4      	b.n	80055ba <__ieee754_logf+0xe>
 80055d0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80055d4:	db02      	blt.n	80055dc <__ieee754_logf+0x30>
 80055d6:	ee30 0a00 	vadd.f32	s0, s0, s0
 80055da:	4770      	bx	lr
 80055dc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80055e0:	bfb8      	it	lt
 80055e2:	eddf 7a5d 	vldrlt	s15, [pc, #372]	@ 8005758 <__ieee754_logf+0x1ac>
 80055e6:	485d      	ldr	r0, [pc, #372]	@ (800575c <__ieee754_logf+0x1b0>)
 80055e8:	bfbe      	ittt	lt
 80055ea:	ee60 7a27 	vmullt.f32	s15, s0, s15
 80055ee:	f06f 0118 	mvnlt.w	r1, #24
 80055f2:	ee17 2a90 	vmovlt	r2, s15
 80055f6:	ea4f 53e2 	mov.w	r3, r2, asr #23
 80055fa:	f3c2 0216 	ubfx	r2, r2, #0, #23
 80055fe:	4410      	add	r0, r2
 8005600:	bfa8      	it	ge
 8005602:	2100      	movge	r1, #0
 8005604:	3b7f      	subs	r3, #127	@ 0x7f
 8005606:	440b      	add	r3, r1
 8005608:	f400 0100 	and.w	r1, r0, #8388608	@ 0x800000
 800560c:	f081 517e 	eor.w	r1, r1, #1065353216	@ 0x3f800000
 8005610:	4311      	orrs	r1, r2
 8005612:	ee00 1a10 	vmov	s0, r1
 8005616:	4952      	ldr	r1, [pc, #328]	@ (8005760 <__ieee754_logf+0x1b4>)
 8005618:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 800561c:	f102 000f 	add.w	r0, r2, #15
 8005620:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8005624:	4001      	ands	r1, r0
 8005626:	ee30 0a67 	vsub.f32	s0, s0, s15
 800562a:	bb89      	cbnz	r1, 8005690 <__ieee754_logf+0xe4>
 800562c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8005630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005634:	d10f      	bne.n	8005656 <__ieee754_logf+0xaa>
 8005636:	2b00      	cmp	r3, #0
 8005638:	f000 8087 	beq.w	800574a <__ieee754_logf+0x19e>
 800563c:	ee07 3a90 	vmov	s15, r3
 8005640:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 8005764 <__ieee754_logf+0x1b8>
 8005644:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8005768 <__ieee754_logf+0x1bc>
 8005648:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800564c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8005650:	eea7 0a87 	vfma.f32	s0, s15, s14
 8005654:	4770      	bx	lr
 8005656:	eddf 6a45 	vldr	s13, [pc, #276]	@ 800576c <__ieee754_logf+0x1c0>
 800565a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800565e:	eee0 7a66 	vfms.f32	s15, s0, s13
 8005662:	ee20 7a00 	vmul.f32	s14, s0, s0
 8005666:	ee27 7a27 	vmul.f32	s14, s14, s15
 800566a:	b913      	cbnz	r3, 8005672 <__ieee754_logf+0xc6>
 800566c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8005670:	4770      	bx	lr
 8005672:	ee07 3a90 	vmov	s15, r3
 8005676:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8005764 <__ieee754_logf+0x1b8>
 800567a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800567e:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8005682:	ee37 0a40 	vsub.f32	s0, s14, s0
 8005686:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8005768 <__ieee754_logf+0x1bc>
 800568a:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800568e:	4770      	bx	lr
 8005690:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8005694:	ee70 7a27 	vadd.f32	s15, s0, s15
 8005698:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8005770 <__ieee754_logf+0x1c4>
 800569c:	eddf 4a35 	vldr	s9, [pc, #212]	@ 8005774 <__ieee754_logf+0x1c8>
 80056a0:	4935      	ldr	r1, [pc, #212]	@ (8005778 <__ieee754_logf+0x1cc>)
 80056a2:	ee80 6a27 	vdiv.f32	s12, s0, s15
 80056a6:	4411      	add	r1, r2
 80056a8:	f5c2 1257 	rsb	r2, r2, #3522560	@ 0x35c000
 80056ac:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 80056b0:	430a      	orrs	r2, r1
 80056b2:	2a00      	cmp	r2, #0
 80056b4:	ee07 3a90 	vmov	s15, r3
 80056b8:	ee26 5a06 	vmul.f32	s10, s12, s12
 80056bc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80056c0:	ee25 7a05 	vmul.f32	s14, s10, s10
 80056c4:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 800577c <__ieee754_logf+0x1d0>
 80056c8:	eee7 7a25 	vfma.f32	s15, s14, s11
 80056cc:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8005780 <__ieee754_logf+0x1d4>
 80056d0:	eee7 5a87 	vfma.f32	s11, s15, s14
 80056d4:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 8005784 <__ieee754_logf+0x1d8>
 80056d8:	eee7 7a24 	vfma.f32	s15, s14, s9
 80056dc:	eddf 4a2a 	vldr	s9, [pc, #168]	@ 8005788 <__ieee754_logf+0x1dc>
 80056e0:	eee7 4a87 	vfma.f32	s9, s15, s14
 80056e4:	eddf 7a29 	vldr	s15, [pc, #164]	@ 800578c <__ieee754_logf+0x1e0>
 80056e8:	eee4 7a87 	vfma.f32	s15, s9, s14
 80056ec:	ee67 7a85 	vmul.f32	s15, s15, s10
 80056f0:	eee5 7a87 	vfma.f32	s15, s11, s14
 80056f4:	dd1a      	ble.n	800572c <__ieee754_logf+0x180>
 80056f6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80056fa:	ee20 7a07 	vmul.f32	s14, s0, s14
 80056fe:	ee27 7a00 	vmul.f32	s14, s14, s0
 8005702:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005706:	ee67 7a86 	vmul.f32	s15, s15, s12
 800570a:	b913      	cbnz	r3, 8005712 <__ieee754_logf+0x166>
 800570c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005710:	e7ac      	b.n	800566c <__ieee754_logf+0xc0>
 8005712:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 8005764 <__ieee754_logf+0x1b8>
 8005716:	eee6 7a86 	vfma.f32	s15, s13, s12
 800571a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800571e:	ee37 0a40 	vsub.f32	s0, s14, s0
 8005722:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8005768 <__ieee754_logf+0x1bc>
 8005726:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800572a:	4770      	bx	lr
 800572c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8005730:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005734:	b913      	cbnz	r3, 800573c <__ieee754_logf+0x190>
 8005736:	ee30 0a67 	vsub.f32	s0, s0, s15
 800573a:	4770      	bx	lr
 800573c:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8005764 <__ieee754_logf+0x1b8>
 8005740:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8005744:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8005748:	e7eb      	b.n	8005722 <__ieee754_logf+0x176>
 800574a:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 8005754 <__ieee754_logf+0x1a8>
 800574e:	4770      	bx	lr
 8005750:	cc000000 	.word	0xcc000000
 8005754:	00000000 	.word	0x00000000
 8005758:	4c000000 	.word	0x4c000000
 800575c:	004afb20 	.word	0x004afb20
 8005760:	007ffff0 	.word	0x007ffff0
 8005764:	3717f7d1 	.word	0x3717f7d1
 8005768:	3f317180 	.word	0x3f317180
 800576c:	3eaaaaab 	.word	0x3eaaaaab
 8005770:	3e1cd04f 	.word	0x3e1cd04f
 8005774:	3e178897 	.word	0x3e178897
 8005778:	ffcf5c30 	.word	0xffcf5c30
 800577c:	3e638e29 	.word	0x3e638e29
 8005780:	3ecccccd 	.word	0x3ecccccd
 8005784:	3e3a3325 	.word	0x3e3a3325
 8005788:	3e924925 	.word	0x3e924925
 800578c:	3f2aaaab 	.word	0x3f2aaaab

08005790 <__ieee754_powf>:
 8005790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005794:	ee10 4a90 	vmov	r4, s1
 8005798:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 800579c:	ed2d 8b02 	vpush	{d8}
 80057a0:	ee10 6a10 	vmov	r6, s0
 80057a4:	eeb0 8a40 	vmov.f32	s16, s0
 80057a8:	eef0 8a60 	vmov.f32	s17, s1
 80057ac:	d10c      	bne.n	80057c8 <__ieee754_powf+0x38>
 80057ae:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 80057b2:	0076      	lsls	r6, r6, #1
 80057b4:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 80057b8:	f240 829c 	bls.w	8005cf4 <__ieee754_powf+0x564>
 80057bc:	ee38 0a28 	vadd.f32	s0, s16, s17
 80057c0:	ecbd 8b02 	vpop	{d8}
 80057c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057c8:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 80057cc:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 80057d0:	d802      	bhi.n	80057d8 <__ieee754_powf+0x48>
 80057d2:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 80057d6:	d908      	bls.n	80057ea <__ieee754_powf+0x5a>
 80057d8:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 80057dc:	d1ee      	bne.n	80057bc <__ieee754_powf+0x2c>
 80057de:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 80057e2:	0064      	lsls	r4, r4, #1
 80057e4:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 80057e8:	e7e6      	b.n	80057b8 <__ieee754_powf+0x28>
 80057ea:	2e00      	cmp	r6, #0
 80057ec:	da1e      	bge.n	800582c <__ieee754_powf+0x9c>
 80057ee:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 80057f2:	d22b      	bcs.n	800584c <__ieee754_powf+0xbc>
 80057f4:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 80057f8:	d332      	bcc.n	8005860 <__ieee754_powf+0xd0>
 80057fa:	ea4f 53e9 	mov.w	r3, r9, asr #23
 80057fe:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8005802:	fa49 f503 	asr.w	r5, r9, r3
 8005806:	fa05 f303 	lsl.w	r3, r5, r3
 800580a:	454b      	cmp	r3, r9
 800580c:	d126      	bne.n	800585c <__ieee754_powf+0xcc>
 800580e:	f005 0501 	and.w	r5, r5, #1
 8005812:	f1c5 0502 	rsb	r5, r5, #2
 8005816:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800581a:	d122      	bne.n	8005862 <__ieee754_powf+0xd2>
 800581c:	2c00      	cmp	r4, #0
 800581e:	f280 826f 	bge.w	8005d00 <__ieee754_powf+0x570>
 8005822:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8005826:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800582a:	e7c9      	b.n	80057c0 <__ieee754_powf+0x30>
 800582c:	2500      	movs	r5, #0
 800582e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8005832:	d1f0      	bne.n	8005816 <__ieee754_powf+0x86>
 8005834:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8005838:	f000 825c 	beq.w	8005cf4 <__ieee754_powf+0x564>
 800583c:	d908      	bls.n	8005850 <__ieee754_powf+0xc0>
 800583e:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 8005ba0 <__ieee754_powf+0x410>
 8005842:	2c00      	cmp	r4, #0
 8005844:	bfa8      	it	ge
 8005846:	eeb0 0a68 	vmovge.f32	s0, s17
 800584a:	e7b9      	b.n	80057c0 <__ieee754_powf+0x30>
 800584c:	2502      	movs	r5, #2
 800584e:	e7ee      	b.n	800582e <__ieee754_powf+0x9e>
 8005850:	2c00      	cmp	r4, #0
 8005852:	f280 8252 	bge.w	8005cfa <__ieee754_powf+0x56a>
 8005856:	eeb1 0a68 	vneg.f32	s0, s17
 800585a:	e7b1      	b.n	80057c0 <__ieee754_powf+0x30>
 800585c:	2500      	movs	r5, #0
 800585e:	e7da      	b.n	8005816 <__ieee754_powf+0x86>
 8005860:	2500      	movs	r5, #0
 8005862:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8005866:	d102      	bne.n	800586e <__ieee754_powf+0xde>
 8005868:	ee28 0a08 	vmul.f32	s0, s16, s16
 800586c:	e7a8      	b.n	80057c0 <__ieee754_powf+0x30>
 800586e:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8005872:	d109      	bne.n	8005888 <__ieee754_powf+0xf8>
 8005874:	2e00      	cmp	r6, #0
 8005876:	db07      	blt.n	8005888 <__ieee754_powf+0xf8>
 8005878:	eeb0 0a48 	vmov.f32	s0, s16
 800587c:	ecbd 8b02 	vpop	{d8}
 8005880:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005884:	f7ff bdc0 	b.w	8005408 <__ieee754_sqrtf>
 8005888:	eeb0 0a48 	vmov.f32	s0, s16
 800588c:	f7ff fda4 	bl	80053d8 <fabsf>
 8005890:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8005894:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8005898:	4647      	mov	r7, r8
 800589a:	d002      	beq.n	80058a2 <__ieee754_powf+0x112>
 800589c:	f1b8 0f00 	cmp.w	r8, #0
 80058a0:	d117      	bne.n	80058d2 <__ieee754_powf+0x142>
 80058a2:	2c00      	cmp	r4, #0
 80058a4:	bfbc      	itt	lt
 80058a6:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 80058aa:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 80058ae:	2e00      	cmp	r6, #0
 80058b0:	da86      	bge.n	80057c0 <__ieee754_powf+0x30>
 80058b2:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 80058b6:	ea58 0805 	orrs.w	r8, r8, r5
 80058ba:	d104      	bne.n	80058c6 <__ieee754_powf+0x136>
 80058bc:	ee70 7a40 	vsub.f32	s15, s0, s0
 80058c0:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80058c4:	e77c      	b.n	80057c0 <__ieee754_powf+0x30>
 80058c6:	2d01      	cmp	r5, #1
 80058c8:	f47f af7a 	bne.w	80057c0 <__ieee754_powf+0x30>
 80058cc:	eeb1 0a40 	vneg.f32	s0, s0
 80058d0:	e776      	b.n	80057c0 <__ieee754_powf+0x30>
 80058d2:	0ff0      	lsrs	r0, r6, #31
 80058d4:	3801      	subs	r0, #1
 80058d6:	ea55 0300 	orrs.w	r3, r5, r0
 80058da:	d104      	bne.n	80058e6 <__ieee754_powf+0x156>
 80058dc:	ee38 8a48 	vsub.f32	s16, s16, s16
 80058e0:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80058e4:	e76c      	b.n	80057c0 <__ieee754_powf+0x30>
 80058e6:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 80058ea:	d973      	bls.n	80059d4 <__ieee754_powf+0x244>
 80058ec:	4bad      	ldr	r3, [pc, #692]	@ (8005ba4 <__ieee754_powf+0x414>)
 80058ee:	4598      	cmp	r8, r3
 80058f0:	d808      	bhi.n	8005904 <__ieee754_powf+0x174>
 80058f2:	2c00      	cmp	r4, #0
 80058f4:	da0b      	bge.n	800590e <__ieee754_powf+0x17e>
 80058f6:	2000      	movs	r0, #0
 80058f8:	ecbd 8b02 	vpop	{d8}
 80058fc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005900:	f000 ba9c 	b.w	8005e3c <__math_oflowf>
 8005904:	4ba8      	ldr	r3, [pc, #672]	@ (8005ba8 <__ieee754_powf+0x418>)
 8005906:	4598      	cmp	r8, r3
 8005908:	d908      	bls.n	800591c <__ieee754_powf+0x18c>
 800590a:	2c00      	cmp	r4, #0
 800590c:	dcf3      	bgt.n	80058f6 <__ieee754_powf+0x166>
 800590e:	2000      	movs	r0, #0
 8005910:	ecbd 8b02 	vpop	{d8}
 8005914:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005918:	f000 ba8a 	b.w	8005e30 <__math_uflowf>
 800591c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8005920:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005924:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 8005bac <__ieee754_powf+0x41c>
 8005928:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800592c:	eee0 6a67 	vfms.f32	s13, s0, s15
 8005930:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8005934:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8005938:	ee20 7a00 	vmul.f32	s14, s0, s0
 800593c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005940:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 8005bb0 <__ieee754_powf+0x420>
 8005944:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8005948:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 8005bb4 <__ieee754_powf+0x424>
 800594c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8005950:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 8005bb8 <__ieee754_powf+0x428>
 8005954:	eef0 6a67 	vmov.f32	s13, s15
 8005958:	eee0 6a07 	vfma.f32	s13, s0, s14
 800595c:	ee16 3a90 	vmov	r3, s13
 8005960:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8005964:	f023 030f 	bic.w	r3, r3, #15
 8005968:	ee06 3a90 	vmov	s13, r3
 800596c:	eee0 6a47 	vfms.f32	s13, s0, s14
 8005970:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005974:	3d01      	subs	r5, #1
 8005976:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 800597a:	4305      	orrs	r5, r0
 800597c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005980:	f024 040f 	bic.w	r4, r4, #15
 8005984:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8005988:	bf18      	it	ne
 800598a:	eeb0 8a47 	vmovne.f32	s16, s14
 800598e:	ee07 4a10 	vmov	s14, r4
 8005992:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8005996:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800599a:	ee07 3a90 	vmov	s15, r3
 800599e:	eee7 0a27 	vfma.f32	s1, s14, s15
 80059a2:	ee07 4a10 	vmov	s14, r4
 80059a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80059aa:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80059ae:	ee17 1a10 	vmov	r1, s14
 80059b2:	2900      	cmp	r1, #0
 80059b4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80059b8:	f340 80dd 	ble.w	8005b76 <__ieee754_powf+0x3e6>
 80059bc:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 80059c0:	f240 80ca 	bls.w	8005b58 <__ieee754_powf+0x3c8>
 80059c4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80059c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059cc:	bf4c      	ite	mi
 80059ce:	2001      	movmi	r0, #1
 80059d0:	2000      	movpl	r0, #0
 80059d2:	e791      	b.n	80058f8 <__ieee754_powf+0x168>
 80059d4:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 80059d8:	bf01      	itttt	eq
 80059da:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 8005bbc <__ieee754_powf+0x42c>
 80059de:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 80059e2:	f06f 0317 	mvneq.w	r3, #23
 80059e6:	ee17 7a90 	vmoveq	r7, s15
 80059ea:	ea4f 52e7 	mov.w	r2, r7, asr #23
 80059ee:	bf18      	it	ne
 80059f0:	2300      	movne	r3, #0
 80059f2:	3a7f      	subs	r2, #127	@ 0x7f
 80059f4:	441a      	add	r2, r3
 80059f6:	4b72      	ldr	r3, [pc, #456]	@ (8005bc0 <__ieee754_powf+0x430>)
 80059f8:	f3c7 0716 	ubfx	r7, r7, #0, #23
 80059fc:	429f      	cmp	r7, r3
 80059fe:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8005a02:	dd06      	ble.n	8005a12 <__ieee754_powf+0x282>
 8005a04:	4b6f      	ldr	r3, [pc, #444]	@ (8005bc4 <__ieee754_powf+0x434>)
 8005a06:	429f      	cmp	r7, r3
 8005a08:	f340 80a4 	ble.w	8005b54 <__ieee754_powf+0x3c4>
 8005a0c:	3201      	adds	r2, #1
 8005a0e:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8005a12:	2600      	movs	r6, #0
 8005a14:	4b6c      	ldr	r3, [pc, #432]	@ (8005bc8 <__ieee754_powf+0x438>)
 8005a16:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8005a1a:	ee07 1a10 	vmov	s14, r1
 8005a1e:	edd3 5a00 	vldr	s11, [r3]
 8005a22:	4b6a      	ldr	r3, [pc, #424]	@ (8005bcc <__ieee754_powf+0x43c>)
 8005a24:	ee75 7a87 	vadd.f32	s15, s11, s14
 8005a28:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a2c:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8005a30:	1049      	asrs	r1, r1, #1
 8005a32:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 8005a36:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 8005a3a:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 8005a3e:	ee37 6a65 	vsub.f32	s12, s14, s11
 8005a42:	ee07 1a90 	vmov	s15, r1
 8005a46:	ee26 5a24 	vmul.f32	s10, s12, s9
 8005a4a:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8005a4e:	ee15 7a10 	vmov	r7, s10
 8005a52:	401f      	ands	r7, r3
 8005a54:	ee06 7a90 	vmov	s13, r7
 8005a58:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8005a5c:	ee37 7a65 	vsub.f32	s14, s14, s11
 8005a60:	ee65 7a05 	vmul.f32	s15, s10, s10
 8005a64:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8005a68:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8005bd0 <__ieee754_powf+0x440>
 8005a6c:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8005bd4 <__ieee754_powf+0x444>
 8005a70:	eee7 5a87 	vfma.f32	s11, s15, s14
 8005a74:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8005bd8 <__ieee754_powf+0x448>
 8005a78:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8005a7c:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 8005bac <__ieee754_powf+0x41c>
 8005a80:	eee7 5a27 	vfma.f32	s11, s14, s15
 8005a84:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8005bdc <__ieee754_powf+0x44c>
 8005a88:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8005a8c:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8005be0 <__ieee754_powf+0x450>
 8005a90:	ee26 6a24 	vmul.f32	s12, s12, s9
 8005a94:	eee7 5a27 	vfma.f32	s11, s14, s15
 8005a98:	ee35 7a26 	vadd.f32	s14, s10, s13
 8005a9c:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8005aa0:	ee27 7a06 	vmul.f32	s14, s14, s12
 8005aa4:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8005aa8:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8005aac:	eef0 5a67 	vmov.f32	s11, s15
 8005ab0:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8005ab4:	ee75 5a87 	vadd.f32	s11, s11, s14
 8005ab8:	ee15 1a90 	vmov	r1, s11
 8005abc:	4019      	ands	r1, r3
 8005abe:	ee05 1a90 	vmov	s11, r1
 8005ac2:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8005ac6:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8005aca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ace:	ee67 7a85 	vmul.f32	s15, s15, s10
 8005ad2:	eee6 7a25 	vfma.f32	s15, s12, s11
 8005ad6:	eeb0 6a67 	vmov.f32	s12, s15
 8005ada:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8005ade:	ee16 1a10 	vmov	r1, s12
 8005ae2:	4019      	ands	r1, r3
 8005ae4:	ee06 1a10 	vmov	s12, r1
 8005ae8:	eeb0 7a46 	vmov.f32	s14, s12
 8005aec:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8005af0:	493c      	ldr	r1, [pc, #240]	@ (8005be4 <__ieee754_powf+0x454>)
 8005af2:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8005af6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005afa:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8005be8 <__ieee754_powf+0x458>
 8005afe:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8005bec <__ieee754_powf+0x45c>
 8005b02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b06:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8005bf0 <__ieee754_powf+0x460>
 8005b0a:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005b0e:	ed91 7a00 	vldr	s14, [r1]
 8005b12:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005b16:	ee07 2a10 	vmov	s14, r2
 8005b1a:	eef0 6a67 	vmov.f32	s13, s15
 8005b1e:	4a35      	ldr	r2, [pc, #212]	@ (8005bf4 <__ieee754_powf+0x464>)
 8005b20:	eee6 6a25 	vfma.f32	s13, s12, s11
 8005b24:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8005b28:	ed92 5a00 	vldr	s10, [r2]
 8005b2c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005b30:	ee76 6a85 	vadd.f32	s13, s13, s10
 8005b34:	ee76 6a87 	vadd.f32	s13, s13, s14
 8005b38:	ee16 2a90 	vmov	r2, s13
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	ee06 3a90 	vmov	s13, r3
 8005b42:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8005b46:	ee37 7a45 	vsub.f32	s14, s14, s10
 8005b4a:	eea6 7a65 	vfms.f32	s14, s12, s11
 8005b4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005b52:	e70f      	b.n	8005974 <__ieee754_powf+0x1e4>
 8005b54:	2601      	movs	r6, #1
 8005b56:	e75d      	b.n	8005a14 <__ieee754_powf+0x284>
 8005b58:	d152      	bne.n	8005c00 <__ieee754_powf+0x470>
 8005b5a:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8005bf8 <__ieee754_powf+0x468>
 8005b5e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005b62:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8005b66:	eef4 6ac7 	vcmpe.f32	s13, s14
 8005b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b6e:	f73f af29 	bgt.w	80059c4 <__ieee754_powf+0x234>
 8005b72:	2386      	movs	r3, #134	@ 0x86
 8005b74:	e048      	b.n	8005c08 <__ieee754_powf+0x478>
 8005b76:	4a21      	ldr	r2, [pc, #132]	@ (8005bfc <__ieee754_powf+0x46c>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d907      	bls.n	8005b8c <__ieee754_powf+0x3fc>
 8005b7c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8005b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b84:	bf4c      	ite	mi
 8005b86:	2001      	movmi	r0, #1
 8005b88:	2000      	movpl	r0, #0
 8005b8a:	e6c1      	b.n	8005910 <__ieee754_powf+0x180>
 8005b8c:	d138      	bne.n	8005c00 <__ieee754_powf+0x470>
 8005b8e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005b92:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8005b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b9a:	dbea      	blt.n	8005b72 <__ieee754_powf+0x3e2>
 8005b9c:	e7ee      	b.n	8005b7c <__ieee754_powf+0x3ec>
 8005b9e:	bf00      	nop
 8005ba0:	00000000 	.word	0x00000000
 8005ba4:	3f7ffff3 	.word	0x3f7ffff3
 8005ba8:	3f800007 	.word	0x3f800007
 8005bac:	3eaaaaab 	.word	0x3eaaaaab
 8005bb0:	3fb8aa3b 	.word	0x3fb8aa3b
 8005bb4:	36eca570 	.word	0x36eca570
 8005bb8:	3fb8aa00 	.word	0x3fb8aa00
 8005bbc:	4b800000 	.word	0x4b800000
 8005bc0:	001cc471 	.word	0x001cc471
 8005bc4:	005db3d6 	.word	0x005db3d6
 8005bc8:	080062c8 	.word	0x080062c8
 8005bcc:	fffff000 	.word	0xfffff000
 8005bd0:	3e6c3255 	.word	0x3e6c3255
 8005bd4:	3e53f142 	.word	0x3e53f142
 8005bd8:	3e8ba305 	.word	0x3e8ba305
 8005bdc:	3edb6db7 	.word	0x3edb6db7
 8005be0:	3f19999a 	.word	0x3f19999a
 8005be4:	080062b8 	.word	0x080062b8
 8005be8:	3f76384f 	.word	0x3f76384f
 8005bec:	3f763800 	.word	0x3f763800
 8005bf0:	369dc3a0 	.word	0x369dc3a0
 8005bf4:	080062c0 	.word	0x080062c0
 8005bf8:	3338aa3c 	.word	0x3338aa3c
 8005bfc:	43160000 	.word	0x43160000
 8005c00:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8005c04:	d971      	bls.n	8005cea <__ieee754_powf+0x55a>
 8005c06:	15db      	asrs	r3, r3, #23
 8005c08:	3b7e      	subs	r3, #126	@ 0x7e
 8005c0a:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8005c0e:	4118      	asrs	r0, r3
 8005c10:	4408      	add	r0, r1
 8005c12:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8005c16:	4a3c      	ldr	r2, [pc, #240]	@ (8005d08 <__ieee754_powf+0x578>)
 8005c18:	3b7f      	subs	r3, #127	@ 0x7f
 8005c1a:	411a      	asrs	r2, r3
 8005c1c:	4002      	ands	r2, r0
 8005c1e:	ee07 2a10 	vmov	s14, r2
 8005c22:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8005c26:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8005c2a:	f1c3 0317 	rsb	r3, r3, #23
 8005c2e:	4118      	asrs	r0, r3
 8005c30:	2900      	cmp	r1, #0
 8005c32:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005c36:	bfb8      	it	lt
 8005c38:	4240      	neglt	r0, r0
 8005c3a:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8005c3e:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8005d0c <__ieee754_powf+0x57c>
 8005c42:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 8005d10 <__ieee754_powf+0x580>
 8005c46:	ee17 3a10 	vmov	r3, s14
 8005c4a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8005c4e:	f023 030f 	bic.w	r3, r3, #15
 8005c52:	ee07 3a10 	vmov	s14, r3
 8005c56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c5a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8005c5e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8005c62:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 8005d14 <__ieee754_powf+0x584>
 8005c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c6a:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8005c6e:	eef0 6a67 	vmov.f32	s13, s15
 8005c72:	eee7 6a06 	vfma.f32	s13, s14, s12
 8005c76:	eef0 5a66 	vmov.f32	s11, s13
 8005c7a:	eee7 5a46 	vfms.f32	s11, s14, s12
 8005c7e:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8005c82:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8005c86:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 8005d18 <__ieee754_powf+0x588>
 8005c8a:	eddf 5a24 	vldr	s11, [pc, #144]	@ 8005d1c <__ieee754_powf+0x58c>
 8005c8e:	eea7 6a25 	vfma.f32	s12, s14, s11
 8005c92:	eddf 5a23 	vldr	s11, [pc, #140]	@ 8005d20 <__ieee754_powf+0x590>
 8005c96:	eee6 5a07 	vfma.f32	s11, s12, s14
 8005c9a:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 8005d24 <__ieee754_powf+0x594>
 8005c9e:	eea5 6a87 	vfma.f32	s12, s11, s14
 8005ca2:	eddf 5a21 	vldr	s11, [pc, #132]	@ 8005d28 <__ieee754_powf+0x598>
 8005ca6:	eee6 5a07 	vfma.f32	s11, s12, s14
 8005caa:	eeb0 6a66 	vmov.f32	s12, s13
 8005cae:	eea5 6ac7 	vfms.f32	s12, s11, s14
 8005cb2:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8005cb6:	ee66 5a86 	vmul.f32	s11, s13, s12
 8005cba:	ee36 6a47 	vsub.f32	s12, s12, s14
 8005cbe:	eee6 7aa7 	vfma.f32	s15, s13, s15
 8005cc2:	ee85 7a86 	vdiv.f32	s14, s11, s12
 8005cc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005cca:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005cce:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005cd2:	ee10 3a10 	vmov	r3, s0
 8005cd6:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8005cda:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005cde:	da06      	bge.n	8005cee <__ieee754_powf+0x55e>
 8005ce0:	f000 f826 	bl	8005d30 <scalbnf>
 8005ce4:	ee20 0a08 	vmul.f32	s0, s0, s16
 8005ce8:	e56a      	b.n	80057c0 <__ieee754_powf+0x30>
 8005cea:	2000      	movs	r0, #0
 8005cec:	e7a5      	b.n	8005c3a <__ieee754_powf+0x4aa>
 8005cee:	ee00 3a10 	vmov	s0, r3
 8005cf2:	e7f7      	b.n	8005ce4 <__ieee754_powf+0x554>
 8005cf4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8005cf8:	e562      	b.n	80057c0 <__ieee754_powf+0x30>
 8005cfa:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8005d2c <__ieee754_powf+0x59c>
 8005cfe:	e55f      	b.n	80057c0 <__ieee754_powf+0x30>
 8005d00:	eeb0 0a48 	vmov.f32	s0, s16
 8005d04:	e55c      	b.n	80057c0 <__ieee754_powf+0x30>
 8005d06:	bf00      	nop
 8005d08:	ff800000 	.word	0xff800000
 8005d0c:	3f317218 	.word	0x3f317218
 8005d10:	3f317200 	.word	0x3f317200
 8005d14:	35bfbe8c 	.word	0x35bfbe8c
 8005d18:	b5ddea0e 	.word	0xb5ddea0e
 8005d1c:	3331bb4c 	.word	0x3331bb4c
 8005d20:	388ab355 	.word	0x388ab355
 8005d24:	bb360b61 	.word	0xbb360b61
 8005d28:	3e2aaaab 	.word	0x3e2aaaab
 8005d2c:	00000000 	.word	0x00000000

08005d30 <scalbnf>:
 8005d30:	ee10 3a10 	vmov	r3, s0
 8005d34:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8005d38:	d02b      	beq.n	8005d92 <scalbnf+0x62>
 8005d3a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8005d3e:	d302      	bcc.n	8005d46 <scalbnf+0x16>
 8005d40:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005d44:	4770      	bx	lr
 8005d46:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8005d4a:	d123      	bne.n	8005d94 <scalbnf+0x64>
 8005d4c:	4b24      	ldr	r3, [pc, #144]	@ (8005de0 <scalbnf+0xb0>)
 8005d4e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8005de4 <scalbnf+0xb4>
 8005d52:	4298      	cmp	r0, r3
 8005d54:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005d58:	db17      	blt.n	8005d8a <scalbnf+0x5a>
 8005d5a:	ee10 3a10 	vmov	r3, s0
 8005d5e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8005d62:	3a19      	subs	r2, #25
 8005d64:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8005d68:	4288      	cmp	r0, r1
 8005d6a:	dd15      	ble.n	8005d98 <scalbnf+0x68>
 8005d6c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8005de8 <scalbnf+0xb8>
 8005d70:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8005dec <scalbnf+0xbc>
 8005d74:	ee10 3a10 	vmov	r3, s0
 8005d78:	eeb0 7a67 	vmov.f32	s14, s15
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	bfb8      	it	lt
 8005d80:	eef0 7a66 	vmovlt.f32	s15, s13
 8005d84:	ee27 0a87 	vmul.f32	s0, s15, s14
 8005d88:	4770      	bx	lr
 8005d8a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8005df0 <scalbnf+0xc0>
 8005d8e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8005d92:	4770      	bx	lr
 8005d94:	0dd2      	lsrs	r2, r2, #23
 8005d96:	e7e5      	b.n	8005d64 <scalbnf+0x34>
 8005d98:	4410      	add	r0, r2
 8005d9a:	28fe      	cmp	r0, #254	@ 0xfe
 8005d9c:	dce6      	bgt.n	8005d6c <scalbnf+0x3c>
 8005d9e:	2800      	cmp	r0, #0
 8005da0:	dd06      	ble.n	8005db0 <scalbnf+0x80>
 8005da2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8005da6:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8005daa:	ee00 3a10 	vmov	s0, r3
 8005dae:	4770      	bx	lr
 8005db0:	f110 0f16 	cmn.w	r0, #22
 8005db4:	da09      	bge.n	8005dca <scalbnf+0x9a>
 8005db6:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8005df0 <scalbnf+0xc0>
 8005dba:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8005df4 <scalbnf+0xc4>
 8005dbe:	ee10 3a10 	vmov	r3, s0
 8005dc2:	eeb0 7a67 	vmov.f32	s14, s15
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	e7d9      	b.n	8005d7e <scalbnf+0x4e>
 8005dca:	3019      	adds	r0, #25
 8005dcc:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8005dd0:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8005dd4:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8005df8 <scalbnf+0xc8>
 8005dd8:	ee07 3a90 	vmov	s15, r3
 8005ddc:	e7d7      	b.n	8005d8e <scalbnf+0x5e>
 8005dde:	bf00      	nop
 8005de0:	ffff3cb0 	.word	0xffff3cb0
 8005de4:	4c000000 	.word	0x4c000000
 8005de8:	7149f2ca 	.word	0x7149f2ca
 8005dec:	f149f2ca 	.word	0xf149f2ca
 8005df0:	0da24260 	.word	0x0da24260
 8005df4:	8da24260 	.word	0x8da24260
 8005df8:	33000000 	.word	0x33000000

08005dfc <with_errnof>:
 8005dfc:	b510      	push	{r4, lr}
 8005dfe:	ed2d 8b02 	vpush	{d8}
 8005e02:	eeb0 8a40 	vmov.f32	s16, s0
 8005e06:	4604      	mov	r4, r0
 8005e08:	f7ff f90e 	bl	8005028 <__errno>
 8005e0c:	eeb0 0a48 	vmov.f32	s0, s16
 8005e10:	ecbd 8b02 	vpop	{d8}
 8005e14:	6004      	str	r4, [r0, #0]
 8005e16:	bd10      	pop	{r4, pc}

08005e18 <xflowf>:
 8005e18:	b130      	cbz	r0, 8005e28 <xflowf+0x10>
 8005e1a:	eef1 7a40 	vneg.f32	s15, s0
 8005e1e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8005e22:	2022      	movs	r0, #34	@ 0x22
 8005e24:	f7ff bfea 	b.w	8005dfc <with_errnof>
 8005e28:	eef0 7a40 	vmov.f32	s15, s0
 8005e2c:	e7f7      	b.n	8005e1e <xflowf+0x6>
	...

08005e30 <__math_uflowf>:
 8005e30:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8005e38 <__math_uflowf+0x8>
 8005e34:	f7ff bff0 	b.w	8005e18 <xflowf>
 8005e38:	10000000 	.word	0x10000000

08005e3c <__math_oflowf>:
 8005e3c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8005e44 <__math_oflowf+0x8>
 8005e40:	f7ff bfea 	b.w	8005e18 <xflowf>
 8005e44:	70000000 	.word	0x70000000

08005e48 <_init>:
 8005e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e4a:	bf00      	nop
 8005e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e4e:	bc08      	pop	{r3}
 8005e50:	469e      	mov	lr, r3
 8005e52:	4770      	bx	lr

08005e54 <_fini>:
 8005e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e56:	bf00      	nop
 8005e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e5a:	bc08      	pop	{r3}
 8005e5c:	469e      	mov	lr, r3
 8005e5e:	4770      	bx	lr
