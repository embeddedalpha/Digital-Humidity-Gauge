
Digital-Humidity-Gauge.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ad8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  08004c60  08004c60  00005c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005074  08005074  00023204  2**0
                  CONTENTS
  4 .ARM          00000000  08005074  08005074  00023204  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005074  08005074  00023204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005074  08005074  00006074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005078  08005078  00006078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0001c204  20000000  0800507c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00023204  2**0
                  CONTENTS
 10 .bss          00000340  2001c204  2001c204  00023204  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2001c544  2001c544  00023204  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00023204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e130  00000000  00000000  00023234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001617  00000000  00000000  00031364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000005d0  00000000  00000000  00032980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000479  00000000  00000000  00032f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000013d3  00000000  00000000  000333c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b273  00000000  00000000  0003479c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00090e86  00000000  00000000  0003fa0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000d0895  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000169c  00000000  00000000  000d08d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000056  00000000  00000000  000d1f74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2001c204 	.word	0x2001c204
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004c48 	.word	0x08004c48

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2001c208 	.word	0x2001c208
 80001c4:	08004c48 	.word	0x08004c48

080001c8 <Delay_ms>:
	while((SysTick->CTRL & 0x00010000) == 0);
	return (0UL);                                                     /* Function successful */
}

__STATIC_INLINE uint32_t Delay_ms(volatile float ms)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	ed87 0a01 	vstr	s0, [r7, #4]
	unsigned long x =0x29040 * (ms);
 80001d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80001d6:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 800021c <Delay_ms+0x54>
 80001da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80001de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80001e2:	ee17 3a90 	vmov	r3, s15
 80001e6:	60fb      	str	r3, [r7, #12]
	SysTick->LOAD =  x ;
 80001e8:	4a0d      	ldr	r2, [pc, #52]	@ (8000220 <Delay_ms+0x58>)
 80001ea:	68fb      	ldr	r3, [r7, #12]
 80001ec:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0;
 80001ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000220 <Delay_ms+0x58>)
 80001f0:	2200      	movs	r2, #0
 80001f2:	609a      	str	r2, [r3, #8]
	SysTick->CTRL |= 1;
 80001f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000220 <Delay_ms+0x58>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a09      	ldr	r2, [pc, #36]	@ (8000220 <Delay_ms+0x58>)
 80001fa:	f043 0301 	orr.w	r3, r3, #1
 80001fe:	6013      	str	r3, [r2, #0]
	while((SysTick->CTRL & 0x00010000) == 0);
 8000200:	bf00      	nop
 8000202:	4b07      	ldr	r3, [pc, #28]	@ (8000220 <Delay_ms+0x58>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800020a:	2b00      	cmp	r3, #0
 800020c:	d0f9      	beq.n	8000202 <Delay_ms+0x3a>
	return (0UL);                                                     /* Function successful */
 800020e:	2300      	movs	r3, #0
}
 8000210:	4618      	mov	r0, r3
 8000212:	3714      	adds	r7, #20
 8000214:	46bd      	mov	sp, r7
 8000216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021a:	4770      	bx	lr
 800021c:	48241000 	.word	0x48241000
 8000220:	e000e010 	.word	0xe000e010

08000224 <Delay_milli>:


__STATIC_INLINE uint32_t Delay_milli(float ms)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0
 800022a:	ed87 0a01 	vstr	s0, [r7, #4]
	for (; ms>0; ms--)
 800022e:	e00b      	b.n	8000248 <Delay_milli+0x24>
	{
		Delay_ms(1);
 8000230:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000234:	f7ff ffc8 	bl	80001c8 <Delay_ms>
	for (; ms>0; ms--)
 8000238:	edd7 7a01 	vldr	s15, [r7, #4]
 800023c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000240:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000244:	edc7 7a01 	vstr	s15, [r7, #4]
 8000248:	edd7 7a01 	vldr	s15, [r7, #4]
 800024c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000254:	dcec      	bgt.n	8000230 <Delay_milli+0xc>
	}
	return ms;
 8000256:	edd7 7a01 	vldr	s15, [r7, #4]
 800025a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800025e:	ee17 3a90 	vmov	r3, s15
}
 8000262:	4618      	mov	r0, r3
 8000264:	3708      	adds	r7, #8
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}

0800026a <GPIO_Pin_Low>:
 * @brief  Sets a specific pin low.
 * @param  Port: Pointer to GPIO port base address.
 * @param  pin: Pin number to set low (0-15).
 */
__STATIC_INLINE  void GPIO_Pin_Low(GPIO_TypeDef *Port, int pin)
{
 800026a:	b480      	push	{r7}
 800026c:	b083      	sub	sp, #12
 800026e:	af00      	add	r7, sp, #0
 8000270:	6078      	str	r0, [r7, #4]
 8000272:	6039      	str	r1, [r7, #0]
	Port -> ODR &= ~(1 << pin);
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	695b      	ldr	r3, [r3, #20]
 8000278:	2101      	movs	r1, #1
 800027a:	683a      	ldr	r2, [r7, #0]
 800027c:	fa01 f202 	lsl.w	r2, r1, r2
 8000280:	43d2      	mvns	r2, r2
 8000282:	401a      	ands	r2, r3
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	615a      	str	r2, [r3, #20]
}
 8000288:	bf00      	nop
 800028a:	370c      	adds	r7, #12
 800028c:	46bd      	mov	sp, r7
 800028e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000292:	4770      	bx	lr

08000294 <GPIO_Pin_High>:
 * @brief  Sets a specific pin high.
 * @param  Port: Pointer to GPIO port base address.
 * @param  pin: Pin number to set high (0-15).
 */
__STATIC_INLINE  void GPIO_Pin_High(GPIO_TypeDef *Port, int pin)
{
 8000294:	b480      	push	{r7}
 8000296:	b083      	sub	sp, #12
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
 800029c:	6039      	str	r1, [r7, #0]
	Port -> ODR |= 1 << pin;
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	695b      	ldr	r3, [r3, #20]
 80002a2:	2101      	movs	r1, #1
 80002a4:	683a      	ldr	r2, [r7, #0]
 80002a6:	fa01 f202 	lsl.w	r2, r1, r2
 80002aa:	431a      	orrs	r2, r3
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	615a      	str	r2, [r3, #20]
}
 80002b0:	bf00      	nop
 80002b2:	370c      	adds	r7, #12
 80002b4:	46bd      	mov	sp, r7
 80002b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ba:	4770      	bx	lr

080002bc <DC_C>:
//    GC9A01_spi_tx(&cmd, sizeof(cmd));
//    GC9A01_set_chip_select(ON);
//}


static  void DC_C(GC9A01_Config *config) { GPIO_Pin_Low(config->dc_port, config->dc_pin); }
 80002bc:	b580      	push	{r7, lr}
 80002be:	b082      	sub	sp, #8
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	68da      	ldr	r2, [r3, #12]
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	8a1b      	ldrh	r3, [r3, #16]
 80002cc:	4619      	mov	r1, r3
 80002ce:	4610      	mov	r0, r2
 80002d0:	f7ff ffcb 	bl	800026a <GPIO_Pin_Low>
 80002d4:	bf00      	nop
 80002d6:	3708      	adds	r7, #8
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}

080002dc <DC_D>:
static  void DC_D(GC9A01_Config *config) { GPIO_Pin_High(config->dc_port, config->dc_pin); }
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	68da      	ldr	r2, [r3, #12]
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	8a1b      	ldrh	r3, [r3, #16]
 80002ec:	4619      	mov	r1, r3
 80002ee:	4610      	mov	r0, r2
 80002f0:	f7ff ffd0 	bl	8000294 <GPIO_Pin_High>
 80002f4:	bf00      	nop
 80002f6:	3708      	adds	r7, #8
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}

080002fc <RST_L>:

static  void RST_L(GC9A01_Config *config) { GPIO_Pin_Low(config->rst_port, config->rst_pin); }
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	695a      	ldr	r2, [r3, #20]
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	8b1b      	ldrh	r3, [r3, #24]
 800030c:	4619      	mov	r1, r3
 800030e:	4610      	mov	r0, r2
 8000310:	f7ff ffab 	bl	800026a <GPIO_Pin_Low>
 8000314:	bf00      	nop
 8000316:	3708      	adds	r7, #8
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}

0800031c <RST_H>:
static  void RST_H(GC9A01_Config *config) { GPIO_Pin_High(config->rst_port, config->rst_pin); }
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	695a      	ldr	r2, [r3, #20]
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	8b1b      	ldrh	r3, [r3, #24]
 800032c:	4619      	mov	r1, r3
 800032e:	4610      	mov	r0, r2
 8000330:	f7ff ffb0 	bl	8000294 <GPIO_Pin_High>
 8000334:	bf00      	nop
 8000336:	3708      	adds	r7, #8
 8000338:	46bd      	mov	sp, r7
 800033a:	bd80      	pop	{r7, pc}

0800033c <write_command>:




static void write_command(GC9A01_Config *config, uint8_t cmd)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
 8000344:	460b      	mov	r3, r1
 8000346:	70fb      	strb	r3, [r7, #3]
	DC_C(config);
 8000348:	6878      	ldr	r0, [r7, #4]
 800034a:	f7ff ffb7 	bl	80002bc <DC_C>
	SPI_NSS_Low(config->SPI_Port);
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	4618      	mov	r0, r3
 8000354:	f003 fbf3 	bl	8003b3e <SPI_NSS_Low>
	SPI_TRX_Byte(config->SPI_Port, cmd);
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	78fa      	ldrb	r2, [r7, #3]
 800035e:	b292      	uxth	r2, r2
 8000360:	4611      	mov	r1, r2
 8000362:	4618      	mov	r0, r3
 8000364:	f003 fba2 	bl	8003aac <SPI_TRX_Byte>
	SPI_NSS_High(config->SPI_Port);
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	4618      	mov	r0, r3
 800036e:	f003 fbd6 	bl	8003b1e <SPI_NSS_High>
}
 8000372:	bf00      	nop
 8000374:	3708      	adds	r7, #8
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}

0800037a <write_data>:

static void write_data(GC9A01_Config *config, uint8_t *data, size_t len)
{
 800037a:	b580      	push	{r7, lr}
 800037c:	b086      	sub	sp, #24
 800037e:	af00      	add	r7, sp, #0
 8000380:	60f8      	str	r0, [r7, #12]
 8000382:	60b9      	str	r1, [r7, #8]
 8000384:	607a      	str	r2, [r7, #4]
	DC_D(config);
 8000386:	68f8      	ldr	r0, [r7, #12]
 8000388:	f7ff ffa8 	bl	80002dc <DC_D>
	SPI_NSS_Low(config->SPI_Port);
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4618      	mov	r0, r3
 8000392:	f003 fbd4 	bl	8003b3e <SPI_NSS_Low>
	for(int i = 0; i < len; i++) SPI_TRX_Byte(config->SPI_Port, *data++);
 8000396:	2300      	movs	r3, #0
 8000398:	617b      	str	r3, [r7, #20]
 800039a:	e00b      	b.n	80003b4 <write_data+0x3a>
 800039c:	68fb      	ldr	r3, [r7, #12]
 800039e:	6818      	ldr	r0, [r3, #0]
 80003a0:	68bb      	ldr	r3, [r7, #8]
 80003a2:	1c5a      	adds	r2, r3, #1
 80003a4:	60ba      	str	r2, [r7, #8]
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	4619      	mov	r1, r3
 80003aa:	f003 fb7f 	bl	8003aac <SPI_TRX_Byte>
 80003ae:	697b      	ldr	r3, [r7, #20]
 80003b0:	3301      	adds	r3, #1
 80003b2:	617b      	str	r3, [r7, #20]
 80003b4:	697b      	ldr	r3, [r7, #20]
 80003b6:	687a      	ldr	r2, [r7, #4]
 80003b8:	429a      	cmp	r2, r3
 80003ba:	d8ef      	bhi.n	800039c <write_data+0x22>
	SPI_NSS_High(config->SPI_Port);
 80003bc:	68fb      	ldr	r3, [r7, #12]
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4618      	mov	r0, r3
 80003c2:	f003 fbac 	bl	8003b1e <SPI_NSS_High>
}
 80003c6:	bf00      	nop
 80003c8:	3718      	adds	r7, #24
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}

080003ce <GC9A01_write_byte>:

static inline void GC9A01_write_byte(GC9A01_Config *config,uint8_t val) {
 80003ce:	b580      	push	{r7, lr}
 80003d0:	b082      	sub	sp, #8
 80003d2:	af00      	add	r7, sp, #0
 80003d4:	6078      	str	r0, [r7, #4]
 80003d6:	460b      	mov	r3, r1
 80003d8:	70fb      	strb	r3, [r7, #3]
	write_data(config,&val, sizeof(val));
 80003da:	1cfb      	adds	r3, r7, #3
 80003dc:	2201      	movs	r2, #1
 80003de:	4619      	mov	r1, r3
 80003e0:	6878      	ldr	r0, [r7, #4]
 80003e2:	f7ff ffca 	bl	800037a <write_data>
}
 80003e6:	bf00      	nop
 80003e8:	3708      	adds	r7, #8
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}

080003ee <GC9A01_Write_Data>:
//	SPI_TRX_Byte(config->SPI_Port, cmd);
//	SPI_NSS_High(config->SPI_Port);
//}

static void GC9A01_Write_Data(GC9A01_Config *config, uint8_t *data, uint32_t len)
{
 80003ee:	b580      	push	{r7, lr}
 80003f0:	b084      	sub	sp, #16
 80003f2:	af00      	add	r7, sp, #0
 80003f4:	60f8      	str	r0, [r7, #12]
 80003f6:	60b9      	str	r1, [r7, #8]
 80003f8:	607a      	str	r2, [r7, #4]
	DC_D(config);
 80003fa:	68f8      	ldr	r0, [r7, #12]
 80003fc:	f7ff ff6e 	bl	80002dc <DC_D>
	SPI_NSS_Low(config->SPI_Port);
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4618      	mov	r0, r3
 8000406:	f003 fb9a 	bl	8003b3e <SPI_NSS_Low>

	while(len--)
 800040a:	e008      	b.n	800041e <GC9A01_Write_Data+0x30>
	{
		SPI_TRX_Byte(config->SPI_Port, *data++);
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	6818      	ldr	r0, [r3, #0]
 8000410:	68bb      	ldr	r3, [r7, #8]
 8000412:	1c5a      	adds	r2, r3, #1
 8000414:	60ba      	str	r2, [r7, #8]
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	4619      	mov	r1, r3
 800041a:	f003 fb47 	bl	8003aac <SPI_TRX_Byte>
	while(len--)
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	1e5a      	subs	r2, r3, #1
 8000422:	607a      	str	r2, [r7, #4]
 8000424:	2b00      	cmp	r3, #0
 8000426:	d1f1      	bne.n	800040c <GC9A01_Write_Data+0x1e>
	}
	SPI_NSS_High(config->SPI_Port);
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4618      	mov	r0, r3
 800042e:	f003 fb76 	bl	8003b1e <SPI_NSS_High>
}
 8000432:	bf00      	nop
 8000434:	3710      	adds	r7, #16
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
	...

0800043c <GC9A01_Init>:
	SPI_NSS_High(config->SPI_Port);
}

/** Initialise GPIO, reset display, execute vendor init sequence */
void GC9A01_Init(GC9A01_Config *config)
{
 800043c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800043e:	b087      	sub	sp, #28
 8000440:	af04      	add	r7, sp, #16
 8000442:	6078      	str	r0, [r7, #4]

	GPIO_Pin_Init(config->rst_port, config->rst_pin, GPIO_Configuration.Mode.General_Purpose_Output, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.Pull_Up, GPIO_Configuration.Alternate_Functions.None);
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	6958      	ldr	r0, [r3, #20]
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	8b1b      	ldrh	r3, [r3, #24]
 800044c:	b2d9      	uxtb	r1, r3
 800044e:	2501      	movs	r5, #1
 8000450:	2600      	movs	r6, #0
 8000452:	2303      	movs	r3, #3
 8000454:	2201      	movs	r2, #1
 8000456:	2400      	movs	r4, #0
 8000458:	9402      	str	r4, [sp, #8]
 800045a:	9201      	str	r2, [sp, #4]
 800045c:	9300      	str	r3, [sp, #0]
 800045e:	4633      	mov	r3, r6
 8000460:	462a      	mov	r2, r5
 8000462:	f002 fa49 	bl	80028f8 <GPIO_Pin_Init>

	GPIO_Pin_Init(config->dc_port, config->dc_pin, GPIO_Configuration.Mode.General_Purpose_Output, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.Pull_Up, GPIO_Configuration.Alternate_Functions.None);
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	68d8      	ldr	r0, [r3, #12]
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	8a1b      	ldrh	r3, [r3, #16]
 800046e:	b2d9      	uxtb	r1, r3
 8000470:	2501      	movs	r5, #1
 8000472:	2600      	movs	r6, #0
 8000474:	2303      	movs	r3, #3
 8000476:	2201      	movs	r2, #1
 8000478:	2400      	movs	r4, #0
 800047a:	9402      	str	r4, [sp, #8]
 800047c:	9201      	str	r2, [sp, #4]
 800047e:	9300      	str	r3, [sp, #0]
 8000480:	4633      	mov	r3, r6
 8000482:	462a      	mov	r2, r5
 8000484:	f002 fa38 	bl	80028f8 <GPIO_Pin_Init>



	SPI_Init(config->SPI_Port);
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	4618      	mov	r0, r3
 800048e:	f003 f8bb 	bl	8003608 <SPI_Init>
	SPI_Enable(config->SPI_Port);
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	4618      	mov	r0, r3
 8000498:	f003 faf6 	bl	8003a88 <SPI_Enable>


	SPI_NSS_High(config->SPI_Port);
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	4618      	mov	r0, r3
 80004a2:	f003 fb3c 	bl	8003b1e <SPI_NSS_High>
	Delay_milli(150);
 80004a6:	ed9f 0acc 	vldr	s0, [pc, #816]	@ 80007d8 <GC9A01_Init+0x39c>
 80004aa:	f7ff febb 	bl	8000224 <Delay_milli>
	RST_L(config);
 80004ae:	6878      	ldr	r0, [r7, #4]
 80004b0:	f7ff ff24 	bl	80002fc <RST_L>
	Delay_milli(150);
 80004b4:	ed9f 0ac8 	vldr	s0, [pc, #800]	@ 80007d8 <GC9A01_Init+0x39c>
 80004b8:	f7ff feb4 	bl	8000224 <Delay_milli>
	RST_H(config);
 80004bc:	6878      	ldr	r0, [r7, #4]
 80004be:	f7ff ff2d 	bl	800031c <RST_H>
	Delay_milli(150);
 80004c2:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 80007d8 <GC9A01_Init+0x39c>
 80004c6:	f7ff fead 	bl	8000224 <Delay_milli>

	write_command(config,0xEF);
 80004ca:	21ef      	movs	r1, #239	@ 0xef
 80004cc:	6878      	ldr	r0, [r7, #4]
 80004ce:	f7ff ff35 	bl	800033c <write_command>

	write_command(config,0xEB);
 80004d2:	21eb      	movs	r1, #235	@ 0xeb
 80004d4:	6878      	ldr	r0, [r7, #4]
 80004d6:	f7ff ff31 	bl	800033c <write_command>
	GC9A01_write_byte(config,0x14);
 80004da:	2114      	movs	r1, #20
 80004dc:	6878      	ldr	r0, [r7, #4]
 80004de:	f7ff ff76 	bl	80003ce <GC9A01_write_byte>

	write_command(config,0xFE);
 80004e2:	21fe      	movs	r1, #254	@ 0xfe
 80004e4:	6878      	ldr	r0, [r7, #4]
 80004e6:	f7ff ff29 	bl	800033c <write_command>
	write_command(config,0xEF);
 80004ea:	21ef      	movs	r1, #239	@ 0xef
 80004ec:	6878      	ldr	r0, [r7, #4]
 80004ee:	f7ff ff25 	bl	800033c <write_command>

	write_command(config,0xEB);
 80004f2:	21eb      	movs	r1, #235	@ 0xeb
 80004f4:	6878      	ldr	r0, [r7, #4]
 80004f6:	f7ff ff21 	bl	800033c <write_command>
	GC9A01_write_byte(config,0x14);
 80004fa:	2114      	movs	r1, #20
 80004fc:	6878      	ldr	r0, [r7, #4]
 80004fe:	f7ff ff66 	bl	80003ce <GC9A01_write_byte>

	write_command(config,0x84);
 8000502:	2184      	movs	r1, #132	@ 0x84
 8000504:	6878      	ldr	r0, [r7, #4]
 8000506:	f7ff ff19 	bl	800033c <write_command>
	GC9A01_write_byte(config,0x40);
 800050a:	2140      	movs	r1, #64	@ 0x40
 800050c:	6878      	ldr	r0, [r7, #4]
 800050e:	f7ff ff5e 	bl	80003ce <GC9A01_write_byte>

	write_command(config,0x85);
 8000512:	2185      	movs	r1, #133	@ 0x85
 8000514:	6878      	ldr	r0, [r7, #4]
 8000516:	f7ff ff11 	bl	800033c <write_command>
	GC9A01_write_byte(config,0xFF);
 800051a:	21ff      	movs	r1, #255	@ 0xff
 800051c:	6878      	ldr	r0, [r7, #4]
 800051e:	f7ff ff56 	bl	80003ce <GC9A01_write_byte>

	write_command(config,0x86);
 8000522:	2186      	movs	r1, #134	@ 0x86
 8000524:	6878      	ldr	r0, [r7, #4]
 8000526:	f7ff ff09 	bl	800033c <write_command>
	GC9A01_write_byte(config,0xFF);
 800052a:	21ff      	movs	r1, #255	@ 0xff
 800052c:	6878      	ldr	r0, [r7, #4]
 800052e:	f7ff ff4e 	bl	80003ce <GC9A01_write_byte>

	write_command(config,0x87);
 8000532:	2187      	movs	r1, #135	@ 0x87
 8000534:	6878      	ldr	r0, [r7, #4]
 8000536:	f7ff ff01 	bl	800033c <write_command>
	GC9A01_write_byte(config,0xFF);
 800053a:	21ff      	movs	r1, #255	@ 0xff
 800053c:	6878      	ldr	r0, [r7, #4]
 800053e:	f7ff ff46 	bl	80003ce <GC9A01_write_byte>

	write_command(config,0x88);
 8000542:	2188      	movs	r1, #136	@ 0x88
 8000544:	6878      	ldr	r0, [r7, #4]
 8000546:	f7ff fef9 	bl	800033c <write_command>
	GC9A01_write_byte(config,0x0A);
 800054a:	210a      	movs	r1, #10
 800054c:	6878      	ldr	r0, [r7, #4]
 800054e:	f7ff ff3e 	bl	80003ce <GC9A01_write_byte>

	write_command(config,0x89);
 8000552:	2189      	movs	r1, #137	@ 0x89
 8000554:	6878      	ldr	r0, [r7, #4]
 8000556:	f7ff fef1 	bl	800033c <write_command>
	GC9A01_write_byte(config,0x21);
 800055a:	2121      	movs	r1, #33	@ 0x21
 800055c:	6878      	ldr	r0, [r7, #4]
 800055e:	f7ff ff36 	bl	80003ce <GC9A01_write_byte>

	write_command(config,0x8A);
 8000562:	218a      	movs	r1, #138	@ 0x8a
 8000564:	6878      	ldr	r0, [r7, #4]
 8000566:	f7ff fee9 	bl	800033c <write_command>
	GC9A01_write_byte(config,0x00);
 800056a:	2100      	movs	r1, #0
 800056c:	6878      	ldr	r0, [r7, #4]
 800056e:	f7ff ff2e 	bl	80003ce <GC9A01_write_byte>

	write_command(config,0x8B);
 8000572:	218b      	movs	r1, #139	@ 0x8b
 8000574:	6878      	ldr	r0, [r7, #4]
 8000576:	f7ff fee1 	bl	800033c <write_command>
	GC9A01_write_byte(config,0x80);
 800057a:	2180      	movs	r1, #128	@ 0x80
 800057c:	6878      	ldr	r0, [r7, #4]
 800057e:	f7ff ff26 	bl	80003ce <GC9A01_write_byte>

	write_command(config,0x8C);
 8000582:	218c      	movs	r1, #140	@ 0x8c
 8000584:	6878      	ldr	r0, [r7, #4]
 8000586:	f7ff fed9 	bl	800033c <write_command>
	GC9A01_write_byte(config,0x01);
 800058a:	2101      	movs	r1, #1
 800058c:	6878      	ldr	r0, [r7, #4]
 800058e:	f7ff ff1e 	bl	80003ce <GC9A01_write_byte>

	write_command(config,0x8D);
 8000592:	218d      	movs	r1, #141	@ 0x8d
 8000594:	6878      	ldr	r0, [r7, #4]
 8000596:	f7ff fed1 	bl	800033c <write_command>
	GC9A01_write_byte(config,0x01);
 800059a:	2101      	movs	r1, #1
 800059c:	6878      	ldr	r0, [r7, #4]
 800059e:	f7ff ff16 	bl	80003ce <GC9A01_write_byte>

	write_command(config,0x8E);
 80005a2:	218e      	movs	r1, #142	@ 0x8e
 80005a4:	6878      	ldr	r0, [r7, #4]
 80005a6:	f7ff fec9 	bl	800033c <write_command>
	GC9A01_write_byte(config,0xFF);
 80005aa:	21ff      	movs	r1, #255	@ 0xff
 80005ac:	6878      	ldr	r0, [r7, #4]
 80005ae:	f7ff ff0e 	bl	80003ce <GC9A01_write_byte>

	write_command(config,0x8F);
 80005b2:	218f      	movs	r1, #143	@ 0x8f
 80005b4:	6878      	ldr	r0, [r7, #4]
 80005b6:	f7ff fec1 	bl	800033c <write_command>
	GC9A01_write_byte(config,0xFF);
 80005ba:	21ff      	movs	r1, #255	@ 0xff
 80005bc:	6878      	ldr	r0, [r7, #4]
 80005be:	f7ff ff06 	bl	80003ce <GC9A01_write_byte>


	write_command(config,0xB6);
 80005c2:	21b6      	movs	r1, #182	@ 0xb6
 80005c4:	6878      	ldr	r0, [r7, #4]
 80005c6:	f7ff feb9 	bl	800033c <write_command>
	GC9A01_write_byte(config,0x00);
 80005ca:	2100      	movs	r1, #0
 80005cc:	6878      	ldr	r0, [r7, #4]
 80005ce:	f7ff fefe 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x00);
 80005d2:	2100      	movs	r1, #0
 80005d4:	6878      	ldr	r0, [r7, #4]
 80005d6:	f7ff fefa 	bl	80003ce <GC9A01_write_byte>

	write_command(config,0x36);
 80005da:	2136      	movs	r1, #54	@ 0x36
 80005dc:	6878      	ldr	r0, [r7, #4]
 80005de:	f7ff fead 	bl	800033c <write_command>

	GC9A01_write_byte(config,0x18);
 80005e2:	2118      	movs	r1, #24
 80005e4:	6878      	ldr	r0, [r7, #4]
 80005e6:	f7ff fef2 	bl	80003ce <GC9A01_write_byte>

	write_command(config,0x3A);
 80005ea:	213a      	movs	r1, #58	@ 0x3a
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f7ff fea5 	bl	800033c <write_command>
	GC9A01_write_byte(config,0x05);
 80005f2:	2105      	movs	r1, #5
 80005f4:	6878      	ldr	r0, [r7, #4]
 80005f6:	f7ff feea 	bl	80003ce <GC9A01_write_byte>

	write_command(config,0x90);
 80005fa:	2190      	movs	r1, #144	@ 0x90
 80005fc:	6878      	ldr	r0, [r7, #4]
 80005fe:	f7ff fe9d 	bl	800033c <write_command>
	GC9A01_write_byte(config,0x08);
 8000602:	2108      	movs	r1, #8
 8000604:	6878      	ldr	r0, [r7, #4]
 8000606:	f7ff fee2 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x08);
 800060a:	2108      	movs	r1, #8
 800060c:	6878      	ldr	r0, [r7, #4]
 800060e:	f7ff fede 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x08);
 8000612:	2108      	movs	r1, #8
 8000614:	6878      	ldr	r0, [r7, #4]
 8000616:	f7ff feda 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x08);
 800061a:	2108      	movs	r1, #8
 800061c:	6878      	ldr	r0, [r7, #4]
 800061e:	f7ff fed6 	bl	80003ce <GC9A01_write_byte>

	write_command(config,0xBD);
 8000622:	21bd      	movs	r1, #189	@ 0xbd
 8000624:	6878      	ldr	r0, [r7, #4]
 8000626:	f7ff fe89 	bl	800033c <write_command>
	GC9A01_write_byte(config,0x06);
 800062a:	2106      	movs	r1, #6
 800062c:	6878      	ldr	r0, [r7, #4]
 800062e:	f7ff fece 	bl	80003ce <GC9A01_write_byte>

	write_command(config,0xBC);
 8000632:	21bc      	movs	r1, #188	@ 0xbc
 8000634:	6878      	ldr	r0, [r7, #4]
 8000636:	f7ff fe81 	bl	800033c <write_command>
	GC9A01_write_byte(config,0x00);
 800063a:	2100      	movs	r1, #0
 800063c:	6878      	ldr	r0, [r7, #4]
 800063e:	f7ff fec6 	bl	80003ce <GC9A01_write_byte>

	write_command(config,0xFF);
 8000642:	21ff      	movs	r1, #255	@ 0xff
 8000644:	6878      	ldr	r0, [r7, #4]
 8000646:	f7ff fe79 	bl	800033c <write_command>
	GC9A01_write_byte(config,0x60);
 800064a:	2160      	movs	r1, #96	@ 0x60
 800064c:	6878      	ldr	r0, [r7, #4]
 800064e:	f7ff febe 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x01);
 8000652:	2101      	movs	r1, #1
 8000654:	6878      	ldr	r0, [r7, #4]
 8000656:	f7ff feba 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x04);
 800065a:	2104      	movs	r1, #4
 800065c:	6878      	ldr	r0, [r7, #4]
 800065e:	f7ff feb6 	bl	80003ce <GC9A01_write_byte>

	write_command(config,0xC3);
 8000662:	21c3      	movs	r1, #195	@ 0xc3
 8000664:	6878      	ldr	r0, [r7, #4]
 8000666:	f7ff fe69 	bl	800033c <write_command>
	GC9A01_write_byte(config,0x13);
 800066a:	2113      	movs	r1, #19
 800066c:	6878      	ldr	r0, [r7, #4]
 800066e:	f7ff feae 	bl	80003ce <GC9A01_write_byte>
	write_command(config,0xC4);
 8000672:	21c4      	movs	r1, #196	@ 0xc4
 8000674:	6878      	ldr	r0, [r7, #4]
 8000676:	f7ff fe61 	bl	800033c <write_command>
	GC9A01_write_byte(config,0x13);
 800067a:	2113      	movs	r1, #19
 800067c:	6878      	ldr	r0, [r7, #4]
 800067e:	f7ff fea6 	bl	80003ce <GC9A01_write_byte>

	write_command(config,0xC9);
 8000682:	21c9      	movs	r1, #201	@ 0xc9
 8000684:	6878      	ldr	r0, [r7, #4]
 8000686:	f7ff fe59 	bl	800033c <write_command>
	GC9A01_write_byte(config,0x22);
 800068a:	2122      	movs	r1, #34	@ 0x22
 800068c:	6878      	ldr	r0, [r7, #4]
 800068e:	f7ff fe9e 	bl	80003ce <GC9A01_write_byte>

	write_command(config,0xBE);
 8000692:	21be      	movs	r1, #190	@ 0xbe
 8000694:	6878      	ldr	r0, [r7, #4]
 8000696:	f7ff fe51 	bl	800033c <write_command>
	GC9A01_write_byte(config,0x11);
 800069a:	2111      	movs	r1, #17
 800069c:	6878      	ldr	r0, [r7, #4]
 800069e:	f7ff fe96 	bl	80003ce <GC9A01_write_byte>

	write_command(config,0xE1);
 80006a2:	21e1      	movs	r1, #225	@ 0xe1
 80006a4:	6878      	ldr	r0, [r7, #4]
 80006a6:	f7ff fe49 	bl	800033c <write_command>
	GC9A01_write_byte(config,0x10);
 80006aa:	2110      	movs	r1, #16
 80006ac:	6878      	ldr	r0, [r7, #4]
 80006ae:	f7ff fe8e 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x0E);
 80006b2:	210e      	movs	r1, #14
 80006b4:	6878      	ldr	r0, [r7, #4]
 80006b6:	f7ff fe8a 	bl	80003ce <GC9A01_write_byte>

	write_command(config,0xDF);
 80006ba:	21df      	movs	r1, #223	@ 0xdf
 80006bc:	6878      	ldr	r0, [r7, #4]
 80006be:	f7ff fe3d 	bl	800033c <write_command>
	GC9A01_write_byte(config,0x21);
 80006c2:	2121      	movs	r1, #33	@ 0x21
 80006c4:	6878      	ldr	r0, [r7, #4]
 80006c6:	f7ff fe82 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x0c);
 80006ca:	210c      	movs	r1, #12
 80006cc:	6878      	ldr	r0, [r7, #4]
 80006ce:	f7ff fe7e 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x02);
 80006d2:	2102      	movs	r1, #2
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f7ff fe7a 	bl	80003ce <GC9A01_write_byte>

	write_command(config,0xF0);
 80006da:	21f0      	movs	r1, #240	@ 0xf0
 80006dc:	6878      	ldr	r0, [r7, #4]
 80006de:	f7ff fe2d 	bl	800033c <write_command>
	GC9A01_write_byte(config,0x45);
 80006e2:	2145      	movs	r1, #69	@ 0x45
 80006e4:	6878      	ldr	r0, [r7, #4]
 80006e6:	f7ff fe72 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x09);
 80006ea:	2109      	movs	r1, #9
 80006ec:	6878      	ldr	r0, [r7, #4]
 80006ee:	f7ff fe6e 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x08);
 80006f2:	2108      	movs	r1, #8
 80006f4:	6878      	ldr	r0, [r7, #4]
 80006f6:	f7ff fe6a 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x08);
 80006fa:	2108      	movs	r1, #8
 80006fc:	6878      	ldr	r0, [r7, #4]
 80006fe:	f7ff fe66 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x26);
 8000702:	2126      	movs	r1, #38	@ 0x26
 8000704:	6878      	ldr	r0, [r7, #4]
 8000706:	f7ff fe62 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x2A);
 800070a:	212a      	movs	r1, #42	@ 0x2a
 800070c:	6878      	ldr	r0, [r7, #4]
 800070e:	f7ff fe5e 	bl	80003ce <GC9A01_write_byte>

	write_command(config,0xF1);
 8000712:	21f1      	movs	r1, #241	@ 0xf1
 8000714:	6878      	ldr	r0, [r7, #4]
 8000716:	f7ff fe11 	bl	800033c <write_command>
	GC9A01_write_byte(config,0x43);
 800071a:	2143      	movs	r1, #67	@ 0x43
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f7ff fe56 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x70);
 8000722:	2170      	movs	r1, #112	@ 0x70
 8000724:	6878      	ldr	r0, [r7, #4]
 8000726:	f7ff fe52 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x72);
 800072a:	2172      	movs	r1, #114	@ 0x72
 800072c:	6878      	ldr	r0, [r7, #4]
 800072e:	f7ff fe4e 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x36);
 8000732:	2136      	movs	r1, #54	@ 0x36
 8000734:	6878      	ldr	r0, [r7, #4]
 8000736:	f7ff fe4a 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x37);
 800073a:	2137      	movs	r1, #55	@ 0x37
 800073c:	6878      	ldr	r0, [r7, #4]
 800073e:	f7ff fe46 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x6F);
 8000742:	216f      	movs	r1, #111	@ 0x6f
 8000744:	6878      	ldr	r0, [r7, #4]
 8000746:	f7ff fe42 	bl	80003ce <GC9A01_write_byte>

	write_command(config,0xF2);
 800074a:	21f2      	movs	r1, #242	@ 0xf2
 800074c:	6878      	ldr	r0, [r7, #4]
 800074e:	f7ff fdf5 	bl	800033c <write_command>
	GC9A01_write_byte(config,0x45);
 8000752:	2145      	movs	r1, #69	@ 0x45
 8000754:	6878      	ldr	r0, [r7, #4]
 8000756:	f7ff fe3a 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x09);
 800075a:	2109      	movs	r1, #9
 800075c:	6878      	ldr	r0, [r7, #4]
 800075e:	f7ff fe36 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x08);
 8000762:	2108      	movs	r1, #8
 8000764:	6878      	ldr	r0, [r7, #4]
 8000766:	f7ff fe32 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x08);
 800076a:	2108      	movs	r1, #8
 800076c:	6878      	ldr	r0, [r7, #4]
 800076e:	f7ff fe2e 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x26);
 8000772:	2126      	movs	r1, #38	@ 0x26
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	f7ff fe2a 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x2A);
 800077a:	212a      	movs	r1, #42	@ 0x2a
 800077c:	6878      	ldr	r0, [r7, #4]
 800077e:	f7ff fe26 	bl	80003ce <GC9A01_write_byte>

	write_command(config,0xF3);
 8000782:	21f3      	movs	r1, #243	@ 0xf3
 8000784:	6878      	ldr	r0, [r7, #4]
 8000786:	f7ff fdd9 	bl	800033c <write_command>
	GC9A01_write_byte(config,0x43);
 800078a:	2143      	movs	r1, #67	@ 0x43
 800078c:	6878      	ldr	r0, [r7, #4]
 800078e:	f7ff fe1e 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x70);
 8000792:	2170      	movs	r1, #112	@ 0x70
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f7ff fe1a 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x72);
 800079a:	2172      	movs	r1, #114	@ 0x72
 800079c:	6878      	ldr	r0, [r7, #4]
 800079e:	f7ff fe16 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x36);
 80007a2:	2136      	movs	r1, #54	@ 0x36
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f7ff fe12 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x37);
 80007aa:	2137      	movs	r1, #55	@ 0x37
 80007ac:	6878      	ldr	r0, [r7, #4]
 80007ae:	f7ff fe0e 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x6F);
 80007b2:	216f      	movs	r1, #111	@ 0x6f
 80007b4:	6878      	ldr	r0, [r7, #4]
 80007b6:	f7ff fe0a 	bl	80003ce <GC9A01_write_byte>

	write_command(config,0xED);
 80007ba:	21ed      	movs	r1, #237	@ 0xed
 80007bc:	6878      	ldr	r0, [r7, #4]
 80007be:	f7ff fdbd 	bl	800033c <write_command>
	GC9A01_write_byte(config,0x1B);
 80007c2:	211b      	movs	r1, #27
 80007c4:	6878      	ldr	r0, [r7, #4]
 80007c6:	f7ff fe02 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x0B);
 80007ca:	210b      	movs	r1, #11
 80007cc:	6878      	ldr	r0, [r7, #4]
 80007ce:	f7ff fdfe 	bl	80003ce <GC9A01_write_byte>

	write_command(config,0xAE);
 80007d2:	21ae      	movs	r1, #174	@ 0xae
 80007d4:	6878      	ldr	r0, [r7, #4]
 80007d6:	e003      	b.n	80007e0 <GC9A01_Init+0x3a4>
 80007d8:	43160000 	.word	0x43160000
 80007dc:	42f00000 	.word	0x42f00000
 80007e0:	f7ff fdac 	bl	800033c <write_command>
	GC9A01_write_byte(config,0x77);
 80007e4:	2177      	movs	r1, #119	@ 0x77
 80007e6:	6878      	ldr	r0, [r7, #4]
 80007e8:	f7ff fdf1 	bl	80003ce <GC9A01_write_byte>

	write_command(config,0xCD);
 80007ec:	21cd      	movs	r1, #205	@ 0xcd
 80007ee:	6878      	ldr	r0, [r7, #4]
 80007f0:	f7ff fda4 	bl	800033c <write_command>
	GC9A01_write_byte(config,0x63);
 80007f4:	2163      	movs	r1, #99	@ 0x63
 80007f6:	6878      	ldr	r0, [r7, #4]
 80007f8:	f7ff fde9 	bl	80003ce <GC9A01_write_byte>

	write_command(config,0x70);
 80007fc:	2170      	movs	r1, #112	@ 0x70
 80007fe:	6878      	ldr	r0, [r7, #4]
 8000800:	f7ff fd9c 	bl	800033c <write_command>
	GC9A01_write_byte(config,0x07);
 8000804:	2107      	movs	r1, #7
 8000806:	6878      	ldr	r0, [r7, #4]
 8000808:	f7ff fde1 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x07);
 800080c:	2107      	movs	r1, #7
 800080e:	6878      	ldr	r0, [r7, #4]
 8000810:	f7ff fddd 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x04);
 8000814:	2104      	movs	r1, #4
 8000816:	6878      	ldr	r0, [r7, #4]
 8000818:	f7ff fdd9 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x0E);
 800081c:	210e      	movs	r1, #14
 800081e:	6878      	ldr	r0, [r7, #4]
 8000820:	f7ff fdd5 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x0F);
 8000824:	210f      	movs	r1, #15
 8000826:	6878      	ldr	r0, [r7, #4]
 8000828:	f7ff fdd1 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x09);
 800082c:	2109      	movs	r1, #9
 800082e:	6878      	ldr	r0, [r7, #4]
 8000830:	f7ff fdcd 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x07);
 8000834:	2107      	movs	r1, #7
 8000836:	6878      	ldr	r0, [r7, #4]
 8000838:	f7ff fdc9 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x08);
 800083c:	2108      	movs	r1, #8
 800083e:	6878      	ldr	r0, [r7, #4]
 8000840:	f7ff fdc5 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x03);
 8000844:	2103      	movs	r1, #3
 8000846:	6878      	ldr	r0, [r7, #4]
 8000848:	f7ff fdc1 	bl	80003ce <GC9A01_write_byte>

	write_command(config,0xE8);
 800084c:	21e8      	movs	r1, #232	@ 0xe8
 800084e:	6878      	ldr	r0, [r7, #4]
 8000850:	f7ff fd74 	bl	800033c <write_command>
	GC9A01_write_byte(config,0x34);
 8000854:	2134      	movs	r1, #52	@ 0x34
 8000856:	6878      	ldr	r0, [r7, #4]
 8000858:	f7ff fdb9 	bl	80003ce <GC9A01_write_byte>

	write_command(config,0x62);
 800085c:	2162      	movs	r1, #98	@ 0x62
 800085e:	6878      	ldr	r0, [r7, #4]
 8000860:	f7ff fd6c 	bl	800033c <write_command>
	GC9A01_write_byte(config,0x18);
 8000864:	2118      	movs	r1, #24
 8000866:	6878      	ldr	r0, [r7, #4]
 8000868:	f7ff fdb1 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x0D);
 800086c:	210d      	movs	r1, #13
 800086e:	6878      	ldr	r0, [r7, #4]
 8000870:	f7ff fdad 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x71);
 8000874:	2171      	movs	r1, #113	@ 0x71
 8000876:	6878      	ldr	r0, [r7, #4]
 8000878:	f7ff fda9 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0xED);
 800087c:	21ed      	movs	r1, #237	@ 0xed
 800087e:	6878      	ldr	r0, [r7, #4]
 8000880:	f7ff fda5 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x70);
 8000884:	2170      	movs	r1, #112	@ 0x70
 8000886:	6878      	ldr	r0, [r7, #4]
 8000888:	f7ff fda1 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x70);
 800088c:	2170      	movs	r1, #112	@ 0x70
 800088e:	6878      	ldr	r0, [r7, #4]
 8000890:	f7ff fd9d 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x18);
 8000894:	2118      	movs	r1, #24
 8000896:	6878      	ldr	r0, [r7, #4]
 8000898:	f7ff fd99 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x0F);
 800089c:	210f      	movs	r1, #15
 800089e:	6878      	ldr	r0, [r7, #4]
 80008a0:	f7ff fd95 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x71);
 80008a4:	2171      	movs	r1, #113	@ 0x71
 80008a6:	6878      	ldr	r0, [r7, #4]
 80008a8:	f7ff fd91 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0xEF);
 80008ac:	21ef      	movs	r1, #239	@ 0xef
 80008ae:	6878      	ldr	r0, [r7, #4]
 80008b0:	f7ff fd8d 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x70);
 80008b4:	2170      	movs	r1, #112	@ 0x70
 80008b6:	6878      	ldr	r0, [r7, #4]
 80008b8:	f7ff fd89 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x70);
 80008bc:	2170      	movs	r1, #112	@ 0x70
 80008be:	6878      	ldr	r0, [r7, #4]
 80008c0:	f7ff fd85 	bl	80003ce <GC9A01_write_byte>

	write_command(config,0x63);
 80008c4:	2163      	movs	r1, #99	@ 0x63
 80008c6:	6878      	ldr	r0, [r7, #4]
 80008c8:	f7ff fd38 	bl	800033c <write_command>
	GC9A01_write_byte(config,0x18);
 80008cc:	2118      	movs	r1, #24
 80008ce:	6878      	ldr	r0, [r7, #4]
 80008d0:	f7ff fd7d 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x11);
 80008d4:	2111      	movs	r1, #17
 80008d6:	6878      	ldr	r0, [r7, #4]
 80008d8:	f7ff fd79 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x71);
 80008dc:	2171      	movs	r1, #113	@ 0x71
 80008de:	6878      	ldr	r0, [r7, #4]
 80008e0:	f7ff fd75 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0xF1);
 80008e4:	21f1      	movs	r1, #241	@ 0xf1
 80008e6:	6878      	ldr	r0, [r7, #4]
 80008e8:	f7ff fd71 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x70);
 80008ec:	2170      	movs	r1, #112	@ 0x70
 80008ee:	6878      	ldr	r0, [r7, #4]
 80008f0:	f7ff fd6d 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x70);
 80008f4:	2170      	movs	r1, #112	@ 0x70
 80008f6:	6878      	ldr	r0, [r7, #4]
 80008f8:	f7ff fd69 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x18);
 80008fc:	2118      	movs	r1, #24
 80008fe:	6878      	ldr	r0, [r7, #4]
 8000900:	f7ff fd65 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x13);
 8000904:	2113      	movs	r1, #19
 8000906:	6878      	ldr	r0, [r7, #4]
 8000908:	f7ff fd61 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x71);
 800090c:	2171      	movs	r1, #113	@ 0x71
 800090e:	6878      	ldr	r0, [r7, #4]
 8000910:	f7ff fd5d 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0xF3);
 8000914:	21f3      	movs	r1, #243	@ 0xf3
 8000916:	6878      	ldr	r0, [r7, #4]
 8000918:	f7ff fd59 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x70);
 800091c:	2170      	movs	r1, #112	@ 0x70
 800091e:	6878      	ldr	r0, [r7, #4]
 8000920:	f7ff fd55 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x70);
 8000924:	2170      	movs	r1, #112	@ 0x70
 8000926:	6878      	ldr	r0, [r7, #4]
 8000928:	f7ff fd51 	bl	80003ce <GC9A01_write_byte>

	write_command(config,0x64);
 800092c:	2164      	movs	r1, #100	@ 0x64
 800092e:	6878      	ldr	r0, [r7, #4]
 8000930:	f7ff fd04 	bl	800033c <write_command>
	GC9A01_write_byte(config,0x28);
 8000934:	2128      	movs	r1, #40	@ 0x28
 8000936:	6878      	ldr	r0, [r7, #4]
 8000938:	f7ff fd49 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x29);
 800093c:	2129      	movs	r1, #41	@ 0x29
 800093e:	6878      	ldr	r0, [r7, #4]
 8000940:	f7ff fd45 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0xF1);
 8000944:	21f1      	movs	r1, #241	@ 0xf1
 8000946:	6878      	ldr	r0, [r7, #4]
 8000948:	f7ff fd41 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x01);
 800094c:	2101      	movs	r1, #1
 800094e:	6878      	ldr	r0, [r7, #4]
 8000950:	f7ff fd3d 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0xF1);
 8000954:	21f1      	movs	r1, #241	@ 0xf1
 8000956:	6878      	ldr	r0, [r7, #4]
 8000958:	f7ff fd39 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x00);
 800095c:	2100      	movs	r1, #0
 800095e:	6878      	ldr	r0, [r7, #4]
 8000960:	f7ff fd35 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x07);
 8000964:	2107      	movs	r1, #7
 8000966:	6878      	ldr	r0, [r7, #4]
 8000968:	f7ff fd31 	bl	80003ce <GC9A01_write_byte>

	write_command(config,0x66);
 800096c:	2166      	movs	r1, #102	@ 0x66
 800096e:	6878      	ldr	r0, [r7, #4]
 8000970:	f7ff fce4 	bl	800033c <write_command>
	GC9A01_write_byte(config,0x3C);
 8000974:	213c      	movs	r1, #60	@ 0x3c
 8000976:	6878      	ldr	r0, [r7, #4]
 8000978:	f7ff fd29 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x00);
 800097c:	2100      	movs	r1, #0
 800097e:	6878      	ldr	r0, [r7, #4]
 8000980:	f7ff fd25 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0xCD);
 8000984:	21cd      	movs	r1, #205	@ 0xcd
 8000986:	6878      	ldr	r0, [r7, #4]
 8000988:	f7ff fd21 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x67);
 800098c:	2167      	movs	r1, #103	@ 0x67
 800098e:	6878      	ldr	r0, [r7, #4]
 8000990:	f7ff fd1d 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x45);
 8000994:	2145      	movs	r1, #69	@ 0x45
 8000996:	6878      	ldr	r0, [r7, #4]
 8000998:	f7ff fd19 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x45);
 800099c:	2145      	movs	r1, #69	@ 0x45
 800099e:	6878      	ldr	r0, [r7, #4]
 80009a0:	f7ff fd15 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x10);
 80009a4:	2110      	movs	r1, #16
 80009a6:	6878      	ldr	r0, [r7, #4]
 80009a8:	f7ff fd11 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x00);
 80009ac:	2100      	movs	r1, #0
 80009ae:	6878      	ldr	r0, [r7, #4]
 80009b0:	f7ff fd0d 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x00);
 80009b4:	2100      	movs	r1, #0
 80009b6:	6878      	ldr	r0, [r7, #4]
 80009b8:	f7ff fd09 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x00);
 80009bc:	2100      	movs	r1, #0
 80009be:	6878      	ldr	r0, [r7, #4]
 80009c0:	f7ff fd05 	bl	80003ce <GC9A01_write_byte>

	write_command(config,0x67);
 80009c4:	2167      	movs	r1, #103	@ 0x67
 80009c6:	6878      	ldr	r0, [r7, #4]
 80009c8:	f7ff fcb8 	bl	800033c <write_command>
	GC9A01_write_byte(config,0x00);
 80009cc:	2100      	movs	r1, #0
 80009ce:	6878      	ldr	r0, [r7, #4]
 80009d0:	f7ff fcfd 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x3C);
 80009d4:	213c      	movs	r1, #60	@ 0x3c
 80009d6:	6878      	ldr	r0, [r7, #4]
 80009d8:	f7ff fcf9 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x00);
 80009dc:	2100      	movs	r1, #0
 80009de:	6878      	ldr	r0, [r7, #4]
 80009e0:	f7ff fcf5 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x00);
 80009e4:	2100      	movs	r1, #0
 80009e6:	6878      	ldr	r0, [r7, #4]
 80009e8:	f7ff fcf1 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x00);
 80009ec:	2100      	movs	r1, #0
 80009ee:	6878      	ldr	r0, [r7, #4]
 80009f0:	f7ff fced 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x01);
 80009f4:	2101      	movs	r1, #1
 80009f6:	6878      	ldr	r0, [r7, #4]
 80009f8:	f7ff fce9 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x54);
 80009fc:	2154      	movs	r1, #84	@ 0x54
 80009fe:	6878      	ldr	r0, [r7, #4]
 8000a00:	f7ff fce5 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x10);
 8000a04:	2110      	movs	r1, #16
 8000a06:	6878      	ldr	r0, [r7, #4]
 8000a08:	f7ff fce1 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x32);
 8000a0c:	2132      	movs	r1, #50	@ 0x32
 8000a0e:	6878      	ldr	r0, [r7, #4]
 8000a10:	f7ff fcdd 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x98);
 8000a14:	2198      	movs	r1, #152	@ 0x98
 8000a16:	6878      	ldr	r0, [r7, #4]
 8000a18:	f7ff fcd9 	bl	80003ce <GC9A01_write_byte>

	write_command(config,0x74);
 8000a1c:	2174      	movs	r1, #116	@ 0x74
 8000a1e:	6878      	ldr	r0, [r7, #4]
 8000a20:	f7ff fc8c 	bl	800033c <write_command>
	GC9A01_write_byte(config,0x10);
 8000a24:	2110      	movs	r1, #16
 8000a26:	6878      	ldr	r0, [r7, #4]
 8000a28:	f7ff fcd1 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x85);
 8000a2c:	2185      	movs	r1, #133	@ 0x85
 8000a2e:	6878      	ldr	r0, [r7, #4]
 8000a30:	f7ff fccd 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x80);
 8000a34:	2180      	movs	r1, #128	@ 0x80
 8000a36:	6878      	ldr	r0, [r7, #4]
 8000a38:	f7ff fcc9 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x00);
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	6878      	ldr	r0, [r7, #4]
 8000a40:	f7ff fcc5 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x00);
 8000a44:	2100      	movs	r1, #0
 8000a46:	6878      	ldr	r0, [r7, #4]
 8000a48:	f7ff fcc1 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x4E);
 8000a4c:	214e      	movs	r1, #78	@ 0x4e
 8000a4e:	6878      	ldr	r0, [r7, #4]
 8000a50:	f7ff fcbd 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x00);
 8000a54:	2100      	movs	r1, #0
 8000a56:	6878      	ldr	r0, [r7, #4]
 8000a58:	f7ff fcb9 	bl	80003ce <GC9A01_write_byte>

	write_command(config,0x98);
 8000a5c:	2198      	movs	r1, #152	@ 0x98
 8000a5e:	6878      	ldr	r0, [r7, #4]
 8000a60:	f7ff fc6c 	bl	800033c <write_command>
	GC9A01_write_byte(config,0x3e);
 8000a64:	213e      	movs	r1, #62	@ 0x3e
 8000a66:	6878      	ldr	r0, [r7, #4]
 8000a68:	f7ff fcb1 	bl	80003ce <GC9A01_write_byte>
	GC9A01_write_byte(config,0x07);
 8000a6c:	2107      	movs	r1, #7
 8000a6e:	6878      	ldr	r0, [r7, #4]
 8000a70:	f7ff fcad 	bl	80003ce <GC9A01_write_byte>

	write_command(config,0x35);
 8000a74:	2135      	movs	r1, #53	@ 0x35
 8000a76:	6878      	ldr	r0, [r7, #4]
 8000a78:	f7ff fc60 	bl	800033c <write_command>
	write_command(config,0x21);
 8000a7c:	2121      	movs	r1, #33	@ 0x21
 8000a7e:	6878      	ldr	r0, [r7, #4]
 8000a80:	f7ff fc5c 	bl	800033c <write_command>

	write_command(config,0x11);
 8000a84:	2111      	movs	r1, #17
 8000a86:	6878      	ldr	r0, [r7, #4]
 8000a88:	f7ff fc58 	bl	800033c <write_command>
    Delay_milli(120);
 8000a8c:	ed1f 0aad 	vldr	s0, [pc, #-692]	@ 80007dc <GC9A01_Init+0x3a0>
 8000a90:	f7ff fbc8 	bl	8000224 <Delay_milli>
    write_command(config,0x29);
 8000a94:	2129      	movs	r1, #41	@ 0x29
 8000a96:	6878      	ldr	r0, [r7, #4]
 8000a98:	f7ff fc50 	bl	800033c <write_command>
    Delay_milli(20);
 8000a9c:	eeb3 0a04 	vmov.f32	s0, #52	@ 0x41a00000  20.0
 8000aa0:	f7ff fbc0 	bl	8000224 <Delay_milli>




}
 8000aa4:	bf00      	nop
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000aac <GC9A01_SetAddressWindow>:

/** Set an address window (inclusive X0..X1, Y0..Y1) ready for RAM write */
void GC9A01_SetAddressWindow(GC9A01_Config *config,
		uint16_t x0, uint16_t y0,
		uint16_t x1, uint16_t y1)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b086      	sub	sp, #24
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	60f8      	str	r0, [r7, #12]
 8000ab4:	4608      	mov	r0, r1
 8000ab6:	4611      	mov	r1, r2
 8000ab8:	461a      	mov	r2, r3
 8000aba:	4603      	mov	r3, r0
 8000abc:	817b      	strh	r3, [r7, #10]
 8000abe:	460b      	mov	r3, r1
 8000ac0:	813b      	strh	r3, [r7, #8]
 8000ac2:	4613      	mov	r3, r2
 8000ac4:	80fb      	strh	r3, [r7, #6]
	uint8_t buf[4];
	write_command(config, 0x2A);           // CASET
 8000ac6:	212a      	movs	r1, #42	@ 0x2a
 8000ac8:	68f8      	ldr	r0, [r7, #12]
 8000aca:	f7ff fc37 	bl	800033c <write_command>
	buf[0] = x0 >> 8; buf[1] = x0 & 0xFF;
 8000ace:	897b      	ldrh	r3, [r7, #10]
 8000ad0:	0a1b      	lsrs	r3, r3, #8
 8000ad2:	b29b      	uxth	r3, r3
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	753b      	strb	r3, [r7, #20]
 8000ad8:	897b      	ldrh	r3, [r7, #10]
 8000ada:	b2db      	uxtb	r3, r3
 8000adc:	757b      	strb	r3, [r7, #21]
	buf[2] = x1 >> 8; buf[3] = x1 & 0xFF;
 8000ade:	88fb      	ldrh	r3, [r7, #6]
 8000ae0:	0a1b      	lsrs	r3, r3, #8
 8000ae2:	b29b      	uxth	r3, r3
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	75bb      	strb	r3, [r7, #22]
 8000ae8:	88fb      	ldrh	r3, [r7, #6]
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	75fb      	strb	r3, [r7, #23]
	GC9A01_Write_Data(config, buf, 4);
 8000aee:	f107 0314 	add.w	r3, r7, #20
 8000af2:	2204      	movs	r2, #4
 8000af4:	4619      	mov	r1, r3
 8000af6:	68f8      	ldr	r0, [r7, #12]
 8000af8:	f7ff fc79 	bl	80003ee <GC9A01_Write_Data>

	write_command(config, 0x2B);           // RASET
 8000afc:	212b      	movs	r1, #43	@ 0x2b
 8000afe:	68f8      	ldr	r0, [r7, #12]
 8000b00:	f7ff fc1c 	bl	800033c <write_command>
	buf[0] = y0 >> 8; buf[1] = y0 & 0xFF;
 8000b04:	893b      	ldrh	r3, [r7, #8]
 8000b06:	0a1b      	lsrs	r3, r3, #8
 8000b08:	b29b      	uxth	r3, r3
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	753b      	strb	r3, [r7, #20]
 8000b0e:	893b      	ldrh	r3, [r7, #8]
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	757b      	strb	r3, [r7, #21]
	buf[2] = y1 >> 8; buf[3] = y1 & 0xFF;
 8000b14:	8c3b      	ldrh	r3, [r7, #32]
 8000b16:	0a1b      	lsrs	r3, r3, #8
 8000b18:	b29b      	uxth	r3, r3
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	75bb      	strb	r3, [r7, #22]
 8000b1e:	8c3b      	ldrh	r3, [r7, #32]
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	75fb      	strb	r3, [r7, #23]
	GC9A01_Write_Data(config, buf, 4);
 8000b24:	f107 0314 	add.w	r3, r7, #20
 8000b28:	2204      	movs	r2, #4
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	68f8      	ldr	r0, [r7, #12]
 8000b2e:	f7ff fc5e 	bl	80003ee <GC9A01_Write_Data>

	write_command(config, 0x2C);           // RAMWR
 8000b32:	212c      	movs	r1, #44	@ 0x2c
 8000b34:	68f8      	ldr	r0, [r7, #12]
 8000b36:	f7ff fc01 	bl	800033c <write_command>
}
 8000b3a:	bf00      	nop
 8000b3c:	3718      	adds	r7, #24
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <GC9A01_DrawImage>:
	GC9A01_Drite_Data16_Repeat(config, rgb, (uint32_t)GC9A01_WIDTH * GC9A01_HEIGHT);
}

void GC9A01_DrawImage  (GC9A01_Config *config, uint16_t x, uint16_t y,
		uint16_t w, uint16_t h, const uint16_t *img)
{
 8000b42:	b580      	push	{r7, lr}
 8000b44:	b08a      	sub	sp, #40	@ 0x28
 8000b46:	af02      	add	r7, sp, #8
 8000b48:	60f8      	str	r0, [r7, #12]
 8000b4a:	4608      	mov	r0, r1
 8000b4c:	4611      	mov	r1, r2
 8000b4e:	461a      	mov	r2, r3
 8000b50:	4603      	mov	r3, r0
 8000b52:	817b      	strh	r3, [r7, #10]
 8000b54:	460b      	mov	r3, r1
 8000b56:	813b      	strh	r3, [r7, #8]
 8000b58:	4613      	mov	r3, r2
 8000b5a:	80fb      	strh	r3, [r7, #6]
	if((x >= GC9A01_WIDTH) || (y >= GC9A01_HEIGHT)) return;
 8000b5c:	897b      	ldrh	r3, [r7, #10]
 8000b5e:	2bef      	cmp	r3, #239	@ 0xef
 8000b60:	d85e      	bhi.n	8000c20 <GC9A01_DrawImage+0xde>
 8000b62:	893b      	ldrh	r3, [r7, #8]
 8000b64:	2bef      	cmp	r3, #239	@ 0xef
 8000b66:	d85b      	bhi.n	8000c20 <GC9A01_DrawImage+0xde>
	if((x + w - 1) >= GC9A01_WIDTH)  w = GC9A01_WIDTH  - x;
 8000b68:	897a      	ldrh	r2, [r7, #10]
 8000b6a:	88fb      	ldrh	r3, [r7, #6]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	3b01      	subs	r3, #1
 8000b70:	2bef      	cmp	r3, #239	@ 0xef
 8000b72:	d903      	bls.n	8000b7c <GC9A01_DrawImage+0x3a>
 8000b74:	897b      	ldrh	r3, [r7, #10]
 8000b76:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8000b7a:	80fb      	strh	r3, [r7, #6]
	if((y + h - 1) >= GC9A01_HEIGHT) h = GC9A01_HEIGHT - y;
 8000b7c:	893a      	ldrh	r2, [r7, #8]
 8000b7e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000b80:	4413      	add	r3, r2
 8000b82:	3b01      	subs	r3, #1
 8000b84:	2bef      	cmp	r3, #239	@ 0xef
 8000b86:	d903      	bls.n	8000b90 <GC9A01_DrawImage+0x4e>
 8000b88:	893b      	ldrh	r3, [r7, #8]
 8000b8a:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8000b8e:	853b      	strh	r3, [r7, #40]	@ 0x28

	GC9A01_SetAddressWindow(config, x, y, x + w - 1, y + h - 1);
 8000b90:	897a      	ldrh	r2, [r7, #10]
 8000b92:	88fb      	ldrh	r3, [r7, #6]
 8000b94:	4413      	add	r3, r2
 8000b96:	b29b      	uxth	r3, r3
 8000b98:	3b01      	subs	r3, #1
 8000b9a:	b298      	uxth	r0, r3
 8000b9c:	893a      	ldrh	r2, [r7, #8]
 8000b9e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000ba0:	4413      	add	r3, r2
 8000ba2:	b29b      	uxth	r3, r3
 8000ba4:	3b01      	subs	r3, #1
 8000ba6:	b29b      	uxth	r3, r3
 8000ba8:	893a      	ldrh	r2, [r7, #8]
 8000baa:	8979      	ldrh	r1, [r7, #10]
 8000bac:	9300      	str	r3, [sp, #0]
 8000bae:	4603      	mov	r3, r0
 8000bb0:	68f8      	ldr	r0, [r7, #12]
 8000bb2:	f7ff ff7b 	bl	8000aac <GC9A01_SetAddressWindow>

	SPI_NSS_Low(config->SPI_Port);
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f002 ffbf 	bl	8003b3e <SPI_NSS_Low>
	DC_D(config);
 8000bc0:	68f8      	ldr	r0, [r7, #12]
 8000bc2:	f7ff fb8b 	bl	80002dc <DC_D>
	for(uint32_t i = 0, size = (uint32_t)w * h; i < size; ++i) {
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61fb      	str	r3, [r7, #28]
 8000bca:	88fb      	ldrh	r3, [r7, #6]
 8000bcc:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000bce:	fb02 f303 	mul.w	r3, r2, r3
 8000bd2:	61bb      	str	r3, [r7, #24]
 8000bd4:	e01a      	b.n	8000c0c <GC9A01_DrawImage+0xca>
		uint16_t c = img[i];
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	005b      	lsls	r3, r3, #1
 8000bda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000bdc:	4413      	add	r3, r2
 8000bde:	881b      	ldrh	r3, [r3, #0]
 8000be0:	82fb      	strh	r3, [r7, #22]
		SPI_TRX_Byte(config->SPI_Port, c >> 8);
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	8afb      	ldrh	r3, [r7, #22]
 8000be8:	0a1b      	lsrs	r3, r3, #8
 8000bea:	b29b      	uxth	r3, r3
 8000bec:	4619      	mov	r1, r3
 8000bee:	4610      	mov	r0, r2
 8000bf0:	f002 ff5c 	bl	8003aac <SPI_TRX_Byte>
		SPI_TRX_Byte(config->SPI_Port, c & 0xFF);
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	8afa      	ldrh	r2, [r7, #22]
 8000bfa:	b2d2      	uxtb	r2, r2
 8000bfc:	b292      	uxth	r2, r2
 8000bfe:	4611      	mov	r1, r2
 8000c00:	4618      	mov	r0, r3
 8000c02:	f002 ff53 	bl	8003aac <SPI_TRX_Byte>
	for(uint32_t i = 0, size = (uint32_t)w * h; i < size; ++i) {
 8000c06:	69fb      	ldr	r3, [r7, #28]
 8000c08:	3301      	adds	r3, #1
 8000c0a:	61fb      	str	r3, [r7, #28]
 8000c0c:	69fa      	ldr	r2, [r7, #28]
 8000c0e:	69bb      	ldr	r3, [r7, #24]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d3e0      	bcc.n	8000bd6 <GC9A01_DrawImage+0x94>
	}
	SPI_NSS_High(config->SPI_Port);
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f002 ff80 	bl	8003b1e <SPI_NSS_High>
 8000c1e:	e000      	b.n	8000c22 <GC9A01_DrawImage+0xe0>
	if((x >= GC9A01_WIDTH) || (y >= GC9A01_HEIGHT)) return;
 8000c20:	bf00      	nop
}
 8000c22:	3720      	adds	r7, #32
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	db0b      	blt.n	8000c52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	f003 021f 	and.w	r2, r3, #31
 8000c40:	4907      	ldr	r1, [pc, #28]	@ (8000c60 <__NVIC_EnableIRQ+0x38>)
 8000c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c46:	095b      	lsrs	r3, r3, #5
 8000c48:	2001      	movs	r0, #1
 8000c4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c52:	bf00      	nop
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	e000e100 	.word	0xe000e100

08000c64 <DMA1_Stream0_IRQHandler>:
volatile uint32_t DMA_LISR = 0;
volatile uint32_t DMA_HISR = 0;


void DMA1_Stream0_IRQHandler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
	DMA_LISR = DMA1 -> LISR;
 8000c68:	4b60      	ldr	r3, [pc, #384]	@ (8000dec <DMA1_Stream0_IRQHandler+0x188>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a60      	ldr	r2, [pc, #384]	@ (8000df0 <DMA1_Stream0_IRQHandler+0x18c>)
 8000c6e:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF0)
 8000c70:	4b5f      	ldr	r3, [pc, #380]	@ (8000df0 <DMA1_Stream0_IRQHandler+0x18c>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f003 0301 	and.w	r3, r3, #1
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d015      	beq.n	8000ca8 <DMA1_Stream0_IRQHandler+0x44>
	{
		if(__DMA1_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 8000c7c:	4b5d      	ldr	r3, [pc, #372]	@ (8000df4 <DMA1_Stream0_IRQHandler+0x190>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	69db      	ldr	r3, [r3, #28]
 8000c82:	2280      	movs	r2, #128	@ 0x80
 8000c84:	4013      	ands	r3, r2
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d00e      	beq.n	8000ca8 <DMA1_Stream0_IRQHandler+0x44>
		{
		    if (__DMA1_Stream0_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8000c8a:	4b5a      	ldr	r3, [pc, #360]	@ (8000df4 <DMA1_Stream0_IRQHandler+0x190>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d009      	beq.n	8000ca8 <DMA1_Stream0_IRQHandler+0x44>
		    {
		    	__DMA1_Stream0_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8000c94:	4b57      	ldr	r3, [pc, #348]	@ (8000df4 <DMA1_Stream0_IRQHandler+0x190>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000c9a:	4798      	blx	r3
		    	DMA1 -> LIFCR |= DMA_LIFCR_CFEIF0;
 8000c9c:	4b53      	ldr	r3, [pc, #332]	@ (8000dec <DMA1_Stream0_IRQHandler+0x188>)
 8000c9e:	689b      	ldr	r3, [r3, #8]
 8000ca0:	4a52      	ldr	r2, [pc, #328]	@ (8000dec <DMA1_Stream0_IRQHandler+0x188>)
 8000ca2:	f043 0301 	orr.w	r3, r3, #1
 8000ca6:	6093      	str	r3, [r2, #8]
		    }
		}
	}

	if(DMA_LISR & DMA_LISR_DMEIF0)
 8000ca8:	4b51      	ldr	r3, [pc, #324]	@ (8000df0 <DMA1_Stream0_IRQHandler+0x18c>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f003 0304 	and.w	r3, r3, #4
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d015      	beq.n	8000ce0 <DMA1_Stream0_IRQHandler+0x7c>
	{
		if(__DMA1_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 8000cb4:	4b4f      	ldr	r3, [pc, #316]	@ (8000df4 <DMA1_Stream0_IRQHandler+0x190>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	69db      	ldr	r3, [r3, #28]
 8000cba:	2202      	movs	r2, #2
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d00e      	beq.n	8000ce0 <DMA1_Stream0_IRQHandler+0x7c>
		{
		    if (__DMA1_Stream0_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8000cc2:	4b4c      	ldr	r3, [pc, #304]	@ (8000df4 <DMA1_Stream0_IRQHandler+0x190>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d009      	beq.n	8000ce0 <DMA1_Stream0_IRQHandler+0x7c>
		    {
		    	__DMA1_Stream0_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8000ccc:	4b49      	ldr	r3, [pc, #292]	@ (8000df4 <DMA1_Stream0_IRQHandler+0x190>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd2:	4798      	blx	r3
		    	DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF0;
 8000cd4:	4b45      	ldr	r3, [pc, #276]	@ (8000dec <DMA1_Stream0_IRQHandler+0x188>)
 8000cd6:	689b      	ldr	r3, [r3, #8]
 8000cd8:	4a44      	ldr	r2, [pc, #272]	@ (8000dec <DMA1_Stream0_IRQHandler+0x188>)
 8000cda:	f043 0304 	orr.w	r3, r3, #4
 8000cde:	6093      	str	r3, [r2, #8]
		    }
		}
	}

	if(DMA_LISR & DMA_LISR_TEIF0)
 8000ce0:	4b43      	ldr	r3, [pc, #268]	@ (8000df0 <DMA1_Stream0_IRQHandler+0x18c>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f003 0308 	and.w	r3, r3, #8
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d015      	beq.n	8000d18 <DMA1_Stream0_IRQHandler+0xb4>
	{
		if(__DMA1_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 8000cec:	4b41      	ldr	r3, [pc, #260]	@ (8000df4 <DMA1_Stream0_IRQHandler+0x190>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	69db      	ldr	r3, [r3, #28]
 8000cf2:	2204      	movs	r2, #4
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d00e      	beq.n	8000d18 <DMA1_Stream0_IRQHandler+0xb4>
		{
		    if (__DMA1_Stream0_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8000cfa:	4b3e      	ldr	r3, [pc, #248]	@ (8000df4 <DMA1_Stream0_IRQHandler+0x190>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d009      	beq.n	8000d18 <DMA1_Stream0_IRQHandler+0xb4>
		    {
		    	__DMA1_Stream0_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8000d04:	4b3b      	ldr	r3, [pc, #236]	@ (8000df4 <DMA1_Stream0_IRQHandler+0x190>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d0a:	4798      	blx	r3
		    	DMA1 -> LIFCR |= DMA_LIFCR_CTEIF0;
 8000d0c:	4b37      	ldr	r3, [pc, #220]	@ (8000dec <DMA1_Stream0_IRQHandler+0x188>)
 8000d0e:	689b      	ldr	r3, [r3, #8]
 8000d10:	4a36      	ldr	r2, [pc, #216]	@ (8000dec <DMA1_Stream0_IRQHandler+0x188>)
 8000d12:	f043 0308 	orr.w	r3, r3, #8
 8000d16:	6093      	str	r3, [r2, #8]
		    }
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF0)
 8000d18:	4b35      	ldr	r3, [pc, #212]	@ (8000df0 <DMA1_Stream0_IRQHandler+0x18c>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f003 0310 	and.w	r3, r3, #16
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d02d      	beq.n	8000d80 <DMA1_Stream0_IRQHandler+0x11c>
	{
		if(__DMA1_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 8000d24:	4b33      	ldr	r3, [pc, #204]	@ (8000df4 <DMA1_Stream0_IRQHandler+0x190>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	69db      	ldr	r3, [r3, #28]
 8000d2a:	2208      	movs	r2, #8
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d026      	beq.n	8000d80 <DMA1_Stream0_IRQHandler+0x11c>
		{
		    if (__DMA1_Stream0_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8000d32:	4b30      	ldr	r3, [pc, #192]	@ (8000df4 <DMA1_Stream0_IRQHandler+0x190>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d021      	beq.n	8000d80 <DMA1_Stream0_IRQHandler+0x11c>
		    {
		    	__DMA1_Stream0_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000d3c:	4b2d      	ldr	r3, [pc, #180]	@ (8000df4 <DMA1_Stream0_IRQHandler+0x190>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d42:	4798      	blx	r3
		    	DMA1 -> LIFCR |= DMA_LIFCR_CHTIF0;
 8000d44:	4b29      	ldr	r3, [pc, #164]	@ (8000dec <DMA1_Stream0_IRQHandler+0x188>)
 8000d46:	689b      	ldr	r3, [r3, #8]
 8000d48:	4a28      	ldr	r2, [pc, #160]	@ (8000dec <DMA1_Stream0_IRQHandler+0x188>)
 8000d4a:	f043 0310 	orr.w	r3, r3, #16
 8000d4e:	6093      	str	r3, [r2, #8]

		    	if(__DMA1_Stream0_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000d50:	4b28      	ldr	r3, [pc, #160]	@ (8000df4 <DMA1_Stream0_IRQHandler+0x190>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d56:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d110      	bne.n	8000d80 <DMA1_Stream0_IRQHandler+0x11c>
		    	{
		    		if((__DMA1_Stream0_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000d5e:	4b25      	ldr	r3, [pc, #148]	@ (8000df4 <DMA1_Stream0_IRQHandler+0x190>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d004      	beq.n	8000d78 <DMA1_Stream0_IRQHandler+0x114>
		    		{
		    			__DMA1_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000d6e:	4b21      	ldr	r3, [pc, #132]	@ (8000df4 <DMA1_Stream0_IRQHandler+0x190>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000d74:	4798      	blx	r3
 8000d76:	e003      	b.n	8000d80 <DMA1_Stream0_IRQHandler+0x11c>
		    		}
		    		else
		    		{
		    			__DMA1_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000d78:	4b1e      	ldr	r3, [pc, #120]	@ (8000df4 <DMA1_Stream0_IRQHandler+0x190>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000d7e:	4798      	blx	r3
		    	}
		    }
		}
	}

	if(DMA_LISR & DMA_LISR_TCIF0)
 8000d80:	4b1b      	ldr	r3, [pc, #108]	@ (8000df0 <DMA1_Stream0_IRQHandler+0x18c>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f003 0320 	and.w	r3, r3, #32
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d02d      	beq.n	8000de8 <DMA1_Stream0_IRQHandler+0x184>
	{
		if(__DMA1_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 8000d8c:	4b19      	ldr	r3, [pc, #100]	@ (8000df4 <DMA1_Stream0_IRQHandler+0x190>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	69db      	ldr	r3, [r3, #28]
 8000d92:	2210      	movs	r2, #16
 8000d94:	4013      	ands	r3, r2
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d026      	beq.n	8000de8 <DMA1_Stream0_IRQHandler+0x184>
		{
		    if (__DMA1_Stream0_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8000d9a:	4b16      	ldr	r3, [pc, #88]	@ (8000df4 <DMA1_Stream0_IRQHandler+0x190>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d021      	beq.n	8000de8 <DMA1_Stream0_IRQHandler+0x184>
		    {
		    	__DMA1_Stream0_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000da4:	4b13      	ldr	r3, [pc, #76]	@ (8000df4 <DMA1_Stream0_IRQHandler+0x190>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000daa:	4798      	blx	r3
		    	DMA1 -> LIFCR |= DMA_LIFCR_CTCIF0;
 8000dac:	4b0f      	ldr	r3, [pc, #60]	@ (8000dec <DMA1_Stream0_IRQHandler+0x188>)
 8000dae:	689b      	ldr	r3, [r3, #8]
 8000db0:	4a0e      	ldr	r2, [pc, #56]	@ (8000dec <DMA1_Stream0_IRQHandler+0x188>)
 8000db2:	f043 0320 	orr.w	r3, r3, #32
 8000db6:	6093      	str	r3, [r2, #8]

		    	if(__DMA1_Stream0_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000db8:	4b0e      	ldr	r3, [pc, #56]	@ (8000df4 <DMA1_Stream0_IRQHandler+0x190>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000dbe:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d110      	bne.n	8000de8 <DMA1_Stream0_IRQHandler+0x184>
		    	{
		    		if((__DMA1_Stream0_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000dc6:	4b0b      	ldr	r3, [pc, #44]	@ (8000df4 <DMA1_Stream0_IRQHandler+0x190>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d004      	beq.n	8000de0 <DMA1_Stream0_IRQHandler+0x17c>
		    		{
		    			__DMA1_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000dd6:	4b07      	ldr	r3, [pc, #28]	@ (8000df4 <DMA1_Stream0_IRQHandler+0x190>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000ddc:	4798      	blx	r3
		    	}
		    }
		}

	}
}
 8000dde:	e003      	b.n	8000de8 <DMA1_Stream0_IRQHandler+0x184>
		    			__DMA1_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000de0:	4b04      	ldr	r3, [pc, #16]	@ (8000df4 <DMA1_Stream0_IRQHandler+0x190>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000de6:	4798      	blx	r3
}
 8000de8:	bf00      	nop
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	40026000 	.word	0x40026000
 8000df0:	2001c260 	.word	0x2001c260
 8000df4:	2001c220 	.word	0x2001c220

08000df8 <DMA1_Stream1_IRQHandler>:

void DMA1_Stream1_IRQHandler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
	DMA_LISR = DMA1 -> LISR;
 8000dfc:	4b4f      	ldr	r3, [pc, #316]	@ (8000f3c <DMA1_Stream1_IRQHandler+0x144>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a4f      	ldr	r2, [pc, #316]	@ (8000f40 <DMA1_Stream1_IRQHandler+0x148>)
 8000e02:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF1)
 8000e04:	4b4e      	ldr	r3, [pc, #312]	@ (8000f40 <DMA1_Stream1_IRQHandler+0x148>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d00e      	beq.n	8000e2e <DMA1_Stream1_IRQHandler+0x36>
	{
	    if (__DMA1_Stream1_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8000e10:	4b4c      	ldr	r3, [pc, #304]	@ (8000f44 <DMA1_Stream1_IRQHandler+0x14c>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d009      	beq.n	8000e2e <DMA1_Stream1_IRQHandler+0x36>
	    {
	    	__DMA1_Stream1_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8000e1a:	4b4a      	ldr	r3, [pc, #296]	@ (8000f44 <DMA1_Stream1_IRQHandler+0x14c>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e20:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CFEIF1;
 8000e22:	4b46      	ldr	r3, [pc, #280]	@ (8000f3c <DMA1_Stream1_IRQHandler+0x144>)
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	4a45      	ldr	r2, [pc, #276]	@ (8000f3c <DMA1_Stream1_IRQHandler+0x144>)
 8000e28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e2c:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_DMEIF1)
 8000e2e:	4b44      	ldr	r3, [pc, #272]	@ (8000f40 <DMA1_Stream1_IRQHandler+0x148>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d00e      	beq.n	8000e58 <DMA1_Stream1_IRQHandler+0x60>
	{
	    if (__DMA1_Stream1_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8000e3a:	4b42      	ldr	r3, [pc, #264]	@ (8000f44 <DMA1_Stream1_IRQHandler+0x14c>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d009      	beq.n	8000e58 <DMA1_Stream1_IRQHandler+0x60>
	    {
	    	__DMA1_Stream1_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8000e44:	4b3f      	ldr	r3, [pc, #252]	@ (8000f44 <DMA1_Stream1_IRQHandler+0x14c>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e4a:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF1;
 8000e4c:	4b3b      	ldr	r3, [pc, #236]	@ (8000f3c <DMA1_Stream1_IRQHandler+0x144>)
 8000e4e:	689b      	ldr	r3, [r3, #8]
 8000e50:	4a3a      	ldr	r2, [pc, #232]	@ (8000f3c <DMA1_Stream1_IRQHandler+0x144>)
 8000e52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e56:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_TEIF1)
 8000e58:	4b39      	ldr	r3, [pc, #228]	@ (8000f40 <DMA1_Stream1_IRQHandler+0x148>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d00e      	beq.n	8000e82 <DMA1_Stream1_IRQHandler+0x8a>
	{
	    if (__DMA1_Stream1_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8000e64:	4b37      	ldr	r3, [pc, #220]	@ (8000f44 <DMA1_Stream1_IRQHandler+0x14c>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d009      	beq.n	8000e82 <DMA1_Stream1_IRQHandler+0x8a>
	    {
	    	__DMA1_Stream1_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8000e6e:	4b35      	ldr	r3, [pc, #212]	@ (8000f44 <DMA1_Stream1_IRQHandler+0x14c>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e74:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CTEIF1;
 8000e76:	4b31      	ldr	r3, [pc, #196]	@ (8000f3c <DMA1_Stream1_IRQHandler+0x144>)
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	4a30      	ldr	r2, [pc, #192]	@ (8000f3c <DMA1_Stream1_IRQHandler+0x144>)
 8000e7c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e80:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_HTIF1)
 8000e82:	4b2f      	ldr	r3, [pc, #188]	@ (8000f40 <DMA1_Stream1_IRQHandler+0x148>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d026      	beq.n	8000edc <DMA1_Stream1_IRQHandler+0xe4>
	{
	    if (__DMA1_Stream1_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8000e8e:	4b2d      	ldr	r3, [pc, #180]	@ (8000f44 <DMA1_Stream1_IRQHandler+0x14c>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d021      	beq.n	8000edc <DMA1_Stream1_IRQHandler+0xe4>
	    {
	    	__DMA1_Stream1_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000e98:	4b2a      	ldr	r3, [pc, #168]	@ (8000f44 <DMA1_Stream1_IRQHandler+0x14c>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e9e:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CHTIF1;
 8000ea0:	4b26      	ldr	r3, [pc, #152]	@ (8000f3c <DMA1_Stream1_IRQHandler+0x144>)
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	4a25      	ldr	r2, [pc, #148]	@ (8000f3c <DMA1_Stream1_IRQHandler+0x144>)
 8000ea6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000eaa:	6093      	str	r3, [r2, #8]

	    	if(__DMA1_Stream1_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000eac:	4b25      	ldr	r3, [pc, #148]	@ (8000f44 <DMA1_Stream1_IRQHandler+0x14c>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000eb2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d110      	bne.n	8000edc <DMA1_Stream1_IRQHandler+0xe4>
	    	{
	    		if((__DMA1_Stream1_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000eba:	4b22      	ldr	r3, [pc, #136]	@ (8000f44 <DMA1_Stream1_IRQHandler+0x14c>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d004      	beq.n	8000ed4 <DMA1_Stream1_IRQHandler+0xdc>
	    		{
	    			__DMA1_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000eca:	4b1e      	ldr	r3, [pc, #120]	@ (8000f44 <DMA1_Stream1_IRQHandler+0x14c>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000ed0:	4798      	blx	r3
 8000ed2:	e003      	b.n	8000edc <DMA1_Stream1_IRQHandler+0xe4>
	    		}
	    		else
	    		{
	    			__DMA1_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000ed4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f44 <DMA1_Stream1_IRQHandler+0x14c>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000eda:	4798      	blx	r3
	    		}
	    	}
	    }
	}

	if(DMA_LISR & DMA_LISR_TCIF1)
 8000edc:	4b18      	ldr	r3, [pc, #96]	@ (8000f40 <DMA1_Stream1_IRQHandler+0x148>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d026      	beq.n	8000f36 <DMA1_Stream1_IRQHandler+0x13e>
	{
	    if (__DMA1_Stream1_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8000ee8:	4b16      	ldr	r3, [pc, #88]	@ (8000f44 <DMA1_Stream1_IRQHandler+0x14c>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d021      	beq.n	8000f36 <DMA1_Stream1_IRQHandler+0x13e>
	    {
	    	__DMA1_Stream1_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000ef2:	4b14      	ldr	r3, [pc, #80]	@ (8000f44 <DMA1_Stream1_IRQHandler+0x14c>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ef8:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CTCIF1;
 8000efa:	4b10      	ldr	r3, [pc, #64]	@ (8000f3c <DMA1_Stream1_IRQHandler+0x144>)
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	4a0f      	ldr	r2, [pc, #60]	@ (8000f3c <DMA1_Stream1_IRQHandler+0x144>)
 8000f00:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000f04:	6093      	str	r3, [r2, #8]

	    	if(__DMA1_Stream1_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000f06:	4b0f      	ldr	r3, [pc, #60]	@ (8000f44 <DMA1_Stream1_IRQHandler+0x14c>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f0c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d110      	bne.n	8000f36 <DMA1_Stream1_IRQHandler+0x13e>
	    	{
	    		if((__DMA1_Stream1_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8000f14:	4b0b      	ldr	r3, [pc, #44]	@ (8000f44 <DMA1_Stream1_IRQHandler+0x14c>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d004      	beq.n	8000f2e <DMA1_Stream1_IRQHandler+0x136>
	    		{
	    			__DMA1_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8000f24:	4b07      	ldr	r3, [pc, #28]	@ (8000f44 <DMA1_Stream1_IRQHandler+0x14c>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000f2a:	4798      	blx	r3
	    			__DMA1_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
	    		}
	    	}
	    }
	}
}
 8000f2c:	e003      	b.n	8000f36 <DMA1_Stream1_IRQHandler+0x13e>
	    			__DMA1_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8000f2e:	4b05      	ldr	r3, [pc, #20]	@ (8000f44 <DMA1_Stream1_IRQHandler+0x14c>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f34:	4798      	blx	r3
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40026000 	.word	0x40026000
 8000f40:	2001c260 	.word	0x2001c260
 8000f44:	2001c224 	.word	0x2001c224

08000f48 <DMA1_Stream2_IRQHandler>:


void DMA1_Stream2_IRQHandler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
	DMA_LISR = DMA1 -> LISR;
 8000f4c:	4b4f      	ldr	r3, [pc, #316]	@ (800108c <DMA1_Stream2_IRQHandler+0x144>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a4f      	ldr	r2, [pc, #316]	@ (8001090 <DMA1_Stream2_IRQHandler+0x148>)
 8000f52:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF2)
 8000f54:	4b4e      	ldr	r3, [pc, #312]	@ (8001090 <DMA1_Stream2_IRQHandler+0x148>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d00e      	beq.n	8000f7e <DMA1_Stream2_IRQHandler+0x36>
	{
	    if (__DMA1_Stream2_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8000f60:	4b4c      	ldr	r3, [pc, #304]	@ (8001094 <DMA1_Stream2_IRQHandler+0x14c>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d009      	beq.n	8000f7e <DMA1_Stream2_IRQHandler+0x36>
	    {
	    	__DMA1_Stream2_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8000f6a:	4b4a      	ldr	r3, [pc, #296]	@ (8001094 <DMA1_Stream2_IRQHandler+0x14c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f70:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CFEIF2;
 8000f72:	4b46      	ldr	r3, [pc, #280]	@ (800108c <DMA1_Stream2_IRQHandler+0x144>)
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	4a45      	ldr	r2, [pc, #276]	@ (800108c <DMA1_Stream2_IRQHandler+0x144>)
 8000f78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f7c:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_DMEIF2)
 8000f7e:	4b44      	ldr	r3, [pc, #272]	@ (8001090 <DMA1_Stream2_IRQHandler+0x148>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d00e      	beq.n	8000fa8 <DMA1_Stream2_IRQHandler+0x60>
	{
	    if (__DMA1_Stream2_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8000f8a:	4b42      	ldr	r3, [pc, #264]	@ (8001094 <DMA1_Stream2_IRQHandler+0x14c>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d009      	beq.n	8000fa8 <DMA1_Stream2_IRQHandler+0x60>
	    {
	    	__DMA1_Stream2_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8000f94:	4b3f      	ldr	r3, [pc, #252]	@ (8001094 <DMA1_Stream2_IRQHandler+0x14c>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f9a:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF2;
 8000f9c:	4b3b      	ldr	r3, [pc, #236]	@ (800108c <DMA1_Stream2_IRQHandler+0x144>)
 8000f9e:	689b      	ldr	r3, [r3, #8]
 8000fa0:	4a3a      	ldr	r2, [pc, #232]	@ (800108c <DMA1_Stream2_IRQHandler+0x144>)
 8000fa2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000fa6:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_TEIF2)
 8000fa8:	4b39      	ldr	r3, [pc, #228]	@ (8001090 <DMA1_Stream2_IRQHandler+0x148>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d00e      	beq.n	8000fd2 <DMA1_Stream2_IRQHandler+0x8a>
	{
	    if (__DMA1_Stream2_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8000fb4:	4b37      	ldr	r3, [pc, #220]	@ (8001094 <DMA1_Stream2_IRQHandler+0x14c>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d009      	beq.n	8000fd2 <DMA1_Stream2_IRQHandler+0x8a>
	    {
	    	__DMA1_Stream2_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8000fbe:	4b35      	ldr	r3, [pc, #212]	@ (8001094 <DMA1_Stream2_IRQHandler+0x14c>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fc4:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CTEIF2;
 8000fc6:	4b31      	ldr	r3, [pc, #196]	@ (800108c <DMA1_Stream2_IRQHandler+0x144>)
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	4a30      	ldr	r2, [pc, #192]	@ (800108c <DMA1_Stream2_IRQHandler+0x144>)
 8000fcc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000fd0:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_HTIF2)
 8000fd2:	4b2f      	ldr	r3, [pc, #188]	@ (8001090 <DMA1_Stream2_IRQHandler+0x148>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d026      	beq.n	800102c <DMA1_Stream2_IRQHandler+0xe4>
	{
	    if (__DMA1_Stream2_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8000fde:	4b2d      	ldr	r3, [pc, #180]	@ (8001094 <DMA1_Stream2_IRQHandler+0x14c>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d021      	beq.n	800102c <DMA1_Stream2_IRQHandler+0xe4>
	    {
	    	__DMA1_Stream2_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8000fe8:	4b2a      	ldr	r3, [pc, #168]	@ (8001094 <DMA1_Stream2_IRQHandler+0x14c>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fee:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CHTIF2;
 8000ff0:	4b26      	ldr	r3, [pc, #152]	@ (800108c <DMA1_Stream2_IRQHandler+0x144>)
 8000ff2:	689b      	ldr	r3, [r3, #8]
 8000ff4:	4a25      	ldr	r2, [pc, #148]	@ (800108c <DMA1_Stream2_IRQHandler+0x144>)
 8000ff6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000ffa:	6093      	str	r3, [r2, #8]

	    	if(__DMA1_Stream2_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8000ffc:	4b25      	ldr	r3, [pc, #148]	@ (8001094 <DMA1_Stream2_IRQHandler+0x14c>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001002:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001006:	4293      	cmp	r3, r2
 8001008:	d110      	bne.n	800102c <DMA1_Stream2_IRQHandler+0xe4>
	    	{
	    		if((__DMA1_Stream2_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800100a:	4b22      	ldr	r3, [pc, #136]	@ (8001094 <DMA1_Stream2_IRQHandler+0x14c>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d004      	beq.n	8001024 <DMA1_Stream2_IRQHandler+0xdc>
	    		{
	    			__DMA1_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800101a:	4b1e      	ldr	r3, [pc, #120]	@ (8001094 <DMA1_Stream2_IRQHandler+0x14c>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001020:	4798      	blx	r3
 8001022:	e003      	b.n	800102c <DMA1_Stream2_IRQHandler+0xe4>
	    		}
	    		else
	    		{
	    			__DMA1_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001024:	4b1b      	ldr	r3, [pc, #108]	@ (8001094 <DMA1_Stream2_IRQHandler+0x14c>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800102a:	4798      	blx	r3
	    		}
	    	}
	    }
	}

	if(DMA_LISR & DMA_LISR_TCIF2)
 800102c:	4b18      	ldr	r3, [pc, #96]	@ (8001090 <DMA1_Stream2_IRQHandler+0x148>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001034:	2b00      	cmp	r3, #0
 8001036:	d026      	beq.n	8001086 <DMA1_Stream2_IRQHandler+0x13e>
	{
	    if (__DMA1_Stream2_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001038:	4b16      	ldr	r3, [pc, #88]	@ (8001094 <DMA1_Stream2_IRQHandler+0x14c>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800103e:	2b00      	cmp	r3, #0
 8001040:	d021      	beq.n	8001086 <DMA1_Stream2_IRQHandler+0x13e>
	    {
	    	__DMA1_Stream2_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001042:	4b14      	ldr	r3, [pc, #80]	@ (8001094 <DMA1_Stream2_IRQHandler+0x14c>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001048:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CTCIF2;
 800104a:	4b10      	ldr	r3, [pc, #64]	@ (800108c <DMA1_Stream2_IRQHandler+0x144>)
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	4a0f      	ldr	r2, [pc, #60]	@ (800108c <DMA1_Stream2_IRQHandler+0x144>)
 8001050:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001054:	6093      	str	r3, [r2, #8]

	    	if(__DMA1_Stream2_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001056:	4b0f      	ldr	r3, [pc, #60]	@ (8001094 <DMA1_Stream2_IRQHandler+0x14c>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800105c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001060:	4293      	cmp	r3, r2
 8001062:	d110      	bne.n	8001086 <DMA1_Stream2_IRQHandler+0x13e>
	    	{
	    		if((__DMA1_Stream2_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001064:	4b0b      	ldr	r3, [pc, #44]	@ (8001094 <DMA1_Stream2_IRQHandler+0x14c>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001070:	2b00      	cmp	r3, #0
 8001072:	d004      	beq.n	800107e <DMA1_Stream2_IRQHandler+0x136>
	    		{
	    			__DMA1_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001074:	4b07      	ldr	r3, [pc, #28]	@ (8001094 <DMA1_Stream2_IRQHandler+0x14c>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800107a:	4798      	blx	r3
	    			__DMA1_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
	    		}
	    	}
	    }
	}
}
 800107c:	e003      	b.n	8001086 <DMA1_Stream2_IRQHandler+0x13e>
	    			__DMA1_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800107e:	4b05      	ldr	r3, [pc, #20]	@ (8001094 <DMA1_Stream2_IRQHandler+0x14c>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001084:	4798      	blx	r3
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40026000 	.word	0x40026000
 8001090:	2001c260 	.word	0x2001c260
 8001094:	2001c228 	.word	0x2001c228

08001098 <DMA1_Stream3_IRQHandler>:

void DMA1_Stream3_IRQHandler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
	DMA_LISR = DMA1 -> LISR;
 800109c:	4b4f      	ldr	r3, [pc, #316]	@ (80011dc <DMA1_Stream3_IRQHandler+0x144>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a4f      	ldr	r2, [pc, #316]	@ (80011e0 <DMA1_Stream3_IRQHandler+0x148>)
 80010a2:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF3)
 80010a4:	4b4e      	ldr	r3, [pc, #312]	@ (80011e0 <DMA1_Stream3_IRQHandler+0x148>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d00e      	beq.n	80010ce <DMA1_Stream3_IRQHandler+0x36>
	{
	    if (__DMA1_Stream3_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80010b0:	4b4c      	ldr	r3, [pc, #304]	@ (80011e4 <DMA1_Stream3_IRQHandler+0x14c>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d009      	beq.n	80010ce <DMA1_Stream3_IRQHandler+0x36>
	    {
	    	__DMA1_Stream3_Config__ ->ISR_Routines.FIFO_Error_ISR();
 80010ba:	4b4a      	ldr	r3, [pc, #296]	@ (80011e4 <DMA1_Stream3_IRQHandler+0x14c>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80010c0:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CFEIF3;
 80010c2:	4b46      	ldr	r3, [pc, #280]	@ (80011dc <DMA1_Stream3_IRQHandler+0x144>)
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	4a45      	ldr	r2, [pc, #276]	@ (80011dc <DMA1_Stream3_IRQHandler+0x144>)
 80010c8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80010cc:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_DMEIF3)
 80010ce:	4b44      	ldr	r3, [pc, #272]	@ (80011e0 <DMA1_Stream3_IRQHandler+0x148>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d00e      	beq.n	80010f8 <DMA1_Stream3_IRQHandler+0x60>
	{
	    if (__DMA1_Stream3_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 80010da:	4b42      	ldr	r3, [pc, #264]	@ (80011e4 <DMA1_Stream3_IRQHandler+0x14c>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d009      	beq.n	80010f8 <DMA1_Stream3_IRQHandler+0x60>
	    {
	    	__DMA1_Stream3_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 80010e4:	4b3f      	ldr	r3, [pc, #252]	@ (80011e4 <DMA1_Stream3_IRQHandler+0x14c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ea:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF3;
 80010ec:	4b3b      	ldr	r3, [pc, #236]	@ (80011dc <DMA1_Stream3_IRQHandler+0x144>)
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	4a3a      	ldr	r2, [pc, #232]	@ (80011dc <DMA1_Stream3_IRQHandler+0x144>)
 80010f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80010f6:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_TEIF3)
 80010f8:	4b39      	ldr	r3, [pc, #228]	@ (80011e0 <DMA1_Stream3_IRQHandler+0x148>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001100:	2b00      	cmp	r3, #0
 8001102:	d00e      	beq.n	8001122 <DMA1_Stream3_IRQHandler+0x8a>
	{
	    if (__DMA1_Stream3_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001104:	4b37      	ldr	r3, [pc, #220]	@ (80011e4 <DMA1_Stream3_IRQHandler+0x14c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800110a:	2b00      	cmp	r3, #0
 800110c:	d009      	beq.n	8001122 <DMA1_Stream3_IRQHandler+0x8a>
	    {
	    	__DMA1_Stream3_Config__ ->ISR_Routines.Transfer_Error_ISR();
 800110e:	4b35      	ldr	r3, [pc, #212]	@ (80011e4 <DMA1_Stream3_IRQHandler+0x14c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001114:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CTEIF3;
 8001116:	4b31      	ldr	r3, [pc, #196]	@ (80011dc <DMA1_Stream3_IRQHandler+0x144>)
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	4a30      	ldr	r2, [pc, #192]	@ (80011dc <DMA1_Stream3_IRQHandler+0x144>)
 800111c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001120:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_HTIF3)
 8001122:	4b2f      	ldr	r3, [pc, #188]	@ (80011e0 <DMA1_Stream3_IRQHandler+0x148>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d026      	beq.n	800117c <DMA1_Stream3_IRQHandler+0xe4>
	{
	    if (__DMA1_Stream3_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 800112e:	4b2d      	ldr	r3, [pc, #180]	@ (80011e4 <DMA1_Stream3_IRQHandler+0x14c>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001134:	2b00      	cmp	r3, #0
 8001136:	d021      	beq.n	800117c <DMA1_Stream3_IRQHandler+0xe4>
	    {
	    	__DMA1_Stream3_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001138:	4b2a      	ldr	r3, [pc, #168]	@ (80011e4 <DMA1_Stream3_IRQHandler+0x14c>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800113e:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CHTIF3;
 8001140:	4b26      	ldr	r3, [pc, #152]	@ (80011dc <DMA1_Stream3_IRQHandler+0x144>)
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	4a25      	ldr	r2, [pc, #148]	@ (80011dc <DMA1_Stream3_IRQHandler+0x144>)
 8001146:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800114a:	6093      	str	r3, [r2, #8]

	    	if(__DMA1_Stream3_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800114c:	4b25      	ldr	r3, [pc, #148]	@ (80011e4 <DMA1_Stream3_IRQHandler+0x14c>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001152:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001156:	4293      	cmp	r3, r2
 8001158:	d110      	bne.n	800117c <DMA1_Stream3_IRQHandler+0xe4>
	    	{
	    		if((__DMA1_Stream3_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800115a:	4b22      	ldr	r3, [pc, #136]	@ (80011e4 <DMA1_Stream3_IRQHandler+0x14c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d004      	beq.n	8001174 <DMA1_Stream3_IRQHandler+0xdc>
	    		{
	    			__DMA1_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800116a:	4b1e      	ldr	r3, [pc, #120]	@ (80011e4 <DMA1_Stream3_IRQHandler+0x14c>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001170:	4798      	blx	r3
 8001172:	e003      	b.n	800117c <DMA1_Stream3_IRQHandler+0xe4>
	    		}
	    		else
	    		{
	    			__DMA1_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001174:	4b1b      	ldr	r3, [pc, #108]	@ (80011e4 <DMA1_Stream3_IRQHandler+0x14c>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800117a:	4798      	blx	r3
	    		}
	    	}
	    }
	}

	if(DMA_LISR & DMA_LISR_TCIF3)
 800117c:	4b18      	ldr	r3, [pc, #96]	@ (80011e0 <DMA1_Stream3_IRQHandler+0x148>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001184:	2b00      	cmp	r3, #0
 8001186:	d026      	beq.n	80011d6 <DMA1_Stream3_IRQHandler+0x13e>
	{
	    if (__DMA1_Stream3_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001188:	4b16      	ldr	r3, [pc, #88]	@ (80011e4 <DMA1_Stream3_IRQHandler+0x14c>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800118e:	2b00      	cmp	r3, #0
 8001190:	d021      	beq.n	80011d6 <DMA1_Stream3_IRQHandler+0x13e>
	    {
	    	__DMA1_Stream3_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001192:	4b14      	ldr	r3, [pc, #80]	@ (80011e4 <DMA1_Stream3_IRQHandler+0x14c>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001198:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_LIFCR_CTCIF3;
 800119a:	4b10      	ldr	r3, [pc, #64]	@ (80011dc <DMA1_Stream3_IRQHandler+0x144>)
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	4a0f      	ldr	r2, [pc, #60]	@ (80011dc <DMA1_Stream3_IRQHandler+0x144>)
 80011a0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80011a4:	6093      	str	r3, [r2, #8]

	    	if(__DMA1_Stream3_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80011a6:	4b0f      	ldr	r3, [pc, #60]	@ (80011e4 <DMA1_Stream3_IRQHandler+0x14c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011ac:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d110      	bne.n	80011d6 <DMA1_Stream3_IRQHandler+0x13e>
	    	{
	    		if((__DMA1_Stream3_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80011b4:	4b0b      	ldr	r3, [pc, #44]	@ (80011e4 <DMA1_Stream3_IRQHandler+0x14c>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d004      	beq.n	80011ce <DMA1_Stream3_IRQHandler+0x136>
	    		{
	    			__DMA1_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80011c4:	4b07      	ldr	r3, [pc, #28]	@ (80011e4 <DMA1_Stream3_IRQHandler+0x14c>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80011ca:	4798      	blx	r3
	    			__DMA1_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
	    		}
	    	}
	    }
	}
}
 80011cc:	e003      	b.n	80011d6 <DMA1_Stream3_IRQHandler+0x13e>
	    			__DMA1_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80011ce:	4b05      	ldr	r3, [pc, #20]	@ (80011e4 <DMA1_Stream3_IRQHandler+0x14c>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011d4:	4798      	blx	r3
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40026000 	.word	0x40026000
 80011e0:	2001c260 	.word	0x2001c260
 80011e4:	2001c22c 	.word	0x2001c22c

080011e8 <DMA1_Stream4_IRQHandler>:

void DMA1_Stream4_IRQHandler(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
	DMA_HISR = DMA1 -> HISR;
 80011ec:	4b4f      	ldr	r3, [pc, #316]	@ (800132c <DMA1_Stream4_IRQHandler+0x144>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	4a4f      	ldr	r2, [pc, #316]	@ (8001330 <DMA1_Stream4_IRQHandler+0x148>)
 80011f2:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF4)
 80011f4:	4b4e      	ldr	r3, [pc, #312]	@ (8001330 <DMA1_Stream4_IRQHandler+0x148>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f003 0301 	and.w	r3, r3, #1
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d00e      	beq.n	800121e <DMA1_Stream4_IRQHandler+0x36>
	{
	    if (__DMA1_Stream4_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001200:	4b4c      	ldr	r3, [pc, #304]	@ (8001334 <DMA1_Stream4_IRQHandler+0x14c>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001206:	2b00      	cmp	r3, #0
 8001208:	d009      	beq.n	800121e <DMA1_Stream4_IRQHandler+0x36>
	    {
	    	__DMA1_Stream4_Config__ ->ISR_Routines.FIFO_Error_ISR();
 800120a:	4b4a      	ldr	r3, [pc, #296]	@ (8001334 <DMA1_Stream4_IRQHandler+0x14c>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001210:	4798      	blx	r3
	    	DMA1 -> LIFCR |= DMA_HIFCR_CFEIF5;
 8001212:	4b46      	ldr	r3, [pc, #280]	@ (800132c <DMA1_Stream4_IRQHandler+0x144>)
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	4a45      	ldr	r2, [pc, #276]	@ (800132c <DMA1_Stream4_IRQHandler+0x144>)
 8001218:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800121c:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_HISR & DMA_HISR_DMEIF4)
 800121e:	4b44      	ldr	r3, [pc, #272]	@ (8001330 <DMA1_Stream4_IRQHandler+0x148>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 0304 	and.w	r3, r3, #4
 8001226:	2b00      	cmp	r3, #0
 8001228:	d00e      	beq.n	8001248 <DMA1_Stream4_IRQHandler+0x60>
	{
	    if (__DMA1_Stream4_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 800122a:	4b42      	ldr	r3, [pc, #264]	@ (8001334 <DMA1_Stream4_IRQHandler+0x14c>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001230:	2b00      	cmp	r3, #0
 8001232:	d009      	beq.n	8001248 <DMA1_Stream4_IRQHandler+0x60>
	    {
	    	__DMA1_Stream4_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001234:	4b3f      	ldr	r3, [pc, #252]	@ (8001334 <DMA1_Stream4_IRQHandler+0x14c>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800123a:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF4;
 800123c:	4b3b      	ldr	r3, [pc, #236]	@ (800132c <DMA1_Stream4_IRQHandler+0x144>)
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	4a3a      	ldr	r2, [pc, #232]	@ (800132c <DMA1_Stream4_IRQHandler+0x144>)
 8001242:	f043 0304 	orr.w	r3, r3, #4
 8001246:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_TEIF4)
 8001248:	4b39      	ldr	r3, [pc, #228]	@ (8001330 <DMA1_Stream4_IRQHandler+0x148>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f003 0308 	and.w	r3, r3, #8
 8001250:	2b00      	cmp	r3, #0
 8001252:	d00e      	beq.n	8001272 <DMA1_Stream4_IRQHandler+0x8a>
	{
	    if (__DMA1_Stream4_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001254:	4b37      	ldr	r3, [pc, #220]	@ (8001334 <DMA1_Stream4_IRQHandler+0x14c>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800125a:	2b00      	cmp	r3, #0
 800125c:	d009      	beq.n	8001272 <DMA1_Stream4_IRQHandler+0x8a>
	    {
	    	__DMA1_Stream4_Config__ ->ISR_Routines.Transfer_Error_ISR();
 800125e:	4b35      	ldr	r3, [pc, #212]	@ (8001334 <DMA1_Stream4_IRQHandler+0x14c>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001264:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CTEIF4;
 8001266:	4b31      	ldr	r3, [pc, #196]	@ (800132c <DMA1_Stream4_IRQHandler+0x144>)
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	4a30      	ldr	r2, [pc, #192]	@ (800132c <DMA1_Stream4_IRQHandler+0x144>)
 800126c:	f043 0308 	orr.w	r3, r3, #8
 8001270:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_HTIF4)
 8001272:	4b2f      	ldr	r3, [pc, #188]	@ (8001330 <DMA1_Stream4_IRQHandler+0x148>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 0310 	and.w	r3, r3, #16
 800127a:	2b00      	cmp	r3, #0
 800127c:	d026      	beq.n	80012cc <DMA1_Stream4_IRQHandler+0xe4>
	{
	    if (__DMA1_Stream4_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 800127e:	4b2d      	ldr	r3, [pc, #180]	@ (8001334 <DMA1_Stream4_IRQHandler+0x14c>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001284:	2b00      	cmp	r3, #0
 8001286:	d021      	beq.n	80012cc <DMA1_Stream4_IRQHandler+0xe4>
	    {
	    	__DMA1_Stream4_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001288:	4b2a      	ldr	r3, [pc, #168]	@ (8001334 <DMA1_Stream4_IRQHandler+0x14c>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800128e:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CHTIF4;
 8001290:	4b26      	ldr	r3, [pc, #152]	@ (800132c <DMA1_Stream4_IRQHandler+0x144>)
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	4a25      	ldr	r2, [pc, #148]	@ (800132c <DMA1_Stream4_IRQHandler+0x144>)
 8001296:	f043 0310 	orr.w	r3, r3, #16
 800129a:	60d3      	str	r3, [r2, #12]

	    	if(__DMA1_Stream4_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800129c:	4b25      	ldr	r3, [pc, #148]	@ (8001334 <DMA1_Stream4_IRQHandler+0x14c>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012a2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d110      	bne.n	80012cc <DMA1_Stream4_IRQHandler+0xe4>
	    	{
	    		if((__DMA1_Stream4_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80012aa:	4b22      	ldr	r3, [pc, #136]	@ (8001334 <DMA1_Stream4_IRQHandler+0x14c>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d004      	beq.n	80012c4 <DMA1_Stream4_IRQHandler+0xdc>
	    		{
	    			__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80012ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001334 <DMA1_Stream4_IRQHandler+0x14c>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80012c0:	4798      	blx	r3
 80012c2:	e003      	b.n	80012cc <DMA1_Stream4_IRQHandler+0xe4>
	    		}
	    		else
	    		{
	    			__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80012c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001334 <DMA1_Stream4_IRQHandler+0x14c>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012ca:	4798      	blx	r3
	    		}
	    	}
	    }
	}

	if(DMA_HISR & DMA_HISR_TCIF4)
 80012cc:	4b18      	ldr	r3, [pc, #96]	@ (8001330 <DMA1_Stream4_IRQHandler+0x148>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f003 0320 	and.w	r3, r3, #32
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d026      	beq.n	8001326 <DMA1_Stream4_IRQHandler+0x13e>
	{
	    if (__DMA1_Stream4_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 80012d8:	4b16      	ldr	r3, [pc, #88]	@ (8001334 <DMA1_Stream4_IRQHandler+0x14c>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d021      	beq.n	8001326 <DMA1_Stream4_IRQHandler+0x13e>
	    {
	    	__DMA1_Stream4_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80012e2:	4b14      	ldr	r3, [pc, #80]	@ (8001334 <DMA1_Stream4_IRQHandler+0x14c>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012e8:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CTCIF4;
 80012ea:	4b10      	ldr	r3, [pc, #64]	@ (800132c <DMA1_Stream4_IRQHandler+0x144>)
 80012ec:	68db      	ldr	r3, [r3, #12]
 80012ee:	4a0f      	ldr	r2, [pc, #60]	@ (800132c <DMA1_Stream4_IRQHandler+0x144>)
 80012f0:	f043 0320 	orr.w	r3, r3, #32
 80012f4:	60d3      	str	r3, [r2, #12]

	    	if(__DMA1_Stream4_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80012f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001334 <DMA1_Stream4_IRQHandler+0x14c>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012fc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001300:	4293      	cmp	r3, r2
 8001302:	d110      	bne.n	8001326 <DMA1_Stream4_IRQHandler+0x13e>
	    	{
	    		if((__DMA1_Stream4_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001304:	4b0b      	ldr	r3, [pc, #44]	@ (8001334 <DMA1_Stream4_IRQHandler+0x14c>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d004      	beq.n	800131e <DMA1_Stream4_IRQHandler+0x136>
	    		{
	    			__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001314:	4b07      	ldr	r3, [pc, #28]	@ (8001334 <DMA1_Stream4_IRQHandler+0x14c>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800131a:	4798      	blx	r3
	    			__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
	    		}
	    	}
	    }
	}
}
 800131c:	e003      	b.n	8001326 <DMA1_Stream4_IRQHandler+0x13e>
	    			__DMA1_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800131e:	4b05      	ldr	r3, [pc, #20]	@ (8001334 <DMA1_Stream4_IRQHandler+0x14c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001324:	4798      	blx	r3
}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40026000 	.word	0x40026000
 8001330:	2001c264 	.word	0x2001c264
 8001334:	2001c230 	.word	0x2001c230

08001338 <DMA1_Stream5_IRQHandler>:




void DMA1_Stream5_IRQHandler(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
	DMA_HISR = DMA1 -> HISR;
 800133c:	4b4f      	ldr	r3, [pc, #316]	@ (800147c <DMA1_Stream5_IRQHandler+0x144>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	4a4f      	ldr	r2, [pc, #316]	@ (8001480 <DMA1_Stream5_IRQHandler+0x148>)
 8001342:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF5)
 8001344:	4b4e      	ldr	r3, [pc, #312]	@ (8001480 <DMA1_Stream5_IRQHandler+0x148>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800134c:	2b00      	cmp	r3, #0
 800134e:	d00e      	beq.n	800136e <DMA1_Stream5_IRQHandler+0x36>
	{
	    if (__DMA1_Stream5_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001350:	4b4c      	ldr	r3, [pc, #304]	@ (8001484 <DMA1_Stream5_IRQHandler+0x14c>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001356:	2b00      	cmp	r3, #0
 8001358:	d009      	beq.n	800136e <DMA1_Stream5_IRQHandler+0x36>
	    {
	    	__DMA1_Stream5_Config__ ->ISR_Routines.FIFO_Error_ISR();
 800135a:	4b4a      	ldr	r3, [pc, #296]	@ (8001484 <DMA1_Stream5_IRQHandler+0x14c>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001360:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CFEIF5;
 8001362:	4b46      	ldr	r3, [pc, #280]	@ (800147c <DMA1_Stream5_IRQHandler+0x144>)
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	4a45      	ldr	r2, [pc, #276]	@ (800147c <DMA1_Stream5_IRQHandler+0x144>)
 8001368:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800136c:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_DMEIF5)
 800136e:	4b44      	ldr	r3, [pc, #272]	@ (8001480 <DMA1_Stream5_IRQHandler+0x148>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001376:	2b00      	cmp	r3, #0
 8001378:	d00e      	beq.n	8001398 <DMA1_Stream5_IRQHandler+0x60>
	{
	    if (__DMA1_Stream5_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 800137a:	4b42      	ldr	r3, [pc, #264]	@ (8001484 <DMA1_Stream5_IRQHandler+0x14c>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001380:	2b00      	cmp	r3, #0
 8001382:	d009      	beq.n	8001398 <DMA1_Stream5_IRQHandler+0x60>
	    {
	    	__DMA1_Stream5_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001384:	4b3f      	ldr	r3, [pc, #252]	@ (8001484 <DMA1_Stream5_IRQHandler+0x14c>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800138a:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF5;
 800138c:	4b3b      	ldr	r3, [pc, #236]	@ (800147c <DMA1_Stream5_IRQHandler+0x144>)
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	4a3a      	ldr	r2, [pc, #232]	@ (800147c <DMA1_Stream5_IRQHandler+0x144>)
 8001392:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001396:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_TEIF5)
 8001398:	4b39      	ldr	r3, [pc, #228]	@ (8001480 <DMA1_Stream5_IRQHandler+0x148>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d00e      	beq.n	80013c2 <DMA1_Stream5_IRQHandler+0x8a>
	{
	    if (__DMA1_Stream5_Config__ -> ISR_Routines.Transfer_Error_ISR)
 80013a4:	4b37      	ldr	r3, [pc, #220]	@ (8001484 <DMA1_Stream5_IRQHandler+0x14c>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d009      	beq.n	80013c2 <DMA1_Stream5_IRQHandler+0x8a>
	    {
	    	__DMA1_Stream5_Config__ ->ISR_Routines.Transfer_Error_ISR();
 80013ae:	4b35      	ldr	r3, [pc, #212]	@ (8001484 <DMA1_Stream5_IRQHandler+0x14c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013b4:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CTEIF5;
 80013b6:	4b31      	ldr	r3, [pc, #196]	@ (800147c <DMA1_Stream5_IRQHandler+0x144>)
 80013b8:	68db      	ldr	r3, [r3, #12]
 80013ba:	4a30      	ldr	r2, [pc, #192]	@ (800147c <DMA1_Stream5_IRQHandler+0x144>)
 80013bc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013c0:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_HTIF5)
 80013c2:	4b2f      	ldr	r3, [pc, #188]	@ (8001480 <DMA1_Stream5_IRQHandler+0x148>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d026      	beq.n	800141c <DMA1_Stream5_IRQHandler+0xe4>
	{
	    if (__DMA1_Stream5_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 80013ce:	4b2d      	ldr	r3, [pc, #180]	@ (8001484 <DMA1_Stream5_IRQHandler+0x14c>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d021      	beq.n	800141c <DMA1_Stream5_IRQHandler+0xe4>
	    {
	    	__DMA1_Stream5_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80013d8:	4b2a      	ldr	r3, [pc, #168]	@ (8001484 <DMA1_Stream5_IRQHandler+0x14c>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013de:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CHTIF5;
 80013e0:	4b26      	ldr	r3, [pc, #152]	@ (800147c <DMA1_Stream5_IRQHandler+0x144>)
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	4a25      	ldr	r2, [pc, #148]	@ (800147c <DMA1_Stream5_IRQHandler+0x144>)
 80013e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013ea:	60d3      	str	r3, [r2, #12]

	    	if(__DMA1_Stream5_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80013ec:	4b25      	ldr	r3, [pc, #148]	@ (8001484 <DMA1_Stream5_IRQHandler+0x14c>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013f2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d110      	bne.n	800141c <DMA1_Stream5_IRQHandler+0xe4>
	    	{
	    		if((__DMA1_Stream5_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80013fa:	4b22      	ldr	r3, [pc, #136]	@ (8001484 <DMA1_Stream5_IRQHandler+0x14c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d004      	beq.n	8001414 <DMA1_Stream5_IRQHandler+0xdc>
	    		{
	    			__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800140a:	4b1e      	ldr	r3, [pc, #120]	@ (8001484 <DMA1_Stream5_IRQHandler+0x14c>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001410:	4798      	blx	r3
 8001412:	e003      	b.n	800141c <DMA1_Stream5_IRQHandler+0xe4>
	    		}
	    		else
	    		{
	    			__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001414:	4b1b      	ldr	r3, [pc, #108]	@ (8001484 <DMA1_Stream5_IRQHandler+0x14c>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800141a:	4798      	blx	r3
	    		}
	    	}
	    }
	}

	if(DMA_HISR & DMA_HISR_TCIF5)
 800141c:	4b18      	ldr	r3, [pc, #96]	@ (8001480 <DMA1_Stream5_IRQHandler+0x148>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001424:	2b00      	cmp	r3, #0
 8001426:	d026      	beq.n	8001476 <DMA1_Stream5_IRQHandler+0x13e>
	{
	    if (__DMA1_Stream5_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001428:	4b16      	ldr	r3, [pc, #88]	@ (8001484 <DMA1_Stream5_IRQHandler+0x14c>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800142e:	2b00      	cmp	r3, #0
 8001430:	d021      	beq.n	8001476 <DMA1_Stream5_IRQHandler+0x13e>
	    {
	    	__DMA1_Stream5_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001432:	4b14      	ldr	r3, [pc, #80]	@ (8001484 <DMA1_Stream5_IRQHandler+0x14c>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001438:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CTCIF5;
 800143a:	4b10      	ldr	r3, [pc, #64]	@ (800147c <DMA1_Stream5_IRQHandler+0x144>)
 800143c:	68db      	ldr	r3, [r3, #12]
 800143e:	4a0f      	ldr	r2, [pc, #60]	@ (800147c <DMA1_Stream5_IRQHandler+0x144>)
 8001440:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001444:	60d3      	str	r3, [r2, #12]

	    	if(__DMA1_Stream5_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001446:	4b0f      	ldr	r3, [pc, #60]	@ (8001484 <DMA1_Stream5_IRQHandler+0x14c>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800144c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001450:	4293      	cmp	r3, r2
 8001452:	d110      	bne.n	8001476 <DMA1_Stream5_IRQHandler+0x13e>
	    	{
	    		if((__DMA1_Stream5_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001454:	4b0b      	ldr	r3, [pc, #44]	@ (8001484 <DMA1_Stream5_IRQHandler+0x14c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d004      	beq.n	800146e <DMA1_Stream5_IRQHandler+0x136>
	    		{
	    			__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001464:	4b07      	ldr	r3, [pc, #28]	@ (8001484 <DMA1_Stream5_IRQHandler+0x14c>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800146a:	4798      	blx	r3
	    			__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
	    		}
	    	}
	    }
	}
}
 800146c:	e003      	b.n	8001476 <DMA1_Stream5_IRQHandler+0x13e>
	    			__DMA1_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800146e:	4b05      	ldr	r3, [pc, #20]	@ (8001484 <DMA1_Stream5_IRQHandler+0x14c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001474:	4798      	blx	r3
}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40026000 	.word	0x40026000
 8001480:	2001c264 	.word	0x2001c264
 8001484:	2001c234 	.word	0x2001c234

08001488 <DMA1_Stream6_IRQHandler>:



void DMA1_Stream6_IRQHandler(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
	DMA_HISR = DMA1 -> HISR;
 800148c:	4b4f      	ldr	r3, [pc, #316]	@ (80015cc <DMA1_Stream6_IRQHandler+0x144>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	4a4f      	ldr	r2, [pc, #316]	@ (80015d0 <DMA1_Stream6_IRQHandler+0x148>)
 8001492:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF6)
 8001494:	4b4e      	ldr	r3, [pc, #312]	@ (80015d0 <DMA1_Stream6_IRQHandler+0x148>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d00e      	beq.n	80014be <DMA1_Stream6_IRQHandler+0x36>
	{
	    if (__DMA1_Stream6_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80014a0:	4b4c      	ldr	r3, [pc, #304]	@ (80015d4 <DMA1_Stream6_IRQHandler+0x14c>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d009      	beq.n	80014be <DMA1_Stream6_IRQHandler+0x36>
	    {
	    	__DMA1_Stream6_Config__ ->ISR_Routines.FIFO_Error_ISR();
 80014aa:	4b4a      	ldr	r3, [pc, #296]	@ (80015d4 <DMA1_Stream6_IRQHandler+0x14c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014b0:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CFEIF6;
 80014b2:	4b46      	ldr	r3, [pc, #280]	@ (80015cc <DMA1_Stream6_IRQHandler+0x144>)
 80014b4:	68db      	ldr	r3, [r3, #12]
 80014b6:	4a45      	ldr	r2, [pc, #276]	@ (80015cc <DMA1_Stream6_IRQHandler+0x144>)
 80014b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014bc:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_DMEIF6)
 80014be:	4b44      	ldr	r3, [pc, #272]	@ (80015d0 <DMA1_Stream6_IRQHandler+0x148>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d00e      	beq.n	80014e8 <DMA1_Stream6_IRQHandler+0x60>
	{
	    if (__DMA1_Stream6_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 80014ca:	4b42      	ldr	r3, [pc, #264]	@ (80015d4 <DMA1_Stream6_IRQHandler+0x14c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d009      	beq.n	80014e8 <DMA1_Stream6_IRQHandler+0x60>
	    {
	    	__DMA1_Stream6_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 80014d4:	4b3f      	ldr	r3, [pc, #252]	@ (80015d4 <DMA1_Stream6_IRQHandler+0x14c>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014da:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF6;
 80014dc:	4b3b      	ldr	r3, [pc, #236]	@ (80015cc <DMA1_Stream6_IRQHandler+0x144>)
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	4a3a      	ldr	r2, [pc, #232]	@ (80015cc <DMA1_Stream6_IRQHandler+0x144>)
 80014e2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014e6:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_TEIF6)
 80014e8:	4b39      	ldr	r3, [pc, #228]	@ (80015d0 <DMA1_Stream6_IRQHandler+0x148>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d00e      	beq.n	8001512 <DMA1_Stream6_IRQHandler+0x8a>
	{
	    if (__DMA1_Stream6_Config__ -> ISR_Routines.Transfer_Error_ISR)
 80014f4:	4b37      	ldr	r3, [pc, #220]	@ (80015d4 <DMA1_Stream6_IRQHandler+0x14c>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d009      	beq.n	8001512 <DMA1_Stream6_IRQHandler+0x8a>
	    {
	    	__DMA1_Stream6_Config__ ->ISR_Routines.Transfer_Error_ISR();
 80014fe:	4b35      	ldr	r3, [pc, #212]	@ (80015d4 <DMA1_Stream6_IRQHandler+0x14c>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001504:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CTEIF6;
 8001506:	4b31      	ldr	r3, [pc, #196]	@ (80015cc <DMA1_Stream6_IRQHandler+0x144>)
 8001508:	68db      	ldr	r3, [r3, #12]
 800150a:	4a30      	ldr	r2, [pc, #192]	@ (80015cc <DMA1_Stream6_IRQHandler+0x144>)
 800150c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001510:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_HTIF6)
 8001512:	4b2f      	ldr	r3, [pc, #188]	@ (80015d0 <DMA1_Stream6_IRQHandler+0x148>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d026      	beq.n	800156c <DMA1_Stream6_IRQHandler+0xe4>
	{
	    if (__DMA1_Stream6_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 800151e:	4b2d      	ldr	r3, [pc, #180]	@ (80015d4 <DMA1_Stream6_IRQHandler+0x14c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001524:	2b00      	cmp	r3, #0
 8001526:	d021      	beq.n	800156c <DMA1_Stream6_IRQHandler+0xe4>
	    {
	    	__DMA1_Stream6_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001528:	4b2a      	ldr	r3, [pc, #168]	@ (80015d4 <DMA1_Stream6_IRQHandler+0x14c>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800152e:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CHTIF6;
 8001530:	4b26      	ldr	r3, [pc, #152]	@ (80015cc <DMA1_Stream6_IRQHandler+0x144>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	4a25      	ldr	r2, [pc, #148]	@ (80015cc <DMA1_Stream6_IRQHandler+0x144>)
 8001536:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800153a:	60d3      	str	r3, [r2, #12]

	    	if(__DMA1_Stream6_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800153c:	4b25      	ldr	r3, [pc, #148]	@ (80015d4 <DMA1_Stream6_IRQHandler+0x14c>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001542:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001546:	4293      	cmp	r3, r2
 8001548:	d110      	bne.n	800156c <DMA1_Stream6_IRQHandler+0xe4>
	    	{
	    		if((__DMA1_Stream6_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800154a:	4b22      	ldr	r3, [pc, #136]	@ (80015d4 <DMA1_Stream6_IRQHandler+0x14c>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d004      	beq.n	8001564 <DMA1_Stream6_IRQHandler+0xdc>
	    		{
	    			__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800155a:	4b1e      	ldr	r3, [pc, #120]	@ (80015d4 <DMA1_Stream6_IRQHandler+0x14c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001560:	4798      	blx	r3
 8001562:	e003      	b.n	800156c <DMA1_Stream6_IRQHandler+0xe4>
	    		}
	    		else
	    		{
	    			__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001564:	4b1b      	ldr	r3, [pc, #108]	@ (80015d4 <DMA1_Stream6_IRQHandler+0x14c>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800156a:	4798      	blx	r3
	    		}
	    	}
	    }
	}

	if(DMA_HISR & DMA_HISR_TCIF6)
 800156c:	4b18      	ldr	r3, [pc, #96]	@ (80015d0 <DMA1_Stream6_IRQHandler+0x148>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001574:	2b00      	cmp	r3, #0
 8001576:	d026      	beq.n	80015c6 <DMA1_Stream6_IRQHandler+0x13e>
	{
	    if (__DMA1_Stream6_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001578:	4b16      	ldr	r3, [pc, #88]	@ (80015d4 <DMA1_Stream6_IRQHandler+0x14c>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800157e:	2b00      	cmp	r3, #0
 8001580:	d021      	beq.n	80015c6 <DMA1_Stream6_IRQHandler+0x13e>
	    {
	    	__DMA1_Stream6_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001582:	4b14      	ldr	r3, [pc, #80]	@ (80015d4 <DMA1_Stream6_IRQHandler+0x14c>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001588:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CTCIF6;
 800158a:	4b10      	ldr	r3, [pc, #64]	@ (80015cc <DMA1_Stream6_IRQHandler+0x144>)
 800158c:	68db      	ldr	r3, [r3, #12]
 800158e:	4a0f      	ldr	r2, [pc, #60]	@ (80015cc <DMA1_Stream6_IRQHandler+0x144>)
 8001590:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001594:	60d3      	str	r3, [r2, #12]

	    	if(__DMA1_Stream6_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001596:	4b0f      	ldr	r3, [pc, #60]	@ (80015d4 <DMA1_Stream6_IRQHandler+0x14c>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800159c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d110      	bne.n	80015c6 <DMA1_Stream6_IRQHandler+0x13e>
	    	{
	    		if((__DMA1_Stream6_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80015a4:	4b0b      	ldr	r3, [pc, #44]	@ (80015d4 <DMA1_Stream6_IRQHandler+0x14c>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d004      	beq.n	80015be <DMA1_Stream6_IRQHandler+0x136>
	    		{
	    			__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80015b4:	4b07      	ldr	r3, [pc, #28]	@ (80015d4 <DMA1_Stream6_IRQHandler+0x14c>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015ba:	4798      	blx	r3
	    			__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
	    		}
	    	}
	    }
	}
}
 80015bc:	e003      	b.n	80015c6 <DMA1_Stream6_IRQHandler+0x13e>
	    			__DMA1_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80015be:	4b05      	ldr	r3, [pc, #20]	@ (80015d4 <DMA1_Stream6_IRQHandler+0x14c>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015c4:	4798      	blx	r3
}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40026000 	.word	0x40026000
 80015d0:	2001c264 	.word	0x2001c264
 80015d4:	2001c238 	.word	0x2001c238

080015d8 <DMA1_Stream7_IRQHandler>:


void DMA1_Stream7_IRQHandler(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
	DMA_HISR = DMA1 -> HISR;
 80015dc:	4b4f      	ldr	r3, [pc, #316]	@ (800171c <DMA1_Stream7_IRQHandler+0x144>)
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	4a4f      	ldr	r2, [pc, #316]	@ (8001720 <DMA1_Stream7_IRQHandler+0x148>)
 80015e2:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF7)
 80015e4:	4b4e      	ldr	r3, [pc, #312]	@ (8001720 <DMA1_Stream7_IRQHandler+0x148>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d00e      	beq.n	800160e <DMA1_Stream7_IRQHandler+0x36>
	{
	    if (__DMA1_Stream7_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80015f0:	4b4c      	ldr	r3, [pc, #304]	@ (8001724 <DMA1_Stream7_IRQHandler+0x14c>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d009      	beq.n	800160e <DMA1_Stream7_IRQHandler+0x36>
	    {
	    	__DMA1_Stream7_Config__ ->ISR_Routines.FIFO_Error_ISR();
 80015fa:	4b4a      	ldr	r3, [pc, #296]	@ (8001724 <DMA1_Stream7_IRQHandler+0x14c>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001600:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CFEIF7;
 8001602:	4b46      	ldr	r3, [pc, #280]	@ (800171c <DMA1_Stream7_IRQHandler+0x144>)
 8001604:	68db      	ldr	r3, [r3, #12]
 8001606:	4a45      	ldr	r2, [pc, #276]	@ (800171c <DMA1_Stream7_IRQHandler+0x144>)
 8001608:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800160c:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_DMEIF7)
 800160e:	4b44      	ldr	r3, [pc, #272]	@ (8001720 <DMA1_Stream7_IRQHandler+0x148>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d00e      	beq.n	8001638 <DMA1_Stream7_IRQHandler+0x60>
	{
	    if (__DMA1_Stream7_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 800161a:	4b42      	ldr	r3, [pc, #264]	@ (8001724 <DMA1_Stream7_IRQHandler+0x14c>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001620:	2b00      	cmp	r3, #0
 8001622:	d009      	beq.n	8001638 <DMA1_Stream7_IRQHandler+0x60>
	    {
	    	__DMA1_Stream7_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001624:	4b3f      	ldr	r3, [pc, #252]	@ (8001724 <DMA1_Stream7_IRQHandler+0x14c>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800162a:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF7;
 800162c:	4b3b      	ldr	r3, [pc, #236]	@ (800171c <DMA1_Stream7_IRQHandler+0x144>)
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	4a3a      	ldr	r2, [pc, #232]	@ (800171c <DMA1_Stream7_IRQHandler+0x144>)
 8001632:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001636:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_TEIF7)
 8001638:	4b39      	ldr	r3, [pc, #228]	@ (8001720 <DMA1_Stream7_IRQHandler+0x148>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d00e      	beq.n	8001662 <DMA1_Stream7_IRQHandler+0x8a>
	{
	    if (__DMA1_Stream7_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001644:	4b37      	ldr	r3, [pc, #220]	@ (8001724 <DMA1_Stream7_IRQHandler+0x14c>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800164a:	2b00      	cmp	r3, #0
 800164c:	d009      	beq.n	8001662 <DMA1_Stream7_IRQHandler+0x8a>
	    {
	    	__DMA1_Stream7_Config__ ->ISR_Routines.Transfer_Error_ISR();
 800164e:	4b35      	ldr	r3, [pc, #212]	@ (8001724 <DMA1_Stream7_IRQHandler+0x14c>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001654:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CTEIF7;
 8001656:	4b31      	ldr	r3, [pc, #196]	@ (800171c <DMA1_Stream7_IRQHandler+0x144>)
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	4a30      	ldr	r2, [pc, #192]	@ (800171c <DMA1_Stream7_IRQHandler+0x144>)
 800165c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001660:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_HTIF7)
 8001662:	4b2f      	ldr	r3, [pc, #188]	@ (8001720 <DMA1_Stream7_IRQHandler+0x148>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d026      	beq.n	80016bc <DMA1_Stream7_IRQHandler+0xe4>
	{
	    if (__DMA1_Stream7_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 800166e:	4b2d      	ldr	r3, [pc, #180]	@ (8001724 <DMA1_Stream7_IRQHandler+0x14c>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001674:	2b00      	cmp	r3, #0
 8001676:	d021      	beq.n	80016bc <DMA1_Stream7_IRQHandler+0xe4>
	    {
	    	__DMA1_Stream7_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001678:	4b2a      	ldr	r3, [pc, #168]	@ (8001724 <DMA1_Stream7_IRQHandler+0x14c>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800167e:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CHTIF7;
 8001680:	4b26      	ldr	r3, [pc, #152]	@ (800171c <DMA1_Stream7_IRQHandler+0x144>)
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	4a25      	ldr	r2, [pc, #148]	@ (800171c <DMA1_Stream7_IRQHandler+0x144>)
 8001686:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800168a:	60d3      	str	r3, [r2, #12]

	    	if(__DMA1_Stream7_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800168c:	4b25      	ldr	r3, [pc, #148]	@ (8001724 <DMA1_Stream7_IRQHandler+0x14c>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001692:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001696:	4293      	cmp	r3, r2
 8001698:	d110      	bne.n	80016bc <DMA1_Stream7_IRQHandler+0xe4>
	    	{
	    		if((__DMA1_Stream7_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800169a:	4b22      	ldr	r3, [pc, #136]	@ (8001724 <DMA1_Stream7_IRQHandler+0x14c>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d004      	beq.n	80016b4 <DMA1_Stream7_IRQHandler+0xdc>
	    		{
	    			__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80016aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001724 <DMA1_Stream7_IRQHandler+0x14c>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80016b0:	4798      	blx	r3
 80016b2:	e003      	b.n	80016bc <DMA1_Stream7_IRQHandler+0xe4>
	    		}
	    		else
	    		{
	    			__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80016b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001724 <DMA1_Stream7_IRQHandler+0x14c>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016ba:	4798      	blx	r3
	    		}
	    	}
	    }
	}

	if(DMA_HISR & DMA_HISR_TCIF7)
 80016bc:	4b18      	ldr	r3, [pc, #96]	@ (8001720 <DMA1_Stream7_IRQHandler+0x148>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d026      	beq.n	8001716 <DMA1_Stream7_IRQHandler+0x13e>
	{
	    if (__DMA1_Stream7_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 80016c8:	4b16      	ldr	r3, [pc, #88]	@ (8001724 <DMA1_Stream7_IRQHandler+0x14c>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d021      	beq.n	8001716 <DMA1_Stream7_IRQHandler+0x13e>
	    {
	    	__DMA1_Stream7_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80016d2:	4b14      	ldr	r3, [pc, #80]	@ (8001724 <DMA1_Stream7_IRQHandler+0x14c>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016d8:	4798      	blx	r3
	    	DMA1 -> HIFCR |= DMA_HIFCR_CTCIF7;
 80016da:	4b10      	ldr	r3, [pc, #64]	@ (800171c <DMA1_Stream7_IRQHandler+0x144>)
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	4a0f      	ldr	r2, [pc, #60]	@ (800171c <DMA1_Stream7_IRQHandler+0x144>)
 80016e0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80016e4:	60d3      	str	r3, [r2, #12]

	    	if(__DMA1_Stream7_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80016e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001724 <DMA1_Stream7_IRQHandler+0x14c>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016ec:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d110      	bne.n	8001716 <DMA1_Stream7_IRQHandler+0x13e>
	    	{
	    		if((__DMA1_Stream7_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80016f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001724 <DMA1_Stream7_IRQHandler+0x14c>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d004      	beq.n	800170e <DMA1_Stream7_IRQHandler+0x136>
	    		{
	    			__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001704:	4b07      	ldr	r3, [pc, #28]	@ (8001724 <DMA1_Stream7_IRQHandler+0x14c>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800170a:	4798      	blx	r3
	    			__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
	    		}
	    	}
	    }
	}
}
 800170c:	e003      	b.n	8001716 <DMA1_Stream7_IRQHandler+0x13e>
	    			__DMA1_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800170e:	4b05      	ldr	r3, [pc, #20]	@ (8001724 <DMA1_Stream7_IRQHandler+0x14c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001714:	4798      	blx	r3
}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40026000 	.word	0x40026000
 8001720:	2001c264 	.word	0x2001c264
 8001724:	2001c23c 	.word	0x2001c23c

08001728 <DMA2_Stream0_IRQHandler>:

void DMA2_Stream0_IRQHandler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
	DMA_LISR = DMA2 -> LISR;
 800172c:	4b60      	ldr	r3, [pc, #384]	@ (80018b0 <DMA2_Stream0_IRQHandler+0x188>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a60      	ldr	r2, [pc, #384]	@ (80018b4 <DMA2_Stream0_IRQHandler+0x18c>)
 8001732:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF0)
 8001734:	4b5f      	ldr	r3, [pc, #380]	@ (80018b4 <DMA2_Stream0_IRQHandler+0x18c>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0301 	and.w	r3, r3, #1
 800173c:	2b00      	cmp	r3, #0
 800173e:	d015      	beq.n	800176c <DMA2_Stream0_IRQHandler+0x44>
	{
		if(__DMA2_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 8001740:	4b5d      	ldr	r3, [pc, #372]	@ (80018b8 <DMA2_Stream0_IRQHandler+0x190>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	69db      	ldr	r3, [r3, #28]
 8001746:	2280      	movs	r2, #128	@ 0x80
 8001748:	4013      	ands	r3, r2
 800174a:	2b00      	cmp	r3, #0
 800174c:	d00e      	beq.n	800176c <DMA2_Stream0_IRQHandler+0x44>
		{
		    if (__DMA2_Stream0_Config__ -> ISR_Routines.FIFO_Error_ISR)
 800174e:	4b5a      	ldr	r3, [pc, #360]	@ (80018b8 <DMA2_Stream0_IRQHandler+0x190>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001754:	2b00      	cmp	r3, #0
 8001756:	d009      	beq.n	800176c <DMA2_Stream0_IRQHandler+0x44>
		    {
		    	__DMA2_Stream0_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8001758:	4b57      	ldr	r3, [pc, #348]	@ (80018b8 <DMA2_Stream0_IRQHandler+0x190>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800175e:	4798      	blx	r3
		    	DMA2 -> LIFCR |= DMA_LIFCR_CFEIF0;
 8001760:	4b53      	ldr	r3, [pc, #332]	@ (80018b0 <DMA2_Stream0_IRQHandler+0x188>)
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	4a52      	ldr	r2, [pc, #328]	@ (80018b0 <DMA2_Stream0_IRQHandler+0x188>)
 8001766:	f043 0301 	orr.w	r3, r3, #1
 800176a:	6093      	str	r3, [r2, #8]
		    }
		}

	}

	if(DMA_LISR & DMA_LISR_DMEIF0)
 800176c:	4b51      	ldr	r3, [pc, #324]	@ (80018b4 <DMA2_Stream0_IRQHandler+0x18c>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0304 	and.w	r3, r3, #4
 8001774:	2b00      	cmp	r3, #0
 8001776:	d015      	beq.n	80017a4 <DMA2_Stream0_IRQHandler+0x7c>
	{
		if(__DMA2_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 8001778:	4b4f      	ldr	r3, [pc, #316]	@ (80018b8 <DMA2_Stream0_IRQHandler+0x190>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	69db      	ldr	r3, [r3, #28]
 800177e:	2202      	movs	r2, #2
 8001780:	4013      	ands	r3, r2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d00e      	beq.n	80017a4 <DMA2_Stream0_IRQHandler+0x7c>
		{
		    if (__DMA2_Stream0_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8001786:	4b4c      	ldr	r3, [pc, #304]	@ (80018b8 <DMA2_Stream0_IRQHandler+0x190>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178c:	2b00      	cmp	r3, #0
 800178e:	d009      	beq.n	80017a4 <DMA2_Stream0_IRQHandler+0x7c>
		    {
		    	__DMA2_Stream0_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001790:	4b49      	ldr	r3, [pc, #292]	@ (80018b8 <DMA2_Stream0_IRQHandler+0x190>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001796:	4798      	blx	r3
		    	DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF0;
 8001798:	4b45      	ldr	r3, [pc, #276]	@ (80018b0 <DMA2_Stream0_IRQHandler+0x188>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	4a44      	ldr	r2, [pc, #272]	@ (80018b0 <DMA2_Stream0_IRQHandler+0x188>)
 800179e:	f043 0304 	orr.w	r3, r3, #4
 80017a2:	6093      	str	r3, [r2, #8]
		    }
		}

	}

	if(DMA_LISR & DMA_LISR_TEIF0)
 80017a4:	4b43      	ldr	r3, [pc, #268]	@ (80018b4 <DMA2_Stream0_IRQHandler+0x18c>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0308 	and.w	r3, r3, #8
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d015      	beq.n	80017dc <DMA2_Stream0_IRQHandler+0xb4>
	{
		if(__DMA2_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 80017b0:	4b41      	ldr	r3, [pc, #260]	@ (80018b8 <DMA2_Stream0_IRQHandler+0x190>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	69db      	ldr	r3, [r3, #28]
 80017b6:	2204      	movs	r2, #4
 80017b8:	4013      	ands	r3, r2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d00e      	beq.n	80017dc <DMA2_Stream0_IRQHandler+0xb4>
		{
		    if (__DMA2_Stream0_Config__ -> ISR_Routines.Transfer_Error_ISR)
 80017be:	4b3e      	ldr	r3, [pc, #248]	@ (80018b8 <DMA2_Stream0_IRQHandler+0x190>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d009      	beq.n	80017dc <DMA2_Stream0_IRQHandler+0xb4>
		    {
		    	__DMA2_Stream0_Config__ ->ISR_Routines.Transfer_Error_ISR();
 80017c8:	4b3b      	ldr	r3, [pc, #236]	@ (80018b8 <DMA2_Stream0_IRQHandler+0x190>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ce:	4798      	blx	r3
		    	DMA2 -> LIFCR |= DMA_LIFCR_CTEIF0;
 80017d0:	4b37      	ldr	r3, [pc, #220]	@ (80018b0 <DMA2_Stream0_IRQHandler+0x188>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	4a36      	ldr	r2, [pc, #216]	@ (80018b0 <DMA2_Stream0_IRQHandler+0x188>)
 80017d6:	f043 0308 	orr.w	r3, r3, #8
 80017da:	6093      	str	r3, [r2, #8]
		    }
		}

	}

	if(DMA_LISR & DMA_LISR_HTIF0)
 80017dc:	4b35      	ldr	r3, [pc, #212]	@ (80018b4 <DMA2_Stream0_IRQHandler+0x18c>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0310 	and.w	r3, r3, #16
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d02d      	beq.n	8001844 <DMA2_Stream0_IRQHandler+0x11c>
	{
		if(__DMA2_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 80017e8:	4b33      	ldr	r3, [pc, #204]	@ (80018b8 <DMA2_Stream0_IRQHandler+0x190>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	69db      	ldr	r3, [r3, #28]
 80017ee:	2208      	movs	r2, #8
 80017f0:	4013      	ands	r3, r2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d026      	beq.n	8001844 <DMA2_Stream0_IRQHandler+0x11c>
		{
		    if (__DMA2_Stream0_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 80017f6:	4b30      	ldr	r3, [pc, #192]	@ (80018b8 <DMA2_Stream0_IRQHandler+0x190>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d021      	beq.n	8001844 <DMA2_Stream0_IRQHandler+0x11c>
		    {
		    	__DMA2_Stream0_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001800:	4b2d      	ldr	r3, [pc, #180]	@ (80018b8 <DMA2_Stream0_IRQHandler+0x190>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001806:	4798      	blx	r3
		    	DMA2 -> LIFCR |= DMA_LIFCR_CHTIF0;
 8001808:	4b29      	ldr	r3, [pc, #164]	@ (80018b0 <DMA2_Stream0_IRQHandler+0x188>)
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	4a28      	ldr	r2, [pc, #160]	@ (80018b0 <DMA2_Stream0_IRQHandler+0x188>)
 800180e:	f043 0310 	orr.w	r3, r3, #16
 8001812:	6093      	str	r3, [r2, #8]

		    	if(__DMA2_Stream0_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001814:	4b28      	ldr	r3, [pc, #160]	@ (80018b8 <DMA2_Stream0_IRQHandler+0x190>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800181a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800181e:	4293      	cmp	r3, r2
 8001820:	d110      	bne.n	8001844 <DMA2_Stream0_IRQHandler+0x11c>
		    	{
		    		if((__DMA2_Stream0_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001822:	4b25      	ldr	r3, [pc, #148]	@ (80018b8 <DMA2_Stream0_IRQHandler+0x190>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d004      	beq.n	800183c <DMA2_Stream0_IRQHandler+0x114>
		    		{
		    			__DMA2_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001832:	4b21      	ldr	r3, [pc, #132]	@ (80018b8 <DMA2_Stream0_IRQHandler+0x190>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001838:	4798      	blx	r3
 800183a:	e003      	b.n	8001844 <DMA2_Stream0_IRQHandler+0x11c>
		    		}
		    		else
		    		{
		    			__DMA2_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800183c:	4b1e      	ldr	r3, [pc, #120]	@ (80018b8 <DMA2_Stream0_IRQHandler+0x190>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001842:	4798      	blx	r3
		    }
		}

	}

	if(DMA_LISR & DMA_LISR_TCIF0)
 8001844:	4b1b      	ldr	r3, [pc, #108]	@ (80018b4 <DMA2_Stream0_IRQHandler+0x18c>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0320 	and.w	r3, r3, #32
 800184c:	2b00      	cmp	r3, #0
 800184e:	d02d      	beq.n	80018ac <DMA2_Stream0_IRQHandler+0x184>
	{
		if(__DMA2_Stream0_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 8001850:	4b19      	ldr	r3, [pc, #100]	@ (80018b8 <DMA2_Stream0_IRQHandler+0x190>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	69db      	ldr	r3, [r3, #28]
 8001856:	2210      	movs	r2, #16
 8001858:	4013      	ands	r3, r2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d026      	beq.n	80018ac <DMA2_Stream0_IRQHandler+0x184>
		{
		    if (__DMA2_Stream0_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 800185e:	4b16      	ldr	r3, [pc, #88]	@ (80018b8 <DMA2_Stream0_IRQHandler+0x190>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001864:	2b00      	cmp	r3, #0
 8001866:	d021      	beq.n	80018ac <DMA2_Stream0_IRQHandler+0x184>
		    {
		    	__DMA2_Stream0_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 8001868:	4b13      	ldr	r3, [pc, #76]	@ (80018b8 <DMA2_Stream0_IRQHandler+0x190>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800186e:	4798      	blx	r3
		    	DMA2 -> LIFCR |= DMA_LIFCR_CTCIF0;
 8001870:	4b0f      	ldr	r3, [pc, #60]	@ (80018b0 <DMA2_Stream0_IRQHandler+0x188>)
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	4a0e      	ldr	r2, [pc, #56]	@ (80018b0 <DMA2_Stream0_IRQHandler+0x188>)
 8001876:	f043 0320 	orr.w	r3, r3, #32
 800187a:	6093      	str	r3, [r2, #8]

		    	if(__DMA2_Stream0_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800187c:	4b0e      	ldr	r3, [pc, #56]	@ (80018b8 <DMA2_Stream0_IRQHandler+0x190>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001882:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001886:	4293      	cmp	r3, r2
 8001888:	d110      	bne.n	80018ac <DMA2_Stream0_IRQHandler+0x184>
		    	{
		    		if((__DMA2_Stream0_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800188a:	4b0b      	ldr	r3, [pc, #44]	@ (80018b8 <DMA2_Stream0_IRQHandler+0x190>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d004      	beq.n	80018a4 <DMA2_Stream0_IRQHandler+0x17c>
		    		{
		    			__DMA2_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800189a:	4b07      	ldr	r3, [pc, #28]	@ (80018b8 <DMA2_Stream0_IRQHandler+0x190>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018a0:	4798      	blx	r3
		    	}
		    }
		}

	}
}
 80018a2:	e003      	b.n	80018ac <DMA2_Stream0_IRQHandler+0x184>
		    			__DMA2_Stream0_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80018a4:	4b04      	ldr	r3, [pc, #16]	@ (80018b8 <DMA2_Stream0_IRQHandler+0x190>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018aa:	4798      	blx	r3
}
 80018ac:	bf00      	nop
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40026400 	.word	0x40026400
 80018b4:	2001c260 	.word	0x2001c260
 80018b8:	2001c240 	.word	0x2001c240

080018bc <DMA2_Stream1_IRQHandler>:

void DMA2_Stream1_IRQHandler(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
	DMA_LISR = DMA2 -> LISR;
 80018c0:	4b4f      	ldr	r3, [pc, #316]	@ (8001a00 <DMA2_Stream1_IRQHandler+0x144>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a4f      	ldr	r2, [pc, #316]	@ (8001a04 <DMA2_Stream1_IRQHandler+0x148>)
 80018c6:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF1)
 80018c8:	4b4e      	ldr	r3, [pc, #312]	@ (8001a04 <DMA2_Stream1_IRQHandler+0x148>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d00e      	beq.n	80018f2 <DMA2_Stream1_IRQHandler+0x36>
	{
	    if (__DMA2_Stream1_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80018d4:	4b4c      	ldr	r3, [pc, #304]	@ (8001a08 <DMA2_Stream1_IRQHandler+0x14c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d009      	beq.n	80018f2 <DMA2_Stream1_IRQHandler+0x36>
	    {
	    	__DMA2_Stream1_Config__ ->ISR_Routines.FIFO_Error_ISR();
 80018de:	4b4a      	ldr	r3, [pc, #296]	@ (8001a08 <DMA2_Stream1_IRQHandler+0x14c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018e4:	4798      	blx	r3
	    	DMA2 -> LIFCR |= DMA_LIFCR_CFEIF1;
 80018e6:	4b46      	ldr	r3, [pc, #280]	@ (8001a00 <DMA2_Stream1_IRQHandler+0x144>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	4a45      	ldr	r2, [pc, #276]	@ (8001a00 <DMA2_Stream1_IRQHandler+0x144>)
 80018ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80018f0:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_DMEIF1)
 80018f2:	4b44      	ldr	r3, [pc, #272]	@ (8001a04 <DMA2_Stream1_IRQHandler+0x148>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d00e      	beq.n	800191c <DMA2_Stream1_IRQHandler+0x60>
	{
	    if (__DMA2_Stream1_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 80018fe:	4b42      	ldr	r3, [pc, #264]	@ (8001a08 <DMA2_Stream1_IRQHandler+0x14c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001904:	2b00      	cmp	r3, #0
 8001906:	d009      	beq.n	800191c <DMA2_Stream1_IRQHandler+0x60>
	    {
	    	__DMA2_Stream1_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001908:	4b3f      	ldr	r3, [pc, #252]	@ (8001a08 <DMA2_Stream1_IRQHandler+0x14c>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190e:	4798      	blx	r3
	    	DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF1;
 8001910:	4b3b      	ldr	r3, [pc, #236]	@ (8001a00 <DMA2_Stream1_IRQHandler+0x144>)
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	4a3a      	ldr	r2, [pc, #232]	@ (8001a00 <DMA2_Stream1_IRQHandler+0x144>)
 8001916:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800191a:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_TEIF1)
 800191c:	4b39      	ldr	r3, [pc, #228]	@ (8001a04 <DMA2_Stream1_IRQHandler+0x148>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001924:	2b00      	cmp	r3, #0
 8001926:	d00e      	beq.n	8001946 <DMA2_Stream1_IRQHandler+0x8a>
	{
	    if (__DMA2_Stream1_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001928:	4b37      	ldr	r3, [pc, #220]	@ (8001a08 <DMA2_Stream1_IRQHandler+0x14c>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800192e:	2b00      	cmp	r3, #0
 8001930:	d009      	beq.n	8001946 <DMA2_Stream1_IRQHandler+0x8a>
	    {
	    	__DMA2_Stream1_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8001932:	4b35      	ldr	r3, [pc, #212]	@ (8001a08 <DMA2_Stream1_IRQHandler+0x14c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001938:	4798      	blx	r3
	    	DMA2 -> LIFCR |= DMA_LIFCR_CTEIF1;
 800193a:	4b31      	ldr	r3, [pc, #196]	@ (8001a00 <DMA2_Stream1_IRQHandler+0x144>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	4a30      	ldr	r2, [pc, #192]	@ (8001a00 <DMA2_Stream1_IRQHandler+0x144>)
 8001940:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001944:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_HTIF1)
 8001946:	4b2f      	ldr	r3, [pc, #188]	@ (8001a04 <DMA2_Stream1_IRQHandler+0x148>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800194e:	2b00      	cmp	r3, #0
 8001950:	d026      	beq.n	80019a0 <DMA2_Stream1_IRQHandler+0xe4>
	{
	    if (__DMA2_Stream1_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001952:	4b2d      	ldr	r3, [pc, #180]	@ (8001a08 <DMA2_Stream1_IRQHandler+0x14c>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001958:	2b00      	cmp	r3, #0
 800195a:	d021      	beq.n	80019a0 <DMA2_Stream1_IRQHandler+0xe4>
	    {
	    	__DMA2_Stream1_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 800195c:	4b2a      	ldr	r3, [pc, #168]	@ (8001a08 <DMA2_Stream1_IRQHandler+0x14c>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001962:	4798      	blx	r3
	    	DMA2 -> LIFCR |= DMA_LIFCR_CHTIF1;
 8001964:	4b26      	ldr	r3, [pc, #152]	@ (8001a00 <DMA2_Stream1_IRQHandler+0x144>)
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	4a25      	ldr	r2, [pc, #148]	@ (8001a00 <DMA2_Stream1_IRQHandler+0x144>)
 800196a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800196e:	6093      	str	r3, [r2, #8]

	    	if(__DMA2_Stream1_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001970:	4b25      	ldr	r3, [pc, #148]	@ (8001a08 <DMA2_Stream1_IRQHandler+0x14c>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001976:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800197a:	4293      	cmp	r3, r2
 800197c:	d110      	bne.n	80019a0 <DMA2_Stream1_IRQHandler+0xe4>
	    	{
	    		if((__DMA2_Stream1_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 800197e:	4b22      	ldr	r3, [pc, #136]	@ (8001a08 <DMA2_Stream1_IRQHandler+0x14c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d004      	beq.n	8001998 <DMA2_Stream1_IRQHandler+0xdc>
	    		{
	    			__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800198e:	4b1e      	ldr	r3, [pc, #120]	@ (8001a08 <DMA2_Stream1_IRQHandler+0x14c>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001994:	4798      	blx	r3
 8001996:	e003      	b.n	80019a0 <DMA2_Stream1_IRQHandler+0xe4>
	    		}
	    		else
	    		{
	    			__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001998:	4b1b      	ldr	r3, [pc, #108]	@ (8001a08 <DMA2_Stream1_IRQHandler+0x14c>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800199e:	4798      	blx	r3
	    		}
	    	}
	    }
	}

	if(DMA_LISR & DMA_LISR_TCIF1)
 80019a0:	4b18      	ldr	r3, [pc, #96]	@ (8001a04 <DMA2_Stream1_IRQHandler+0x148>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d026      	beq.n	80019fa <DMA2_Stream1_IRQHandler+0x13e>
	{
	    if (__DMA2_Stream1_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 80019ac:	4b16      	ldr	r3, [pc, #88]	@ (8001a08 <DMA2_Stream1_IRQHandler+0x14c>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d021      	beq.n	80019fa <DMA2_Stream1_IRQHandler+0x13e>
	    {
	    	__DMA2_Stream1_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80019b6:	4b14      	ldr	r3, [pc, #80]	@ (8001a08 <DMA2_Stream1_IRQHandler+0x14c>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019bc:	4798      	blx	r3
	    	DMA2 -> LIFCR |= DMA_LIFCR_CTCIF1;
 80019be:	4b10      	ldr	r3, [pc, #64]	@ (8001a00 <DMA2_Stream1_IRQHandler+0x144>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	4a0f      	ldr	r2, [pc, #60]	@ (8001a00 <DMA2_Stream1_IRQHandler+0x144>)
 80019c4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80019c8:	6093      	str	r3, [r2, #8]

	    	if(__DMA2_Stream1_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80019ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001a08 <DMA2_Stream1_IRQHandler+0x14c>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019d0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d110      	bne.n	80019fa <DMA2_Stream1_IRQHandler+0x13e>
	    	{
	    		if((__DMA2_Stream1_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80019d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001a08 <DMA2_Stream1_IRQHandler+0x14c>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d004      	beq.n	80019f2 <DMA2_Stream1_IRQHandler+0x136>
	    		{
	    			__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80019e8:	4b07      	ldr	r3, [pc, #28]	@ (8001a08 <DMA2_Stream1_IRQHandler+0x14c>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80019ee:	4798      	blx	r3
	    			__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
	    		}
	    	}
	    }
	}
}
 80019f0:	e003      	b.n	80019fa <DMA2_Stream1_IRQHandler+0x13e>
	    			__DMA2_Stream1_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80019f2:	4b05      	ldr	r3, [pc, #20]	@ (8001a08 <DMA2_Stream1_IRQHandler+0x14c>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019f8:	4798      	blx	r3
}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40026400 	.word	0x40026400
 8001a04:	2001c260 	.word	0x2001c260
 8001a08:	2001c244 	.word	0x2001c244

08001a0c <DMA2_Stream2_IRQHandler>:


void DMA2_Stream2_IRQHandler(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
	DMA_LISR = DMA2 -> LISR;
 8001a10:	4b4f      	ldr	r3, [pc, #316]	@ (8001b50 <DMA2_Stream2_IRQHandler+0x144>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a4f      	ldr	r2, [pc, #316]	@ (8001b54 <DMA2_Stream2_IRQHandler+0x148>)
 8001a16:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF2)
 8001a18:	4b4e      	ldr	r3, [pc, #312]	@ (8001b54 <DMA2_Stream2_IRQHandler+0x148>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d00e      	beq.n	8001a42 <DMA2_Stream2_IRQHandler+0x36>
	{
	    if (__DMA2_Stream2_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001a24:	4b4c      	ldr	r3, [pc, #304]	@ (8001b58 <DMA2_Stream2_IRQHandler+0x14c>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d009      	beq.n	8001a42 <DMA2_Stream2_IRQHandler+0x36>
	    {
	    	__DMA2_Stream2_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8001a2e:	4b4a      	ldr	r3, [pc, #296]	@ (8001b58 <DMA2_Stream2_IRQHandler+0x14c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a34:	4798      	blx	r3
	    	DMA2 -> LIFCR |= DMA_LIFCR_CFEIF2;
 8001a36:	4b46      	ldr	r3, [pc, #280]	@ (8001b50 <DMA2_Stream2_IRQHandler+0x144>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	4a45      	ldr	r2, [pc, #276]	@ (8001b50 <DMA2_Stream2_IRQHandler+0x144>)
 8001a3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a40:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_DMEIF2)
 8001a42:	4b44      	ldr	r3, [pc, #272]	@ (8001b54 <DMA2_Stream2_IRQHandler+0x148>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d00e      	beq.n	8001a6c <DMA2_Stream2_IRQHandler+0x60>
	{
	    if (__DMA2_Stream2_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8001a4e:	4b42      	ldr	r3, [pc, #264]	@ (8001b58 <DMA2_Stream2_IRQHandler+0x14c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d009      	beq.n	8001a6c <DMA2_Stream2_IRQHandler+0x60>
	    {
	    	__DMA2_Stream2_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001a58:	4b3f      	ldr	r3, [pc, #252]	@ (8001b58 <DMA2_Stream2_IRQHandler+0x14c>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a5e:	4798      	blx	r3
	    	DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF2;
 8001a60:	4b3b      	ldr	r3, [pc, #236]	@ (8001b50 <DMA2_Stream2_IRQHandler+0x144>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	4a3a      	ldr	r2, [pc, #232]	@ (8001b50 <DMA2_Stream2_IRQHandler+0x144>)
 8001a66:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a6a:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_TEIF2)
 8001a6c:	4b39      	ldr	r3, [pc, #228]	@ (8001b54 <DMA2_Stream2_IRQHandler+0x148>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d00e      	beq.n	8001a96 <DMA2_Stream2_IRQHandler+0x8a>
	{
	    if (__DMA2_Stream2_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001a78:	4b37      	ldr	r3, [pc, #220]	@ (8001b58 <DMA2_Stream2_IRQHandler+0x14c>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d009      	beq.n	8001a96 <DMA2_Stream2_IRQHandler+0x8a>
	    {
	    	__DMA2_Stream2_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8001a82:	4b35      	ldr	r3, [pc, #212]	@ (8001b58 <DMA2_Stream2_IRQHandler+0x14c>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a88:	4798      	blx	r3
	    	DMA2 -> LIFCR |= DMA_LIFCR_CTEIF2;
 8001a8a:	4b31      	ldr	r3, [pc, #196]	@ (8001b50 <DMA2_Stream2_IRQHandler+0x144>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	4a30      	ldr	r2, [pc, #192]	@ (8001b50 <DMA2_Stream2_IRQHandler+0x144>)
 8001a90:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001a94:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_LISR & DMA_LISR_HTIF2)
 8001a96:	4b2f      	ldr	r3, [pc, #188]	@ (8001b54 <DMA2_Stream2_IRQHandler+0x148>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d026      	beq.n	8001af0 <DMA2_Stream2_IRQHandler+0xe4>
	{
	    if (__DMA2_Stream2_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001aa2:	4b2d      	ldr	r3, [pc, #180]	@ (8001b58 <DMA2_Stream2_IRQHandler+0x14c>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d021      	beq.n	8001af0 <DMA2_Stream2_IRQHandler+0xe4>
	    {
	    	__DMA2_Stream2_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001aac:	4b2a      	ldr	r3, [pc, #168]	@ (8001b58 <DMA2_Stream2_IRQHandler+0x14c>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ab2:	4798      	blx	r3
	    	DMA2 -> LIFCR |= DMA_LIFCR_CHTIF2;
 8001ab4:	4b26      	ldr	r3, [pc, #152]	@ (8001b50 <DMA2_Stream2_IRQHandler+0x144>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	4a25      	ldr	r2, [pc, #148]	@ (8001b50 <DMA2_Stream2_IRQHandler+0x144>)
 8001aba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001abe:	6093      	str	r3, [r2, #8]

	    	if(__DMA2_Stream2_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001ac0:	4b25      	ldr	r3, [pc, #148]	@ (8001b58 <DMA2_Stream2_IRQHandler+0x14c>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ac6:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d110      	bne.n	8001af0 <DMA2_Stream2_IRQHandler+0xe4>
	    	{
	    		if((__DMA2_Stream2_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001ace:	4b22      	ldr	r3, [pc, #136]	@ (8001b58 <DMA2_Stream2_IRQHandler+0x14c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d004      	beq.n	8001ae8 <DMA2_Stream2_IRQHandler+0xdc>
	    		{
	    			__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001ade:	4b1e      	ldr	r3, [pc, #120]	@ (8001b58 <DMA2_Stream2_IRQHandler+0x14c>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ae4:	4798      	blx	r3
 8001ae6:	e003      	b.n	8001af0 <DMA2_Stream2_IRQHandler+0xe4>
	    		}
	    		else
	    		{
	    			__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001ae8:	4b1b      	ldr	r3, [pc, #108]	@ (8001b58 <DMA2_Stream2_IRQHandler+0x14c>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001aee:	4798      	blx	r3
	    		}
	    	}
	    }
	}

	if(DMA_LISR & DMA_LISR_TCIF2)
 8001af0:	4b18      	ldr	r3, [pc, #96]	@ (8001b54 <DMA2_Stream2_IRQHandler+0x148>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d026      	beq.n	8001b4a <DMA2_Stream2_IRQHandler+0x13e>
	{
	    if (__DMA2_Stream2_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001afc:	4b16      	ldr	r3, [pc, #88]	@ (8001b58 <DMA2_Stream2_IRQHandler+0x14c>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d021      	beq.n	8001b4a <DMA2_Stream2_IRQHandler+0x13e>
	    {
	    	__DMA2_Stream2_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001b06:	4b14      	ldr	r3, [pc, #80]	@ (8001b58 <DMA2_Stream2_IRQHandler+0x14c>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b0c:	4798      	blx	r3
	    	DMA2 -> LIFCR |= DMA_LIFCR_CTCIF2;
 8001b0e:	4b10      	ldr	r3, [pc, #64]	@ (8001b50 <DMA2_Stream2_IRQHandler+0x144>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	4a0f      	ldr	r2, [pc, #60]	@ (8001b50 <DMA2_Stream2_IRQHandler+0x144>)
 8001b14:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001b18:	6093      	str	r3, [r2, #8]

	    	if(__DMA2_Stream2_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001b1a:	4b0f      	ldr	r3, [pc, #60]	@ (8001b58 <DMA2_Stream2_IRQHandler+0x14c>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b20:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d110      	bne.n	8001b4a <DMA2_Stream2_IRQHandler+0x13e>
	    	{
	    		if((__DMA2_Stream2_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001b28:	4b0b      	ldr	r3, [pc, #44]	@ (8001b58 <DMA2_Stream2_IRQHandler+0x14c>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d004      	beq.n	8001b42 <DMA2_Stream2_IRQHandler+0x136>
	    		{
	    			__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001b38:	4b07      	ldr	r3, [pc, #28]	@ (8001b58 <DMA2_Stream2_IRQHandler+0x14c>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b3e:	4798      	blx	r3
	    			__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
	    		}
	    	}
	    }
	}
}
 8001b40:	e003      	b.n	8001b4a <DMA2_Stream2_IRQHandler+0x13e>
	    			__DMA2_Stream2_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001b42:	4b05      	ldr	r3, [pc, #20]	@ (8001b58 <DMA2_Stream2_IRQHandler+0x14c>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b48:	4798      	blx	r3
}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40026400 	.word	0x40026400
 8001b54:	2001c260 	.word	0x2001c260
 8001b58:	2001c248 	.word	0x2001c248

08001b5c <DMA2_Stream3_IRQHandler>:

void DMA2_Stream3_IRQHandler(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
	DMA_LISR = DMA2 -> LISR;
 8001b60:	4b60      	ldr	r3, [pc, #384]	@ (8001ce4 <DMA2_Stream3_IRQHandler+0x188>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a60      	ldr	r2, [pc, #384]	@ (8001ce8 <DMA2_Stream3_IRQHandler+0x18c>)
 8001b66:	6013      	str	r3, [r2, #0]

	if(DMA_LISR & DMA_LISR_FEIF3)
 8001b68:	4b5f      	ldr	r3, [pc, #380]	@ (8001ce8 <DMA2_Stream3_IRQHandler+0x18c>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d015      	beq.n	8001ba0 <DMA2_Stream3_IRQHandler+0x44>
	{
		if(__DMA2_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 8001b74:	4b5d      	ldr	r3, [pc, #372]	@ (8001cec <DMA2_Stream3_IRQHandler+0x190>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	69db      	ldr	r3, [r3, #28]
 8001b7a:	2280      	movs	r2, #128	@ 0x80
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d00e      	beq.n	8001ba0 <DMA2_Stream3_IRQHandler+0x44>
		{
		    if (__DMA2_Stream3_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001b82:	4b5a      	ldr	r3, [pc, #360]	@ (8001cec <DMA2_Stream3_IRQHandler+0x190>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d009      	beq.n	8001ba0 <DMA2_Stream3_IRQHandler+0x44>
		    {
		    	__DMA2_Stream3_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8001b8c:	4b57      	ldr	r3, [pc, #348]	@ (8001cec <DMA2_Stream3_IRQHandler+0x190>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b92:	4798      	blx	r3
		    	DMA2 -> LIFCR |= DMA_LIFCR_CFEIF3;
 8001b94:	4b53      	ldr	r3, [pc, #332]	@ (8001ce4 <DMA2_Stream3_IRQHandler+0x188>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	4a52      	ldr	r2, [pc, #328]	@ (8001ce4 <DMA2_Stream3_IRQHandler+0x188>)
 8001b9a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001b9e:	6093      	str	r3, [r2, #8]
		    }
		}
	}

	if(DMA_LISR & DMA_LISR_DMEIF3)
 8001ba0:	4b51      	ldr	r3, [pc, #324]	@ (8001ce8 <DMA2_Stream3_IRQHandler+0x18c>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d015      	beq.n	8001bd8 <DMA2_Stream3_IRQHandler+0x7c>
	{
		if(__DMA2_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 8001bac:	4b4f      	ldr	r3, [pc, #316]	@ (8001cec <DMA2_Stream3_IRQHandler+0x190>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	2202      	movs	r2, #2
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d00e      	beq.n	8001bd8 <DMA2_Stream3_IRQHandler+0x7c>
		{
		    if (__DMA2_Stream3_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8001bba:	4b4c      	ldr	r3, [pc, #304]	@ (8001cec <DMA2_Stream3_IRQHandler+0x190>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d009      	beq.n	8001bd8 <DMA2_Stream3_IRQHandler+0x7c>
		    {
		    	__DMA2_Stream3_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001bc4:	4b49      	ldr	r3, [pc, #292]	@ (8001cec <DMA2_Stream3_IRQHandler+0x190>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bca:	4798      	blx	r3
		    	DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF3;
 8001bcc:	4b45      	ldr	r3, [pc, #276]	@ (8001ce4 <DMA2_Stream3_IRQHandler+0x188>)
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	4a44      	ldr	r2, [pc, #272]	@ (8001ce4 <DMA2_Stream3_IRQHandler+0x188>)
 8001bd2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bd6:	6093      	str	r3, [r2, #8]
		    }
		}
	}

	if(DMA_LISR & DMA_LISR_TEIF3)
 8001bd8:	4b43      	ldr	r3, [pc, #268]	@ (8001ce8 <DMA2_Stream3_IRQHandler+0x18c>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d015      	beq.n	8001c10 <DMA2_Stream3_IRQHandler+0xb4>
	{
		if(__DMA2_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 8001be4:	4b41      	ldr	r3, [pc, #260]	@ (8001cec <DMA2_Stream3_IRQHandler+0x190>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	69db      	ldr	r3, [r3, #28]
 8001bea:	2204      	movs	r2, #4
 8001bec:	4013      	ands	r3, r2
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d00e      	beq.n	8001c10 <DMA2_Stream3_IRQHandler+0xb4>
		{
		    if (__DMA2_Stream3_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001bf2:	4b3e      	ldr	r3, [pc, #248]	@ (8001cec <DMA2_Stream3_IRQHandler+0x190>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d009      	beq.n	8001c10 <DMA2_Stream3_IRQHandler+0xb4>
		    {
		    	__DMA2_Stream3_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8001bfc:	4b3b      	ldr	r3, [pc, #236]	@ (8001cec <DMA2_Stream3_IRQHandler+0x190>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c02:	4798      	blx	r3
		    	DMA2 -> LIFCR |= DMA_LIFCR_CTEIF3;
 8001c04:	4b37      	ldr	r3, [pc, #220]	@ (8001ce4 <DMA2_Stream3_IRQHandler+0x188>)
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	4a36      	ldr	r2, [pc, #216]	@ (8001ce4 <DMA2_Stream3_IRQHandler+0x188>)
 8001c0a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001c0e:	6093      	str	r3, [r2, #8]
		    }
		}
	}

	if(DMA_LISR & DMA_LISR_HTIF3)
 8001c10:	4b35      	ldr	r3, [pc, #212]	@ (8001ce8 <DMA2_Stream3_IRQHandler+0x18c>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d02d      	beq.n	8001c78 <DMA2_Stream3_IRQHandler+0x11c>
	{
		if(__DMA2_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 8001c1c:	4b33      	ldr	r3, [pc, #204]	@ (8001cec <DMA2_Stream3_IRQHandler+0x190>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	69db      	ldr	r3, [r3, #28]
 8001c22:	2208      	movs	r2, #8
 8001c24:	4013      	ands	r3, r2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d026      	beq.n	8001c78 <DMA2_Stream3_IRQHandler+0x11c>
		{
		    if (__DMA2_Stream3_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001c2a:	4b30      	ldr	r3, [pc, #192]	@ (8001cec <DMA2_Stream3_IRQHandler+0x190>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d021      	beq.n	8001c78 <DMA2_Stream3_IRQHandler+0x11c>
		    {
		    	__DMA2_Stream3_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001c34:	4b2d      	ldr	r3, [pc, #180]	@ (8001cec <DMA2_Stream3_IRQHandler+0x190>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c3a:	4798      	blx	r3
		    	DMA2 -> LIFCR |= DMA_LIFCR_CHTIF3;
 8001c3c:	4b29      	ldr	r3, [pc, #164]	@ (8001ce4 <DMA2_Stream3_IRQHandler+0x188>)
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	4a28      	ldr	r2, [pc, #160]	@ (8001ce4 <DMA2_Stream3_IRQHandler+0x188>)
 8001c42:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001c46:	6093      	str	r3, [r2, #8]

		    	if(__DMA2_Stream3_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001c48:	4b28      	ldr	r3, [pc, #160]	@ (8001cec <DMA2_Stream3_IRQHandler+0x190>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c4e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d110      	bne.n	8001c78 <DMA2_Stream3_IRQHandler+0x11c>
		    	{
		    		if((__DMA2_Stream3_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001c56:	4b25      	ldr	r3, [pc, #148]	@ (8001cec <DMA2_Stream3_IRQHandler+0x190>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d004      	beq.n	8001c70 <DMA2_Stream3_IRQHandler+0x114>
		    		{
		    			__DMA2_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001c66:	4b21      	ldr	r3, [pc, #132]	@ (8001cec <DMA2_Stream3_IRQHandler+0x190>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c6c:	4798      	blx	r3
 8001c6e:	e003      	b.n	8001c78 <DMA2_Stream3_IRQHandler+0x11c>
		    		}
		    		else
		    		{
		    			__DMA2_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001c70:	4b1e      	ldr	r3, [pc, #120]	@ (8001cec <DMA2_Stream3_IRQHandler+0x190>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c76:	4798      	blx	r3
		    }
		}

	}

	if(DMA_LISR & DMA_LISR_TCIF3)
 8001c78:	4b1b      	ldr	r3, [pc, #108]	@ (8001ce8 <DMA2_Stream3_IRQHandler+0x18c>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d02d      	beq.n	8001ce0 <DMA2_Stream3_IRQHandler+0x184>
	{
		if(__DMA2_Stream3_Config__->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 8001c84:	4b19      	ldr	r3, [pc, #100]	@ (8001cec <DMA2_Stream3_IRQHandler+0x190>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	2210      	movs	r2, #16
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d026      	beq.n	8001ce0 <DMA2_Stream3_IRQHandler+0x184>
		{
		    if (__DMA2_Stream3_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001c92:	4b16      	ldr	r3, [pc, #88]	@ (8001cec <DMA2_Stream3_IRQHandler+0x190>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d021      	beq.n	8001ce0 <DMA2_Stream3_IRQHandler+0x184>
		    {
		    	__DMA2_Stream3_Config__ ->ISR_Routines.Full_Transfer_Commplete_ISR();
 8001c9c:	4b13      	ldr	r3, [pc, #76]	@ (8001cec <DMA2_Stream3_IRQHandler+0x190>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ca2:	4798      	blx	r3
		    	DMA2 -> LIFCR |= DMA_LIFCR_CTCIF3;
 8001ca4:	4b0f      	ldr	r3, [pc, #60]	@ (8001ce4 <DMA2_Stream3_IRQHandler+0x188>)
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	4a0e      	ldr	r2, [pc, #56]	@ (8001ce4 <DMA2_Stream3_IRQHandler+0x188>)
 8001caa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001cae:	6093      	str	r3, [r2, #8]

		    	if(__DMA2_Stream3_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001cb0:	4b0e      	ldr	r3, [pc, #56]	@ (8001cec <DMA2_Stream3_IRQHandler+0x190>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cb6:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d110      	bne.n	8001ce0 <DMA2_Stream3_IRQHandler+0x184>
		    	{
		    		if((__DMA2_Stream3_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001cbe:	4b0b      	ldr	r3, [pc, #44]	@ (8001cec <DMA2_Stream3_IRQHandler+0x190>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d004      	beq.n	8001cd8 <DMA2_Stream3_IRQHandler+0x17c>
		    		{
		    			__DMA2_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001cce:	4b07      	ldr	r3, [pc, #28]	@ (8001cec <DMA2_Stream3_IRQHandler+0x190>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001cd4:	4798      	blx	r3
		    		}
		    	}
		    }
		}
	}
}
 8001cd6:	e003      	b.n	8001ce0 <DMA2_Stream3_IRQHandler+0x184>
		    			__DMA2_Stream3_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001cd8:	4b04      	ldr	r3, [pc, #16]	@ (8001cec <DMA2_Stream3_IRQHandler+0x190>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cde:	4798      	blx	r3
}
 8001ce0:	bf00      	nop
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40026400 	.word	0x40026400
 8001ce8:	2001c260 	.word	0x2001c260
 8001cec:	2001c24c 	.word	0x2001c24c

08001cf0 <DMA2_Stream4_IRQHandler>:

void DMA2_Stream4_IRQHandler(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
	DMA_HISR = DMA2 -> HISR;
 8001cf4:	4b4f      	ldr	r3, [pc, #316]	@ (8001e34 <DMA2_Stream4_IRQHandler+0x144>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	4a4f      	ldr	r2, [pc, #316]	@ (8001e38 <DMA2_Stream4_IRQHandler+0x148>)
 8001cfa:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF4)
 8001cfc:	4b4e      	ldr	r3, [pc, #312]	@ (8001e38 <DMA2_Stream4_IRQHandler+0x148>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0301 	and.w	r3, r3, #1
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d00e      	beq.n	8001d26 <DMA2_Stream4_IRQHandler+0x36>
	{
	    if (__DMA2_Stream4_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001d08:	4b4c      	ldr	r3, [pc, #304]	@ (8001e3c <DMA2_Stream4_IRQHandler+0x14c>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d009      	beq.n	8001d26 <DMA2_Stream4_IRQHandler+0x36>
	    {
	    	__DMA2_Stream4_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8001d12:	4b4a      	ldr	r3, [pc, #296]	@ (8001e3c <DMA2_Stream4_IRQHandler+0x14c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d18:	4798      	blx	r3
	    	DMA2 -> LIFCR |= DMA_HIFCR_CFEIF5;
 8001d1a:	4b46      	ldr	r3, [pc, #280]	@ (8001e34 <DMA2_Stream4_IRQHandler+0x144>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	4a45      	ldr	r2, [pc, #276]	@ (8001e34 <DMA2_Stream4_IRQHandler+0x144>)
 8001d20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d24:	6093      	str	r3, [r2, #8]
	    }
	}

	if(DMA_HISR & DMA_HISR_DMEIF4)
 8001d26:	4b44      	ldr	r3, [pc, #272]	@ (8001e38 <DMA2_Stream4_IRQHandler+0x148>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0304 	and.w	r3, r3, #4
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d00e      	beq.n	8001d50 <DMA2_Stream4_IRQHandler+0x60>
	{
	    if (__DMA2_Stream4_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8001d32:	4b42      	ldr	r3, [pc, #264]	@ (8001e3c <DMA2_Stream4_IRQHandler+0x14c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d009      	beq.n	8001d50 <DMA2_Stream4_IRQHandler+0x60>
	    {
	    	__DMA2_Stream4_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001d3c:	4b3f      	ldr	r3, [pc, #252]	@ (8001e3c <DMA2_Stream4_IRQHandler+0x14c>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d42:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF4;
 8001d44:	4b3b      	ldr	r3, [pc, #236]	@ (8001e34 <DMA2_Stream4_IRQHandler+0x144>)
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	4a3a      	ldr	r2, [pc, #232]	@ (8001e34 <DMA2_Stream4_IRQHandler+0x144>)
 8001d4a:	f043 0304 	orr.w	r3, r3, #4
 8001d4e:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_TEIF4)
 8001d50:	4b39      	ldr	r3, [pc, #228]	@ (8001e38 <DMA2_Stream4_IRQHandler+0x148>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0308 	and.w	r3, r3, #8
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d00e      	beq.n	8001d7a <DMA2_Stream4_IRQHandler+0x8a>
	{
	    if (__DMA2_Stream4_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001d5c:	4b37      	ldr	r3, [pc, #220]	@ (8001e3c <DMA2_Stream4_IRQHandler+0x14c>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d009      	beq.n	8001d7a <DMA2_Stream4_IRQHandler+0x8a>
	    {
	    	__DMA2_Stream4_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8001d66:	4b35      	ldr	r3, [pc, #212]	@ (8001e3c <DMA2_Stream4_IRQHandler+0x14c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d6c:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CTEIF4;
 8001d6e:	4b31      	ldr	r3, [pc, #196]	@ (8001e34 <DMA2_Stream4_IRQHandler+0x144>)
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	4a30      	ldr	r2, [pc, #192]	@ (8001e34 <DMA2_Stream4_IRQHandler+0x144>)
 8001d74:	f043 0308 	orr.w	r3, r3, #8
 8001d78:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_HTIF4)
 8001d7a:	4b2f      	ldr	r3, [pc, #188]	@ (8001e38 <DMA2_Stream4_IRQHandler+0x148>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0310 	and.w	r3, r3, #16
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d026      	beq.n	8001dd4 <DMA2_Stream4_IRQHandler+0xe4>
	{
	    if (__DMA2_Stream4_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001d86:	4b2d      	ldr	r3, [pc, #180]	@ (8001e3c <DMA2_Stream4_IRQHandler+0x14c>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d021      	beq.n	8001dd4 <DMA2_Stream4_IRQHandler+0xe4>
	    {
	    	__DMA2_Stream4_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001d90:	4b2a      	ldr	r3, [pc, #168]	@ (8001e3c <DMA2_Stream4_IRQHandler+0x14c>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d96:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CHTIF4;
 8001d98:	4b26      	ldr	r3, [pc, #152]	@ (8001e34 <DMA2_Stream4_IRQHandler+0x144>)
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	4a25      	ldr	r2, [pc, #148]	@ (8001e34 <DMA2_Stream4_IRQHandler+0x144>)
 8001d9e:	f043 0310 	orr.w	r3, r3, #16
 8001da2:	60d3      	str	r3, [r2, #12]

	    	if(__DMA2_Stream4_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001da4:	4b25      	ldr	r3, [pc, #148]	@ (8001e3c <DMA2_Stream4_IRQHandler+0x14c>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001daa:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d110      	bne.n	8001dd4 <DMA2_Stream4_IRQHandler+0xe4>
	    	{
	    		if((__DMA2_Stream4_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001db2:	4b22      	ldr	r3, [pc, #136]	@ (8001e3c <DMA2_Stream4_IRQHandler+0x14c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d004      	beq.n	8001dcc <DMA2_Stream4_IRQHandler+0xdc>
	    		{
	    			__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001dc2:	4b1e      	ldr	r3, [pc, #120]	@ (8001e3c <DMA2_Stream4_IRQHandler+0x14c>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001dc8:	4798      	blx	r3
 8001dca:	e003      	b.n	8001dd4 <DMA2_Stream4_IRQHandler+0xe4>
	    		}
	    		else
	    		{
	    			__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001dcc:	4b1b      	ldr	r3, [pc, #108]	@ (8001e3c <DMA2_Stream4_IRQHandler+0x14c>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dd2:	4798      	blx	r3
	    		}
	    	}
	    }
	}

	if(DMA_HISR & DMA_HISR_TCIF4)
 8001dd4:	4b18      	ldr	r3, [pc, #96]	@ (8001e38 <DMA2_Stream4_IRQHandler+0x148>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0320 	and.w	r3, r3, #32
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d026      	beq.n	8001e2e <DMA2_Stream4_IRQHandler+0x13e>
	{
	    if (__DMA2_Stream4_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001de0:	4b16      	ldr	r3, [pc, #88]	@ (8001e3c <DMA2_Stream4_IRQHandler+0x14c>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d021      	beq.n	8001e2e <DMA2_Stream4_IRQHandler+0x13e>
	    {
	    	__DMA2_Stream4_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001dea:	4b14      	ldr	r3, [pc, #80]	@ (8001e3c <DMA2_Stream4_IRQHandler+0x14c>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001df0:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CTCIF4;
 8001df2:	4b10      	ldr	r3, [pc, #64]	@ (8001e34 <DMA2_Stream4_IRQHandler+0x144>)
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	4a0f      	ldr	r2, [pc, #60]	@ (8001e34 <DMA2_Stream4_IRQHandler+0x144>)
 8001df8:	f043 0320 	orr.w	r3, r3, #32
 8001dfc:	60d3      	str	r3, [r2, #12]

	    	if(__DMA2_Stream4_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001dfe:	4b0f      	ldr	r3, [pc, #60]	@ (8001e3c <DMA2_Stream4_IRQHandler+0x14c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e04:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d110      	bne.n	8001e2e <DMA2_Stream4_IRQHandler+0x13e>
	    	{
	    		if((__DMA2_Stream4_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001e0c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e3c <DMA2_Stream4_IRQHandler+0x14c>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d004      	beq.n	8001e26 <DMA2_Stream4_IRQHandler+0x136>
	    		{
	    			__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001e1c:	4b07      	ldr	r3, [pc, #28]	@ (8001e3c <DMA2_Stream4_IRQHandler+0x14c>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e22:	4798      	blx	r3
	    			__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
	    		}
	    	}
	    }
	}
}
 8001e24:	e003      	b.n	8001e2e <DMA2_Stream4_IRQHandler+0x13e>
	    			__DMA2_Stream4_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001e26:	4b05      	ldr	r3, [pc, #20]	@ (8001e3c <DMA2_Stream4_IRQHandler+0x14c>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e2c:	4798      	blx	r3
}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	40026400 	.word	0x40026400
 8001e38:	2001c264 	.word	0x2001c264
 8001e3c:	2001c250 	.word	0x2001c250

08001e40 <DMA2_Stream5_IRQHandler>:




void DMA2_Stream5_IRQHandler(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
	DMA_HISR = DMA2 -> HISR;
 8001e44:	4b4f      	ldr	r3, [pc, #316]	@ (8001f84 <DMA2_Stream5_IRQHandler+0x144>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	4a4f      	ldr	r2, [pc, #316]	@ (8001f88 <DMA2_Stream5_IRQHandler+0x148>)
 8001e4a:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF5)
 8001e4c:	4b4e      	ldr	r3, [pc, #312]	@ (8001f88 <DMA2_Stream5_IRQHandler+0x148>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d00e      	beq.n	8001e76 <DMA2_Stream5_IRQHandler+0x36>
	{
	    if (__DMA2_Stream5_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001e58:	4b4c      	ldr	r3, [pc, #304]	@ (8001f8c <DMA2_Stream5_IRQHandler+0x14c>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d009      	beq.n	8001e76 <DMA2_Stream5_IRQHandler+0x36>
	    {
	    	__DMA2_Stream5_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8001e62:	4b4a      	ldr	r3, [pc, #296]	@ (8001f8c <DMA2_Stream5_IRQHandler+0x14c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e68:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CFEIF5;
 8001e6a:	4b46      	ldr	r3, [pc, #280]	@ (8001f84 <DMA2_Stream5_IRQHandler+0x144>)
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	4a45      	ldr	r2, [pc, #276]	@ (8001f84 <DMA2_Stream5_IRQHandler+0x144>)
 8001e70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e74:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_DMEIF5)
 8001e76:	4b44      	ldr	r3, [pc, #272]	@ (8001f88 <DMA2_Stream5_IRQHandler+0x148>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d00e      	beq.n	8001ea0 <DMA2_Stream5_IRQHandler+0x60>
	{
	    if (__DMA2_Stream5_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8001e82:	4b42      	ldr	r3, [pc, #264]	@ (8001f8c <DMA2_Stream5_IRQHandler+0x14c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d009      	beq.n	8001ea0 <DMA2_Stream5_IRQHandler+0x60>
	    {
	    	__DMA2_Stream5_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001e8c:	4b3f      	ldr	r3, [pc, #252]	@ (8001f8c <DMA2_Stream5_IRQHandler+0x14c>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e92:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF5;
 8001e94:	4b3b      	ldr	r3, [pc, #236]	@ (8001f84 <DMA2_Stream5_IRQHandler+0x144>)
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	4a3a      	ldr	r2, [pc, #232]	@ (8001f84 <DMA2_Stream5_IRQHandler+0x144>)
 8001e9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e9e:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_TEIF5)
 8001ea0:	4b39      	ldr	r3, [pc, #228]	@ (8001f88 <DMA2_Stream5_IRQHandler+0x148>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d00e      	beq.n	8001eca <DMA2_Stream5_IRQHandler+0x8a>
	{
	    if (__DMA2_Stream5_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001eac:	4b37      	ldr	r3, [pc, #220]	@ (8001f8c <DMA2_Stream5_IRQHandler+0x14c>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d009      	beq.n	8001eca <DMA2_Stream5_IRQHandler+0x8a>
	    {
	    	__DMA2_Stream5_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8001eb6:	4b35      	ldr	r3, [pc, #212]	@ (8001f8c <DMA2_Stream5_IRQHandler+0x14c>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ebc:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CTEIF5;
 8001ebe:	4b31      	ldr	r3, [pc, #196]	@ (8001f84 <DMA2_Stream5_IRQHandler+0x144>)
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	4a30      	ldr	r2, [pc, #192]	@ (8001f84 <DMA2_Stream5_IRQHandler+0x144>)
 8001ec4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ec8:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_HTIF5)
 8001eca:	4b2f      	ldr	r3, [pc, #188]	@ (8001f88 <DMA2_Stream5_IRQHandler+0x148>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d026      	beq.n	8001f24 <DMA2_Stream5_IRQHandler+0xe4>
	{
	    if (__DMA2_Stream5_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8001ed6:	4b2d      	ldr	r3, [pc, #180]	@ (8001f8c <DMA2_Stream5_IRQHandler+0x14c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d021      	beq.n	8001f24 <DMA2_Stream5_IRQHandler+0xe4>
	    {
	    	__DMA2_Stream5_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001ee0:	4b2a      	ldr	r3, [pc, #168]	@ (8001f8c <DMA2_Stream5_IRQHandler+0x14c>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ee6:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CHTIF5;
 8001ee8:	4b26      	ldr	r3, [pc, #152]	@ (8001f84 <DMA2_Stream5_IRQHandler+0x144>)
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	4a25      	ldr	r2, [pc, #148]	@ (8001f84 <DMA2_Stream5_IRQHandler+0x144>)
 8001eee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ef2:	60d3      	str	r3, [r2, #12]

	    	if(__DMA2_Stream5_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001ef4:	4b25      	ldr	r3, [pc, #148]	@ (8001f8c <DMA2_Stream5_IRQHandler+0x14c>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001efa:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d110      	bne.n	8001f24 <DMA2_Stream5_IRQHandler+0xe4>
	    	{
	    		if((__DMA2_Stream5_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001f02:	4b22      	ldr	r3, [pc, #136]	@ (8001f8c <DMA2_Stream5_IRQHandler+0x14c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d004      	beq.n	8001f1c <DMA2_Stream5_IRQHandler+0xdc>
	    		{
	    			__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001f12:	4b1e      	ldr	r3, [pc, #120]	@ (8001f8c <DMA2_Stream5_IRQHandler+0x14c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f18:	4798      	blx	r3
 8001f1a:	e003      	b.n	8001f24 <DMA2_Stream5_IRQHandler+0xe4>
	    		}
	    		else
	    		{
	    			__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001f1c:	4b1b      	ldr	r3, [pc, #108]	@ (8001f8c <DMA2_Stream5_IRQHandler+0x14c>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f22:	4798      	blx	r3
	    		}
	    	}
	    }
	}

	if(DMA_HISR & DMA_HISR_TCIF5)
 8001f24:	4b18      	ldr	r3, [pc, #96]	@ (8001f88 <DMA2_Stream5_IRQHandler+0x148>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d026      	beq.n	8001f7e <DMA2_Stream5_IRQHandler+0x13e>
	{
	    if (__DMA2_Stream5_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8001f30:	4b16      	ldr	r3, [pc, #88]	@ (8001f8c <DMA2_Stream5_IRQHandler+0x14c>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d021      	beq.n	8001f7e <DMA2_Stream5_IRQHandler+0x13e>
	    {
	    	__DMA2_Stream5_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8001f3a:	4b14      	ldr	r3, [pc, #80]	@ (8001f8c <DMA2_Stream5_IRQHandler+0x14c>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f40:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CTCIF5;
 8001f42:	4b10      	ldr	r3, [pc, #64]	@ (8001f84 <DMA2_Stream5_IRQHandler+0x144>)
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	4a0f      	ldr	r2, [pc, #60]	@ (8001f84 <DMA2_Stream5_IRQHandler+0x144>)
 8001f48:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001f4c:	60d3      	str	r3, [r2, #12]

	    	if(__DMA2_Stream5_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8001f4e:	4b0f      	ldr	r3, [pc, #60]	@ (8001f8c <DMA2_Stream5_IRQHandler+0x14c>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f54:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d110      	bne.n	8001f7e <DMA2_Stream5_IRQHandler+0x13e>
	    	{
	    		if((__DMA2_Stream5_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8001f5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f8c <DMA2_Stream5_IRQHandler+0x14c>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d004      	beq.n	8001f76 <DMA2_Stream5_IRQHandler+0x136>
	    		{
	    			__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8001f6c:	4b07      	ldr	r3, [pc, #28]	@ (8001f8c <DMA2_Stream5_IRQHandler+0x14c>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f72:	4798      	blx	r3
	    			__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
	    		}
	    	}
	    }
	}
}
 8001f74:	e003      	b.n	8001f7e <DMA2_Stream5_IRQHandler+0x13e>
	    			__DMA2_Stream5_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8001f76:	4b05      	ldr	r3, [pc, #20]	@ (8001f8c <DMA2_Stream5_IRQHandler+0x14c>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f7c:	4798      	blx	r3
}
 8001f7e:	bf00      	nop
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	40026400 	.word	0x40026400
 8001f88:	2001c264 	.word	0x2001c264
 8001f8c:	2001c254 	.word	0x2001c254

08001f90 <DMA2_Stream6_IRQHandler>:



void DMA2_Stream6_IRQHandler(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
	DMA_HISR = DMA2 -> HISR;
 8001f94:	4b4f      	ldr	r3, [pc, #316]	@ (80020d4 <DMA2_Stream6_IRQHandler+0x144>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	4a4f      	ldr	r2, [pc, #316]	@ (80020d8 <DMA2_Stream6_IRQHandler+0x148>)
 8001f9a:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF6)
 8001f9c:	4b4e      	ldr	r3, [pc, #312]	@ (80020d8 <DMA2_Stream6_IRQHandler+0x148>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d00e      	beq.n	8001fc6 <DMA2_Stream6_IRQHandler+0x36>
	{
	    if (__DMA2_Stream6_Config__ -> ISR_Routines.FIFO_Error_ISR)
 8001fa8:	4b4c      	ldr	r3, [pc, #304]	@ (80020dc <DMA2_Stream6_IRQHandler+0x14c>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d009      	beq.n	8001fc6 <DMA2_Stream6_IRQHandler+0x36>
	    {
	    	__DMA2_Stream6_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8001fb2:	4b4a      	ldr	r3, [pc, #296]	@ (80020dc <DMA2_Stream6_IRQHandler+0x14c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fb8:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CFEIF6;
 8001fba:	4b46      	ldr	r3, [pc, #280]	@ (80020d4 <DMA2_Stream6_IRQHandler+0x144>)
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	4a45      	ldr	r2, [pc, #276]	@ (80020d4 <DMA2_Stream6_IRQHandler+0x144>)
 8001fc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fc4:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_DMEIF6)
 8001fc6:	4b44      	ldr	r3, [pc, #272]	@ (80020d8 <DMA2_Stream6_IRQHandler+0x148>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d00e      	beq.n	8001ff0 <DMA2_Stream6_IRQHandler+0x60>
	{
	    if (__DMA2_Stream6_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8001fd2:	4b42      	ldr	r3, [pc, #264]	@ (80020dc <DMA2_Stream6_IRQHandler+0x14c>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d009      	beq.n	8001ff0 <DMA2_Stream6_IRQHandler+0x60>
	    {
	    	__DMA2_Stream6_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 8001fdc:	4b3f      	ldr	r3, [pc, #252]	@ (80020dc <DMA2_Stream6_IRQHandler+0x14c>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe2:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF6;
 8001fe4:	4b3b      	ldr	r3, [pc, #236]	@ (80020d4 <DMA2_Stream6_IRQHandler+0x144>)
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	4a3a      	ldr	r2, [pc, #232]	@ (80020d4 <DMA2_Stream6_IRQHandler+0x144>)
 8001fea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fee:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_TEIF6)
 8001ff0:	4b39      	ldr	r3, [pc, #228]	@ (80020d8 <DMA2_Stream6_IRQHandler+0x148>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d00e      	beq.n	800201a <DMA2_Stream6_IRQHandler+0x8a>
	{
	    if (__DMA2_Stream6_Config__ -> ISR_Routines.Transfer_Error_ISR)
 8001ffc:	4b37      	ldr	r3, [pc, #220]	@ (80020dc <DMA2_Stream6_IRQHandler+0x14c>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002002:	2b00      	cmp	r3, #0
 8002004:	d009      	beq.n	800201a <DMA2_Stream6_IRQHandler+0x8a>
	    {
	    	__DMA2_Stream6_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8002006:	4b35      	ldr	r3, [pc, #212]	@ (80020dc <DMA2_Stream6_IRQHandler+0x14c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800200c:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CTEIF6;
 800200e:	4b31      	ldr	r3, [pc, #196]	@ (80020d4 <DMA2_Stream6_IRQHandler+0x144>)
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	4a30      	ldr	r2, [pc, #192]	@ (80020d4 <DMA2_Stream6_IRQHandler+0x144>)
 8002014:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002018:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_HTIF6)
 800201a:	4b2f      	ldr	r3, [pc, #188]	@ (80020d8 <DMA2_Stream6_IRQHandler+0x148>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d026      	beq.n	8002074 <DMA2_Stream6_IRQHandler+0xe4>
	{
	    if (__DMA2_Stream6_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8002026:	4b2d      	ldr	r3, [pc, #180]	@ (80020dc <DMA2_Stream6_IRQHandler+0x14c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800202c:	2b00      	cmp	r3, #0
 800202e:	d021      	beq.n	8002074 <DMA2_Stream6_IRQHandler+0xe4>
	    {
	    	__DMA2_Stream6_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8002030:	4b2a      	ldr	r3, [pc, #168]	@ (80020dc <DMA2_Stream6_IRQHandler+0x14c>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002036:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CHTIF6;
 8002038:	4b26      	ldr	r3, [pc, #152]	@ (80020d4 <DMA2_Stream6_IRQHandler+0x144>)
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	4a25      	ldr	r2, [pc, #148]	@ (80020d4 <DMA2_Stream6_IRQHandler+0x144>)
 800203e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002042:	60d3      	str	r3, [r2, #12]

	    	if(__DMA2_Stream6_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8002044:	4b25      	ldr	r3, [pc, #148]	@ (80020dc <DMA2_Stream6_IRQHandler+0x14c>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800204a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800204e:	4293      	cmp	r3, r2
 8002050:	d110      	bne.n	8002074 <DMA2_Stream6_IRQHandler+0xe4>
	    	{
	    		if((__DMA2_Stream6_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 8002052:	4b22      	ldr	r3, [pc, #136]	@ (80020dc <DMA2_Stream6_IRQHandler+0x14c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d004      	beq.n	800206c <DMA2_Stream6_IRQHandler+0xdc>
	    		{
	    			__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 8002062:	4b1e      	ldr	r3, [pc, #120]	@ (80020dc <DMA2_Stream6_IRQHandler+0x14c>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002068:	4798      	blx	r3
 800206a:	e003      	b.n	8002074 <DMA2_Stream6_IRQHandler+0xe4>
	    		}
	    		else
	    		{
	    			__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 800206c:	4b1b      	ldr	r3, [pc, #108]	@ (80020dc <DMA2_Stream6_IRQHandler+0x14c>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002072:	4798      	blx	r3
	    		}
	    	}
	    }
	}

	if(DMA_HISR & DMA_HISR_TCIF6)
 8002074:	4b18      	ldr	r3, [pc, #96]	@ (80020d8 <DMA2_Stream6_IRQHandler+0x148>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d026      	beq.n	80020ce <DMA2_Stream6_IRQHandler+0x13e>
	{
	    if (__DMA2_Stream6_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 8002080:	4b16      	ldr	r3, [pc, #88]	@ (80020dc <DMA2_Stream6_IRQHandler+0x14c>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002086:	2b00      	cmp	r3, #0
 8002088:	d021      	beq.n	80020ce <DMA2_Stream6_IRQHandler+0x13e>
	    {
	    	__DMA2_Stream6_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 800208a:	4b14      	ldr	r3, [pc, #80]	@ (80020dc <DMA2_Stream6_IRQHandler+0x14c>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002090:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CTCIF6;
 8002092:	4b10      	ldr	r3, [pc, #64]	@ (80020d4 <DMA2_Stream6_IRQHandler+0x144>)
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	4a0f      	ldr	r2, [pc, #60]	@ (80020d4 <DMA2_Stream6_IRQHandler+0x144>)
 8002098:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800209c:	60d3      	str	r3, [r2, #12]

	    	if(__DMA2_Stream6_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 800209e:	4b0f      	ldr	r3, [pc, #60]	@ (80020dc <DMA2_Stream6_IRQHandler+0x14c>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020a4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d110      	bne.n	80020ce <DMA2_Stream6_IRQHandler+0x13e>
	    	{
	    		if((__DMA2_Stream6_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80020ac:	4b0b      	ldr	r3, [pc, #44]	@ (80020dc <DMA2_Stream6_IRQHandler+0x14c>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d004      	beq.n	80020c6 <DMA2_Stream6_IRQHandler+0x136>
	    		{
	    			__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80020bc:	4b07      	ldr	r3, [pc, #28]	@ (80020dc <DMA2_Stream6_IRQHandler+0x14c>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020c2:	4798      	blx	r3
	    			__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
	    		}
	    	}
	    }
	}
}
 80020c4:	e003      	b.n	80020ce <DMA2_Stream6_IRQHandler+0x13e>
	    			__DMA2_Stream6_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80020c6:	4b05      	ldr	r3, [pc, #20]	@ (80020dc <DMA2_Stream6_IRQHandler+0x14c>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020cc:	4798      	blx	r3
}
 80020ce:	bf00      	nop
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40026400 	.word	0x40026400
 80020d8:	2001c264 	.word	0x2001c264
 80020dc:	2001c258 	.word	0x2001c258

080020e0 <DMA2_Stream7_IRQHandler>:


void DMA2_Stream7_IRQHandler(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
	DMA_HISR = DMA2 -> HISR;
 80020e4:	4b4f      	ldr	r3, [pc, #316]	@ (8002224 <DMA2_Stream7_IRQHandler+0x144>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	4a4f      	ldr	r2, [pc, #316]	@ (8002228 <DMA2_Stream7_IRQHandler+0x148>)
 80020ea:	6013      	str	r3, [r2, #0]

	if(DMA_HISR & DMA_HISR_FEIF7)
 80020ec:	4b4e      	ldr	r3, [pc, #312]	@ (8002228 <DMA2_Stream7_IRQHandler+0x148>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d00e      	beq.n	8002116 <DMA2_Stream7_IRQHandler+0x36>
	{
	    if (__DMA2_Stream7_Config__ -> ISR_Routines.FIFO_Error_ISR)
 80020f8:	4b4c      	ldr	r3, [pc, #304]	@ (800222c <DMA2_Stream7_IRQHandler+0x14c>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d009      	beq.n	8002116 <DMA2_Stream7_IRQHandler+0x36>
	    {
	    	__DMA2_Stream7_Config__ ->ISR_Routines.FIFO_Error_ISR();
 8002102:	4b4a      	ldr	r3, [pc, #296]	@ (800222c <DMA2_Stream7_IRQHandler+0x14c>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002108:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CFEIF7;
 800210a:	4b46      	ldr	r3, [pc, #280]	@ (8002224 <DMA2_Stream7_IRQHandler+0x144>)
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	4a45      	ldr	r2, [pc, #276]	@ (8002224 <DMA2_Stream7_IRQHandler+0x144>)
 8002110:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002114:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_DMEIF7)
 8002116:	4b44      	ldr	r3, [pc, #272]	@ (8002228 <DMA2_Stream7_IRQHandler+0x148>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00e      	beq.n	8002140 <DMA2_Stream7_IRQHandler+0x60>
	{
	    if (__DMA2_Stream7_Config__ -> ISR_Routines.Direct_Mode_Error_ISR)
 8002122:	4b42      	ldr	r3, [pc, #264]	@ (800222c <DMA2_Stream7_IRQHandler+0x14c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002128:	2b00      	cmp	r3, #0
 800212a:	d009      	beq.n	8002140 <DMA2_Stream7_IRQHandler+0x60>
	    {
	    	__DMA2_Stream7_Config__ ->ISR_Routines.Direct_Mode_Error_ISR();
 800212c:	4b3f      	ldr	r3, [pc, #252]	@ (800222c <DMA2_Stream7_IRQHandler+0x14c>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002132:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF7;
 8002134:	4b3b      	ldr	r3, [pc, #236]	@ (8002224 <DMA2_Stream7_IRQHandler+0x144>)
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	4a3a      	ldr	r2, [pc, #232]	@ (8002224 <DMA2_Stream7_IRQHandler+0x144>)
 800213a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800213e:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_TEIF7)
 8002140:	4b39      	ldr	r3, [pc, #228]	@ (8002228 <DMA2_Stream7_IRQHandler+0x148>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d00e      	beq.n	800216a <DMA2_Stream7_IRQHandler+0x8a>
	{
	    if (__DMA2_Stream7_Config__ -> ISR_Routines.Transfer_Error_ISR)
 800214c:	4b37      	ldr	r3, [pc, #220]	@ (800222c <DMA2_Stream7_IRQHandler+0x14c>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002152:	2b00      	cmp	r3, #0
 8002154:	d009      	beq.n	800216a <DMA2_Stream7_IRQHandler+0x8a>
	    {
	    	__DMA2_Stream7_Config__ ->ISR_Routines.Transfer_Error_ISR();
 8002156:	4b35      	ldr	r3, [pc, #212]	@ (800222c <DMA2_Stream7_IRQHandler+0x14c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800215c:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CTEIF7;
 800215e:	4b31      	ldr	r3, [pc, #196]	@ (8002224 <DMA2_Stream7_IRQHandler+0x144>)
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	4a30      	ldr	r2, [pc, #192]	@ (8002224 <DMA2_Stream7_IRQHandler+0x144>)
 8002164:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002168:	60d3      	str	r3, [r2, #12]
	    }
	}

	if(DMA_HISR & DMA_HISR_HTIF7)
 800216a:	4b2f      	ldr	r3, [pc, #188]	@ (8002228 <DMA2_Stream7_IRQHandler+0x148>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d026      	beq.n	80021c4 <DMA2_Stream7_IRQHandler+0xe4>
	{
	    if (__DMA2_Stream7_Config__ -> ISR_Routines.Half_Transfer_Complete_ISR)
 8002176:	4b2d      	ldr	r3, [pc, #180]	@ (800222c <DMA2_Stream7_IRQHandler+0x14c>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800217c:	2b00      	cmp	r3, #0
 800217e:	d021      	beq.n	80021c4 <DMA2_Stream7_IRQHandler+0xe4>
	    {
	    	__DMA2_Stream7_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 8002180:	4b2a      	ldr	r3, [pc, #168]	@ (800222c <DMA2_Stream7_IRQHandler+0x14c>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002186:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CHTIF7;
 8002188:	4b26      	ldr	r3, [pc, #152]	@ (8002224 <DMA2_Stream7_IRQHandler+0x144>)
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	4a25      	ldr	r2, [pc, #148]	@ (8002224 <DMA2_Stream7_IRQHandler+0x144>)
 800218e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002192:	60d3      	str	r3, [r2, #12]

	    	if(__DMA2_Stream7_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 8002194:	4b25      	ldr	r3, [pc, #148]	@ (800222c <DMA2_Stream7_IRQHandler+0x14c>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800219a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800219e:	4293      	cmp	r3, r2
 80021a0:	d110      	bne.n	80021c4 <DMA2_Stream7_IRQHandler+0xe4>
	    	{
	    		if((__DMA2_Stream7_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80021a2:	4b22      	ldr	r3, [pc, #136]	@ (800222c <DMA2_Stream7_IRQHandler+0x14c>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d004      	beq.n	80021bc <DMA2_Stream7_IRQHandler+0xdc>
	    		{
	    			__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 80021b2:	4b1e      	ldr	r3, [pc, #120]	@ (800222c <DMA2_Stream7_IRQHandler+0x14c>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021b8:	4798      	blx	r3
 80021ba:	e003      	b.n	80021c4 <DMA2_Stream7_IRQHandler+0xe4>
	    		}
	    		else
	    		{
	    			__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 80021bc:	4b1b      	ldr	r3, [pc, #108]	@ (800222c <DMA2_Stream7_IRQHandler+0x14c>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021c2:	4798      	blx	r3
	    		}
	    	}
	    }
	}

	if(DMA_HISR & DMA_HISR_TCIF7)
 80021c4:	4b18      	ldr	r3, [pc, #96]	@ (8002228 <DMA2_Stream7_IRQHandler+0x148>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d026      	beq.n	800221e <DMA2_Stream7_IRQHandler+0x13e>
	{
	    if (__DMA2_Stream7_Config__ -> ISR_Routines.Full_Transfer_Commplete_ISR)
 80021d0:	4b16      	ldr	r3, [pc, #88]	@ (800222c <DMA2_Stream7_IRQHandler+0x14c>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d021      	beq.n	800221e <DMA2_Stream7_IRQHandler+0x13e>
	    {
	    	__DMA2_Stream7_Config__ ->ISR_Routines.Half_Transfer_Complete_ISR();
 80021da:	4b14      	ldr	r3, [pc, #80]	@ (800222c <DMA2_Stream7_IRQHandler+0x14c>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021e0:	4798      	blx	r3
	    	DMA2 -> HIFCR |= DMA_HIFCR_CTCIF7;
 80021e2:	4b10      	ldr	r3, [pc, #64]	@ (8002224 <DMA2_Stream7_IRQHandler+0x144>)
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	4a0f      	ldr	r2, [pc, #60]	@ (8002224 <DMA2_Stream7_IRQHandler+0x144>)
 80021e8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80021ec:	60d3      	str	r3, [r2, #12]

	    	if(__DMA2_Stream7_Config__->double_buffer_mode == DMA_Configuration.Double_Buffer_Mode.Enable )
 80021ee:	4b0f      	ldr	r3, [pc, #60]	@ (800222c <DMA2_Stream7_IRQHandler+0x14c>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021f4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d110      	bne.n	800221e <DMA2_Stream7_IRQHandler+0x13e>
	    	{
	    		if((__DMA2_Stream7_Config__->Request.Stream->CR & DMA_SxCR_DBM_Msk) != 0)
 80021fc:	4b0b      	ldr	r3, [pc, #44]	@ (800222c <DMA2_Stream7_IRQHandler+0x14c>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d004      	beq.n	8002216 <DMA2_Stream7_IRQHandler+0x136>
	    		{
	    			__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_1_ISR();
 800220c:	4b07      	ldr	r3, [pc, #28]	@ (800222c <DMA2_Stream7_IRQHandler+0x14c>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002212:	4798      	blx	r3
	    			__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
	    		}
	    	}
	    }
	}
}
 8002214:	e003      	b.n	800221e <DMA2_Stream7_IRQHandler+0x13e>
	    			__DMA2_Stream7_Config__ -> ISR_Routines.Double_Buffer_Mode_Target_2_ISR();
 8002216:	4b05      	ldr	r3, [pc, #20]	@ (800222c <DMA2_Stream7_IRQHandler+0x14c>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800221c:	4798      	blx	r3
}
 800221e:	bf00      	nop
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	40026400 	.word	0x40026400
 8002228:	2001c264 	.word	0x2001c264
 800222c:	2001c25c 	.word	0x2001c25c

08002230 <DMA_Clock_Enable>:
 * the RCC AHB1 peripheral clock enable register.
 *
 * @param[in] config Pointer to the `DMA_Config` structure that contains the DMA controller configuration.
 */
void DMA_Clock_Enable(DMA_Config *config)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
	if(config -> Request.Controller == DMA1){
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a0c      	ldr	r2, [pc, #48]	@ (8002270 <DMA_Clock_Enable+0x40>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d105      	bne.n	800224e <DMA_Clock_Enable+0x1e>
		RCC -> AHB1ENR |= RCC_AHB1ENR_DMA1EN;
 8002242:	4b0c      	ldr	r3, [pc, #48]	@ (8002274 <DMA_Clock_Enable+0x44>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002246:	4a0b      	ldr	r2, [pc, #44]	@ (8002274 <DMA_Clock_Enable+0x44>)
 8002248:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800224c:	6313      	str	r3, [r2, #48]	@ 0x30
	}
	if(config -> Request.Controller == DMA2)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a09      	ldr	r2, [pc, #36]	@ (8002278 <DMA_Clock_Enable+0x48>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d105      	bne.n	8002264 <DMA_Clock_Enable+0x34>
		{
		RCC -> AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 8002258:	4b06      	ldr	r3, [pc, #24]	@ (8002274 <DMA_Clock_Enable+0x44>)
 800225a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225c:	4a05      	ldr	r2, [pc, #20]	@ (8002274 <DMA_Clock_Enable+0x44>)
 800225e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002262:	6313      	str	r3, [r2, #48]	@ 0x30
		}
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr
 8002270:	40026000 	.word	0x40026000
 8002274:	40023800 	.word	0x40023800
 8002278:	40026400 	.word	0x40026400

0800227c <DMA_Init>:
 * @param[in] config Pointer to the `DMA_Config` structure containing the configuration parameters.
 *
 * @return int8_t Returns 1 on successful initialization, or -1 if an error occurs.
 */
int8_t DMA_Init(DMA_Config *config)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
//	DMA_Clock_Disable(config);
    DMA_Clock_Enable(config);  // Enable the clock for the specified DMA controller
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f7ff ffd3 	bl	8002230 <DMA_Clock_Enable>

    if (config->Request.Stream->CR & DMA_SxCR_EN)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0301 	and.w	r3, r3, #1
 8002294:	2b00      	cmp	r3, #0
 8002296:	d00f      	beq.n	80022b8 <DMA_Init+0x3c>
    {
    	config->Request.Stream->CR &= ~DMA_SxCR_EN;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f022 0201 	bic.w	r2, r2, #1
 80022a6:	601a      	str	r2, [r3, #0]
        while (config->Request.Stream->CR & DMA_SxCR_EN);  // Wait until disabled
 80022a8:	bf00      	nop
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0301 	and.w	r3, r3, #1
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d1f8      	bne.n	80022aa <DMA_Init+0x2e>
    }


    config->Request.Stream->CR |= config->Request.channel << DMA_SxCR_CHSEL_Pos;  // Set the DMA channel
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	6819      	ldr	r1, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	7a1b      	ldrb	r3, [r3, #8]
 80022c2:	065a      	lsls	r2, r3, #25
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	430a      	orrs	r2, r1
 80022ca:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->circular_mode;  // Configure circular mode
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	6819      	ldr	r1, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	699a      	ldr	r2, [r3, #24]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	430a      	orrs	r2, r1
 80022dc:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->flow_control;  // Set flow control
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	6819      	ldr	r1, [r3, #0]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	68da      	ldr	r2, [r3, #12]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	430a      	orrs	r2, r1
 80022ee:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->priority_level;  // Set priority level
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	6819      	ldr	r1, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	695a      	ldr	r2, [r3, #20]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	430a      	orrs	r2, r1
 8002300:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->memory_data_size;  // Set memory data size
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	6819      	ldr	r1, [r3, #0]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	430a      	orrs	r2, r1
 8002312:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->peripheral_data_size;  // Set peripheral data size
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	6819      	ldr	r1, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	430a      	orrs	r2, r1
 8002324:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->transfer_direction;  // Set transfer direction
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	6819      	ldr	r1, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	691a      	ldr	r2, [r3, #16]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	430a      	orrs	r2, r1
 8002336:	601a      	str	r2, [r3, #0]

    // Configure DMA interrupts if enabled


     if(config->interrupts != DMA_Configuration.DMA_Interrupts.Disable)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	69db      	ldr	r3, [r3, #28]
 800233c:	2200      	movs	r2, #0
 800233e:	4293      	cmp	r3, r2
 8002340:	f000 8110 	beq.w	8002564 <DMA_Init+0x2e8>
    {

        if(config->interrupts & DMA_Configuration.DMA_Interrupts.Fifo_Error)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	69db      	ldr	r3, [r3, #28]
 8002348:	2280      	movs	r2, #128	@ 0x80
 800234a:	4013      	ands	r3, r2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d008      	beq.n	8002362 <DMA_Init+0xe6>
        {
        	config->Request.Stream->FCR |= config->interrupts;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	6959      	ldr	r1, [r3, #20]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	69da      	ldr	r2, [r3, #28]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	430a      	orrs	r2, r1
 8002360:	615a      	str	r2, [r3, #20]
        }

        if(config->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Complete)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	2210      	movs	r2, #16
 8002368:	4013      	ands	r3, r2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d007      	beq.n	800237e <DMA_Init+0x102>
        {
        	config->Request.Stream->CR |= DMA_SxCR_TCIE;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f042 0210 	orr.w	r2, r2, #16
 800237c:	601a      	str	r2, [r3, #0]
        }

        if(config->interrupts & DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	69db      	ldr	r3, [r3, #28]
 8002382:	2208      	movs	r2, #8
 8002384:	4013      	ands	r3, r2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d007      	beq.n	800239a <DMA_Init+0x11e>
        {
        	config->Request.Stream->CR |= DMA_SxCR_HTIE;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f042 0208 	orr.w	r2, r2, #8
 8002398:	601a      	str	r2, [r3, #0]
        }

        if(config->interrupts & DMA_Configuration.DMA_Interrupts.Transfer_Error)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	69db      	ldr	r3, [r3, #28]
 800239e:	2204      	movs	r2, #4
 80023a0:	4013      	ands	r3, r2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d007      	beq.n	80023b6 <DMA_Init+0x13a>
        {
        	config->Request.Stream->CR |= DMA_SxCR_TEIE;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f042 0204 	orr.w	r2, r2, #4
 80023b4:	601a      	str	r2, [r3, #0]
        }
        if(config->interrupts & DMA_Configuration.DMA_Interrupts.Direct_Mode_Error)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	69db      	ldr	r3, [r3, #28]
 80023ba:	2202      	movs	r2, #2
 80023bc:	4013      	ands	r3, r2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d007      	beq.n	80023d2 <DMA_Init+0x156>
        {
        	config->Request.Stream->CR |= DMA_SxCR_DMEIE;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f042 0202 	orr.w	r2, r2, #2
 80023d0:	601a      	str	r2, [r3, #0]
        }

        // Enable the corresponding NVIC interrupt for the DMA stream
        if(config->Request.Controller == DMA1)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a80      	ldr	r2, [pc, #512]	@ (80025d8 <DMA_Init+0x35c>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d15f      	bne.n	800249c <DMA_Init+0x220>
        {
            if(config->Request.Stream == DMA1_Stream0){
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	4a7e      	ldr	r2, [pc, #504]	@ (80025dc <DMA_Init+0x360>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d106      	bne.n	80023f4 <DMA_Init+0x178>
            	__DMA1_Stream0_Config__ = config;
 80023e6:	4a7e      	ldr	r2, [pc, #504]	@ (80025e0 <DMA_Init+0x364>)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6013      	str	r3, [r2, #0]
            	NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80023ec:	200b      	movs	r0, #11
 80023ee:	f7fe fc1b 	bl	8000c28 <__NVIC_EnableIRQ>
 80023f2:	e0b7      	b.n	8002564 <DMA_Init+0x2e8>
            }
            else if(config->Request.Stream == DMA1_Stream1){
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	4a7a      	ldr	r2, [pc, #488]	@ (80025e4 <DMA_Init+0x368>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d106      	bne.n	800240c <DMA_Init+0x190>
            	__DMA1_Stream1_Config__ = config;
 80023fe:	4a7a      	ldr	r2, [pc, #488]	@ (80025e8 <DMA_Init+0x36c>)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6013      	str	r3, [r2, #0]
            	NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002404:	200c      	movs	r0, #12
 8002406:	f7fe fc0f 	bl	8000c28 <__NVIC_EnableIRQ>
 800240a:	e0ab      	b.n	8002564 <DMA_Init+0x2e8>
            }
            else if(config->Request.Stream == DMA1_Stream2){
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	4a76      	ldr	r2, [pc, #472]	@ (80025ec <DMA_Init+0x370>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d106      	bne.n	8002424 <DMA_Init+0x1a8>
            	__DMA1_Stream2_Config__ = config;
 8002416:	4a76      	ldr	r2, [pc, #472]	@ (80025f0 <DMA_Init+0x374>)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6013      	str	r3, [r2, #0]
            	NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800241c:	200d      	movs	r0, #13
 800241e:	f7fe fc03 	bl	8000c28 <__NVIC_EnableIRQ>
 8002422:	e09f      	b.n	8002564 <DMA_Init+0x2e8>
            }
            else if(config->Request.Stream == DMA1_Stream3){
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	4a72      	ldr	r2, [pc, #456]	@ (80025f4 <DMA_Init+0x378>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d106      	bne.n	800243c <DMA_Init+0x1c0>
            	__DMA1_Stream3_Config__ = config;
 800242e:	4a72      	ldr	r2, [pc, #456]	@ (80025f8 <DMA_Init+0x37c>)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6013      	str	r3, [r2, #0]
            	NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002434:	200e      	movs	r0, #14
 8002436:	f7fe fbf7 	bl	8000c28 <__NVIC_EnableIRQ>
 800243a:	e093      	b.n	8002564 <DMA_Init+0x2e8>
            }
            else if(config->Request.Stream == DMA1_Stream4){
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	4a6e      	ldr	r2, [pc, #440]	@ (80025fc <DMA_Init+0x380>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d106      	bne.n	8002454 <DMA_Init+0x1d8>
            	__DMA1_Stream4_Config__ = config;
 8002446:	4a6e      	ldr	r2, [pc, #440]	@ (8002600 <DMA_Init+0x384>)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6013      	str	r3, [r2, #0]
            	NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800244c:	200f      	movs	r0, #15
 800244e:	f7fe fbeb 	bl	8000c28 <__NVIC_EnableIRQ>
 8002452:	e087      	b.n	8002564 <DMA_Init+0x2e8>
            }
            else if(config->Request.Stream == DMA1_Stream5){
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	4a6a      	ldr	r2, [pc, #424]	@ (8002604 <DMA_Init+0x388>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d106      	bne.n	800246c <DMA_Init+0x1f0>
            	__DMA1_Stream5_Config__ = config;
 800245e:	4a6a      	ldr	r2, [pc, #424]	@ (8002608 <DMA_Init+0x38c>)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6013      	str	r3, [r2, #0]
            	NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002464:	2010      	movs	r0, #16
 8002466:	f7fe fbdf 	bl	8000c28 <__NVIC_EnableIRQ>
 800246a:	e07b      	b.n	8002564 <DMA_Init+0x2e8>
            }
            else if(config->Request.Stream == DMA1_Stream6) {
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	4a66      	ldr	r2, [pc, #408]	@ (800260c <DMA_Init+0x390>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d106      	bne.n	8002484 <DMA_Init+0x208>
            	__DMA1_Stream6_Config__ = config;
 8002476:	4a66      	ldr	r2, [pc, #408]	@ (8002610 <DMA_Init+0x394>)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6013      	str	r3, [r2, #0]
            	NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800247c:	2011      	movs	r0, #17
 800247e:	f7fe fbd3 	bl	8000c28 <__NVIC_EnableIRQ>
 8002482:	e06f      	b.n	8002564 <DMA_Init+0x2e8>
            }
            else if(config->Request.Stream == DMA1_Stream7){
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	4a62      	ldr	r2, [pc, #392]	@ (8002614 <DMA_Init+0x398>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d16a      	bne.n	8002564 <DMA_Init+0x2e8>
            	__DMA1_Stream7_Config__ = config;
 800248e:	4a62      	ldr	r2, [pc, #392]	@ (8002618 <DMA_Init+0x39c>)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6013      	str	r3, [r2, #0]
            	NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8002494:	202f      	movs	r0, #47	@ 0x2f
 8002496:	f7fe fbc7 	bl	8000c28 <__NVIC_EnableIRQ>
 800249a:	e063      	b.n	8002564 <DMA_Init+0x2e8>
            }
        }
        else if(config->Request.Controller == DMA2)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a5e      	ldr	r2, [pc, #376]	@ (800261c <DMA_Init+0x3a0>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d15e      	bne.n	8002564 <DMA_Init+0x2e8>
        {
            if(config->Request.Stream == DMA2_Stream0){
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	4a5d      	ldr	r2, [pc, #372]	@ (8002620 <DMA_Init+0x3a4>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d106      	bne.n	80024be <DMA_Init+0x242>
            	__DMA2_Stream0_Config__ = config;
 80024b0:	4a5c      	ldr	r2, [pc, #368]	@ (8002624 <DMA_Init+0x3a8>)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6013      	str	r3, [r2, #0]
            	NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80024b6:	2038      	movs	r0, #56	@ 0x38
 80024b8:	f7fe fbb6 	bl	8000c28 <__NVIC_EnableIRQ>
 80024bc:	e052      	b.n	8002564 <DMA_Init+0x2e8>
            }
            else if(config->Request.Stream == DMA2_Stream1){
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	4a59      	ldr	r2, [pc, #356]	@ (8002628 <DMA_Init+0x3ac>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d106      	bne.n	80024d6 <DMA_Init+0x25a>
            	__DMA2_Stream1_Config__ = config;
 80024c8:	4a58      	ldr	r2, [pc, #352]	@ (800262c <DMA_Init+0x3b0>)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6013      	str	r3, [r2, #0]
            	NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80024ce:	2039      	movs	r0, #57	@ 0x39
 80024d0:	f7fe fbaa 	bl	8000c28 <__NVIC_EnableIRQ>
 80024d4:	e046      	b.n	8002564 <DMA_Init+0x2e8>
            }
            else if(config->Request.Stream == DMA2_Stream2){
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	4a55      	ldr	r2, [pc, #340]	@ (8002630 <DMA_Init+0x3b4>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d106      	bne.n	80024ee <DMA_Init+0x272>
            	__DMA2_Stream2_Config__ = config;
 80024e0:	4a54      	ldr	r2, [pc, #336]	@ (8002634 <DMA_Init+0x3b8>)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6013      	str	r3, [r2, #0]
            	NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80024e6:	203a      	movs	r0, #58	@ 0x3a
 80024e8:	f7fe fb9e 	bl	8000c28 <__NVIC_EnableIRQ>
 80024ec:	e03a      	b.n	8002564 <DMA_Init+0x2e8>
            }
            else if(config->Request.Stream == DMA2_Stream3){
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	4a51      	ldr	r2, [pc, #324]	@ (8002638 <DMA_Init+0x3bc>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d106      	bne.n	8002506 <DMA_Init+0x28a>
            	__DMA2_Stream3_Config__ = config;
 80024f8:	4a50      	ldr	r2, [pc, #320]	@ (800263c <DMA_Init+0x3c0>)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6013      	str	r3, [r2, #0]
            	NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80024fe:	203b      	movs	r0, #59	@ 0x3b
 8002500:	f7fe fb92 	bl	8000c28 <__NVIC_EnableIRQ>
 8002504:	e02e      	b.n	8002564 <DMA_Init+0x2e8>
            }
            else if(config->Request.Stream == DMA2_Stream4){
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	4a4d      	ldr	r2, [pc, #308]	@ (8002640 <DMA_Init+0x3c4>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d106      	bne.n	800251e <DMA_Init+0x2a2>
            	__DMA2_Stream4_Config__ = config;
 8002510:	4a4c      	ldr	r2, [pc, #304]	@ (8002644 <DMA_Init+0x3c8>)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6013      	str	r3, [r2, #0]
            	NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8002516:	203c      	movs	r0, #60	@ 0x3c
 8002518:	f7fe fb86 	bl	8000c28 <__NVIC_EnableIRQ>
 800251c:	e022      	b.n	8002564 <DMA_Init+0x2e8>
            }
            else if(config->Request.Stream == DMA2_Stream5){
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	4a49      	ldr	r2, [pc, #292]	@ (8002648 <DMA_Init+0x3cc>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d106      	bne.n	8002536 <DMA_Init+0x2ba>
            	__DMA2_Stream5_Config__ = config;
 8002528:	4a48      	ldr	r2, [pc, #288]	@ (800264c <DMA_Init+0x3d0>)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6013      	str	r3, [r2, #0]
            	NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 800252e:	2044      	movs	r0, #68	@ 0x44
 8002530:	f7fe fb7a 	bl	8000c28 <__NVIC_EnableIRQ>
 8002534:	e016      	b.n	8002564 <DMA_Init+0x2e8>
            }
            else if(config->Request.Stream == DMA2_Stream6){
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	4a45      	ldr	r2, [pc, #276]	@ (8002650 <DMA_Init+0x3d4>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d106      	bne.n	800254e <DMA_Init+0x2d2>
            	__DMA2_Stream6_Config__ = config;
 8002540:	4a44      	ldr	r2, [pc, #272]	@ (8002654 <DMA_Init+0x3d8>)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6013      	str	r3, [r2, #0]
            	NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002546:	2045      	movs	r0, #69	@ 0x45
 8002548:	f7fe fb6e 	bl	8000c28 <__NVIC_EnableIRQ>
 800254c:	e00a      	b.n	8002564 <DMA_Init+0x2e8>
            }
            else if(config->Request.Stream == DMA2_Stream7){
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	4a41      	ldr	r2, [pc, #260]	@ (8002658 <DMA_Init+0x3dc>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d105      	bne.n	8002564 <DMA_Init+0x2e8>
            	__DMA2_Stream7_Config__ = config;
 8002558:	4a40      	ldr	r2, [pc, #256]	@ (800265c <DMA_Init+0x3e0>)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6013      	str	r3, [r2, #0]
//            	NVIC_SetPriority(DMA2_Stream7_IRQn,0);
            	NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800255e:	2046      	movs	r0, #70	@ 0x46
 8002560:	f7fe fb62 	bl	8000c28 <__NVIC_EnableIRQ>
            }
        }
    }

    // Configure memory and peripheral pointer increments
    config->Request.Stream->CR |= config->memory_pointer_increment;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	8c1b      	ldrh	r3, [r3, #32]
 800256e:	4619      	mov	r1, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	430a      	orrs	r2, r1
 8002576:	601a      	str	r2, [r3, #0]
    config->Request.Stream->CR |= config->peripheral_pointer_increment;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8002582:	4619      	mov	r1, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	430a      	orrs	r2, r1
 800258a:	601a      	str	r2, [r3, #0]

    // Configure circular mode
    if(config->circular_mode == DMA_Configuration.Circular_Mode.Enable)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	699b      	ldr	r3, [r3, #24]
 8002590:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002594:	4293      	cmp	r3, r2
 8002596:	d108      	bne.n	80025aa <DMA_Init+0x32e>
    {
        config->Request.Stream->CR |= DMA_SxCR_CIRC;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	e010      	b.n	80025cc <DMA_Init+0x350>
    }
    else if(config->circular_mode == DMA_Configuration.Circular_Mode.Disable)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	2200      	movs	r2, #0
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d108      	bne.n	80025c6 <DMA_Init+0x34a>
    {
        config->Request.Stream->CR &= ~DMA_SxCR_CIRC;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80025c2:	601a      	str	r2, [r3, #0]
 80025c4:	e002      	b.n	80025cc <DMA_Init+0x350>
    }
    else
    {
        return -1;  // Return -1 if circular mode configuration is invalid
 80025c6:	f04f 33ff 	mov.w	r3, #4294967295
 80025ca:	e000      	b.n	80025ce <DMA_Init+0x352>
    }

    return 1;  // Return 1 on successful initialization
 80025cc:	2301      	movs	r3, #1
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	40026000 	.word	0x40026000
 80025dc:	40026010 	.word	0x40026010
 80025e0:	2001c220 	.word	0x2001c220
 80025e4:	40026028 	.word	0x40026028
 80025e8:	2001c224 	.word	0x2001c224
 80025ec:	40026040 	.word	0x40026040
 80025f0:	2001c228 	.word	0x2001c228
 80025f4:	40026058 	.word	0x40026058
 80025f8:	2001c22c 	.word	0x2001c22c
 80025fc:	40026070 	.word	0x40026070
 8002600:	2001c230 	.word	0x2001c230
 8002604:	40026088 	.word	0x40026088
 8002608:	2001c234 	.word	0x2001c234
 800260c:	400260a0 	.word	0x400260a0
 8002610:	2001c238 	.word	0x2001c238
 8002614:	400260b8 	.word	0x400260b8
 8002618:	2001c23c 	.word	0x2001c23c
 800261c:	40026400 	.word	0x40026400
 8002620:	40026410 	.word	0x40026410
 8002624:	2001c240 	.word	0x2001c240
 8002628:	40026428 	.word	0x40026428
 800262c:	2001c244 	.word	0x2001c244
 8002630:	40026440 	.word	0x40026440
 8002634:	2001c248 	.word	0x2001c248
 8002638:	40026458 	.word	0x40026458
 800263c:	2001c24c 	.word	0x2001c24c
 8002640:	40026470 	.word	0x40026470
 8002644:	2001c250 	.word	0x2001c250
 8002648:	40026488 	.word	0x40026488
 800264c:	2001c254 	.word	0x2001c254
 8002650:	400264a0 	.word	0x400264a0
 8002654:	2001c258 	.word	0x2001c258
 8002658:	400264b8 	.word	0x400264b8
 800265c:	2001c25c 	.word	0x2001c25c

08002660 <EXTI0_IRQHandler>:
 * @brief Interrupt handler for EXTI line 0.
 *
 * This ISR handles interrupts for pin 0, invoking the associated callback
 * function if one is registered.
 */
void EXTI0_IRQHandler(void) {
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
    if (EXTI_ISR[0]) EXTI_ISR[0](); // Invoke registered callback
 8002664:	4b07      	ldr	r3, [pc, #28]	@ (8002684 <EXTI0_IRQHandler+0x24>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d002      	beq.n	8002672 <EXTI0_IRQHandler+0x12>
 800266c:	4b05      	ldr	r3, [pc, #20]	@ (8002684 <EXTI0_IRQHandler+0x24>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR0;        // Clear interrupt flag
 8002672:	4b05      	ldr	r3, [pc, #20]	@ (8002688 <EXTI0_IRQHandler+0x28>)
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	4a04      	ldr	r2, [pc, #16]	@ (8002688 <EXTI0_IRQHandler+0x28>)
 8002678:	f043 0301 	orr.w	r3, r3, #1
 800267c:	6153      	str	r3, [r2, #20]
}
 800267e:	bf00      	nop
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	2001c268 	.word	0x2001c268
 8002688:	40013c00 	.word	0x40013c00

0800268c <EXTI1_IRQHandler>:

/**
 * @brief Interrupt handler for EXTI line 1.
 */
void EXTI1_IRQHandler(void) {
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
    if (EXTI_ISR[1]) EXTI_ISR[1]();
 8002690:	4b07      	ldr	r3, [pc, #28]	@ (80026b0 <EXTI1_IRQHandler+0x24>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d002      	beq.n	800269e <EXTI1_IRQHandler+0x12>
 8002698:	4b05      	ldr	r3, [pc, #20]	@ (80026b0 <EXTI1_IRQHandler+0x24>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR1;
 800269e:	4b05      	ldr	r3, [pc, #20]	@ (80026b4 <EXTI1_IRQHandler+0x28>)
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	4a04      	ldr	r2, [pc, #16]	@ (80026b4 <EXTI1_IRQHandler+0x28>)
 80026a4:	f043 0302 	orr.w	r3, r3, #2
 80026a8:	6153      	str	r3, [r2, #20]
}
 80026aa:	bf00      	nop
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	2001c268 	.word	0x2001c268
 80026b4:	40013c00 	.word	0x40013c00

080026b8 <EXTI2_IRQHandler>:

/**
 * @brief Interrupt handler for EXTI line 2.
 */
void EXTI2_IRQHandler(void) {
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
    if (EXTI_ISR[2]) EXTI_ISR[2]();
 80026bc:	4b07      	ldr	r3, [pc, #28]	@ (80026dc <EXTI2_IRQHandler+0x24>)
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d002      	beq.n	80026ca <EXTI2_IRQHandler+0x12>
 80026c4:	4b05      	ldr	r3, [pc, #20]	@ (80026dc <EXTI2_IRQHandler+0x24>)
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR2;
 80026ca:	4b05      	ldr	r3, [pc, #20]	@ (80026e0 <EXTI2_IRQHandler+0x28>)
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	4a04      	ldr	r2, [pc, #16]	@ (80026e0 <EXTI2_IRQHandler+0x28>)
 80026d0:	f043 0304 	orr.w	r3, r3, #4
 80026d4:	6153      	str	r3, [r2, #20]
}
 80026d6:	bf00      	nop
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	2001c268 	.word	0x2001c268
 80026e0:	40013c00 	.word	0x40013c00

080026e4 <EXTI3_IRQHandler>:

/**
 * @brief Interrupt handler for EXTI line 3.
 */
void EXTI3_IRQHandler(void) {
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
    if (EXTI_ISR[3]) EXTI_ISR[3]();
 80026e8:	4b07      	ldr	r3, [pc, #28]	@ (8002708 <EXTI3_IRQHandler+0x24>)
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d002      	beq.n	80026f6 <EXTI3_IRQHandler+0x12>
 80026f0:	4b05      	ldr	r3, [pc, #20]	@ (8002708 <EXTI3_IRQHandler+0x24>)
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR3;
 80026f6:	4b05      	ldr	r3, [pc, #20]	@ (800270c <EXTI3_IRQHandler+0x28>)
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	4a04      	ldr	r2, [pc, #16]	@ (800270c <EXTI3_IRQHandler+0x28>)
 80026fc:	f043 0308 	orr.w	r3, r3, #8
 8002700:	6153      	str	r3, [r2, #20]
}
 8002702:	bf00      	nop
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	2001c268 	.word	0x2001c268
 800270c:	40013c00 	.word	0x40013c00

08002710 <EXTI4_IRQHandler>:

/**
 * @brief Interrupt handler for EXTI line 4.
 */
void EXTI4_IRQHandler(void) {
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
    if (EXTI_ISR[4]) EXTI_ISR[4]();
 8002714:	4b07      	ldr	r3, [pc, #28]	@ (8002734 <EXTI4_IRQHandler+0x24>)
 8002716:	691b      	ldr	r3, [r3, #16]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d002      	beq.n	8002722 <EXTI4_IRQHandler+0x12>
 800271c:	4b05      	ldr	r3, [pc, #20]	@ (8002734 <EXTI4_IRQHandler+0x24>)
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	4798      	blx	r3
    EXTI->PR |= EXTI_PR_PR4;
 8002722:	4b05      	ldr	r3, [pc, #20]	@ (8002738 <EXTI4_IRQHandler+0x28>)
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	4a04      	ldr	r2, [pc, #16]	@ (8002738 <EXTI4_IRQHandler+0x28>)
 8002728:	f043 0310 	orr.w	r3, r3, #16
 800272c:	6153      	str	r3, [r2, #20]
}
 800272e:	bf00      	nop
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	2001c268 	.word	0x2001c268
 8002738:	40013c00 	.word	0x40013c00

0800273c <EXTI9_5_IRQHandler>:
/**
 * @brief Interrupt handler for EXTI lines 5 to 9.
 *
 * Handles interrupts for pins 5 to 9, checking each pin for active flags.
 */
void EXTI9_5_IRQHandler(void) {
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
    for (int i = 5; i <= 9; ++i) {
 8002742:	2305      	movs	r3, #5
 8002744:	607b      	str	r3, [r7, #4]
 8002746:	e020      	b.n	800278a <EXTI9_5_IRQHandler+0x4e>
        if ((EXTI->PR & (1 << i)) && EXTI_ISR[i]) {
 8002748:	4b14      	ldr	r3, [pc, #80]	@ (800279c <EXTI9_5_IRQHandler+0x60>)
 800274a:	695b      	ldr	r3, [r3, #20]
 800274c:	2101      	movs	r1, #1
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	fa01 f202 	lsl.w	r2, r1, r2
 8002754:	4013      	ands	r3, r2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d014      	beq.n	8002784 <EXTI9_5_IRQHandler+0x48>
 800275a:	4a11      	ldr	r2, [pc, #68]	@ (80027a0 <EXTI9_5_IRQHandler+0x64>)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d00e      	beq.n	8002784 <EXTI9_5_IRQHandler+0x48>
            EXTI_ISR[i]();        // Invoke callback for pin `i`
 8002766:	4a0e      	ldr	r2, [pc, #56]	@ (80027a0 <EXTI9_5_IRQHandler+0x64>)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800276e:	4798      	blx	r3
            EXTI->PR |= (1 << i); // Clear interrupt flag
 8002770:	4b0a      	ldr	r3, [pc, #40]	@ (800279c <EXTI9_5_IRQHandler+0x60>)
 8002772:	695b      	ldr	r3, [r3, #20]
 8002774:	2101      	movs	r1, #1
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	fa01 f202 	lsl.w	r2, r1, r2
 800277c:	4611      	mov	r1, r2
 800277e:	4a07      	ldr	r2, [pc, #28]	@ (800279c <EXTI9_5_IRQHandler+0x60>)
 8002780:	430b      	orrs	r3, r1
 8002782:	6153      	str	r3, [r2, #20]
    for (int i = 5; i <= 9; ++i) {
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	3301      	adds	r3, #1
 8002788:	607b      	str	r3, [r7, #4]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2b09      	cmp	r3, #9
 800278e:	dddb      	ble.n	8002748 <EXTI9_5_IRQHandler+0xc>
        }
    }
}
 8002790:	bf00      	nop
 8002792:	bf00      	nop
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	40013c00 	.word	0x40013c00
 80027a0:	2001c268 	.word	0x2001c268

080027a4 <EXTI15_10_IRQHandler>:
/**
 * @brief Interrupt handler for EXTI lines 10 to 15.
 *
 * Handles interrupts for pins 10 to 15, checking each pin for active flags.
 */
void EXTI15_10_IRQHandler(void) {
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
    for (int i = 10; i <= 15; ++i) {
 80027aa:	230a      	movs	r3, #10
 80027ac:	607b      	str	r3, [r7, #4]
 80027ae:	e020      	b.n	80027f2 <EXTI15_10_IRQHandler+0x4e>
        if ((EXTI->PR & (1 << i)) && EXTI_ISR[i]) {
 80027b0:	4b14      	ldr	r3, [pc, #80]	@ (8002804 <EXTI15_10_IRQHandler+0x60>)
 80027b2:	695b      	ldr	r3, [r3, #20]
 80027b4:	2101      	movs	r1, #1
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	fa01 f202 	lsl.w	r2, r1, r2
 80027bc:	4013      	ands	r3, r2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d014      	beq.n	80027ec <EXTI15_10_IRQHandler+0x48>
 80027c2:	4a11      	ldr	r2, [pc, #68]	@ (8002808 <EXTI15_10_IRQHandler+0x64>)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00e      	beq.n	80027ec <EXTI15_10_IRQHandler+0x48>
            EXTI_ISR[i]();        // Invoke callback for pin `i`
 80027ce:	4a0e      	ldr	r2, [pc, #56]	@ (8002808 <EXTI15_10_IRQHandler+0x64>)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027d6:	4798      	blx	r3
            EXTI->PR |= (1 << i); // Clear interrupt flag
 80027d8:	4b0a      	ldr	r3, [pc, #40]	@ (8002804 <EXTI15_10_IRQHandler+0x60>)
 80027da:	695b      	ldr	r3, [r3, #20]
 80027dc:	2101      	movs	r1, #1
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	fa01 f202 	lsl.w	r2, r1, r2
 80027e4:	4611      	mov	r1, r2
 80027e6:	4a07      	ldr	r2, [pc, #28]	@ (8002804 <EXTI15_10_IRQHandler+0x60>)
 80027e8:	430b      	orrs	r3, r1
 80027ea:	6153      	str	r3, [r2, #20]
    for (int i = 10; i <= 15; ++i) {
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	3301      	adds	r3, #1
 80027f0:	607b      	str	r3, [r7, #4]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2b0f      	cmp	r3, #15
 80027f6:	dddb      	ble.n	80027b0 <EXTI15_10_IRQHandler+0xc>
        }
    }
}
 80027f8:	bf00      	nop
 80027fa:	bf00      	nop
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	40013c00 	.word	0x40013c00
 8002808:	2001c268 	.word	0x2001c268

0800280c <GPIO_Clock_Enable>:
 * @brief Enables the clock for a specific GPIO port.
 *
 * @param PORT Pointer to GPIO port base address.
 * @return GPIO_SUCCESS on success, GPIO_INVALID_PORT on failure.
 */
int GPIO_Clock_Enable(GPIO_TypeDef *PORT) {
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)PORT) {
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	4a30      	ldr	r2, [pc, #192]	@ (80028d8 <GPIO_Clock_Enable+0xcc>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d04b      	beq.n	80028b4 <GPIO_Clock_Enable+0xa8>
 800281c:	4a2e      	ldr	r2, [pc, #184]	@ (80028d8 <GPIO_Clock_Enable+0xcc>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d84f      	bhi.n	80028c2 <GPIO_Clock_Enable+0xb6>
 8002822:	4a2e      	ldr	r2, [pc, #184]	@ (80028dc <GPIO_Clock_Enable+0xd0>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d03e      	beq.n	80028a6 <GPIO_Clock_Enable+0x9a>
 8002828:	4a2c      	ldr	r2, [pc, #176]	@ (80028dc <GPIO_Clock_Enable+0xd0>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d849      	bhi.n	80028c2 <GPIO_Clock_Enable+0xb6>
 800282e:	4a2c      	ldr	r2, [pc, #176]	@ (80028e0 <GPIO_Clock_Enable+0xd4>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d031      	beq.n	8002898 <GPIO_Clock_Enable+0x8c>
 8002834:	4a2a      	ldr	r2, [pc, #168]	@ (80028e0 <GPIO_Clock_Enable+0xd4>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d843      	bhi.n	80028c2 <GPIO_Clock_Enable+0xb6>
 800283a:	4a2a      	ldr	r2, [pc, #168]	@ (80028e4 <GPIO_Clock_Enable+0xd8>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d024      	beq.n	800288a <GPIO_Clock_Enable+0x7e>
 8002840:	4a28      	ldr	r2, [pc, #160]	@ (80028e4 <GPIO_Clock_Enable+0xd8>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d83d      	bhi.n	80028c2 <GPIO_Clock_Enable+0xb6>
 8002846:	4a28      	ldr	r2, [pc, #160]	@ (80028e8 <GPIO_Clock_Enable+0xdc>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d017      	beq.n	800287c <GPIO_Clock_Enable+0x70>
 800284c:	4a26      	ldr	r2, [pc, #152]	@ (80028e8 <GPIO_Clock_Enable+0xdc>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d837      	bhi.n	80028c2 <GPIO_Clock_Enable+0xb6>
 8002852:	4a26      	ldr	r2, [pc, #152]	@ (80028ec <GPIO_Clock_Enable+0xe0>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d003      	beq.n	8002860 <GPIO_Clock_Enable+0x54>
 8002858:	4a25      	ldr	r2, [pc, #148]	@ (80028f0 <GPIO_Clock_Enable+0xe4>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d007      	beq.n	800286e <GPIO_Clock_Enable+0x62>
 800285e:	e030      	b.n	80028c2 <GPIO_Clock_Enable+0xb6>
        case (uint32_t)GPIOA: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN; break;
 8002860:	4b24      	ldr	r3, [pc, #144]	@ (80028f4 <GPIO_Clock_Enable+0xe8>)
 8002862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002864:	4a23      	ldr	r2, [pc, #140]	@ (80028f4 <GPIO_Clock_Enable+0xe8>)
 8002866:	f043 0301 	orr.w	r3, r3, #1
 800286a:	6313      	str	r3, [r2, #48]	@ 0x30
 800286c:	e02c      	b.n	80028c8 <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOB: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN; break;
 800286e:	4b21      	ldr	r3, [pc, #132]	@ (80028f4 <GPIO_Clock_Enable+0xe8>)
 8002870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002872:	4a20      	ldr	r2, [pc, #128]	@ (80028f4 <GPIO_Clock_Enable+0xe8>)
 8002874:	f043 0302 	orr.w	r3, r3, #2
 8002878:	6313      	str	r3, [r2, #48]	@ 0x30
 800287a:	e025      	b.n	80028c8 <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOC: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN; break;
 800287c:	4b1d      	ldr	r3, [pc, #116]	@ (80028f4 <GPIO_Clock_Enable+0xe8>)
 800287e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002880:	4a1c      	ldr	r2, [pc, #112]	@ (80028f4 <GPIO_Clock_Enable+0xe8>)
 8002882:	f043 0304 	orr.w	r3, r3, #4
 8002886:	6313      	str	r3, [r2, #48]	@ 0x30
 8002888:	e01e      	b.n	80028c8 <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOD: RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN; break;
 800288a:	4b1a      	ldr	r3, [pc, #104]	@ (80028f4 <GPIO_Clock_Enable+0xe8>)
 800288c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800288e:	4a19      	ldr	r2, [pc, #100]	@ (80028f4 <GPIO_Clock_Enable+0xe8>)
 8002890:	f043 0308 	orr.w	r3, r3, #8
 8002894:	6313      	str	r3, [r2, #48]	@ 0x30
 8002896:	e017      	b.n	80028c8 <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOE: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN; break;
 8002898:	4b16      	ldr	r3, [pc, #88]	@ (80028f4 <GPIO_Clock_Enable+0xe8>)
 800289a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800289c:	4a15      	ldr	r2, [pc, #84]	@ (80028f4 <GPIO_Clock_Enable+0xe8>)
 800289e:	f043 0310 	orr.w	r3, r3, #16
 80028a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80028a4:	e010      	b.n	80028c8 <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOF: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOFEN; break;
 80028a6:	4b13      	ldr	r3, [pc, #76]	@ (80028f4 <GPIO_Clock_Enable+0xe8>)
 80028a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028aa:	4a12      	ldr	r2, [pc, #72]	@ (80028f4 <GPIO_Clock_Enable+0xe8>)
 80028ac:	f043 0320 	orr.w	r3, r3, #32
 80028b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80028b2:	e009      	b.n	80028c8 <GPIO_Clock_Enable+0xbc>
        case (uint32_t)GPIOH: RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN; break;
 80028b4:	4b0f      	ldr	r3, [pc, #60]	@ (80028f4 <GPIO_Clock_Enable+0xe8>)
 80028b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b8:	4a0e      	ldr	r2, [pc, #56]	@ (80028f4 <GPIO_Clock_Enable+0xe8>)
 80028ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028be:	6313      	str	r3, [r2, #48]	@ 0x30
 80028c0:	e002      	b.n	80028c8 <GPIO_Clock_Enable+0xbc>
        default: return GPIO_INVALID_PORT;
 80028c2:	f04f 33ff 	mov.w	r3, #4294967295
 80028c6:	e000      	b.n	80028ca <GPIO_Clock_Enable+0xbe>
    }
    return GPIO_SUCCESS;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	40021c00 	.word	0x40021c00
 80028dc:	40021400 	.word	0x40021400
 80028e0:	40021000 	.word	0x40021000
 80028e4:	40020c00 	.word	0x40020c00
 80028e8:	40020800 	.word	0x40020800
 80028ec:	40020000 	.word	0x40020000
 80028f0:	40020400 	.word	0x40020400
 80028f4:	40023800 	.word	0x40023800

080028f8 <GPIO_Pin_Init>:


GPIO_Status GPIO_Pin_Init(GPIO_TypeDef *Port, uint8_t pin, uint8_t mode, uint8_t output_type, uint8_t speed, uint8_t pull, uint8_t alternate_function) {
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	4608      	mov	r0, r1
 8002902:	4611      	mov	r1, r2
 8002904:	461a      	mov	r2, r3
 8002906:	4603      	mov	r3, r0
 8002908:	70fb      	strb	r3, [r7, #3]
 800290a:	460b      	mov	r3, r1
 800290c:	70bb      	strb	r3, [r7, #2]
 800290e:	4613      	mov	r3, r2
 8002910:	707b      	strb	r3, [r7, #1]
//    if (pin > 15 || mode > 3 || speed > 3 || pull > 2) return GPIO_INVALID_PIN;

    GPIO_Clock_Enable(Port);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f7ff ff7a 	bl	800280c <GPIO_Clock_Enable>

    // Reset and set mode
    Port->MODER &= ~(3 << PIN_POS(pin));
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	78fa      	ldrb	r2, [r7, #3]
 800291e:	0052      	lsls	r2, r2, #1
 8002920:	2103      	movs	r1, #3
 8002922:	fa01 f202 	lsl.w	r2, r1, r2
 8002926:	43d2      	mvns	r2, r2
 8002928:	401a      	ands	r2, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	601a      	str	r2, [r3, #0]
    Port->MODER |= mode << PIN_POS(pin);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	78b9      	ldrb	r1, [r7, #2]
 8002934:	78fa      	ldrb	r2, [r7, #3]
 8002936:	0052      	lsls	r2, r2, #1
 8002938:	fa01 f202 	lsl.w	r2, r1, r2
 800293c:	431a      	orrs	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	601a      	str	r2, [r3, #0]

    // Reset and set output type
    Port->OTYPER &= ~(1 << pin);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	78fa      	ldrb	r2, [r7, #3]
 8002948:	2101      	movs	r1, #1
 800294a:	fa01 f202 	lsl.w	r2, r1, r2
 800294e:	43d2      	mvns	r2, r2
 8002950:	401a      	ands	r2, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	605a      	str	r2, [r3, #4]
    if (output_type != GPIO_Configuration.Output_Type.None) {
 8002956:	2202      	movs	r2, #2
 8002958:	787b      	ldrb	r3, [r7, #1]
 800295a:	4293      	cmp	r3, r2
 800295c:	d008      	beq.n	8002970 <GPIO_Pin_Init+0x78>
        Port->OTYPER |= output_type << pin;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	7879      	ldrb	r1, [r7, #1]
 8002964:	78fa      	ldrb	r2, [r7, #3]
 8002966:	fa01 f202 	lsl.w	r2, r1, r2
 800296a:	431a      	orrs	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	605a      	str	r2, [r3, #4]
    }

    // Reset and set speed
    Port->OSPEEDR &= ~(3 << PIN_POS(pin));
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	78fa      	ldrb	r2, [r7, #3]
 8002976:	0052      	lsls	r2, r2, #1
 8002978:	2103      	movs	r1, #3
 800297a:	fa01 f202 	lsl.w	r2, r1, r2
 800297e:	43d2      	mvns	r2, r2
 8002980:	401a      	ands	r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	609a      	str	r2, [r3, #8]
    if (speed != GPIO_Configuration.Speed.None) {
 8002986:	2204      	movs	r2, #4
 8002988:	7c3b      	ldrb	r3, [r7, #16]
 800298a:	4293      	cmp	r3, r2
 800298c:	d009      	beq.n	80029a2 <GPIO_Pin_Init+0xaa>
        Port->OSPEEDR |= speed << PIN_POS(pin);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	7c39      	ldrb	r1, [r7, #16]
 8002994:	78fa      	ldrb	r2, [r7, #3]
 8002996:	0052      	lsls	r2, r2, #1
 8002998:	fa01 f202 	lsl.w	r2, r1, r2
 800299c:	431a      	orrs	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	609a      	str	r2, [r3, #8]
    }

    // Reset and set pull-up/pull-down
    Port->PUPDR &= ~(3 << PIN_POS(pin));
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	78fa      	ldrb	r2, [r7, #3]
 80029a8:	0052      	lsls	r2, r2, #1
 80029aa:	2103      	movs	r1, #3
 80029ac:	fa01 f202 	lsl.w	r2, r1, r2
 80029b0:	43d2      	mvns	r2, r2
 80029b2:	401a      	ands	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	60da      	str	r2, [r3, #12]
    if (pull != GPIO_Configuration.Pull.None) {
 80029b8:	2204      	movs	r2, #4
 80029ba:	7d3b      	ldrb	r3, [r7, #20]
 80029bc:	4293      	cmp	r3, r2
 80029be:	d009      	beq.n	80029d4 <GPIO_Pin_Init+0xdc>
        Port->PUPDR |= pull << PIN_POS(pin);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	7d39      	ldrb	r1, [r7, #20]
 80029c6:	78fa      	ldrb	r2, [r7, #3]
 80029c8:	0052      	lsls	r2, r2, #1
 80029ca:	fa01 f202 	lsl.w	r2, r1, r2
 80029ce:	431a      	orrs	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	60da      	str	r2, [r3, #12]
    }

    // Set alternate function
    if (mode == GPIO_Configuration.Mode.Alternate_Function) {
 80029d4:	2202      	movs	r2, #2
 80029d6:	78bb      	ldrb	r3, [r7, #2]
 80029d8:	4293      	cmp	r3, r2
 80029da:	d12f      	bne.n	8002a3c <GPIO_Pin_Init+0x144>
        if (pin < GPIO_AF_SPLIT_POINT) {
 80029dc:	78fb      	ldrb	r3, [r7, #3]
 80029de:	2b07      	cmp	r3, #7
 80029e0:	d815      	bhi.n	8002a0e <GPIO_Pin_Init+0x116>
            Port->AFR[0] &= ~(0xF << (pin * 4));
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a1b      	ldr	r3, [r3, #32]
 80029e6:	78fa      	ldrb	r2, [r7, #3]
 80029e8:	0092      	lsls	r2, r2, #2
 80029ea:	210f      	movs	r1, #15
 80029ec:	fa01 f202 	lsl.w	r2, r1, r2
 80029f0:	43d2      	mvns	r2, r2
 80029f2:	401a      	ands	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	621a      	str	r2, [r3, #32]
            Port->AFR[0] |= alternate_function << (pin * 4);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a1b      	ldr	r3, [r3, #32]
 80029fc:	7e39      	ldrb	r1, [r7, #24]
 80029fe:	78fa      	ldrb	r2, [r7, #3]
 8002a00:	0092      	lsls	r2, r2, #2
 8002a02:	fa01 f202 	lsl.w	r2, r1, r2
 8002a06:	431a      	orrs	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	621a      	str	r2, [r3, #32]
 8002a0c:	e016      	b.n	8002a3c <GPIO_Pin_Init+0x144>
        } else {
            Port->AFR[1] &= ~(0xF << ((pin - GPIO_AF_SPLIT_POINT) * 4));
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a12:	78fa      	ldrb	r2, [r7, #3]
 8002a14:	3a08      	subs	r2, #8
 8002a16:	0092      	lsls	r2, r2, #2
 8002a18:	210f      	movs	r1, #15
 8002a1a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a1e:	43d2      	mvns	r2, r2
 8002a20:	401a      	ands	r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	625a      	str	r2, [r3, #36]	@ 0x24
            Port->AFR[1] |= alternate_function << ((pin - GPIO_AF_SPLIT_POINT) * 4);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a2a:	7e39      	ldrb	r1, [r7, #24]
 8002a2c:	78fa      	ldrb	r2, [r7, #3]
 8002a2e:	3a08      	subs	r2, #8
 8002a30:	0092      	lsls	r2, r2, #2
 8002a32:	fa01 f202 	lsl.w	r2, r1, r2
 8002a36:	431a      	orrs	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    }

    return GPIO_SUCCESS;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <GPIO_Pin_Low>:
{
 8002a46:	b480      	push	{r7}
 8002a48:	b083      	sub	sp, #12
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
 8002a4e:	6039      	str	r1, [r7, #0]
	Port -> ODR &= ~(1 << pin);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	695b      	ldr	r3, [r3, #20]
 8002a54:	2101      	movs	r1, #1
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	fa01 f202 	lsl.w	r2, r1, r2
 8002a5c:	43d2      	mvns	r2, r2
 8002a5e:	401a      	ands	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	615a      	str	r2, [r3, #20]
}
 8002a64:	bf00      	nop
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <GPIO_Pin_High>:
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
	Port -> ODR |= 1 << pin;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	2101      	movs	r1, #1
 8002a80:	683a      	ldr	r2, [r7, #0]
 8002a82:	fa01 f202 	lsl.w	r2, r1, r2
 8002a86:	431a      	orrs	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	615a      	str	r2, [r3, #20]
}
 8002a8c:	bf00      	nop
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <SPI1_TX_ISR>:

volatile bool TX_Complete = 0;
volatile bool RX_Complete = 0;

void SPI1_TX_ISR()
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
	TX_Complete = 1;
 8002a9c:	4b03      	ldr	r3, [pc, #12]	@ (8002aac <SPI1_TX_ISR+0x14>)
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	701a      	strb	r2, [r3, #0]
}
 8002aa2:	bf00      	nop
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr
 8002aac:	2001c2a8 	.word	0x2001c2a8

08002ab0 <SPI1_RX_ISR>:

void SPI1_RX_ISR()
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
	RX_Complete = 1;
 8002ab4:	4b03      	ldr	r3, [pc, #12]	@ (8002ac4 <SPI1_RX_ISR+0x14>)
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	701a      	strb	r2, [r3, #0]
}
 8002aba:	bf00      	nop
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr
 8002ac4:	2001c2a9 	.word	0x2001c2a9

08002ac8 <xDMA1_TX_Init>:
 * @brief Initializes the DMA for SPI1 TX.
 *
 * Configures and initializes the DMA channel for transmitting data via SPI1.
 */
static void xDMA1_TX_Init()
{
 8002ac8:	b598      	push	{r3, r4, r7, lr}
 8002aca:	af00      	add	r7, sp, #0
	xDMA1_TX.Request = DMA_Configuration.Request.SPI1_TX;
 8002acc:	4a14      	ldr	r2, [pc, #80]	@ (8002b20 <xDMA1_TX_Init+0x58>)
 8002ace:	4b15      	ldr	r3, [pc, #84]	@ (8002b24 <xDMA1_TX_Init+0x5c>)
 8002ad0:	4614      	mov	r4, r2
 8002ad2:	333c      	adds	r3, #60	@ 0x3c
 8002ad4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002ad8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	xDMA1_TX.transfer_direction = DMA_Configuration.Transfer_Direction.Memory_to_peripheral;
 8002adc:	2240      	movs	r2, #64	@ 0x40
 8002ade:	4b10      	ldr	r3, [pc, #64]	@ (8002b20 <xDMA1_TX_Init+0x58>)
 8002ae0:	611a      	str	r2, [r3, #16]
	xDMA1_TX.circular_mode = DMA_Configuration.Circular_Mode.Disable;
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	4b0e      	ldr	r3, [pc, #56]	@ (8002b20 <xDMA1_TX_Init+0x58>)
 8002ae6:	619a      	str	r2, [r3, #24]
	xDMA1_TX.flow_control = DMA_Configuration.Flow_Control.DMA_Control;
 8002ae8:	2200      	movs	r2, #0
 8002aea:	4b0d      	ldr	r3, [pc, #52]	@ (8002b20 <xDMA1_TX_Init+0x58>)
 8002aec:	60da      	str	r2, [r3, #12]
	xDMA1_TX.interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 8002aee:	2210      	movs	r2, #16
 8002af0:	4b0b      	ldr	r3, [pc, #44]	@ (8002b20 <xDMA1_TX_Init+0x58>)
 8002af2:	61da      	str	r2, [r3, #28]
	xDMA1_TX.peripheral_pointer_increment = DMA_Configuration.Peripheral_Pointer_Increment.Disable;
 8002af4:	2300      	movs	r3, #0
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	4b09      	ldr	r3, [pc, #36]	@ (8002b20 <xDMA1_TX_Init+0x58>)
 8002afa:	845a      	strh	r2, [r3, #34]	@ 0x22
	xDMA1_TX.memory_pointer_increment = DMA_Configuration.Memory_Pointer_Increment.Enable;
 8002afc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b00:	b29a      	uxth	r2, r3
 8002b02:	4b07      	ldr	r3, [pc, #28]	@ (8002b20 <xDMA1_TX_Init+0x58>)
 8002b04:	841a      	strh	r2, [r3, #32]
	xDMA1_TX.priority_level = DMA_Configuration.Priority_Level.Very_high;
 8002b06:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002b0a:	4b05      	ldr	r3, [pc, #20]	@ (8002b20 <xDMA1_TX_Init+0x58>)
 8002b0c:	615a      	str	r2, [r3, #20]
	xDMA1_TX.ISR_Routines.Full_Transfer_Commplete_ISR = SPI1_TX_ISR;
 8002b0e:	4b04      	ldr	r3, [pc, #16]	@ (8002b20 <xDMA1_TX_Init+0x58>)
 8002b10:	4a05      	ldr	r2, [pc, #20]	@ (8002b28 <xDMA1_TX_Init+0x60>)
 8002b12:	64da      	str	r2, [r3, #76]	@ 0x4c
	DMA_Init(&xDMA1_TX);
 8002b14:	4802      	ldr	r0, [pc, #8]	@ (8002b20 <xDMA1_TX_Init+0x58>)
 8002b16:	f7ff fbb1 	bl	800227c <DMA_Init>
}
 8002b1a:	bf00      	nop
 8002b1c:	bd98      	pop	{r3, r4, r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	2001c2ac 	.word	0x2001c2ac
 8002b24:	08004c60 	.word	0x08004c60
 8002b28:	08002a99 	.word	0x08002a99

08002b2c <xDMA2_TX_Init>:
 * @brief Initializes the DMA for SPI2 TX.
 *
 * Configures and initializes the DMA channel for transmitting data via SPI2.
 */
static void xDMA2_TX_Init()
{
 8002b2c:	b598      	push	{r3, r4, r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
	xDMA2_TX.Request = DMA_Configuration.Request.SPI2_TX;
 8002b30:	4a12      	ldr	r2, [pc, #72]	@ (8002b7c <xDMA2_TX_Init+0x50>)
 8002b32:	4b13      	ldr	r3, [pc, #76]	@ (8002b80 <xDMA2_TX_Init+0x54>)
 8002b34:	4614      	mov	r4, r2
 8002b36:	3324      	adds	r3, #36	@ 0x24
 8002b38:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002b3c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	xDMA2_TX.transfer_direction = DMA_Configuration.Transfer_Direction.Memory_to_peripheral;
 8002b40:	2240      	movs	r2, #64	@ 0x40
 8002b42:	4b0e      	ldr	r3, [pc, #56]	@ (8002b7c <xDMA2_TX_Init+0x50>)
 8002b44:	611a      	str	r2, [r3, #16]
	xDMA2_TX.circular_mode = DMA_Configuration.Circular_Mode.Disable;
 8002b46:	2200      	movs	r2, #0
 8002b48:	4b0c      	ldr	r3, [pc, #48]	@ (8002b7c <xDMA2_TX_Init+0x50>)
 8002b4a:	619a      	str	r2, [r3, #24]
	xDMA2_TX.flow_control = DMA_Configuration.Flow_Control.DMA_Control;
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	4b0b      	ldr	r3, [pc, #44]	@ (8002b7c <xDMA2_TX_Init+0x50>)
 8002b50:	60da      	str	r2, [r3, #12]
	xDMA2_TX.interrupts = DMA_Configuration.DMA_Interrupts.Disable;
 8002b52:	2200      	movs	r2, #0
 8002b54:	4b09      	ldr	r3, [pc, #36]	@ (8002b7c <xDMA2_TX_Init+0x50>)
 8002b56:	61da      	str	r2, [r3, #28]
	xDMA2_TX.peripheral_pointer_increment = DMA_Configuration.Peripheral_Pointer_Increment.Disable;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	b29a      	uxth	r2, r3
 8002b5c:	4b07      	ldr	r3, [pc, #28]	@ (8002b7c <xDMA2_TX_Init+0x50>)
 8002b5e:	845a      	strh	r2, [r3, #34]	@ 0x22
	xDMA2_TX.memory_pointer_increment = DMA_Configuration.Memory_Pointer_Increment.Enable;
 8002b60:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	4b05      	ldr	r3, [pc, #20]	@ (8002b7c <xDMA2_TX_Init+0x50>)
 8002b68:	841a      	strh	r2, [r3, #32]
	xDMA2_TX.priority_level = DMA_Configuration.Priority_Level.Very_high;
 8002b6a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002b6e:	4b03      	ldr	r3, [pc, #12]	@ (8002b7c <xDMA2_TX_Init+0x50>)
 8002b70:	615a      	str	r2, [r3, #20]

	DMA_Init(&xDMA2_TX);
 8002b72:	4802      	ldr	r0, [pc, #8]	@ (8002b7c <xDMA2_TX_Init+0x50>)
 8002b74:	f7ff fb82 	bl	800227c <DMA_Init>
}
 8002b78:	bf00      	nop
 8002b7a:	bd98      	pop	{r3, r4, r7, pc}
 8002b7c:	2001c35c 	.word	0x2001c35c
 8002b80:	08004c60 	.word	0x08004c60

08002b84 <xDMA3_TX_Init>:

static void xDMA3_TX_Init()
{
 8002b84:	b598      	push	{r3, r4, r7, lr}
 8002b86:	af00      	add	r7, sp, #0
	xDMA3_TX.Request = DMA_Configuration.Request.SPI3_TX;
 8002b88:	4a12      	ldr	r2, [pc, #72]	@ (8002bd4 <xDMA3_TX_Init+0x50>)
 8002b8a:	4b13      	ldr	r3, [pc, #76]	@ (8002bd8 <xDMA3_TX_Init+0x54>)
 8002b8c:	4614      	mov	r4, r2
 8002b8e:	330c      	adds	r3, #12
 8002b90:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002b94:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	xDMA3_TX.transfer_direction = DMA_Configuration.Transfer_Direction.Memory_to_peripheral;
 8002b98:	2240      	movs	r2, #64	@ 0x40
 8002b9a:	4b0e      	ldr	r3, [pc, #56]	@ (8002bd4 <xDMA3_TX_Init+0x50>)
 8002b9c:	611a      	str	r2, [r3, #16]
	xDMA3_TX.circular_mode = DMA_Configuration.Circular_Mode.Disable;
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8002bd4 <xDMA3_TX_Init+0x50>)
 8002ba2:	619a      	str	r2, [r3, #24]
	xDMA3_TX.flow_control = DMA_Configuration.Flow_Control.DMA_Control;
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	4b0b      	ldr	r3, [pc, #44]	@ (8002bd4 <xDMA3_TX_Init+0x50>)
 8002ba8:	60da      	str	r2, [r3, #12]
	xDMA3_TX.interrupts = DMA_Configuration.DMA_Interrupts.Disable;
 8002baa:	2200      	movs	r2, #0
 8002bac:	4b09      	ldr	r3, [pc, #36]	@ (8002bd4 <xDMA3_TX_Init+0x50>)
 8002bae:	61da      	str	r2, [r3, #28]
	xDMA3_TX.peripheral_pointer_increment = DMA_Configuration.Peripheral_Pointer_Increment.Disable;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	b29a      	uxth	r2, r3
 8002bb4:	4b07      	ldr	r3, [pc, #28]	@ (8002bd4 <xDMA3_TX_Init+0x50>)
 8002bb6:	845a      	strh	r2, [r3, #34]	@ 0x22
	xDMA3_TX.memory_pointer_increment = DMA_Configuration.Memory_Pointer_Increment.Enable;
 8002bb8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002bbc:	b29a      	uxth	r2, r3
 8002bbe:	4b05      	ldr	r3, [pc, #20]	@ (8002bd4 <xDMA3_TX_Init+0x50>)
 8002bc0:	841a      	strh	r2, [r3, #32]
	xDMA3_TX.priority_level = DMA_Configuration.Priority_Level.Very_high;
 8002bc2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002bc6:	4b03      	ldr	r3, [pc, #12]	@ (8002bd4 <xDMA3_TX_Init+0x50>)
 8002bc8:	615a      	str	r2, [r3, #20]
	DMA_Init(&xDMA3_TX);
 8002bca:	4802      	ldr	r0, [pc, #8]	@ (8002bd4 <xDMA3_TX_Init+0x50>)
 8002bcc:	f7ff fb56 	bl	800227c <DMA_Init>
}
 8002bd0:	bf00      	nop
 8002bd2:	bd98      	pop	{r3, r4, r7, pc}
 8002bd4:	2001c40c 	.word	0x2001c40c
 8002bd8:	08004c60 	.word	0x08004c60

08002bdc <xDMA1_RX_Init>:
 * @brief Initializes the DMA for SPI3 TX.
 *
 * Configures and initializes the DMA channel for transmitting data via SPI3.
 */
static void xDMA1_RX_Init()
{
 8002bdc:	b598      	push	{r3, r4, r7, lr}
 8002bde:	af00      	add	r7, sp, #0
	xDMA1_RX.Request = DMA_Configuration.Request.SPI1_RX;
 8002be0:	4a14      	ldr	r2, [pc, #80]	@ (8002c34 <xDMA1_RX_Init+0x58>)
 8002be2:	4b15      	ldr	r3, [pc, #84]	@ (8002c38 <xDMA1_RX_Init+0x5c>)
 8002be4:	4614      	mov	r4, r2
 8002be6:	3330      	adds	r3, #48	@ 0x30
 8002be8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002bec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	xDMA1_RX.transfer_direction = DMA_Configuration.Transfer_Direction.Peripheral_to_memory;
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	4b10      	ldr	r3, [pc, #64]	@ (8002c34 <xDMA1_RX_Init+0x58>)
 8002bf4:	611a      	str	r2, [r3, #16]
	xDMA1_RX.circular_mode = DMA_Configuration.Circular_Mode.Disable;
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	4b0e      	ldr	r3, [pc, #56]	@ (8002c34 <xDMA1_RX_Init+0x58>)
 8002bfa:	619a      	str	r2, [r3, #24]
	xDMA1_RX.flow_control = DMA_Configuration.Flow_Control.DMA_Control;
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8002c34 <xDMA1_RX_Init+0x58>)
 8002c00:	60da      	str	r2, [r3, #12]
	xDMA1_RX.interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 8002c02:	2210      	movs	r2, #16
 8002c04:	4b0b      	ldr	r3, [pc, #44]	@ (8002c34 <xDMA1_RX_Init+0x58>)
 8002c06:	61da      	str	r2, [r3, #28]
	xDMA1_RX.peripheral_pointer_increment = DMA_Configuration.Peripheral_Pointer_Increment.Disable;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	b29a      	uxth	r2, r3
 8002c0c:	4b09      	ldr	r3, [pc, #36]	@ (8002c34 <xDMA1_RX_Init+0x58>)
 8002c0e:	845a      	strh	r2, [r3, #34]	@ 0x22
	xDMA1_RX.memory_pointer_increment = DMA_Configuration.Memory_Pointer_Increment.Enable;
 8002c10:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c14:	b29a      	uxth	r2, r3
 8002c16:	4b07      	ldr	r3, [pc, #28]	@ (8002c34 <xDMA1_RX_Init+0x58>)
 8002c18:	841a      	strh	r2, [r3, #32]
	xDMA1_RX.priority_level = DMA_Configuration.Priority_Level.Very_high;
 8002c1a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002c1e:	4b05      	ldr	r3, [pc, #20]	@ (8002c34 <xDMA1_RX_Init+0x58>)
 8002c20:	615a      	str	r2, [r3, #20]
	xDMA1_RX.ISR_Routines.Full_Transfer_Commplete_ISR = SPI1_RX_ISR;
 8002c22:	4b04      	ldr	r3, [pc, #16]	@ (8002c34 <xDMA1_RX_Init+0x58>)
 8002c24:	4a05      	ldr	r2, [pc, #20]	@ (8002c3c <xDMA1_RX_Init+0x60>)
 8002c26:	64da      	str	r2, [r3, #76]	@ 0x4c
	DMA_Init(&xDMA1_RX);
 8002c28:	4802      	ldr	r0, [pc, #8]	@ (8002c34 <xDMA1_RX_Init+0x58>)
 8002c2a:	f7ff fb27 	bl	800227c <DMA_Init>
}
 8002c2e:	bf00      	nop
 8002c30:	bd98      	pop	{r3, r4, r7, pc}
 8002c32:	bf00      	nop
 8002c34:	2001c304 	.word	0x2001c304
 8002c38:	08004c60 	.word	0x08004c60
 8002c3c:	08002ab1 	.word	0x08002ab1

08002c40 <xDMA2_RX_Init>:
 * @brief Initializes the DMA for SPI1 RX.
 *
 * Configures and initializes the DMA channel for receiving data via SPI1.
 */
static void xDMA2_RX_Init()
{
 8002c40:	b598      	push	{r3, r4, r7, lr}
 8002c42:	af00      	add	r7, sp, #0
	xDMA2_RX.Request = DMA_Configuration.Request.SPI2_RX;
 8002c44:	4a12      	ldr	r2, [pc, #72]	@ (8002c90 <xDMA2_RX_Init+0x50>)
 8002c46:	4b13      	ldr	r3, [pc, #76]	@ (8002c94 <xDMA2_RX_Init+0x54>)
 8002c48:	4614      	mov	r4, r2
 8002c4a:	3318      	adds	r3, #24
 8002c4c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002c50:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	xDMA2_RX.transfer_direction = DMA_Configuration.Transfer_Direction.Memory_to_peripheral;
 8002c54:	2240      	movs	r2, #64	@ 0x40
 8002c56:	4b0e      	ldr	r3, [pc, #56]	@ (8002c90 <xDMA2_RX_Init+0x50>)
 8002c58:	611a      	str	r2, [r3, #16]
	xDMA2_RX.circular_mode = DMA_Configuration.Circular_Mode.Disable;
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8002c90 <xDMA2_RX_Init+0x50>)
 8002c5e:	619a      	str	r2, [r3, #24]
	xDMA2_RX.flow_control = DMA_Configuration.Flow_Control.DMA_Control;
 8002c60:	2200      	movs	r2, #0
 8002c62:	4b0b      	ldr	r3, [pc, #44]	@ (8002c90 <xDMA2_RX_Init+0x50>)
 8002c64:	60da      	str	r2, [r3, #12]
	xDMA2_RX.interrupts = DMA_Configuration.DMA_Interrupts.Disable;
 8002c66:	2200      	movs	r2, #0
 8002c68:	4b09      	ldr	r3, [pc, #36]	@ (8002c90 <xDMA2_RX_Init+0x50>)
 8002c6a:	61da      	str	r2, [r3, #28]
	xDMA2_RX.peripheral_pointer_increment = DMA_Configuration.Peripheral_Pointer_Increment.Disable;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	4b07      	ldr	r3, [pc, #28]	@ (8002c90 <xDMA2_RX_Init+0x50>)
 8002c72:	845a      	strh	r2, [r3, #34]	@ 0x22
	xDMA2_RX.memory_pointer_increment = DMA_Configuration.Memory_Pointer_Increment.Enable;
 8002c74:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	4b05      	ldr	r3, [pc, #20]	@ (8002c90 <xDMA2_RX_Init+0x50>)
 8002c7c:	841a      	strh	r2, [r3, #32]
	xDMA2_RX.priority_level = DMA_Configuration.Priority_Level.Very_high;
 8002c7e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002c82:	4b03      	ldr	r3, [pc, #12]	@ (8002c90 <xDMA2_RX_Init+0x50>)
 8002c84:	615a      	str	r2, [r3, #20]
	DMA_Init(&xDMA2_RX);
 8002c86:	4802      	ldr	r0, [pc, #8]	@ (8002c90 <xDMA2_RX_Init+0x50>)
 8002c88:	f7ff faf8 	bl	800227c <DMA_Init>
}
 8002c8c:	bf00      	nop
 8002c8e:	bd98      	pop	{r3, r4, r7, pc}
 8002c90:	2001c3b4 	.word	0x2001c3b4
 8002c94:	08004c60 	.word	0x08004c60

08002c98 <xDMA3_RX_Init>:
 * @brief Initializes the DMA for SPI2 RX.
 *
 * Configures and initializes the DMA channel for receiving data via SPI2.
 */
static void xDMA3_RX_Init()
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
	xDMA3_RX.Request = DMA_Configuration.Request.SPI3_RX;
 8002c9c:	4b11      	ldr	r3, [pc, #68]	@ (8002ce4 <xDMA3_RX_Init+0x4c>)
 8002c9e:	4a12      	ldr	r2, [pc, #72]	@ (8002ce8 <xDMA3_RX_Init+0x50>)
 8002ca0:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ca2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	xDMA3_RX.transfer_direction = DMA_Configuration.Transfer_Direction.Memory_to_peripheral;
 8002ca6:	2240      	movs	r2, #64	@ 0x40
 8002ca8:	4b0e      	ldr	r3, [pc, #56]	@ (8002ce4 <xDMA3_RX_Init+0x4c>)
 8002caa:	611a      	str	r2, [r3, #16]
	xDMA3_RX.circular_mode = DMA_Configuration.Circular_Mode.Disable;
 8002cac:	2200      	movs	r2, #0
 8002cae:	4b0d      	ldr	r3, [pc, #52]	@ (8002ce4 <xDMA3_RX_Init+0x4c>)
 8002cb0:	619a      	str	r2, [r3, #24]
	xDMA3_RX.flow_control = DMA_Configuration.Flow_Control.DMA_Control;
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ce4 <xDMA3_RX_Init+0x4c>)
 8002cb6:	60da      	str	r2, [r3, #12]
	xDMA3_RX.interrupts = DMA_Configuration.DMA_Interrupts.Disable;
 8002cb8:	2200      	movs	r2, #0
 8002cba:	4b0a      	ldr	r3, [pc, #40]	@ (8002ce4 <xDMA3_RX_Init+0x4c>)
 8002cbc:	61da      	str	r2, [r3, #28]
	xDMA3_RX.peripheral_pointer_increment = DMA_Configuration.Peripheral_Pointer_Increment.Disable;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	b29a      	uxth	r2, r3
 8002cc2:	4b08      	ldr	r3, [pc, #32]	@ (8002ce4 <xDMA3_RX_Init+0x4c>)
 8002cc4:	845a      	strh	r2, [r3, #34]	@ 0x22
	xDMA3_RX.memory_pointer_increment = DMA_Configuration.Memory_Pointer_Increment.Enable;
 8002cc6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002cca:	b29a      	uxth	r2, r3
 8002ccc:	4b05      	ldr	r3, [pc, #20]	@ (8002ce4 <xDMA3_RX_Init+0x4c>)
 8002cce:	841a      	strh	r2, [r3, #32]
	xDMA3_RX.priority_level = DMA_Configuration.Priority_Level.Very_high;
 8002cd0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002cd4:	4b03      	ldr	r3, [pc, #12]	@ (8002ce4 <xDMA3_RX_Init+0x4c>)
 8002cd6:	615a      	str	r2, [r3, #20]
	DMA_Init(&xDMA3_RX);
 8002cd8:	4802      	ldr	r0, [pc, #8]	@ (8002ce4 <xDMA3_RX_Init+0x4c>)
 8002cda:	f7ff facf 	bl	800227c <DMA_Init>
}
 8002cde:	bf00      	nop
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	2001c464 	.word	0x2001c464
 8002ce8:	08004c60 	.word	0x08004c60

08002cec <SPI_Clock_Enable>:
 *
 * @param[in] config Pointer to the SPI configuration structure.
 * @return int8_t Returns 0 on success, -1 on failure.
 */
int8_t SPI_Clock_Enable(SPI_Config *config)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b085      	sub	sp, #20
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
	int8_t retval = 0;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	73fb      	strb	r3, [r7, #15]
	if(config ->Port == SPI1)RCC -> APB2ENR |= RCC_APB2ENR_SPI1EN;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a14      	ldr	r2, [pc, #80]	@ (8002d50 <SPI_Clock_Enable+0x64>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d105      	bne.n	8002d0e <SPI_Clock_Enable+0x22>
 8002d02:	4b14      	ldr	r3, [pc, #80]	@ (8002d54 <SPI_Clock_Enable+0x68>)
 8002d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d06:	4a13      	ldr	r2, [pc, #76]	@ (8002d54 <SPI_Clock_Enable+0x68>)
 8002d08:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002d0c:	6453      	str	r3, [r2, #68]	@ 0x44
	if(config ->Port == SPI2)RCC -> APB1ENR |= RCC_APB1ENR_SPI2EN;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a11      	ldr	r2, [pc, #68]	@ (8002d58 <SPI_Clock_Enable+0x6c>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d105      	bne.n	8002d24 <SPI_Clock_Enable+0x38>
 8002d18:	4b0e      	ldr	r3, [pc, #56]	@ (8002d54 <SPI_Clock_Enable+0x68>)
 8002d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d1c:	4a0d      	ldr	r2, [pc, #52]	@ (8002d54 <SPI_Clock_Enable+0x68>)
 8002d1e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d22:	6413      	str	r3, [r2, #64]	@ 0x40
	if(config ->Port == SPI3)RCC -> APB1ENR |= RCC_APB1ENR_SPI3EN;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a0c      	ldr	r2, [pc, #48]	@ (8002d5c <SPI_Clock_Enable+0x70>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d106      	bne.n	8002d3c <SPI_Clock_Enable+0x50>
 8002d2e:	4b09      	ldr	r3, [pc, #36]	@ (8002d54 <SPI_Clock_Enable+0x68>)
 8002d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d32:	4a08      	ldr	r2, [pc, #32]	@ (8002d54 <SPI_Clock_Enable+0x68>)
 8002d34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d38:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d3a:	e001      	b.n	8002d40 <SPI_Clock_Enable+0x54>
	else
		retval = -1;
 8002d3c:	23ff      	movs	r3, #255	@ 0xff
 8002d3e:	73fb      	strb	r3, [r7, #15]
	return retval;
 8002d40:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3714      	adds	r7, #20
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr
 8002d50:	40013000 	.word	0x40013000
 8002d54:	40023800 	.word	0x40023800
 8002d58:	40003800 	.word	0x40003800
 8002d5c:	40003c00 	.word	0x40003c00

08002d60 <SPI_Pin_Init>:
 * This function configures the necessary GPIO pins for the specified SPI port.
 *
 * @param[in] config Pointer to the SPI configuration structure.
 */
static void SPI_Pin_Init(SPI_Config *config)
{
 8002d60:	b590      	push	{r4, r7, lr}
 8002d62:	b087      	sub	sp, #28
 8002d64:	af04      	add	r7, sp, #16
 8002d66:	6078      	str	r0, [r7, #4]
	if(config -> Port == SPI1)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4aa2      	ldr	r2, [pc, #648]	@ (8002ff8 <SPI_Pin_Init+0x298>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	f040 816c 	bne.w	800304c <SPI_Pin_Init+0x2ec>
	{
		if((config->mode == SPI_Configurations.Mode.Full_Duplex_Master) || (config->mode == SPI_Configurations.Mode.Full_Duplex_Slave))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	89db      	ldrh	r3, [r3, #14]
 8002d78:	220b      	movs	r2, #11
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d004      	beq.n	8002d88 <SPI_Pin_Init+0x28>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	89db      	ldrh	r3, [r3, #14]
 8002d82:	220c      	movs	r2, #12
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d17d      	bne.n	8002e84 <SPI_Pin_Init+0x124>
		{
			if(config->clock_pin == SPI_Configurations.Pin._SPI1_.CLK1.PA5) GPIO_Pin_Init(GPIOA, 5, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_1);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	791b      	ldrb	r3, [r3, #4]
 8002d8c:	220f      	movs	r2, #15
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d10e      	bne.n	8002db0 <SPI_Pin_Init+0x50>
 8002d92:	2002      	movs	r0, #2
 8002d94:	2400      	movs	r4, #0
 8002d96:	2303      	movs	r3, #3
 8002d98:	2200      	movs	r2, #0
 8002d9a:	2105      	movs	r1, #5
 8002d9c:	9102      	str	r1, [sp, #8]
 8002d9e:	9201      	str	r2, [sp, #4]
 8002da0:	9300      	str	r3, [sp, #0]
 8002da2:	4623      	mov	r3, r4
 8002da4:	4602      	mov	r2, r0
 8002da6:	2105      	movs	r1, #5
 8002da8:	4894      	ldr	r0, [pc, #592]	@ (8002ffc <SPI_Pin_Init+0x29c>)
 8002daa:	f7ff fda5 	bl	80028f8 <GPIO_Pin_Init>
 8002dae:	e012      	b.n	8002dd6 <SPI_Pin_Init+0x76>
			else if(config->clock_pin == SPI_Configurations.Pin._SPI1_.CLK1.PB3) GPIO_Pin_Init(GPIOB, 3, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_1);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	791b      	ldrb	r3, [r3, #4]
 8002db4:	2221      	movs	r2, #33	@ 0x21
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d10d      	bne.n	8002dd6 <SPI_Pin_Init+0x76>
 8002dba:	2002      	movs	r0, #2
 8002dbc:	2400      	movs	r4, #0
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	2105      	movs	r1, #5
 8002dc4:	9102      	str	r1, [sp, #8]
 8002dc6:	9201      	str	r2, [sp, #4]
 8002dc8:	9300      	str	r3, [sp, #0]
 8002dca:	4623      	mov	r3, r4
 8002dcc:	4602      	mov	r2, r0
 8002dce:	2103      	movs	r1, #3
 8002dd0:	488b      	ldr	r0, [pc, #556]	@ (8003000 <SPI_Pin_Init+0x2a0>)
 8002dd2:	f7ff fd91 	bl	80028f8 <GPIO_Pin_Init>

			if(config->miso_pin == SPI_Configurations.Pin._SPI1_.MISO1.PA6) GPIO_Pin_Init(GPIOA, 6, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_1);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	799b      	ldrb	r3, [r3, #6]
 8002dda:	2210      	movs	r2, #16
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d10e      	bne.n	8002dfe <SPI_Pin_Init+0x9e>
 8002de0:	2002      	movs	r0, #2
 8002de2:	2400      	movs	r4, #0
 8002de4:	2303      	movs	r3, #3
 8002de6:	2200      	movs	r2, #0
 8002de8:	2105      	movs	r1, #5
 8002dea:	9102      	str	r1, [sp, #8]
 8002dec:	9201      	str	r2, [sp, #4]
 8002dee:	9300      	str	r3, [sp, #0]
 8002df0:	4623      	mov	r3, r4
 8002df2:	4602      	mov	r2, r0
 8002df4:	2106      	movs	r1, #6
 8002df6:	4881      	ldr	r0, [pc, #516]	@ (8002ffc <SPI_Pin_Init+0x29c>)
 8002df8:	f7ff fd7e 	bl	80028f8 <GPIO_Pin_Init>
 8002dfc:	e012      	b.n	8002e24 <SPI_Pin_Init+0xc4>
			else if(config->miso_pin == SPI_Configurations.Pin._SPI1_.MISO1.PB4) GPIO_Pin_Init(GPIOB, 4, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_1);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	799b      	ldrb	r3, [r3, #6]
 8002e02:	2222      	movs	r2, #34	@ 0x22
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d10d      	bne.n	8002e24 <SPI_Pin_Init+0xc4>
 8002e08:	2002      	movs	r0, #2
 8002e0a:	2400      	movs	r4, #0
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	2200      	movs	r2, #0
 8002e10:	2105      	movs	r1, #5
 8002e12:	9102      	str	r1, [sp, #8]
 8002e14:	9201      	str	r2, [sp, #4]
 8002e16:	9300      	str	r3, [sp, #0]
 8002e18:	4623      	mov	r3, r4
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	2104      	movs	r1, #4
 8002e1e:	4878      	ldr	r0, [pc, #480]	@ (8003000 <SPI_Pin_Init+0x2a0>)
 8002e20:	f7ff fd6a 	bl	80028f8 <GPIO_Pin_Init>

			if(config->mosi_pin == SPI_Configurations.Pin._SPI1_.MOSI1.PA7) GPIO_Pin_Init(GPIOA, 7, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_1);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	795b      	ldrb	r3, [r3, #5]
 8002e28:	2211      	movs	r2, #17
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d10e      	bne.n	8002e4c <SPI_Pin_Init+0xec>
 8002e2e:	2002      	movs	r0, #2
 8002e30:	2400      	movs	r4, #0
 8002e32:	2303      	movs	r3, #3
 8002e34:	2200      	movs	r2, #0
 8002e36:	2105      	movs	r1, #5
 8002e38:	9102      	str	r1, [sp, #8]
 8002e3a:	9201      	str	r2, [sp, #4]
 8002e3c:	9300      	str	r3, [sp, #0]
 8002e3e:	4623      	mov	r3, r4
 8002e40:	4602      	mov	r2, r0
 8002e42:	2107      	movs	r1, #7
 8002e44:	486d      	ldr	r0, [pc, #436]	@ (8002ffc <SPI_Pin_Init+0x29c>)
 8002e46:	f7ff fd57 	bl	80028f8 <GPIO_Pin_Init>
 8002e4a:	e012      	b.n	8002e72 <SPI_Pin_Init+0x112>
			else if(config->mosi_pin == SPI_Configurations.Pin._SPI1_.MOSI1.PB5) GPIO_Pin_Init(GPIOB, 5, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_1);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	795b      	ldrb	r3, [r3, #5]
 8002e50:	2223      	movs	r2, #35	@ 0x23
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d10d      	bne.n	8002e72 <SPI_Pin_Init+0x112>
 8002e56:	2002      	movs	r0, #2
 8002e58:	2400      	movs	r4, #0
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	2105      	movs	r1, #5
 8002e60:	9102      	str	r1, [sp, #8]
 8002e62:	9201      	str	r2, [sp, #4]
 8002e64:	9300      	str	r3, [sp, #0]
 8002e66:	4623      	mov	r3, r4
 8002e68:	4602      	mov	r2, r0
 8002e6a:	2105      	movs	r1, #5
 8002e6c:	4864      	ldr	r0, [pc, #400]	@ (8003000 <SPI_Pin_Init+0x2a0>)
 8002e6e:	f7ff fd43 	bl	80028f8 <GPIO_Pin_Init>

			config->Port -> CR1 &= ~SPI_CR1_BIDIMODE;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e80:	601a      	str	r2, [r3, #0]
 8002e82:	e3b9      	b.n	80035f8 <SPI_Pin_Init+0x898>
		}
		else if((config->mode == SPI_Configurations.Mode.Half_Duplex_Master) || (config->mode == SPI_Configurations.Mode.TX_Only_Master) || (config->mode == SPI_Configurations.Mode.RX_Only_Slave))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	89db      	ldrh	r3, [r3, #14]
 8002e88:	220d      	movs	r2, #13
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d009      	beq.n	8002ea2 <SPI_Pin_Init+0x142>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	89db      	ldrh	r3, [r3, #14]
 8002e92:	2211      	movs	r2, #17
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d004      	beq.n	8002ea2 <SPI_Pin_Init+0x142>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	89db      	ldrh	r3, [r3, #14]
 8002e9c:	2210      	movs	r2, #16
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d15e      	bne.n	8002f60 <SPI_Pin_Init+0x200>
		{
			if(config->clock_pin == SPI_Configurations.Pin._SPI1_.CLK1.PA5) GPIO_Pin_Init(GPIOA, 5, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_1);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	791b      	ldrb	r3, [r3, #4]
 8002ea6:	220f      	movs	r2, #15
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d10e      	bne.n	8002eca <SPI_Pin_Init+0x16a>
 8002eac:	2002      	movs	r0, #2
 8002eae:	2400      	movs	r4, #0
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	2105      	movs	r1, #5
 8002eb6:	9102      	str	r1, [sp, #8]
 8002eb8:	9201      	str	r2, [sp, #4]
 8002eba:	9300      	str	r3, [sp, #0]
 8002ebc:	4623      	mov	r3, r4
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	2105      	movs	r1, #5
 8002ec2:	484e      	ldr	r0, [pc, #312]	@ (8002ffc <SPI_Pin_Init+0x29c>)
 8002ec4:	f7ff fd18 	bl	80028f8 <GPIO_Pin_Init>
 8002ec8:	e012      	b.n	8002ef0 <SPI_Pin_Init+0x190>
			else if(config->clock_pin == SPI_Configurations.Pin._SPI1_.CLK1.PB3) GPIO_Pin_Init(GPIOB, 3, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_1);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	791b      	ldrb	r3, [r3, #4]
 8002ece:	2221      	movs	r2, #33	@ 0x21
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d10d      	bne.n	8002ef0 <SPI_Pin_Init+0x190>
 8002ed4:	2002      	movs	r0, #2
 8002ed6:	2400      	movs	r4, #0
 8002ed8:	2303      	movs	r3, #3
 8002eda:	2200      	movs	r2, #0
 8002edc:	2105      	movs	r1, #5
 8002ede:	9102      	str	r1, [sp, #8]
 8002ee0:	9201      	str	r2, [sp, #4]
 8002ee2:	9300      	str	r3, [sp, #0]
 8002ee4:	4623      	mov	r3, r4
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	2103      	movs	r1, #3
 8002eea:	4845      	ldr	r0, [pc, #276]	@ (8003000 <SPI_Pin_Init+0x2a0>)
 8002eec:	f7ff fd04 	bl	80028f8 <GPIO_Pin_Init>

			if(config->mosi_pin == SPI_Configurations.Pin._SPI1_.MOSI1.PA7) GPIO_Pin_Init(GPIOA, 7, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_1);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	795b      	ldrb	r3, [r3, #5]
 8002ef4:	2211      	movs	r2, #17
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d10e      	bne.n	8002f18 <SPI_Pin_Init+0x1b8>
 8002efa:	2002      	movs	r0, #2
 8002efc:	2400      	movs	r4, #0
 8002efe:	2303      	movs	r3, #3
 8002f00:	2200      	movs	r2, #0
 8002f02:	2105      	movs	r1, #5
 8002f04:	9102      	str	r1, [sp, #8]
 8002f06:	9201      	str	r2, [sp, #4]
 8002f08:	9300      	str	r3, [sp, #0]
 8002f0a:	4623      	mov	r3, r4
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	2107      	movs	r1, #7
 8002f10:	483a      	ldr	r0, [pc, #232]	@ (8002ffc <SPI_Pin_Init+0x29c>)
 8002f12:	f7ff fcf1 	bl	80028f8 <GPIO_Pin_Init>
 8002f16:	e012      	b.n	8002f3e <SPI_Pin_Init+0x1de>
			else if(config->mosi_pin == SPI_Configurations.Pin._SPI1_.MOSI1.PB5) GPIO_Pin_Init(GPIOB, 5, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_1);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	795b      	ldrb	r3, [r3, #5]
 8002f1c:	2223      	movs	r2, #35	@ 0x23
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d10d      	bne.n	8002f3e <SPI_Pin_Init+0x1de>
 8002f22:	2002      	movs	r0, #2
 8002f24:	2400      	movs	r4, #0
 8002f26:	2303      	movs	r3, #3
 8002f28:	2200      	movs	r2, #0
 8002f2a:	2105      	movs	r1, #5
 8002f2c:	9102      	str	r1, [sp, #8]
 8002f2e:	9201      	str	r2, [sp, #4]
 8002f30:	9300      	str	r3, [sp, #0]
 8002f32:	4623      	mov	r3, r4
 8002f34:	4602      	mov	r2, r0
 8002f36:	2105      	movs	r1, #5
 8002f38:	4831      	ldr	r0, [pc, #196]	@ (8003000 <SPI_Pin_Init+0x2a0>)
 8002f3a:	f7ff fcdd 	bl	80028f8 <GPIO_Pin_Init>

			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f4c:	601a      	str	r2, [r3, #0]
			config->Port -> CR1 |= SPI_CR1_BIDIOE;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f5c:	601a      	str	r2, [r3, #0]
 8002f5e:	e34b      	b.n	80035f8 <SPI_Pin_Init+0x898>
		}
		else if((config->mode == SPI_Configurations.Mode.Half_Duplex_Slave) || (config->mode == SPI_Configurations.Mode.RX_Only_Master) || (config->mode == SPI_Configurations.Mode.TX_Only_Slave))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	89db      	ldrh	r3, [r3, #14]
 8002f64:	220e      	movs	r2, #14
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d00a      	beq.n	8002f80 <SPI_Pin_Init+0x220>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	89db      	ldrh	r3, [r3, #14]
 8002f6e:	220f      	movs	r2, #15
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d005      	beq.n	8002f80 <SPI_Pin_Init+0x220>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	89db      	ldrh	r3, [r3, #14]
 8002f78:	2212      	movs	r2, #18
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	f040 833c 	bne.w	80035f8 <SPI_Pin_Init+0x898>
		{
			if(config->clock_pin == SPI_Configurations.Pin._SPI1_.CLK1.PA5) GPIO_Pin_Init(GPIOA, 5, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_1);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	791b      	ldrb	r3, [r3, #4]
 8002f84:	220f      	movs	r2, #15
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d10e      	bne.n	8002fa8 <SPI_Pin_Init+0x248>
 8002f8a:	2002      	movs	r0, #2
 8002f8c:	2400      	movs	r4, #0
 8002f8e:	2303      	movs	r3, #3
 8002f90:	2200      	movs	r2, #0
 8002f92:	2105      	movs	r1, #5
 8002f94:	9102      	str	r1, [sp, #8]
 8002f96:	9201      	str	r2, [sp, #4]
 8002f98:	9300      	str	r3, [sp, #0]
 8002f9a:	4623      	mov	r3, r4
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	2105      	movs	r1, #5
 8002fa0:	4816      	ldr	r0, [pc, #88]	@ (8002ffc <SPI_Pin_Init+0x29c>)
 8002fa2:	f7ff fca9 	bl	80028f8 <GPIO_Pin_Init>
 8002fa6:	e012      	b.n	8002fce <SPI_Pin_Init+0x26e>
			else if(config->clock_pin == SPI_Configurations.Pin._SPI1_.CLK1.PB3) GPIO_Pin_Init(GPIOB, 3, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_1);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	791b      	ldrb	r3, [r3, #4]
 8002fac:	2221      	movs	r2, #33	@ 0x21
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d10d      	bne.n	8002fce <SPI_Pin_Init+0x26e>
 8002fb2:	2002      	movs	r0, #2
 8002fb4:	2400      	movs	r4, #0
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	2200      	movs	r2, #0
 8002fba:	2105      	movs	r1, #5
 8002fbc:	9102      	str	r1, [sp, #8]
 8002fbe:	9201      	str	r2, [sp, #4]
 8002fc0:	9300      	str	r3, [sp, #0]
 8002fc2:	4623      	mov	r3, r4
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	2103      	movs	r1, #3
 8002fc8:	480d      	ldr	r0, [pc, #52]	@ (8003000 <SPI_Pin_Init+0x2a0>)
 8002fca:	f7ff fc95 	bl	80028f8 <GPIO_Pin_Init>

			if(config->miso_pin == SPI_Configurations.Pin._SPI1_.MISO1.PA6) GPIO_Pin_Init(GPIOA, 6, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_1);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	799b      	ldrb	r3, [r3, #6]
 8002fd2:	2210      	movs	r2, #16
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d115      	bne.n	8003004 <SPI_Pin_Init+0x2a4>
 8002fd8:	2002      	movs	r0, #2
 8002fda:	2400      	movs	r4, #0
 8002fdc:	2303      	movs	r3, #3
 8002fde:	2200      	movs	r2, #0
 8002fe0:	2105      	movs	r1, #5
 8002fe2:	9102      	str	r1, [sp, #8]
 8002fe4:	9201      	str	r2, [sp, #4]
 8002fe6:	9300      	str	r3, [sp, #0]
 8002fe8:	4623      	mov	r3, r4
 8002fea:	4602      	mov	r2, r0
 8002fec:	2106      	movs	r1, #6
 8002fee:	4803      	ldr	r0, [pc, #12]	@ (8002ffc <SPI_Pin_Init+0x29c>)
 8002ff0:	f7ff fc82 	bl	80028f8 <GPIO_Pin_Init>
 8002ff4:	e019      	b.n	800302a <SPI_Pin_Init+0x2ca>
 8002ff6:	bf00      	nop
 8002ff8:	40013000 	.word	0x40013000
 8002ffc:	40020000 	.word	0x40020000
 8003000:	40020400 	.word	0x40020400
			else if(config->miso_pin == SPI_Configurations.Pin._SPI1_.MISO1.PB4) GPIO_Pin_Init(GPIOB, 4, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_1);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	799b      	ldrb	r3, [r3, #6]
 8003008:	2222      	movs	r2, #34	@ 0x22
 800300a:	4293      	cmp	r3, r2
 800300c:	d10d      	bne.n	800302a <SPI_Pin_Init+0x2ca>
 800300e:	2002      	movs	r0, #2
 8003010:	2400      	movs	r4, #0
 8003012:	2303      	movs	r3, #3
 8003014:	2200      	movs	r2, #0
 8003016:	2105      	movs	r1, #5
 8003018:	9102      	str	r1, [sp, #8]
 800301a:	9201      	str	r2, [sp, #4]
 800301c:	9300      	str	r3, [sp, #0]
 800301e:	4623      	mov	r3, r4
 8003020:	4602      	mov	r2, r0
 8003022:	2104      	movs	r1, #4
 8003024:	489f      	ldr	r0, [pc, #636]	@ (80032a4 <SPI_Pin_Init+0x544>)
 8003026:	f7ff fc67 	bl	80028f8 <GPIO_Pin_Init>

			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003038:	601a      	str	r2, [r3, #0]
			config->Port -> CR1 &= ~SPI_CR1_BIDIOE;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003048:	601a      	str	r2, [r3, #0]

			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
			config->Port -> CR1 &= ~SPI_CR1_BIDIOE;
		}
	}
}
 800304a:	e2d5      	b.n	80035f8 <SPI_Pin_Init+0x898>
	else if(config -> Port == SPI2)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a95      	ldr	r2, [pc, #596]	@ (80032a8 <SPI_Pin_Init+0x548>)
 8003052:	4293      	cmp	r3, r2
 8003054:	f040 8151 	bne.w	80032fa <SPI_Pin_Init+0x59a>
		if((config->mode == SPI_Configurations.Mode.Full_Duplex_Master) || (config->mode == SPI_Configurations.Mode.Full_Duplex_Slave))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	89db      	ldrh	r3, [r3, #14]
 800305c:	220b      	movs	r2, #11
 800305e:	4293      	cmp	r3, r2
 8003060:	d005      	beq.n	800306e <SPI_Pin_Init+0x30e>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	89db      	ldrh	r3, [r3, #14]
 8003066:	220c      	movs	r2, #12
 8003068:	4293      	cmp	r3, r2
 800306a:	f040 8084 	bne.w	8003176 <SPI_Pin_Init+0x416>
			if(config->clock_pin == SPI_Configurations.Pin._SPI2_.CLK2.PB10) GPIO_Pin_Init(GPIOB, 10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_2);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	791b      	ldrb	r3, [r3, #4]
 8003072:	461a      	mov	r2, r3
 8003074:	2313      	movs	r3, #19
 8003076:	429a      	cmp	r2, r3
 8003078:	d10e      	bne.n	8003098 <SPI_Pin_Init+0x338>
 800307a:	2002      	movs	r0, #2
 800307c:	2400      	movs	r4, #0
 800307e:	2303      	movs	r3, #3
 8003080:	2200      	movs	r2, #0
 8003082:	2105      	movs	r1, #5
 8003084:	9102      	str	r1, [sp, #8]
 8003086:	9201      	str	r2, [sp, #4]
 8003088:	9300      	str	r3, [sp, #0]
 800308a:	4623      	mov	r3, r4
 800308c:	4602      	mov	r2, r0
 800308e:	210a      	movs	r1, #10
 8003090:	4884      	ldr	r0, [pc, #528]	@ (80032a4 <SPI_Pin_Init+0x544>)
 8003092:	f7ff fc31 	bl	80028f8 <GPIO_Pin_Init>
 8003096:	e013      	b.n	80030c0 <SPI_Pin_Init+0x360>
			else if(config->clock_pin == SPI_Configurations.Pin._SPI2_.CLK2.PB13) GPIO_Pin_Init(GPIOB, 13, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_2);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	791b      	ldrb	r3, [r3, #4]
 800309c:	461a      	mov	r2, r3
 800309e:	2317      	movs	r3, #23
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d10d      	bne.n	80030c0 <SPI_Pin_Init+0x360>
 80030a4:	2002      	movs	r0, #2
 80030a6:	2400      	movs	r4, #0
 80030a8:	2303      	movs	r3, #3
 80030aa:	2200      	movs	r2, #0
 80030ac:	2105      	movs	r1, #5
 80030ae:	9102      	str	r1, [sp, #8]
 80030b0:	9201      	str	r2, [sp, #4]
 80030b2:	9300      	str	r3, [sp, #0]
 80030b4:	4623      	mov	r3, r4
 80030b6:	4602      	mov	r2, r0
 80030b8:	210d      	movs	r1, #13
 80030ba:	487a      	ldr	r0, [pc, #488]	@ (80032a4 <SPI_Pin_Init+0x544>)
 80030bc:	f7ff fc1c 	bl	80028f8 <GPIO_Pin_Init>
			if(config->miso_pin == SPI_Configurations.Pin._SPI2_.MISO2.PB14) GPIO_Pin_Init(GPIOB, 14, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_2);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	799b      	ldrb	r3, [r3, #6]
 80030c4:	461a      	mov	r2, r3
 80030c6:	231b      	movs	r3, #27
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d10e      	bne.n	80030ea <SPI_Pin_Init+0x38a>
 80030cc:	2002      	movs	r0, #2
 80030ce:	2400      	movs	r4, #0
 80030d0:	2303      	movs	r3, #3
 80030d2:	2200      	movs	r2, #0
 80030d4:	2105      	movs	r1, #5
 80030d6:	9102      	str	r1, [sp, #8]
 80030d8:	9201      	str	r2, [sp, #4]
 80030da:	9300      	str	r3, [sp, #0]
 80030dc:	4623      	mov	r3, r4
 80030de:	4602      	mov	r2, r0
 80030e0:	210e      	movs	r1, #14
 80030e2:	4870      	ldr	r0, [pc, #448]	@ (80032a4 <SPI_Pin_Init+0x544>)
 80030e4:	f7ff fc08 	bl	80028f8 <GPIO_Pin_Init>
 80030e8:	e013      	b.n	8003112 <SPI_Pin_Init+0x3b2>
			else if(config->miso_pin == SPI_Configurations.Pin._SPI2_.MISO2.PC2) GPIO_Pin_Init(GPIOC, 2, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_2);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	799b      	ldrb	r3, [r3, #6]
 80030ee:	461a      	mov	r2, r3
 80030f0:	2320      	movs	r3, #32
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d10d      	bne.n	8003112 <SPI_Pin_Init+0x3b2>
 80030f6:	2002      	movs	r0, #2
 80030f8:	2400      	movs	r4, #0
 80030fa:	2303      	movs	r3, #3
 80030fc:	2200      	movs	r2, #0
 80030fe:	2105      	movs	r1, #5
 8003100:	9102      	str	r1, [sp, #8]
 8003102:	9201      	str	r2, [sp, #4]
 8003104:	9300      	str	r3, [sp, #0]
 8003106:	4623      	mov	r3, r4
 8003108:	4602      	mov	r2, r0
 800310a:	2102      	movs	r1, #2
 800310c:	4867      	ldr	r0, [pc, #412]	@ (80032ac <SPI_Pin_Init+0x54c>)
 800310e:	f7ff fbf3 	bl	80028f8 <GPIO_Pin_Init>
			if(config->mosi_pin == SPI_Configurations.Pin._SPI2_.MOSI2.PB15) GPIO_Pin_Init(GPIOB, 15, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_2);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	795b      	ldrb	r3, [r3, #5]
 8003116:	461a      	mov	r2, r3
 8003118:	231d      	movs	r3, #29
 800311a:	429a      	cmp	r2, r3
 800311c:	d10e      	bne.n	800313c <SPI_Pin_Init+0x3dc>
 800311e:	2002      	movs	r0, #2
 8003120:	2400      	movs	r4, #0
 8003122:	2303      	movs	r3, #3
 8003124:	2200      	movs	r2, #0
 8003126:	2105      	movs	r1, #5
 8003128:	9102      	str	r1, [sp, #8]
 800312a:	9201      	str	r2, [sp, #4]
 800312c:	9300      	str	r3, [sp, #0]
 800312e:	4623      	mov	r3, r4
 8003130:	4602      	mov	r2, r0
 8003132:	210f      	movs	r1, #15
 8003134:	485b      	ldr	r0, [pc, #364]	@ (80032a4 <SPI_Pin_Init+0x544>)
 8003136:	f7ff fbdf 	bl	80028f8 <GPIO_Pin_Init>
 800313a:	e013      	b.n	8003164 <SPI_Pin_Init+0x404>
			else if(config->mosi_pin == SPI_Configurations.Pin._SPI2_.MOSI2.PC3) GPIO_Pin_Init(GPIOC, 3, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_2);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	795b      	ldrb	r3, [r3, #5]
 8003140:	461a      	mov	r2, r3
 8003142:	2311      	movs	r3, #17
 8003144:	429a      	cmp	r2, r3
 8003146:	d10d      	bne.n	8003164 <SPI_Pin_Init+0x404>
 8003148:	2002      	movs	r0, #2
 800314a:	2400      	movs	r4, #0
 800314c:	2303      	movs	r3, #3
 800314e:	2200      	movs	r2, #0
 8003150:	2105      	movs	r1, #5
 8003152:	9102      	str	r1, [sp, #8]
 8003154:	9201      	str	r2, [sp, #4]
 8003156:	9300      	str	r3, [sp, #0]
 8003158:	4623      	mov	r3, r4
 800315a:	4602      	mov	r2, r0
 800315c:	2103      	movs	r1, #3
 800315e:	4853      	ldr	r0, [pc, #332]	@ (80032ac <SPI_Pin_Init+0x54c>)
 8003160:	f7ff fbca 	bl	80028f8 <GPIO_Pin_Init>
			config->Port -> CR1 &= ~SPI_CR1_BIDIMODE;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003172:	601a      	str	r2, [r3, #0]
 8003174:	e240      	b.n	80035f8 <SPI_Pin_Init+0x898>
		else if((config->mode == SPI_Configurations.Mode.Half_Duplex_Master) || (config->mode == SPI_Configurations.Mode.TX_Only_Master) || (config->mode == SPI_Configurations.Mode.RX_Only_Slave))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	89db      	ldrh	r3, [r3, #14]
 800317a:	220d      	movs	r2, #13
 800317c:	4293      	cmp	r3, r2
 800317e:	d009      	beq.n	8003194 <SPI_Pin_Init+0x434>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	89db      	ldrh	r3, [r3, #14]
 8003184:	2211      	movs	r2, #17
 8003186:	4293      	cmp	r3, r2
 8003188:	d004      	beq.n	8003194 <SPI_Pin_Init+0x434>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	89db      	ldrh	r3, [r3, #14]
 800318e:	2210      	movs	r2, #16
 8003190:	4293      	cmp	r3, r2
 8003192:	d139      	bne.n	8003208 <SPI_Pin_Init+0x4a8>
			if(config->clock_pin == SPI_Configurations.Pin._SPI2_.CLK2.PB10) GPIO_Pin_Init(GPIOB, 10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_2);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	791b      	ldrb	r3, [r3, #4]
 8003198:	461a      	mov	r2, r3
 800319a:	2313      	movs	r3, #19
 800319c:	429a      	cmp	r2, r3
 800319e:	d10e      	bne.n	80031be <SPI_Pin_Init+0x45e>
 80031a0:	2002      	movs	r0, #2
 80031a2:	2400      	movs	r4, #0
 80031a4:	2303      	movs	r3, #3
 80031a6:	2200      	movs	r2, #0
 80031a8:	2105      	movs	r1, #5
 80031aa:	9102      	str	r1, [sp, #8]
 80031ac:	9201      	str	r2, [sp, #4]
 80031ae:	9300      	str	r3, [sp, #0]
 80031b0:	4623      	mov	r3, r4
 80031b2:	4602      	mov	r2, r0
 80031b4:	210a      	movs	r1, #10
 80031b6:	483b      	ldr	r0, [pc, #236]	@ (80032a4 <SPI_Pin_Init+0x544>)
 80031b8:	f7ff fb9e 	bl	80028f8 <GPIO_Pin_Init>
 80031bc:	e013      	b.n	80031e6 <SPI_Pin_Init+0x486>
			else if(config->clock_pin == SPI_Configurations.Pin._SPI2_.CLK2.PB13) GPIO_Pin_Init(GPIOB, 13, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_2);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	791b      	ldrb	r3, [r3, #4]
 80031c2:	461a      	mov	r2, r3
 80031c4:	2317      	movs	r3, #23
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d10d      	bne.n	80031e6 <SPI_Pin_Init+0x486>
 80031ca:	2002      	movs	r0, #2
 80031cc:	2400      	movs	r4, #0
 80031ce:	2303      	movs	r3, #3
 80031d0:	2200      	movs	r2, #0
 80031d2:	2105      	movs	r1, #5
 80031d4:	9102      	str	r1, [sp, #8]
 80031d6:	9201      	str	r2, [sp, #4]
 80031d8:	9300      	str	r3, [sp, #0]
 80031da:	4623      	mov	r3, r4
 80031dc:	4602      	mov	r2, r0
 80031de:	210d      	movs	r1, #13
 80031e0:	4830      	ldr	r0, [pc, #192]	@ (80032a4 <SPI_Pin_Init+0x544>)
 80031e2:	f7ff fb89 	bl	80028f8 <GPIO_Pin_Init>
			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80031f4:	601a      	str	r2, [r3, #0]
			config->Port -> CR1 |= SPI_CR1_BIDIOE;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003204:	601a      	str	r2, [r3, #0]
 8003206:	e1f7      	b.n	80035f8 <SPI_Pin_Init+0x898>
		else if((config->mode == SPI_Configurations.Mode.Half_Duplex_Slave) || (config->mode == SPI_Configurations.Mode.RX_Only_Master) || (config->mode == SPI_Configurations.Mode.TX_Only_Slave))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	89db      	ldrh	r3, [r3, #14]
 800320c:	220e      	movs	r2, #14
 800320e:	4293      	cmp	r3, r2
 8003210:	d00a      	beq.n	8003228 <SPI_Pin_Init+0x4c8>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	89db      	ldrh	r3, [r3, #14]
 8003216:	220f      	movs	r2, #15
 8003218:	4293      	cmp	r3, r2
 800321a:	d005      	beq.n	8003228 <SPI_Pin_Init+0x4c8>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	89db      	ldrh	r3, [r3, #14]
 8003220:	2212      	movs	r2, #18
 8003222:	4293      	cmp	r3, r2
 8003224:	f040 81e8 	bne.w	80035f8 <SPI_Pin_Init+0x898>
			if(config->clock_pin == SPI_Configurations.Pin._SPI2_.CLK2.PB10) GPIO_Pin_Init(GPIOB, 10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_2);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	791b      	ldrb	r3, [r3, #4]
 800322c:	461a      	mov	r2, r3
 800322e:	2313      	movs	r3, #19
 8003230:	429a      	cmp	r2, r3
 8003232:	d10e      	bne.n	8003252 <SPI_Pin_Init+0x4f2>
 8003234:	2002      	movs	r0, #2
 8003236:	2400      	movs	r4, #0
 8003238:	2303      	movs	r3, #3
 800323a:	2200      	movs	r2, #0
 800323c:	2105      	movs	r1, #5
 800323e:	9102      	str	r1, [sp, #8]
 8003240:	9201      	str	r2, [sp, #4]
 8003242:	9300      	str	r3, [sp, #0]
 8003244:	4623      	mov	r3, r4
 8003246:	4602      	mov	r2, r0
 8003248:	210a      	movs	r1, #10
 800324a:	4816      	ldr	r0, [pc, #88]	@ (80032a4 <SPI_Pin_Init+0x544>)
 800324c:	f7ff fb54 	bl	80028f8 <GPIO_Pin_Init>
 8003250:	e013      	b.n	800327a <SPI_Pin_Init+0x51a>
			else if(config->clock_pin == SPI_Configurations.Pin._SPI2_.CLK2.PB13) GPIO_Pin_Init(GPIOB, 13, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_2);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	791b      	ldrb	r3, [r3, #4]
 8003256:	461a      	mov	r2, r3
 8003258:	2317      	movs	r3, #23
 800325a:	429a      	cmp	r2, r3
 800325c:	d10d      	bne.n	800327a <SPI_Pin_Init+0x51a>
 800325e:	2002      	movs	r0, #2
 8003260:	2400      	movs	r4, #0
 8003262:	2303      	movs	r3, #3
 8003264:	2200      	movs	r2, #0
 8003266:	2105      	movs	r1, #5
 8003268:	9102      	str	r1, [sp, #8]
 800326a:	9201      	str	r2, [sp, #4]
 800326c:	9300      	str	r3, [sp, #0]
 800326e:	4623      	mov	r3, r4
 8003270:	4602      	mov	r2, r0
 8003272:	210d      	movs	r1, #13
 8003274:	480b      	ldr	r0, [pc, #44]	@ (80032a4 <SPI_Pin_Init+0x544>)
 8003276:	f7ff fb3f 	bl	80028f8 <GPIO_Pin_Init>
			if(config->miso_pin == SPI_Configurations.Pin._SPI2_.MISO2.PB14) GPIO_Pin_Init(GPIOB, 14, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_2);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	799b      	ldrb	r3, [r3, #6]
 800327e:	461a      	mov	r2, r3
 8003280:	231b      	movs	r3, #27
 8003282:	429a      	cmp	r2, r3
 8003284:	d114      	bne.n	80032b0 <SPI_Pin_Init+0x550>
 8003286:	2002      	movs	r0, #2
 8003288:	2400      	movs	r4, #0
 800328a:	2303      	movs	r3, #3
 800328c:	2200      	movs	r2, #0
 800328e:	2105      	movs	r1, #5
 8003290:	9102      	str	r1, [sp, #8]
 8003292:	9201      	str	r2, [sp, #4]
 8003294:	9300      	str	r3, [sp, #0]
 8003296:	4623      	mov	r3, r4
 8003298:	4602      	mov	r2, r0
 800329a:	210e      	movs	r1, #14
 800329c:	4801      	ldr	r0, [pc, #4]	@ (80032a4 <SPI_Pin_Init+0x544>)
 800329e:	f7ff fb2b 	bl	80028f8 <GPIO_Pin_Init>
 80032a2:	e019      	b.n	80032d8 <SPI_Pin_Init+0x578>
 80032a4:	40020400 	.word	0x40020400
 80032a8:	40003800 	.word	0x40003800
 80032ac:	40020800 	.word	0x40020800
			else if(config->miso_pin == SPI_Configurations.Pin._SPI2_.MISO2.PC2) GPIO_Pin_Init(GPIOC, 2, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_2);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	799b      	ldrb	r3, [r3, #6]
 80032b4:	461a      	mov	r2, r3
 80032b6:	2320      	movs	r3, #32
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d10d      	bne.n	80032d8 <SPI_Pin_Init+0x578>
 80032bc:	2002      	movs	r0, #2
 80032be:	2400      	movs	r4, #0
 80032c0:	2303      	movs	r3, #3
 80032c2:	2200      	movs	r2, #0
 80032c4:	2105      	movs	r1, #5
 80032c6:	9102      	str	r1, [sp, #8]
 80032c8:	9201      	str	r2, [sp, #4]
 80032ca:	9300      	str	r3, [sp, #0]
 80032cc:	4623      	mov	r3, r4
 80032ce:	4602      	mov	r2, r0
 80032d0:	2102      	movs	r1, #2
 80032d2:	489f      	ldr	r0, [pc, #636]	@ (8003550 <SPI_Pin_Init+0x7f0>)
 80032d4:	f7ff fb10 	bl	80028f8 <GPIO_Pin_Init>
			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80032e6:	601a      	str	r2, [r3, #0]
			config->Port -> CR1 &= ~SPI_CR1_BIDIOE;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80032f6:	601a      	str	r2, [r3, #0]
}
 80032f8:	e17e      	b.n	80035f8 <SPI_Pin_Init+0x898>
	else if(config -> Port == SPI3)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a95      	ldr	r2, [pc, #596]	@ (8003554 <SPI_Pin_Init+0x7f4>)
 8003300:	4293      	cmp	r3, r2
 8003302:	f040 8179 	bne.w	80035f8 <SPI_Pin_Init+0x898>
		if((config->mode == SPI_Configurations.Mode.Full_Duplex_Master) || (config->mode == SPI_Configurations.Mode.Full_Duplex_Slave))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	89db      	ldrh	r3, [r3, #14]
 800330a:	220b      	movs	r2, #11
 800330c:	4293      	cmp	r3, r2
 800330e:	d005      	beq.n	800331c <SPI_Pin_Init+0x5bc>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	89db      	ldrh	r3, [r3, #14]
 8003314:	220c      	movs	r2, #12
 8003316:	4293      	cmp	r3, r2
 8003318:	f040 8084 	bne.w	8003424 <SPI_Pin_Init+0x6c4>
			if(config->clock_pin == SPI_Configurations.Pin._SPI3_.CLK3.PB3) GPIO_Pin_Init(GPIOB, 3, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_3);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	791b      	ldrb	r3, [r3, #4]
 8003320:	461a      	mov	r2, r3
 8003322:	2317      	movs	r3, #23
 8003324:	429a      	cmp	r2, r3
 8003326:	d10e      	bne.n	8003346 <SPI_Pin_Init+0x5e6>
 8003328:	2002      	movs	r0, #2
 800332a:	2400      	movs	r4, #0
 800332c:	2303      	movs	r3, #3
 800332e:	2200      	movs	r2, #0
 8003330:	2106      	movs	r1, #6
 8003332:	9102      	str	r1, [sp, #8]
 8003334:	9201      	str	r2, [sp, #4]
 8003336:	9300      	str	r3, [sp, #0]
 8003338:	4623      	mov	r3, r4
 800333a:	4602      	mov	r2, r0
 800333c:	2103      	movs	r1, #3
 800333e:	4886      	ldr	r0, [pc, #536]	@ (8003558 <SPI_Pin_Init+0x7f8>)
 8003340:	f7ff fada 	bl	80028f8 <GPIO_Pin_Init>
 8003344:	e013      	b.n	800336e <SPI_Pin_Init+0x60e>
			else if(config->clock_pin == SPI_Configurations.Pin._SPI3_.CLK3.PC10) GPIO_Pin_Init(GPIOC, 10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_3);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	791b      	ldrb	r3, [r3, #4]
 800334a:	461a      	mov	r2, r3
 800334c:	2325      	movs	r3, #37	@ 0x25
 800334e:	429a      	cmp	r2, r3
 8003350:	d10d      	bne.n	800336e <SPI_Pin_Init+0x60e>
 8003352:	2002      	movs	r0, #2
 8003354:	2400      	movs	r4, #0
 8003356:	2303      	movs	r3, #3
 8003358:	2200      	movs	r2, #0
 800335a:	2106      	movs	r1, #6
 800335c:	9102      	str	r1, [sp, #8]
 800335e:	9201      	str	r2, [sp, #4]
 8003360:	9300      	str	r3, [sp, #0]
 8003362:	4623      	mov	r3, r4
 8003364:	4602      	mov	r2, r0
 8003366:	210a      	movs	r1, #10
 8003368:	4879      	ldr	r0, [pc, #484]	@ (8003550 <SPI_Pin_Init+0x7f0>)
 800336a:	f7ff fac5 	bl	80028f8 <GPIO_Pin_Init>
			if(config->miso_pin == SPI_Configurations.Pin._SPI3_.MISO3.PB4) GPIO_Pin_Init(GPIOB, 4, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_3);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	799b      	ldrb	r3, [r3, #6]
 8003372:	461a      	mov	r2, r3
 8003374:	2318      	movs	r3, #24
 8003376:	429a      	cmp	r2, r3
 8003378:	d10e      	bne.n	8003398 <SPI_Pin_Init+0x638>
 800337a:	2002      	movs	r0, #2
 800337c:	2400      	movs	r4, #0
 800337e:	2303      	movs	r3, #3
 8003380:	2200      	movs	r2, #0
 8003382:	2106      	movs	r1, #6
 8003384:	9102      	str	r1, [sp, #8]
 8003386:	9201      	str	r2, [sp, #4]
 8003388:	9300      	str	r3, [sp, #0]
 800338a:	4623      	mov	r3, r4
 800338c:	4602      	mov	r2, r0
 800338e:	2104      	movs	r1, #4
 8003390:	4871      	ldr	r0, [pc, #452]	@ (8003558 <SPI_Pin_Init+0x7f8>)
 8003392:	f7ff fab1 	bl	80028f8 <GPIO_Pin_Init>
 8003396:	e013      	b.n	80033c0 <SPI_Pin_Init+0x660>
			else if(config->miso_pin == SPI_Configurations.Pin._SPI3_.MISO3.PC11) GPIO_Pin_Init(GPIOC,11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_3);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	799b      	ldrb	r3, [r3, #6]
 800339c:	461a      	mov	r2, r3
 800339e:	2327      	movs	r3, #39	@ 0x27
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d10d      	bne.n	80033c0 <SPI_Pin_Init+0x660>
 80033a4:	2002      	movs	r0, #2
 80033a6:	2400      	movs	r4, #0
 80033a8:	2303      	movs	r3, #3
 80033aa:	2200      	movs	r2, #0
 80033ac:	2106      	movs	r1, #6
 80033ae:	9102      	str	r1, [sp, #8]
 80033b0:	9201      	str	r2, [sp, #4]
 80033b2:	9300      	str	r3, [sp, #0]
 80033b4:	4623      	mov	r3, r4
 80033b6:	4602      	mov	r2, r0
 80033b8:	210b      	movs	r1, #11
 80033ba:	4865      	ldr	r0, [pc, #404]	@ (8003550 <SPI_Pin_Init+0x7f0>)
 80033bc:	f7ff fa9c 	bl	80028f8 <GPIO_Pin_Init>
			if(config->mosi_pin == SPI_Configurations.Pin._SPI3_.MOSI3.PB5) GPIO_Pin_Init(GPIOB, 5, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_3);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	795b      	ldrb	r3, [r3, #5]
 80033c4:	461a      	mov	r2, r3
 80033c6:	2319      	movs	r3, #25
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d10e      	bne.n	80033ea <SPI_Pin_Init+0x68a>
 80033cc:	2002      	movs	r0, #2
 80033ce:	2400      	movs	r4, #0
 80033d0:	2303      	movs	r3, #3
 80033d2:	2200      	movs	r2, #0
 80033d4:	2106      	movs	r1, #6
 80033d6:	9102      	str	r1, [sp, #8]
 80033d8:	9201      	str	r2, [sp, #4]
 80033da:	9300      	str	r3, [sp, #0]
 80033dc:	4623      	mov	r3, r4
 80033de:	4602      	mov	r2, r0
 80033e0:	2105      	movs	r1, #5
 80033e2:	485d      	ldr	r0, [pc, #372]	@ (8003558 <SPI_Pin_Init+0x7f8>)
 80033e4:	f7ff fa88 	bl	80028f8 <GPIO_Pin_Init>
 80033e8:	e013      	b.n	8003412 <SPI_Pin_Init+0x6b2>
			else if(config->mosi_pin == SPI_Configurations.Pin._SPI3_.MOSI3.PC12) GPIO_Pin_Init(GPIOC, 12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_3);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	795b      	ldrb	r3, [r3, #5]
 80033ee:	461a      	mov	r2, r3
 80033f0:	2327      	movs	r3, #39	@ 0x27
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d10d      	bne.n	8003412 <SPI_Pin_Init+0x6b2>
 80033f6:	2002      	movs	r0, #2
 80033f8:	2400      	movs	r4, #0
 80033fa:	2303      	movs	r3, #3
 80033fc:	2200      	movs	r2, #0
 80033fe:	2106      	movs	r1, #6
 8003400:	9102      	str	r1, [sp, #8]
 8003402:	9201      	str	r2, [sp, #4]
 8003404:	9300      	str	r3, [sp, #0]
 8003406:	4623      	mov	r3, r4
 8003408:	4602      	mov	r2, r0
 800340a:	210c      	movs	r1, #12
 800340c:	4850      	ldr	r0, [pc, #320]	@ (8003550 <SPI_Pin_Init+0x7f0>)
 800340e:	f7ff fa73 	bl	80028f8 <GPIO_Pin_Init>
			config->Port -> CR1 &= ~SPI_CR1_BIDIMODE;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003420:	601a      	str	r2, [r3, #0]
 8003422:	e0e9      	b.n	80035f8 <SPI_Pin_Init+0x898>
		else if((config->mode == SPI_Configurations.Mode.Half_Duplex_Master) || (config->mode == SPI_Configurations.Mode.TX_Only_Master) || (config->mode == SPI_Configurations.Mode.RX_Only_Slave))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	89db      	ldrh	r3, [r3, #14]
 8003428:	220d      	movs	r2, #13
 800342a:	4293      	cmp	r3, r2
 800342c:	d009      	beq.n	8003442 <SPI_Pin_Init+0x6e2>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	89db      	ldrh	r3, [r3, #14]
 8003432:	2211      	movs	r2, #17
 8003434:	4293      	cmp	r3, r2
 8003436:	d004      	beq.n	8003442 <SPI_Pin_Init+0x6e2>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	89db      	ldrh	r3, [r3, #14]
 800343c:	2210      	movs	r2, #16
 800343e:	4293      	cmp	r3, r2
 8003440:	d162      	bne.n	8003508 <SPI_Pin_Init+0x7a8>
			if(config->clock_pin == SPI_Configurations.Pin._SPI3_.CLK3.PB3) GPIO_Pin_Init(GPIOB, 3, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_3);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	791b      	ldrb	r3, [r3, #4]
 8003446:	461a      	mov	r2, r3
 8003448:	2317      	movs	r3, #23
 800344a:	429a      	cmp	r2, r3
 800344c:	d10e      	bne.n	800346c <SPI_Pin_Init+0x70c>
 800344e:	2002      	movs	r0, #2
 8003450:	2400      	movs	r4, #0
 8003452:	2303      	movs	r3, #3
 8003454:	2200      	movs	r2, #0
 8003456:	2106      	movs	r1, #6
 8003458:	9102      	str	r1, [sp, #8]
 800345a:	9201      	str	r2, [sp, #4]
 800345c:	9300      	str	r3, [sp, #0]
 800345e:	4623      	mov	r3, r4
 8003460:	4602      	mov	r2, r0
 8003462:	2103      	movs	r1, #3
 8003464:	483c      	ldr	r0, [pc, #240]	@ (8003558 <SPI_Pin_Init+0x7f8>)
 8003466:	f7ff fa47 	bl	80028f8 <GPIO_Pin_Init>
 800346a:	e013      	b.n	8003494 <SPI_Pin_Init+0x734>
			else if(config->clock_pin == SPI_Configurations.Pin._SPI3_.CLK3.PC10) GPIO_Pin_Init(GPIOC, 10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_3);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	791b      	ldrb	r3, [r3, #4]
 8003470:	461a      	mov	r2, r3
 8003472:	2325      	movs	r3, #37	@ 0x25
 8003474:	429a      	cmp	r2, r3
 8003476:	d10d      	bne.n	8003494 <SPI_Pin_Init+0x734>
 8003478:	2002      	movs	r0, #2
 800347a:	2400      	movs	r4, #0
 800347c:	2303      	movs	r3, #3
 800347e:	2200      	movs	r2, #0
 8003480:	2106      	movs	r1, #6
 8003482:	9102      	str	r1, [sp, #8]
 8003484:	9201      	str	r2, [sp, #4]
 8003486:	9300      	str	r3, [sp, #0]
 8003488:	4623      	mov	r3, r4
 800348a:	4602      	mov	r2, r0
 800348c:	210a      	movs	r1, #10
 800348e:	4830      	ldr	r0, [pc, #192]	@ (8003550 <SPI_Pin_Init+0x7f0>)
 8003490:	f7ff fa32 	bl	80028f8 <GPIO_Pin_Init>
			if(config->miso_pin == SPI_Configurations.Pin._SPI3_.MISO3.PB4) GPIO_Pin_Init(GPIOB, 4, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_3);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	799b      	ldrb	r3, [r3, #6]
 8003498:	461a      	mov	r2, r3
 800349a:	2318      	movs	r3, #24
 800349c:	429a      	cmp	r2, r3
 800349e:	d10e      	bne.n	80034be <SPI_Pin_Init+0x75e>
 80034a0:	2002      	movs	r0, #2
 80034a2:	2400      	movs	r4, #0
 80034a4:	2303      	movs	r3, #3
 80034a6:	2200      	movs	r2, #0
 80034a8:	2106      	movs	r1, #6
 80034aa:	9102      	str	r1, [sp, #8]
 80034ac:	9201      	str	r2, [sp, #4]
 80034ae:	9300      	str	r3, [sp, #0]
 80034b0:	4623      	mov	r3, r4
 80034b2:	4602      	mov	r2, r0
 80034b4:	2104      	movs	r1, #4
 80034b6:	4828      	ldr	r0, [pc, #160]	@ (8003558 <SPI_Pin_Init+0x7f8>)
 80034b8:	f7ff fa1e 	bl	80028f8 <GPIO_Pin_Init>
 80034bc:	e013      	b.n	80034e6 <SPI_Pin_Init+0x786>
			else if(config->miso_pin == SPI_Configurations.Pin._SPI3_.MISO3.PC11) GPIO_Pin_Init(GPIOC,11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_3);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	799b      	ldrb	r3, [r3, #6]
 80034c2:	461a      	mov	r2, r3
 80034c4:	2327      	movs	r3, #39	@ 0x27
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d10d      	bne.n	80034e6 <SPI_Pin_Init+0x786>
 80034ca:	2002      	movs	r0, #2
 80034cc:	2400      	movs	r4, #0
 80034ce:	2303      	movs	r3, #3
 80034d0:	2200      	movs	r2, #0
 80034d2:	2106      	movs	r1, #6
 80034d4:	9102      	str	r1, [sp, #8]
 80034d6:	9201      	str	r2, [sp, #4]
 80034d8:	9300      	str	r3, [sp, #0]
 80034da:	4623      	mov	r3, r4
 80034dc:	4602      	mov	r2, r0
 80034de:	210b      	movs	r1, #11
 80034e0:	481b      	ldr	r0, [pc, #108]	@ (8003550 <SPI_Pin_Init+0x7f0>)
 80034e2:	f7ff fa09 	bl	80028f8 <GPIO_Pin_Init>
			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80034f4:	601a      	str	r2, [r3, #0]
			config->Port -> CR1 |= SPI_CR1_BIDIOE;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003504:	601a      	str	r2, [r3, #0]
 8003506:	e077      	b.n	80035f8 <SPI_Pin_Init+0x898>
		else if((config->mode == SPI_Configurations.Mode.Half_Duplex_Slave) || (config->mode == SPI_Configurations.Mode.RX_Only_Master) || (config->mode == SPI_Configurations.Mode.TX_Only_Slave))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	89db      	ldrh	r3, [r3, #14]
 800350c:	220e      	movs	r2, #14
 800350e:	4293      	cmp	r3, r2
 8003510:	d009      	beq.n	8003526 <SPI_Pin_Init+0x7c6>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	89db      	ldrh	r3, [r3, #14]
 8003516:	220f      	movs	r2, #15
 8003518:	4293      	cmp	r3, r2
 800351a:	d004      	beq.n	8003526 <SPI_Pin_Init+0x7c6>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	89db      	ldrh	r3, [r3, #14]
 8003520:	2212      	movs	r2, #18
 8003522:	4293      	cmp	r3, r2
 8003524:	d168      	bne.n	80035f8 <SPI_Pin_Init+0x898>
			if(config->clock_pin == SPI_Configurations.Pin._SPI3_.CLK3.PB3) GPIO_Pin_Init(GPIOB, 3, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_3);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	791b      	ldrb	r3, [r3, #4]
 800352a:	461a      	mov	r2, r3
 800352c:	2317      	movs	r3, #23
 800352e:	429a      	cmp	r2, r3
 8003530:	d114      	bne.n	800355c <SPI_Pin_Init+0x7fc>
 8003532:	2002      	movs	r0, #2
 8003534:	2400      	movs	r4, #0
 8003536:	2303      	movs	r3, #3
 8003538:	2200      	movs	r2, #0
 800353a:	2106      	movs	r1, #6
 800353c:	9102      	str	r1, [sp, #8]
 800353e:	9201      	str	r2, [sp, #4]
 8003540:	9300      	str	r3, [sp, #0]
 8003542:	4623      	mov	r3, r4
 8003544:	4602      	mov	r2, r0
 8003546:	2103      	movs	r1, #3
 8003548:	4803      	ldr	r0, [pc, #12]	@ (8003558 <SPI_Pin_Init+0x7f8>)
 800354a:	f7ff f9d5 	bl	80028f8 <GPIO_Pin_Init>
 800354e:	e019      	b.n	8003584 <SPI_Pin_Init+0x824>
 8003550:	40020800 	.word	0x40020800
 8003554:	40003c00 	.word	0x40003c00
 8003558:	40020400 	.word	0x40020400
			else if(config->clock_pin == SPI_Configurations.Pin._SPI3_.CLK3.PC10) GPIO_Pin_Init(GPIOC, 10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_3);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	791b      	ldrb	r3, [r3, #4]
 8003560:	461a      	mov	r2, r3
 8003562:	2325      	movs	r3, #37	@ 0x25
 8003564:	429a      	cmp	r2, r3
 8003566:	d10d      	bne.n	8003584 <SPI_Pin_Init+0x824>
 8003568:	2002      	movs	r0, #2
 800356a:	2400      	movs	r4, #0
 800356c:	2303      	movs	r3, #3
 800356e:	2200      	movs	r2, #0
 8003570:	2106      	movs	r1, #6
 8003572:	9102      	str	r1, [sp, #8]
 8003574:	9201      	str	r2, [sp, #4]
 8003576:	9300      	str	r3, [sp, #0]
 8003578:	4623      	mov	r3, r4
 800357a:	4602      	mov	r2, r0
 800357c:	210a      	movs	r1, #10
 800357e:	4820      	ldr	r0, [pc, #128]	@ (8003600 <SPI_Pin_Init+0x8a0>)
 8003580:	f7ff f9ba 	bl	80028f8 <GPIO_Pin_Init>
			if(config->mosi_pin == SPI_Configurations.Pin._SPI3_.MOSI3.PB5) GPIO_Pin_Init(GPIOB, 5, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_3);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	795b      	ldrb	r3, [r3, #5]
 8003588:	461a      	mov	r2, r3
 800358a:	2319      	movs	r3, #25
 800358c:	429a      	cmp	r2, r3
 800358e:	d10e      	bne.n	80035ae <SPI_Pin_Init+0x84e>
 8003590:	2002      	movs	r0, #2
 8003592:	2400      	movs	r4, #0
 8003594:	2303      	movs	r3, #3
 8003596:	2200      	movs	r2, #0
 8003598:	2106      	movs	r1, #6
 800359a:	9102      	str	r1, [sp, #8]
 800359c:	9201      	str	r2, [sp, #4]
 800359e:	9300      	str	r3, [sp, #0]
 80035a0:	4623      	mov	r3, r4
 80035a2:	4602      	mov	r2, r0
 80035a4:	2105      	movs	r1, #5
 80035a6:	4817      	ldr	r0, [pc, #92]	@ (8003604 <SPI_Pin_Init+0x8a4>)
 80035a8:	f7ff f9a6 	bl	80028f8 <GPIO_Pin_Init>
 80035ac:	e013      	b.n	80035d6 <SPI_Pin_Init+0x876>
			else if(config->mosi_pin == SPI_Configurations.Pin._SPI3_.MOSI3.PC12) GPIO_Pin_Init(GPIOC, 12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_3);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	795b      	ldrb	r3, [r3, #5]
 80035b2:	461a      	mov	r2, r3
 80035b4:	2327      	movs	r3, #39	@ 0x27
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d10d      	bne.n	80035d6 <SPI_Pin_Init+0x876>
 80035ba:	2002      	movs	r0, #2
 80035bc:	2400      	movs	r4, #0
 80035be:	2303      	movs	r3, #3
 80035c0:	2200      	movs	r2, #0
 80035c2:	2106      	movs	r1, #6
 80035c4:	9102      	str	r1, [sp, #8]
 80035c6:	9201      	str	r2, [sp, #4]
 80035c8:	9300      	str	r3, [sp, #0]
 80035ca:	4623      	mov	r3, r4
 80035cc:	4602      	mov	r2, r0
 80035ce:	210c      	movs	r1, #12
 80035d0:	480b      	ldr	r0, [pc, #44]	@ (8003600 <SPI_Pin_Init+0x8a0>)
 80035d2:	f7ff f991 	bl	80028f8 <GPIO_Pin_Init>
			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80035e4:	601a      	str	r2, [r3, #0]
			config->Port -> CR1 &= ~SPI_CR1_BIDIOE;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80035f4:	601a      	str	r2, [r3, #0]
}
 80035f6:	e7ff      	b.n	80035f8 <SPI_Pin_Init+0x898>
 80035f8:	bf00      	nop
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd90      	pop	{r4, r7, pc}
 8003600:	40020800 	.word	0x40020800
 8003604:	40020400 	.word	0x40020400

08003608 <SPI_Init>:
 *
 * @param[in] config Pointer to the SPI configuration structure.
 * @return int8_t Returns 1 on success, -1 on failure.
 */
int8_t SPI_Init(SPI_Config *config)
{
 8003608:	b5f0      	push	{r4, r5, r6, r7, lr}
 800360a:	b087      	sub	sp, #28
 800360c:	af04      	add	r7, sp, #16
 800360e:	6078      	str	r0, [r7, #4]
	if(config->type == SPI_Configurations.Type.Master){
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	8b1b      	ldrh	r3, [r3, #24]
 8003614:	2232      	movs	r2, #50	@ 0x32
 8003616:	4293      	cmp	r3, r2
 8003618:	d110      	bne.n	800363c <SPI_Init+0x34>
		GPIO_Pin_Init(config->NSS_Port, config->NSS_Pin, GPIO_Configuration.Mode.General_Purpose_Output, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.Pull_Up, GPIO_Configuration.Alternate_Functions.None);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6898      	ldr	r0, [r3, #8]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	7b19      	ldrb	r1, [r3, #12]
 8003622:	2501      	movs	r5, #1
 8003624:	2600      	movs	r6, #0
 8003626:	2303      	movs	r3, #3
 8003628:	2201      	movs	r2, #1
 800362a:	2400      	movs	r4, #0
 800362c:	9402      	str	r4, [sp, #8]
 800362e:	9201      	str	r2, [sp, #4]
 8003630:	9300      	str	r3, [sp, #0]
 8003632:	4633      	mov	r3, r6
 8003634:	462a      	mov	r2, r5
 8003636:	f7ff f95f 	bl	80028f8 <GPIO_Pin_Init>
 800363a:	e014      	b.n	8003666 <SPI_Init+0x5e>
	}
	else if(config->type == SPI_Configurations.Type.Slave){
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	8b1b      	ldrh	r3, [r3, #24]
 8003640:	2233      	movs	r2, #51	@ 0x33
 8003642:	4293      	cmp	r3, r2
 8003644:	d10f      	bne.n	8003666 <SPI_Init+0x5e>
		GPIO_Pin_Init(config->NSS_Port, config->NSS_Pin, GPIO_Configuration.Mode.Input, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.Pull_Up, GPIO_Configuration.Alternate_Functions.None);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6898      	ldr	r0, [r3, #8]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	7b19      	ldrb	r1, [r3, #12]
 800364e:	2500      	movs	r5, #0
 8003650:	2600      	movs	r6, #0
 8003652:	2303      	movs	r3, #3
 8003654:	2201      	movs	r2, #1
 8003656:	2400      	movs	r4, #0
 8003658:	9402      	str	r4, [sp, #8]
 800365a:	9201      	str	r2, [sp, #4]
 800365c:	9300      	str	r3, [sp, #0]
 800365e:	4633      	mov	r3, r6
 8003660:	462a      	mov	r2, r5
 8003662:	f7ff f949 	bl	80028f8 <GPIO_Pin_Init>
	}

	SPI_Clock_Enable(config);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f7ff fb40 	bl	8002cec <SPI_Clock_Enable>
	SPI_Pin_Init(config);
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f7ff fb77 	bl	8002d60 <SPI_Pin_Init>

	SPI_NSS_High(config);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 fa53 	bl	8003b1e <SPI_NSS_High>

	config -> Port -> CR1 &= ~SPI_CR1_SPE;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003686:	601a      	str	r2, [r3, #0]



	if((config -> Port == SPI1) || (config -> Port == SPI2) || (config -> Port == SPI3))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a89      	ldr	r2, [pc, #548]	@ (80038b4 <SPI_Init+0x2ac>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d00a      	beq.n	80036a8 <SPI_Init+0xa0>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a88      	ldr	r2, [pc, #544]	@ (80038b8 <SPI_Init+0x2b0>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d005      	beq.n	80036a8 <SPI_Init+0xa0>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a86      	ldr	r2, [pc, #536]	@ (80038bc <SPI_Init+0x2b4>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	f040 81e2 	bne.w	8003a6c <SPI_Init+0x464>
	{

		config -> Port ->CR1 |= SPI_CR1_SSM | SPI_CR1_SSI;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80036b6:	601a      	str	r2, [r3, #0]


		     if(config -> clock_phase == SPI_Configurations.Clock_Phase.Low_0) config-> Port -> CR1 &= ~SPI_CR1_CPHA;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	8b9b      	ldrh	r3, [r3, #28]
 80036bc:	2217      	movs	r2, #23
 80036be:	4293      	cmp	r3, r2
 80036c0:	d108      	bne.n	80036d4 <SPI_Init+0xcc>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f022 0201 	bic.w	r2, r2, #1
 80036d0:	601a      	str	r2, [r3, #0]
 80036d2:	e010      	b.n	80036f6 <SPI_Init+0xee>
		else if(config -> clock_phase == SPI_Configurations.Clock_Phase.High_1) config-> Port -> CR1 |= SPI_CR1_CPHA;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	8b9b      	ldrh	r3, [r3, #28]
 80036d8:	2216      	movs	r2, #22
 80036da:	4293      	cmp	r3, r2
 80036dc:	d108      	bne.n	80036f0 <SPI_Init+0xe8>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f042 0201 	orr.w	r2, r2, #1
 80036ec:	601a      	str	r2, [r3, #0]
 80036ee:	e002      	b.n	80036f6 <SPI_Init+0xee>
		else {return -1;}
 80036f0:	f04f 33ff 	mov.w	r3, #4294967295
 80036f4:	e1be      	b.n	8003a74 <SPI_Init+0x46c>

		     if(config -> clock_polarity == SPI_Configurations.Clock_Polarity.Low_0) config-> Port -> CR1 &= ~SPI_CR1_CPOL;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	8b5b      	ldrh	r3, [r3, #26]
 80036fa:	2221      	movs	r2, #33	@ 0x21
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d108      	bne.n	8003712 <SPI_Init+0x10a>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f022 0202 	bic.w	r2, r2, #2
 800370e:	601a      	str	r2, [r3, #0]
 8003710:	e010      	b.n	8003734 <SPI_Init+0x12c>
		else if(config -> clock_polarity == SPI_Configurations.Clock_Polarity.High_1) config-> Port -> CR1 |= SPI_CR1_CPOL;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	8b5b      	ldrh	r3, [r3, #26]
 8003716:	2220      	movs	r2, #32
 8003718:	4293      	cmp	r3, r2
 800371a:	d108      	bne.n	800372e <SPI_Init+0x126>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f042 0202 	orr.w	r2, r2, #2
 800372a:	601a      	str	r2, [r3, #0]
 800372c:	e002      	b.n	8003734 <SPI_Init+0x12c>
		else {return -1;}
 800372e:	f04f 33ff 	mov.w	r3, #4294967295
 8003732:	e19f      	b.n	8003a74 <SPI_Init+0x46c>

		     if(config -> crc == SPI_Configurations.CRC_Enable.Disable) config -> Port -> CR1 &= ~SPI_CR1_CRCEN;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	8a1b      	ldrh	r3, [r3, #16]
 8003738:	2200      	movs	r2, #0
 800373a:	4293      	cmp	r3, r2
 800373c:	d108      	bne.n	8003750 <SPI_Init+0x148>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800374c:	601a      	str	r2, [r3, #0]
 800374e:	e010      	b.n	8003772 <SPI_Init+0x16a>
		else if(config -> crc == SPI_Configurations.CRC_Enable.Enable) config -> Port -> CR1 |=  SPI_CR1_CRCEN;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	8a1b      	ldrh	r3, [r3, #16]
 8003754:	2201      	movs	r2, #1
 8003756:	4293      	cmp	r3, r2
 8003758:	d108      	bne.n	800376c <SPI_Init+0x164>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003768:	601a      	str	r2, [r3, #0]
 800376a:	e002      	b.n	8003772 <SPI_Init+0x16a>
		else {return -1;}
 800376c:	f04f 33ff 	mov.w	r3, #4294967295
 8003770:	e180      	b.n	8003a74 <SPI_Init+0x46c>

		     if(config -> data_format == SPI_Configurations.Data_Format.Bit8) config -> Port -> CR1 &= ~SPI_CR1_DFF;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	8a5b      	ldrh	r3, [r3, #18]
 8003776:	220b      	movs	r2, #11
 8003778:	4293      	cmp	r3, r2
 800377a:	d108      	bne.n	800378e <SPI_Init+0x186>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800378a:	601a      	str	r2, [r3, #0]
 800378c:	e010      	b.n	80037b0 <SPI_Init+0x1a8>
		else if(config -> data_format == SPI_Configurations.Data_Format.Bit16) config -> Port -> CR1 |=  SPI_CR1_DFF;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	8a5b      	ldrh	r3, [r3, #18]
 8003792:	220c      	movs	r2, #12
 8003794:	4293      	cmp	r3, r2
 8003796:	d108      	bne.n	80037aa <SPI_Init+0x1a2>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80037a6:	601a      	str	r2, [r3, #0]
 80037a8:	e002      	b.n	80037b0 <SPI_Init+0x1a8>
		else {return -1;}
 80037aa:	f04f 33ff 	mov.w	r3, #4294967295
 80037ae:	e161      	b.n	8003a74 <SPI_Init+0x46c>

		     if(config -> frame_format == SPI_Configurations.Frame_Format.LSB_First) config -> Port -> CR1 |= SPI_CR1_LSBFIRST;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	8a9b      	ldrh	r3, [r3, #20]
 80037b4:	2218      	movs	r2, #24
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d108      	bne.n	80037cc <SPI_Init+0x1c4>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80037c8:	601a      	str	r2, [r3, #0]
 80037ca:	e010      	b.n	80037ee <SPI_Init+0x1e6>
		else if(config -> frame_format == SPI_Configurations.Frame_Format.MSB_First) config -> Port -> CR1 &= ~SPI_CR1_LSBFIRST;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	8a9b      	ldrh	r3, [r3, #20]
 80037d0:	2217      	movs	r2, #23
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d108      	bne.n	80037e8 <SPI_Init+0x1e0>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80037e4:	601a      	str	r2, [r3, #0]
 80037e6:	e002      	b.n	80037ee <SPI_Init+0x1e6>
		else {return -1;}
 80037e8:	f04f 33ff 	mov.w	r3, #4294967295
 80037ec:	e142      	b.n	8003a74 <SPI_Init+0x46c>

		     if(config->prescaler == SPI_Configurations.Prescaler.CLK_div_2) config -> Port -> CR1 &=   ~SPI_CR1_BR;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	8adb      	ldrh	r3, [r3, #22]
 80037f2:	2228      	movs	r2, #40	@ 0x28
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d108      	bne.n	800380a <SPI_Init+0x202>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f022 0238 	bic.w	r2, r2, #56	@ 0x38
 8003806:	601a      	str	r2, [r3, #0]
 8003808:	e06b      	b.n	80038e2 <SPI_Init+0x2da>
		else if(config->prescaler == SPI_Configurations.Prescaler.CLK_div_4) config -> Port -> CR1 |=    SPI_CR1_BR_0;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	8adb      	ldrh	r3, [r3, #22]
 800380e:	2229      	movs	r2, #41	@ 0x29
 8003810:	4293      	cmp	r3, r2
 8003812:	d108      	bne.n	8003826 <SPI_Init+0x21e>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f042 0208 	orr.w	r2, r2, #8
 8003822:	601a      	str	r2, [r3, #0]
 8003824:	e05d      	b.n	80038e2 <SPI_Init+0x2da>
		else if(config->prescaler == SPI_Configurations.Prescaler.CLK_div_8) config -> Port -> CR1 |=    SPI_CR1_BR_1;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	8adb      	ldrh	r3, [r3, #22]
 800382a:	222a      	movs	r2, #42	@ 0x2a
 800382c:	4293      	cmp	r3, r2
 800382e:	d108      	bne.n	8003842 <SPI_Init+0x23a>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f042 0210 	orr.w	r2, r2, #16
 800383e:	601a      	str	r2, [r3, #0]
 8003840:	e04f      	b.n	80038e2 <SPI_Init+0x2da>
		else if(config->prescaler == SPI_Configurations.Prescaler.CLK_div_16) config -> Port -> CR1 |=   SPI_CR1_BR_0 | SPI_CR1_BR_1;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	8adb      	ldrh	r3, [r3, #22]
 8003846:	222b      	movs	r2, #43	@ 0x2b
 8003848:	4293      	cmp	r3, r2
 800384a:	d108      	bne.n	800385e <SPI_Init+0x256>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f042 0218 	orr.w	r2, r2, #24
 800385a:	601a      	str	r2, [r3, #0]
 800385c:	e041      	b.n	80038e2 <SPI_Init+0x2da>
		else if(config->prescaler == SPI_Configurations.Prescaler.CLK_div_32) config -> Port -> CR1 |=   SPI_CR1_BR_2;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	8adb      	ldrh	r3, [r3, #22]
 8003862:	222c      	movs	r2, #44	@ 0x2c
 8003864:	4293      	cmp	r3, r2
 8003866:	d108      	bne.n	800387a <SPI_Init+0x272>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f042 0220 	orr.w	r2, r2, #32
 8003876:	601a      	str	r2, [r3, #0]
 8003878:	e033      	b.n	80038e2 <SPI_Init+0x2da>
		else if(config->prescaler == SPI_Configurations.Prescaler.CLK_div_64) config -> Port -> CR1 |=   SPI_CR1_BR_2 | SPI_CR1_BR_0;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	8adb      	ldrh	r3, [r3, #22]
 800387e:	222d      	movs	r2, #45	@ 0x2d
 8003880:	4293      	cmp	r3, r2
 8003882:	d108      	bne.n	8003896 <SPI_Init+0x28e>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f042 0228 	orr.w	r2, r2, #40	@ 0x28
 8003892:	601a      	str	r2, [r3, #0]
 8003894:	e025      	b.n	80038e2 <SPI_Init+0x2da>
		else if(config->prescaler == SPI_Configurations.Prescaler.CLK_div_128) config -> Port -> CR1 |=  SPI_CR1_BR_2 | SPI_CR1_BR_1;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	8adb      	ldrh	r3, [r3, #22]
 800389a:	222e      	movs	r2, #46	@ 0x2e
 800389c:	4293      	cmp	r3, r2
 800389e:	d10f      	bne.n	80038c0 <SPI_Init+0x2b8>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 80038ae:	601a      	str	r2, [r3, #0]
 80038b0:	e017      	b.n	80038e2 <SPI_Init+0x2da>
 80038b2:	bf00      	nop
 80038b4:	40013000 	.word	0x40013000
 80038b8:	40003800 	.word	0x40003800
 80038bc:	40003c00 	.word	0x40003c00
		else if(config->prescaler == SPI_Configurations.Prescaler.CLK_div_256) config -> Port -> CR1 |=  SPI_CR1_BR_2 | SPI_CR1_BR_1 | SPI_CR1_BR_0;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	8adb      	ldrh	r3, [r3, #22]
 80038c4:	222f      	movs	r2, #47	@ 0x2f
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d108      	bne.n	80038dc <SPI_Init+0x2d4>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f042 0238 	orr.w	r2, r2, #56	@ 0x38
 80038d8:	601a      	str	r2, [r3, #0]
 80038da:	e002      	b.n	80038e2 <SPI_Init+0x2da>
		else {return -1;}
 80038dc:	f04f 33ff 	mov.w	r3, #4294967295
 80038e0:	e0c8      	b.n	8003a74 <SPI_Init+0x46c>

		     if(config->type == SPI_Configurations.Type.Master) config -> Port -> CR1 |= SPI_CR1_MSTR;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	8b1b      	ldrh	r3, [r3, #24]
 80038e6:	2232      	movs	r2, #50	@ 0x32
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d108      	bne.n	80038fe <SPI_Init+0x2f6>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f042 0204 	orr.w	r2, r2, #4
 80038fa:	601a      	str	r2, [r3, #0]
 80038fc:	e010      	b.n	8003920 <SPI_Init+0x318>
		else if(config->type == SPI_Configurations.Type.Slave) config -> Port -> CR1 &= ~SPI_CR1_MSTR;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	8b1b      	ldrh	r3, [r3, #24]
 8003902:	2233      	movs	r2, #51	@ 0x33
 8003904:	4293      	cmp	r3, r2
 8003906:	d108      	bne.n	800391a <SPI_Init+0x312>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f022 0204 	bic.w	r2, r2, #4
 8003916:	601a      	str	r2, [r3, #0]
 8003918:	e002      	b.n	8003920 <SPI_Init+0x318>
		else {return -1;}
 800391a:	f04f 33ff 	mov.w	r3, #4294967295
 800391e:	e0a9      	b.n	8003a74 <SPI_Init+0x46c>

		     if(config->interrupt == SPI_Configurations.Interrupts.Disable) config -> Port ->  CR2 &= ~(SPI_CR2_TXEIE | SPI_CR2_RXNEIE | SPI_CR2_ERRIE);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	8bdb      	ldrh	r3, [r3, #30]
 8003924:	2246      	movs	r2, #70	@ 0x46
 8003926:	4293      	cmp	r3, r2
 8003928:	d108      	bne.n	800393c <SPI_Init+0x334>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	685a      	ldr	r2, [r3, #4]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003938:	605a      	str	r2, [r3, #4]
 800393a:	e02c      	b.n	8003996 <SPI_Init+0x38e>
		else if(config->interrupt == SPI_Configurations.Interrupts.Tx_Buffer_Empty) config -> Port ->  CR2 |= SPI_CR2_TXEIE;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	8bdb      	ldrh	r3, [r3, #30]
 8003940:	2249      	movs	r2, #73	@ 0x49
 8003942:	4293      	cmp	r3, r2
 8003944:	d108      	bne.n	8003958 <SPI_Init+0x350>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	685a      	ldr	r2, [r3, #4]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003954:	605a      	str	r2, [r3, #4]
 8003956:	e01e      	b.n	8003996 <SPI_Init+0x38e>
		else if(config->interrupt == SPI_Configurations.Interrupts.RX_Buffer_not_Empty) config -> Port ->  CR2 |= SPI_CR2_RXNEIE ;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	8bdb      	ldrh	r3, [r3, #30]
 800395c:	2248      	movs	r2, #72	@ 0x48
 800395e:	4293      	cmp	r3, r2
 8003960:	d108      	bne.n	8003974 <SPI_Init+0x36c>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	685a      	ldr	r2, [r3, #4]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003970:	605a      	str	r2, [r3, #4]
 8003972:	e010      	b.n	8003996 <SPI_Init+0x38e>
		else if(config->interrupt == SPI_Configurations.Interrupts.Error) config -> Port ->  CR2 |=  SPI_CR2_ERRIE;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	8bdb      	ldrh	r3, [r3, #30]
 8003978:	2247      	movs	r2, #71	@ 0x47
 800397a:	4293      	cmp	r3, r2
 800397c:	d108      	bne.n	8003990 <SPI_Init+0x388>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	685a      	ldr	r2, [r3, #4]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f042 0220 	orr.w	r2, r2, #32
 800398c:	605a      	str	r2, [r3, #4]
 800398e:	e002      	b.n	8003996 <SPI_Init+0x38e>
		else { return -1;}
 8003990:	f04f 33ff 	mov.w	r3, #4294967295
 8003994:	e06e      	b.n	8003a74 <SPI_Init+0x46c>




		if((config -> dma & SPI_Configurations.DMA_Type.RX_DMA_Disable) == SPI_Configurations.DMA_Type.RX_DMA_Disable){
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	8c1b      	ldrh	r3, [r3, #32]
 800399a:	461a      	mov	r2, r3
 800399c:	2310      	movs	r3, #16
 800399e:	4013      	ands	r3, r2
 80039a0:	2210      	movs	r2, #16
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d108      	bne.n	80039b8 <SPI_Init+0x3b0>
		    config -> Port -> CR2 &= ~SPI_CR2_RXDMAEN;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	685a      	ldr	r2, [r3, #4]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f022 0201 	bic.w	r2, r2, #1
 80039b4:	605a      	str	r2, [r3, #4]
 80039b6:	e022      	b.n	80039fe <SPI_Init+0x3f6>
		 }
		else if((config -> dma & SPI_Configurations.DMA_Type.RX_DMA_Enable) == SPI_Configurations.DMA_Type.RX_DMA_Enable)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	8c1b      	ldrh	r3, [r3, #32]
 80039bc:	461a      	mov	r2, r3
 80039be:	2308      	movs	r3, #8
 80039c0:	4013      	ands	r3, r2
 80039c2:	2208      	movs	r2, #8
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d11a      	bne.n	80039fe <SPI_Init+0x3f6>
		{
//			config -> Port -> CR2 |=  SPI_CR2_RXDMAEN;
//			config -> Port -> CR2 |=  SPI_CR2_TXDMAEN;
			if(config -> Port == SPI1){
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a2b      	ldr	r2, [pc, #172]	@ (8003a7c <SPI_Init+0x474>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d102      	bne.n	80039d8 <SPI_Init+0x3d0>
				xDMA1_RX_Init();
 80039d2:	f7ff f903 	bl	8002bdc <xDMA1_RX_Init>
 80039d6:	e012      	b.n	80039fe <SPI_Init+0x3f6>
			}
			else if(config -> Port == SPI2){
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a28      	ldr	r2, [pc, #160]	@ (8003a80 <SPI_Init+0x478>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d102      	bne.n	80039e8 <SPI_Init+0x3e0>
				xDMA2_RX_Init();
 80039e2:	f7ff f92d 	bl	8002c40 <xDMA2_RX_Init>
 80039e6:	e00a      	b.n	80039fe <SPI_Init+0x3f6>
			}
			else if(config -> Port == SPI3){
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a25      	ldr	r2, [pc, #148]	@ (8003a84 <SPI_Init+0x47c>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d102      	bne.n	80039f8 <SPI_Init+0x3f0>
				xDMA3_RX_Init();
 80039f2:	f7ff f951 	bl	8002c98 <xDMA3_RX_Init>
 80039f6:	e002      	b.n	80039fe <SPI_Init+0x3f6>
			}
			else {return -1;}
 80039f8:	f04f 33ff 	mov.w	r3, #4294967295
 80039fc:	e03a      	b.n	8003a74 <SPI_Init+0x46c>
		}

		if((config -> dma & SPI_Configurations.DMA_Type.TX_DMA_Disable) == SPI_Configurations.DMA_Type.TX_DMA_Disable){
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	8c1b      	ldrh	r3, [r3, #32]
 8003a02:	461a      	mov	r2, r3
 8003a04:	2304      	movs	r3, #4
 8003a06:	4013      	ands	r3, r2
 8003a08:	2204      	movs	r2, #4
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d108      	bne.n	8003a20 <SPI_Init+0x418>
			config -> Port -> CR2 &= ~SPI_CR2_TXDMAEN;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	685a      	ldr	r2, [r3, #4]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f022 0202 	bic.w	r2, r2, #2
 8003a1c:	605a      	str	r2, [r3, #4]
		if((config -> dma & SPI_Configurations.DMA_Type.TX_DMA_Disable) == SPI_Configurations.DMA_Type.TX_DMA_Disable){
 8003a1e:	e028      	b.n	8003a72 <SPI_Init+0x46a>
		}
		else if((config -> dma & SPI_Configurations.DMA_Type.TX_DMA_Enable) == SPI_Configurations.DMA_Type.TX_DMA_Enable){
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	8c1b      	ldrh	r3, [r3, #32]
 8003a24:	461a      	mov	r2, r3
 8003a26:	2302      	movs	r3, #2
 8003a28:	4013      	ands	r3, r2
 8003a2a:	2202      	movs	r2, #2
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d11a      	bne.n	8003a66 <SPI_Init+0x45e>
//			config -> Port -> CR2 |=  SPI_CR2_TXDMAEN;
			if(config -> Port == SPI1){
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a11      	ldr	r2, [pc, #68]	@ (8003a7c <SPI_Init+0x474>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d102      	bne.n	8003a40 <SPI_Init+0x438>
				xDMA1_TX_Init();
 8003a3a:	f7ff f845 	bl	8002ac8 <xDMA1_TX_Init>
		if((config -> dma & SPI_Configurations.DMA_Type.TX_DMA_Disable) == SPI_Configurations.DMA_Type.TX_DMA_Disable){
 8003a3e:	e018      	b.n	8003a72 <SPI_Init+0x46a>
			}
			else if(config -> Port == SPI2){
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a0e      	ldr	r2, [pc, #56]	@ (8003a80 <SPI_Init+0x478>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d102      	bne.n	8003a50 <SPI_Init+0x448>
				xDMA2_TX_Init();
 8003a4a:	f7ff f86f 	bl	8002b2c <xDMA2_TX_Init>
		if((config -> dma & SPI_Configurations.DMA_Type.TX_DMA_Disable) == SPI_Configurations.DMA_Type.TX_DMA_Disable){
 8003a4e:	e010      	b.n	8003a72 <SPI_Init+0x46a>
			}
			else if(config -> Port == SPI3){
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a0b      	ldr	r2, [pc, #44]	@ (8003a84 <SPI_Init+0x47c>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d102      	bne.n	8003a60 <SPI_Init+0x458>
				xDMA3_TX_Init();
 8003a5a:	f7ff f893 	bl	8002b84 <xDMA3_TX_Init>
		if((config -> dma & SPI_Configurations.DMA_Type.TX_DMA_Disable) == SPI_Configurations.DMA_Type.TX_DMA_Disable){
 8003a5e:	e008      	b.n	8003a72 <SPI_Init+0x46a>
			}
			else {return -1;}
 8003a60:	f04f 33ff 	mov.w	r3, #4294967295
 8003a64:	e006      	b.n	8003a74 <SPI_Init+0x46c>
		}
		else {return -1;}
 8003a66:	f04f 33ff 	mov.w	r3, #4294967295
 8003a6a:	e003      	b.n	8003a74 <SPI_Init+0x46c>


	}
	else
	{
		return -1;
 8003a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a70:	e000      	b.n	8003a74 <SPI_Init+0x46c>
	}

	return 1;
 8003a72:	2301      	movs	r3, #1
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a7c:	40013000 	.word	0x40013000
 8003a80:	40003800 	.word	0x40003800
 8003a84:	40003c00 	.word	0x40003c00

08003a88 <SPI_Enable>:
 * This function enables the SPI peripheral, allowing data transmission and reception.
 *
 * @param[in] config Pointer to the SPI configuration structure.
 */
void SPI_Enable(SPI_Config *config)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
	config->Port -> CR1 |= SPI_CR1_SPE;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003a9e:	601a      	str	r2, [r3, #0]
}
 8003aa0:	bf00      	nop
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <SPI_TRX_Byte>:
 * @param[in] config Pointer to the SPI configuration structure.
 * @param[in] tx_data Data to transmit.
 * @return uint16_t Received data.
 */
uint16_t SPI_TRX_Byte(SPI_Config *config,uint16_t tx_data)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b085      	sub	sp, #20
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	807b      	strh	r3, [r7, #2]
	volatile uint16_t temp = 0;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	81fb      	strh	r3, [r7, #14]
	while (!(config->Port->SR & SPI_SR_TXE));
 8003abc:	bf00      	nop
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f003 0302 	and.w	r3, r3, #2
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d0f8      	beq.n	8003abe <SPI_TRX_Byte+0x12>
	config->Port -> DR = tx_data;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	887a      	ldrh	r2, [r7, #2]
 8003ad2:	60da      	str	r2, [r3, #12]
	while (!(config->Port->SR & SPI_SR_RXNE));
 8003ad4:	bf00      	nop
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f003 0301 	and.w	r3, r3, #1
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d0f8      	beq.n	8003ad6 <SPI_TRX_Byte+0x2a>
	temp = config->Port -> DR;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	81fb      	strh	r3, [r7, #14]
	while (!(config->Port->SR & SPI_SR_TXE));
 8003aee:	bf00      	nop
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f003 0302 	and.w	r3, r3, #2
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d0f8      	beq.n	8003af0 <SPI_TRX_Byte+0x44>
	while (config->Port->SR & SPI_SR_BSY);
 8003afe:	bf00      	nop
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d1f8      	bne.n	8003b00 <SPI_TRX_Byte+0x54>
	return temp;
 8003b0e:	89fb      	ldrh	r3, [r7, #14]
 8003b10:	b29b      	uxth	r3, r3
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3714      	adds	r7, #20
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr

08003b1e <SPI_NSS_High>:
 * This function sets the NSS pin to a high level, indicating the end of SPI communication.
 *
 * @param[in] config Pointer to the SPI configuration structure.
 */
void SPI_NSS_High(SPI_Config *config)
{
 8003b1e:	b580      	push	{r7, lr}
 8003b20:	b082      	sub	sp, #8
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
	GPIO_Pin_High(config->NSS_Port, config->NSS_Pin);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	689a      	ldr	r2, [r3, #8]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	7b1b      	ldrb	r3, [r3, #12]
 8003b2e:	4619      	mov	r1, r3
 8003b30:	4610      	mov	r0, r2
 8003b32:	f7fe ff9d 	bl	8002a70 <GPIO_Pin_High>
}
 8003b36:	bf00      	nop
 8003b38:	3708      	adds	r7, #8
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <SPI_NSS_Low>:
 * This function sets the NSS pin to a low level, indicating the start of SPI communication.
 *
 * @param[in] config Pointer to the SPI configuration structure.
 */
void SPI_NSS_Low(SPI_Config *config)
{
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b082      	sub	sp, #8
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
	GPIO_Pin_Low(config->NSS_Port, config->NSS_Pin);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	689a      	ldr	r2, [r3, #8]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	7b1b      	ldrb	r3, [r3, #12]
 8003b4e:	4619      	mov	r1, r3
 8003b50:	4610      	mov	r0, r2
 8003b52:	f7fe ff78 	bl	8002a46 <GPIO_Pin_Low>
}
 8003b56:	bf00      	nop
 8003b58:	3708      	adds	r7, #8
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
	...

08003b60 <TIM1_BRK_TIM9_IRQHandler>:
Timer_Config *__timer_13_config__;
Timer_Config *__timer_14_config__;



void TIM1_BRK_TIM9_IRQHandler(void) {
 8003b60:	b580      	push	{r7, lr}
 8003b62:	af00      	add	r7, sp, #0
    if (__timer_1_config__ ->ISR_Routines.Break_ISR) {
 8003b64:	4b2b      	ldr	r3, [pc, #172]	@ (8003c14 <TIM1_BRK_TIM9_IRQHandler+0xb4>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00a      	beq.n	8003b86 <TIM1_BRK_TIM9_IRQHandler+0x26>
    	__timer_1_config__ ->ISR_Routines.Break_ISR();
 8003b70:	4b28      	ldr	r3, [pc, #160]	@ (8003c14 <TIM1_BRK_TIM9_IRQHandler+0xb4>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003b78:	4798      	blx	r3
    	TIM1->SR &= ~TIM_SR_BIF;  // Clear the Break interrupt flag
 8003b7a:	4b27      	ldr	r3, [pc, #156]	@ (8003c18 <TIM1_BRK_TIM9_IRQHandler+0xb8>)
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	4a26      	ldr	r2, [pc, #152]	@ (8003c18 <TIM1_BRK_TIM9_IRQHandler+0xb8>)
 8003b80:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b84:	6113      	str	r3, [r2, #16]
    }

    if (__timer_9_config__ ->ISR_Routines.Capture_Compare_1_ISR){
 8003b86:	4b25      	ldr	r3, [pc, #148]	@ (8003c1c <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00a      	beq.n	8003ba8 <TIM1_BRK_TIM9_IRQHandler+0x48>
    	__timer_9_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 8003b92:	4b22      	ldr	r3, [pc, #136]	@ (8003c1c <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b9a:	4798      	blx	r3
    	TIM9->SR &= ~TIM_SR_CC1IF;  // Clear the Break interrupt flag
 8003b9c:	4b20      	ldr	r3, [pc, #128]	@ (8003c20 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8003b9e:	691b      	ldr	r3, [r3, #16]
 8003ba0:	4a1f      	ldr	r2, [pc, #124]	@ (8003c20 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8003ba2:	f023 0302 	bic.w	r3, r3, #2
 8003ba6:	6113      	str	r3, [r2, #16]
    }

    if (__timer_9_config__ ->ISR_Routines.Capture_Compare_2_ISR){
 8003ba8:	4b1c      	ldr	r3, [pc, #112]	@ (8003c1c <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d00a      	beq.n	8003bca <TIM1_BRK_TIM9_IRQHandler+0x6a>
    	__timer_9_config__ ->ISR_Routines.Capture_Compare_2_ISR();
 8003bb4:	4b19      	ldr	r3, [pc, #100]	@ (8003c1c <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bbc:	4798      	blx	r3
    	TIM9->SR &= ~TIM_SR_CC2IF;  // Clear the Break interrupt flag
 8003bbe:	4b18      	ldr	r3, [pc, #96]	@ (8003c20 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	4a17      	ldr	r2, [pc, #92]	@ (8003c20 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8003bc4:	f023 0304 	bic.w	r3, r3, #4
 8003bc8:	6113      	str	r3, [r2, #16]
    }

    if (__timer_9_config__ ->ISR_Routines.Update_ISR){
 8003bca:	4b14      	ldr	r3, [pc, #80]	@ (8003c1c <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d00a      	beq.n	8003bec <TIM1_BRK_TIM9_IRQHandler+0x8c>
    	__timer_9_config__ ->ISR_Routines.Update_ISR();
 8003bd6:	4b11      	ldr	r3, [pc, #68]	@ (8003c1c <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003bde:	4798      	blx	r3
    	TIM9->SR &= ~TIM_SR_UIF;  // Clear the Break interrupt flag
 8003be0:	4b0f      	ldr	r3, [pc, #60]	@ (8003c20 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	4a0e      	ldr	r2, [pc, #56]	@ (8003c20 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8003be6:	f023 0301 	bic.w	r3, r3, #1
 8003bea:	6113      	str	r3, [r2, #16]
    }

    if (__timer_9_config__ ->ISR_Routines.Trigger_ISR){
 8003bec:	4b0b      	ldr	r3, [pc, #44]	@ (8003c1c <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d00a      	beq.n	8003c0e <TIM1_BRK_TIM9_IRQHandler+0xae>
    	__timer_9_config__ ->ISR_Routines.Trigger_ISR();
 8003bf8:	4b08      	ldr	r3, [pc, #32]	@ (8003c1c <TIM1_BRK_TIM9_IRQHandler+0xbc>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003c00:	4798      	blx	r3
    	TIM9->SR &= ~TIM_SR_TIF;  // Clear the Break interrupt flag
 8003c02:	4b07      	ldr	r3, [pc, #28]	@ (8003c20 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	4a06      	ldr	r2, [pc, #24]	@ (8003c20 <TIM1_BRK_TIM9_IRQHandler+0xc0>)
 8003c08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c0c:	6113      	str	r3, [r2, #16]
    }

}
 8003c0e:	bf00      	nop
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	2001c4bc 	.word	0x2001c4bc
 8003c18:	40010000 	.word	0x40010000
 8003c1c:	2001c4dc 	.word	0x2001c4dc
 8003c20:	40014000 	.word	0x40014000

08003c24 <TIM1_UP_TIM10_IRQHandler>:

void TIM1_UP_TIM10_IRQHandler(void) {
 8003c24:	b580      	push	{r7, lr}
 8003c26:	af00      	add	r7, sp, #0
    if (__timer_1_config__ ->ISR_Routines.Update_ISR) {
 8003c28:	4b1a      	ldr	r3, [pc, #104]	@ (8003c94 <TIM1_UP_TIM10_IRQHandler+0x70>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d00a      	beq.n	8003c4a <TIM1_UP_TIM10_IRQHandler+0x26>
    	__timer_1_config__ ->ISR_Routines.Update_ISR();
 8003c34:	4b17      	ldr	r3, [pc, #92]	@ (8003c94 <TIM1_UP_TIM10_IRQHandler+0x70>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c3c:	4798      	blx	r3
    	TIM1->SR &= ~TIM_SR_UIF;  // Clear the Update interrupt flag
 8003c3e:	4b16      	ldr	r3, [pc, #88]	@ (8003c98 <TIM1_UP_TIM10_IRQHandler+0x74>)
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	4a15      	ldr	r2, [pc, #84]	@ (8003c98 <TIM1_UP_TIM10_IRQHandler+0x74>)
 8003c44:	f023 0301 	bic.w	r3, r3, #1
 8003c48:	6113      	str	r3, [r2, #16]
    }

    if (__timer_10_config__ ->ISR_Routines.Update_ISR) {
 8003c4a:	4b14      	ldr	r3, [pc, #80]	@ (8003c9c <TIM1_UP_TIM10_IRQHandler+0x78>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00a      	beq.n	8003c6c <TIM1_UP_TIM10_IRQHandler+0x48>
    	__timer_10_config__ ->ISR_Routines.Update_ISR();
 8003c56:	4b11      	ldr	r3, [pc, #68]	@ (8003c9c <TIM1_UP_TIM10_IRQHandler+0x78>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c5e:	4798      	blx	r3
    	TIM10->SR &= ~TIM_SR_UIF;  // Clear the Update interrupt flag
 8003c60:	4b0f      	ldr	r3, [pc, #60]	@ (8003ca0 <TIM1_UP_TIM10_IRQHandler+0x7c>)
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	4a0e      	ldr	r2, [pc, #56]	@ (8003ca0 <TIM1_UP_TIM10_IRQHandler+0x7c>)
 8003c66:	f023 0301 	bic.w	r3, r3, #1
 8003c6a:	6113      	str	r3, [r2, #16]
    }

    if (__timer_10_config__ ->ISR_Routines.Capture_Compare_1_ISR) {
 8003c6c:	4b0b      	ldr	r3, [pc, #44]	@ (8003c9c <TIM1_UP_TIM10_IRQHandler+0x78>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d00a      	beq.n	8003c8e <TIM1_UP_TIM10_IRQHandler+0x6a>
    	__timer_10_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 8003c78:	4b08      	ldr	r3, [pc, #32]	@ (8003c9c <TIM1_UP_TIM10_IRQHandler+0x78>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c80:	4798      	blx	r3
    	TIM10->SR &= ~TIM_SR_CC1IF;  // Clear the Update interrupt flag
 8003c82:	4b07      	ldr	r3, [pc, #28]	@ (8003ca0 <TIM1_UP_TIM10_IRQHandler+0x7c>)
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	4a06      	ldr	r2, [pc, #24]	@ (8003ca0 <TIM1_UP_TIM10_IRQHandler+0x7c>)
 8003c88:	f023 0302 	bic.w	r3, r3, #2
 8003c8c:	6113      	str	r3, [r2, #16]
    }

}
 8003c8e:	bf00      	nop
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	2001c4bc 	.word	0x2001c4bc
 8003c98:	40010000 	.word	0x40010000
 8003c9c:	2001c4e0 	.word	0x2001c4e0
 8003ca0:	40014400 	.word	0x40014400

08003ca4 <TIM1_TRG_COM_TIM11_IRQHandler>:

void TIM1_TRG_COM_TIM11_IRQHandler(void) {
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	af00      	add	r7, sp, #0
    if (__timer_1_config__ ->ISR_Routines.Trigger_ISR) {
 8003ca8:	4b22      	ldr	r3, [pc, #136]	@ (8003d34 <TIM1_TRG_COM_TIM11_IRQHandler+0x90>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00a      	beq.n	8003cca <TIM1_TRG_COM_TIM11_IRQHandler+0x26>
    	__timer_1_config__ ->ISR_Routines.Trigger_ISR();
 8003cb4:	4b1f      	ldr	r3, [pc, #124]	@ (8003d34 <TIM1_TRG_COM_TIM11_IRQHandler+0x90>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003cbc:	4798      	blx	r3

    	TIM1->SR &= ~TIM_SR_TIF;  // Clear the Trigger interrupt flag
 8003cbe:	4b1e      	ldr	r3, [pc, #120]	@ (8003d38 <TIM1_TRG_COM_TIM11_IRQHandler+0x94>)
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	4a1d      	ldr	r2, [pc, #116]	@ (8003d38 <TIM1_TRG_COM_TIM11_IRQHandler+0x94>)
 8003cc4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003cc8:	6113      	str	r3, [r2, #16]
    }

    if (__timer_1_config__ ->ISR_Routines.Commutation_ISR) {
 8003cca:	4b1a      	ldr	r3, [pc, #104]	@ (8003d34 <TIM1_TRG_COM_TIM11_IRQHandler+0x90>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00a      	beq.n	8003cec <TIM1_TRG_COM_TIM11_IRQHandler+0x48>
    	__timer_1_config__ ->ISR_Routines.Commutation_ISR();
 8003cd6:	4b17      	ldr	r3, [pc, #92]	@ (8003d34 <TIM1_TRG_COM_TIM11_IRQHandler+0x90>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003cde:	4798      	blx	r3

    	TIM1->SR &= ~TIM_SR_COMIF;  // Clear the Trigger interrupt flag
 8003ce0:	4b15      	ldr	r3, [pc, #84]	@ (8003d38 <TIM1_TRG_COM_TIM11_IRQHandler+0x94>)
 8003ce2:	691b      	ldr	r3, [r3, #16]
 8003ce4:	4a14      	ldr	r2, [pc, #80]	@ (8003d38 <TIM1_TRG_COM_TIM11_IRQHandler+0x94>)
 8003ce6:	f023 0320 	bic.w	r3, r3, #32
 8003cea:	6113      	str	r3, [r2, #16]
    }

    if (__timer_11_config__ ->ISR_Routines.Update_ISR) {
 8003cec:	4b13      	ldr	r3, [pc, #76]	@ (8003d3c <TIM1_TRG_COM_TIM11_IRQHandler+0x98>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00a      	beq.n	8003d0e <TIM1_TRG_COM_TIM11_IRQHandler+0x6a>
    	__timer_11_config__ ->ISR_Routines.Update_ISR();
 8003cf8:	4b10      	ldr	r3, [pc, #64]	@ (8003d3c <TIM1_TRG_COM_TIM11_IRQHandler+0x98>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d00:	4798      	blx	r3
    	TIM11->SR &= ~TIM_SR_UIF;  // Clear the Update interrupt flag
 8003d02:	4b0f      	ldr	r3, [pc, #60]	@ (8003d40 <TIM1_TRG_COM_TIM11_IRQHandler+0x9c>)
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	4a0e      	ldr	r2, [pc, #56]	@ (8003d40 <TIM1_TRG_COM_TIM11_IRQHandler+0x9c>)
 8003d08:	f023 0301 	bic.w	r3, r3, #1
 8003d0c:	6113      	str	r3, [r2, #16]
    }

    if (__timer_11_config__ ->ISR_Routines.Capture_Compare_1_ISR) {
 8003d0e:	4b0b      	ldr	r3, [pc, #44]	@ (8003d3c <TIM1_TRG_COM_TIM11_IRQHandler+0x98>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00a      	beq.n	8003d30 <TIM1_TRG_COM_TIM11_IRQHandler+0x8c>
    	__timer_11_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 8003d1a:	4b08      	ldr	r3, [pc, #32]	@ (8003d3c <TIM1_TRG_COM_TIM11_IRQHandler+0x98>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d22:	4798      	blx	r3
    	TIM11->SR &= ~TIM_SR_CC1IF;  // Clear the Update interrupt flag
 8003d24:	4b06      	ldr	r3, [pc, #24]	@ (8003d40 <TIM1_TRG_COM_TIM11_IRQHandler+0x9c>)
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	4a05      	ldr	r2, [pc, #20]	@ (8003d40 <TIM1_TRG_COM_TIM11_IRQHandler+0x9c>)
 8003d2a:	f023 0302 	bic.w	r3, r3, #2
 8003d2e:	6113      	str	r3, [r2, #16]
    }

}
 8003d30:	bf00      	nop
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	2001c4bc 	.word	0x2001c4bc
 8003d38:	40010000 	.word	0x40010000
 8003d3c:	2001c4e4 	.word	0x2001c4e4
 8003d40:	40014800 	.word	0x40014800

08003d44 <TIM1_CC_IRQHandler>:

void TIM1_CC_IRQHandler(void) {
 8003d44:	b580      	push	{r7, lr}
 8003d46:	af00      	add	r7, sp, #0
    if (__timer_1_config__ ->ISR_Routines.Capture_Compare_1_ISR) {
 8003d48:	4b22      	ldr	r3, [pc, #136]	@ (8003dd4 <TIM1_CC_IRQHandler+0x90>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d00a      	beq.n	8003d6a <TIM1_CC_IRQHandler+0x26>
    	__timer_1_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 8003d54:	4b1f      	ldr	r3, [pc, #124]	@ (8003dd4 <TIM1_CC_IRQHandler+0x90>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d5c:	4798      	blx	r3

    	TIM1->SR &= ~TIM_SR_CC1IF;  // Clear the Capture Compare interrupt flag
 8003d5e:	4b1e      	ldr	r3, [pc, #120]	@ (8003dd8 <TIM1_CC_IRQHandler+0x94>)
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	4a1d      	ldr	r2, [pc, #116]	@ (8003dd8 <TIM1_CC_IRQHandler+0x94>)
 8003d64:	f023 0302 	bic.w	r3, r3, #2
 8003d68:	6113      	str	r3, [r2, #16]
    }

    if (__timer_1_config__ ->ISR_Routines.Capture_Compare_2_ISR) {
 8003d6a:	4b1a      	ldr	r3, [pc, #104]	@ (8003dd4 <TIM1_CC_IRQHandler+0x90>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00a      	beq.n	8003d8c <TIM1_CC_IRQHandler+0x48>
    	__timer_1_config__ ->ISR_Routines.Capture_Compare_2_ISR();
 8003d76:	4b17      	ldr	r3, [pc, #92]	@ (8003dd4 <TIM1_CC_IRQHandler+0x90>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d7e:	4798      	blx	r3

    	TIM1->SR &= ~TIM_SR_CC2IF;  // Clear the Capture Compare interrupt flag
 8003d80:	4b15      	ldr	r3, [pc, #84]	@ (8003dd8 <TIM1_CC_IRQHandler+0x94>)
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	4a14      	ldr	r2, [pc, #80]	@ (8003dd8 <TIM1_CC_IRQHandler+0x94>)
 8003d86:	f023 0304 	bic.w	r3, r3, #4
 8003d8a:	6113      	str	r3, [r2, #16]
    }

    if (__timer_1_config__ ->ISR_Routines.Capture_Compare_3_ISR) {
 8003d8c:	4b11      	ldr	r3, [pc, #68]	@ (8003dd4 <TIM1_CC_IRQHandler+0x90>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d00a      	beq.n	8003dae <TIM1_CC_IRQHandler+0x6a>
    	__timer_1_config__ ->ISR_Routines.Capture_Compare_3_ISR();
 8003d98:	4b0e      	ldr	r3, [pc, #56]	@ (8003dd4 <TIM1_CC_IRQHandler+0x90>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003da0:	4798      	blx	r3

    	TIM1->SR &= ~TIM_SR_CC3IF;  // Clear the Capture Compare interrupt flag
 8003da2:	4b0d      	ldr	r3, [pc, #52]	@ (8003dd8 <TIM1_CC_IRQHandler+0x94>)
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	4a0c      	ldr	r2, [pc, #48]	@ (8003dd8 <TIM1_CC_IRQHandler+0x94>)
 8003da8:	f023 0308 	bic.w	r3, r3, #8
 8003dac:	6113      	str	r3, [r2, #16]
    }

    if (__timer_1_config__ ->ISR_Routines.Capture_Compare_4_ISR) {
 8003dae:	4b09      	ldr	r3, [pc, #36]	@ (8003dd4 <TIM1_CC_IRQHandler+0x90>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d00a      	beq.n	8003dd0 <TIM1_CC_IRQHandler+0x8c>
    	__timer_1_config__ ->ISR_Routines.Capture_Compare_4_ISR();
 8003dba:	4b06      	ldr	r3, [pc, #24]	@ (8003dd4 <TIM1_CC_IRQHandler+0x90>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003dc2:	4798      	blx	r3

    	TIM1->SR &= ~TIM_SR_CC4IF;  // Clear the Capture Compare interrupt flag
 8003dc4:	4b04      	ldr	r3, [pc, #16]	@ (8003dd8 <TIM1_CC_IRQHandler+0x94>)
 8003dc6:	691b      	ldr	r3, [r3, #16]
 8003dc8:	4a03      	ldr	r2, [pc, #12]	@ (8003dd8 <TIM1_CC_IRQHandler+0x94>)
 8003dca:	f023 0310 	bic.w	r3, r3, #16
 8003dce:	6113      	str	r3, [r2, #16]
    }
}
 8003dd0:	bf00      	nop
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	2001c4bc 	.word	0x2001c4bc
 8003dd8:	40010000 	.word	0x40010000

08003ddc <TIM2_IRQHandler>:


void TIM2_IRQHandler(void)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	af00      	add	r7, sp, #0
    if (__timer_2_config__ ->ISR_Routines.Capture_Compare_1_ISR) {
 8003de0:	4b39      	ldr	r3, [pc, #228]	@ (8003ec8 <TIM2_IRQHandler+0xec>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d00c      	beq.n	8003e06 <TIM2_IRQHandler+0x2a>
    	__timer_2_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 8003dec:	4b36      	ldr	r3, [pc, #216]	@ (8003ec8 <TIM2_IRQHandler+0xec>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003df4:	4798      	blx	r3

    	TIM2->SR &= ~TIM_SR_CC1IF;  // Clear the Capture Compare interrupt flag
 8003df6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003dfa:	691b      	ldr	r3, [r3, #16]
 8003dfc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003e00:	f023 0302 	bic.w	r3, r3, #2
 8003e04:	6113      	str	r3, [r2, #16]
    }
    if (__timer_2_config__ ->ISR_Routines.Capture_Compare_2_ISR) {
 8003e06:	4b30      	ldr	r3, [pc, #192]	@ (8003ec8 <TIM2_IRQHandler+0xec>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00c      	beq.n	8003e2c <TIM2_IRQHandler+0x50>
    	__timer_2_config__ ->ISR_Routines.Capture_Compare_2_ISR();
 8003e12:	4b2d      	ldr	r3, [pc, #180]	@ (8003ec8 <TIM2_IRQHandler+0xec>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e1a:	4798      	blx	r3

    	TIM2->SR &= ~TIM_SR_CC2IF;  // Clear the Capture Compare interrupt flag
 8003e1c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003e26:	f023 0304 	bic.w	r3, r3, #4
 8003e2a:	6113      	str	r3, [r2, #16]
    }
    if (__timer_2_config__ ->ISR_Routines.Capture_Compare_3_ISR) {
 8003e2c:	4b26      	ldr	r3, [pc, #152]	@ (8003ec8 <TIM2_IRQHandler+0xec>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d00c      	beq.n	8003e52 <TIM2_IRQHandler+0x76>
    	__timer_2_config__ ->ISR_Routines.Capture_Compare_3_ISR();
 8003e38:	4b23      	ldr	r3, [pc, #140]	@ (8003ec8 <TIM2_IRQHandler+0xec>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e40:	4798      	blx	r3

    	TIM2->SR &= ~TIM_SR_CC3IF;  // Clear the Capture Compare interrupt flag
 8003e42:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003e4c:	f023 0308 	bic.w	r3, r3, #8
 8003e50:	6113      	str	r3, [r2, #16]
    }
    if (__timer_2_config__ ->ISR_Routines.Capture_Compare_4_ISR) {
 8003e52:	4b1d      	ldr	r3, [pc, #116]	@ (8003ec8 <TIM2_IRQHandler+0xec>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00c      	beq.n	8003e78 <TIM2_IRQHandler+0x9c>
    	__timer_2_config__ ->ISR_Routines.Capture_Compare_4_ISR();
 8003e5e:	4b1a      	ldr	r3, [pc, #104]	@ (8003ec8 <TIM2_IRQHandler+0xec>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003e66:	4798      	blx	r3

    	TIM2->SR &= ~TIM_SR_CC4IF;  // Clear the Capture Compare interrupt flag
 8003e68:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003e72:	f023 0310 	bic.w	r3, r3, #16
 8003e76:	6113      	str	r3, [r2, #16]
    }
    if (__timer_2_config__ ->ISR_Routines.Update_ISR) {
 8003e78:	4b13      	ldr	r3, [pc, #76]	@ (8003ec8 <TIM2_IRQHandler+0xec>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d00c      	beq.n	8003e9e <TIM2_IRQHandler+0xc2>
    	__timer_2_config__ ->ISR_Routines.Update_ISR();
 8003e84:	4b10      	ldr	r3, [pc, #64]	@ (8003ec8 <TIM2_IRQHandler+0xec>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e8c:	4798      	blx	r3

    	TIM2->SR &= ~TIM_SR_UIF;  // Clear the Capture Compare interrupt flag
 8003e8e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003e92:	691b      	ldr	r3, [r3, #16]
 8003e94:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003e98:	f023 0301 	bic.w	r3, r3, #1
 8003e9c:	6113      	str	r3, [r2, #16]
    }
    if (__timer_2_config__ ->ISR_Routines.Trigger_ISR) {
 8003e9e:	4b0a      	ldr	r3, [pc, #40]	@ (8003ec8 <TIM2_IRQHandler+0xec>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00c      	beq.n	8003ec4 <TIM2_IRQHandler+0xe8>
    	__timer_2_config__ ->ISR_Routines.Trigger_ISR();
 8003eaa:	4b07      	ldr	r3, [pc, #28]	@ (8003ec8 <TIM2_IRQHandler+0xec>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003eb2:	4798      	blx	r3

    	TIM2->SR &= ~TIM_SR_TIF;  // Clear the Capture Compare interrupt flag
 8003eb4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003ebe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ec2:	6113      	str	r3, [r2, #16]
    }
}
 8003ec4:	bf00      	nop
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	2001c4c0 	.word	0x2001c4c0

08003ecc <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	af00      	add	r7, sp, #0
    if (__timer_3_config__ ->ISR_Routines.Capture_Compare_1_ISR) {
 8003ed0:	4b33      	ldr	r3, [pc, #204]	@ (8003fa0 <TIM3_IRQHandler+0xd4>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d00a      	beq.n	8003ef2 <TIM3_IRQHandler+0x26>
    	__timer_3_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 8003edc:	4b30      	ldr	r3, [pc, #192]	@ (8003fa0 <TIM3_IRQHandler+0xd4>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ee4:	4798      	blx	r3

    	TIM3->SR &= ~TIM_SR_CC1IF;  // Clear the Capture Compare interrupt flag
 8003ee6:	4b2f      	ldr	r3, [pc, #188]	@ (8003fa4 <TIM3_IRQHandler+0xd8>)
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	4a2e      	ldr	r2, [pc, #184]	@ (8003fa4 <TIM3_IRQHandler+0xd8>)
 8003eec:	f023 0302 	bic.w	r3, r3, #2
 8003ef0:	6113      	str	r3, [r2, #16]
    }
    if (__timer_3_config__ ->ISR_Routines.Capture_Compare_2_ISR) {
 8003ef2:	4b2b      	ldr	r3, [pc, #172]	@ (8003fa0 <TIM3_IRQHandler+0xd4>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00a      	beq.n	8003f14 <TIM3_IRQHandler+0x48>
    	__timer_3_config__ ->ISR_Routines.Capture_Compare_2_ISR();
 8003efe:	4b28      	ldr	r3, [pc, #160]	@ (8003fa0 <TIM3_IRQHandler+0xd4>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f06:	4798      	blx	r3

    	TIM3->SR &= ~TIM_SR_CC2IF;  // Clear the Capture Compare interrupt flag
 8003f08:	4b26      	ldr	r3, [pc, #152]	@ (8003fa4 <TIM3_IRQHandler+0xd8>)
 8003f0a:	691b      	ldr	r3, [r3, #16]
 8003f0c:	4a25      	ldr	r2, [pc, #148]	@ (8003fa4 <TIM3_IRQHandler+0xd8>)
 8003f0e:	f023 0304 	bic.w	r3, r3, #4
 8003f12:	6113      	str	r3, [r2, #16]
    }
    if (__timer_3_config__ ->ISR_Routines.Capture_Compare_3_ISR) {
 8003f14:	4b22      	ldr	r3, [pc, #136]	@ (8003fa0 <TIM3_IRQHandler+0xd4>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d00a      	beq.n	8003f36 <TIM3_IRQHandler+0x6a>
    	__timer_3_config__ ->ISR_Routines.Capture_Compare_3_ISR();
 8003f20:	4b1f      	ldr	r3, [pc, #124]	@ (8003fa0 <TIM3_IRQHandler+0xd4>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f28:	4798      	blx	r3

    	TIM3->SR &= ~TIM_SR_CC3IF;  // Clear the Capture Compare interrupt flag
 8003f2a:	4b1e      	ldr	r3, [pc, #120]	@ (8003fa4 <TIM3_IRQHandler+0xd8>)
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	4a1d      	ldr	r2, [pc, #116]	@ (8003fa4 <TIM3_IRQHandler+0xd8>)
 8003f30:	f023 0308 	bic.w	r3, r3, #8
 8003f34:	6113      	str	r3, [r2, #16]
    }
    if (__timer_3_config__ ->ISR_Routines.Capture_Compare_4_ISR) {
 8003f36:	4b1a      	ldr	r3, [pc, #104]	@ (8003fa0 <TIM3_IRQHandler+0xd4>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00a      	beq.n	8003f58 <TIM3_IRQHandler+0x8c>
    	__timer_3_config__ ->ISR_Routines.Capture_Compare_4_ISR();
 8003f42:	4b17      	ldr	r3, [pc, #92]	@ (8003fa0 <TIM3_IRQHandler+0xd4>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f4a:	4798      	blx	r3

    	TIM3->SR &= ~TIM_SR_CC4IF;  // Clear the Capture Compare interrupt flag
 8003f4c:	4b15      	ldr	r3, [pc, #84]	@ (8003fa4 <TIM3_IRQHandler+0xd8>)
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	4a14      	ldr	r2, [pc, #80]	@ (8003fa4 <TIM3_IRQHandler+0xd8>)
 8003f52:	f023 0310 	bic.w	r3, r3, #16
 8003f56:	6113      	str	r3, [r2, #16]
    }
    if (__timer_3_config__ ->ISR_Routines.Update_ISR) {
 8003f58:	4b11      	ldr	r3, [pc, #68]	@ (8003fa0 <TIM3_IRQHandler+0xd4>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d00a      	beq.n	8003f7a <TIM3_IRQHandler+0xae>
    	__timer_3_config__ ->ISR_Routines.Update_ISR();
 8003f64:	4b0e      	ldr	r3, [pc, #56]	@ (8003fa0 <TIM3_IRQHandler+0xd4>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f6c:	4798      	blx	r3

    	TIM3->SR &= ~TIM_SR_UIF;  // Clear the Capture Compare interrupt flag
 8003f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8003fa4 <TIM3_IRQHandler+0xd8>)
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	4a0c      	ldr	r2, [pc, #48]	@ (8003fa4 <TIM3_IRQHandler+0xd8>)
 8003f74:	f023 0301 	bic.w	r3, r3, #1
 8003f78:	6113      	str	r3, [r2, #16]
    }
    if (__timer_3_config__ ->ISR_Routines.Trigger_ISR) {
 8003f7a:	4b09      	ldr	r3, [pc, #36]	@ (8003fa0 <TIM3_IRQHandler+0xd4>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00a      	beq.n	8003f9c <TIM3_IRQHandler+0xd0>
    	__timer_3_config__ ->ISR_Routines.Trigger_ISR();
 8003f86:	4b06      	ldr	r3, [pc, #24]	@ (8003fa0 <TIM3_IRQHandler+0xd4>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003f8e:	4798      	blx	r3

    	TIM3->SR &= ~TIM_SR_TIF;  // Clear the Capture Compare interrupt flag
 8003f90:	4b04      	ldr	r3, [pc, #16]	@ (8003fa4 <TIM3_IRQHandler+0xd8>)
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	4a03      	ldr	r2, [pc, #12]	@ (8003fa4 <TIM3_IRQHandler+0xd8>)
 8003f96:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f9a:	6113      	str	r3, [r2, #16]
    }
}
 8003f9c:	bf00      	nop
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	2001c4c4 	.word	0x2001c4c4
 8003fa4:	40000400 	.word	0x40000400

08003fa8 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	af00      	add	r7, sp, #0
    if (__timer_4_config__ ->ISR_Routines.Capture_Compare_1_ISR) {
 8003fac:	4b33      	ldr	r3, [pc, #204]	@ (800407c <TIM4_IRQHandler+0xd4>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d00a      	beq.n	8003fce <TIM4_IRQHandler+0x26>
    	__timer_4_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 8003fb8:	4b30      	ldr	r3, [pc, #192]	@ (800407c <TIM4_IRQHandler+0xd4>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fc0:	4798      	blx	r3

    	TIM4->SR &= ~TIM_SR_CC1IF;  // Clear the Capture Compare interrupt flag
 8003fc2:	4b2f      	ldr	r3, [pc, #188]	@ (8004080 <TIM4_IRQHandler+0xd8>)
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	4a2e      	ldr	r2, [pc, #184]	@ (8004080 <TIM4_IRQHandler+0xd8>)
 8003fc8:	f023 0302 	bic.w	r3, r3, #2
 8003fcc:	6113      	str	r3, [r2, #16]
    }
    if (__timer_4_config__ ->ISR_Routines.Capture_Compare_2_ISR) {
 8003fce:	4b2b      	ldr	r3, [pc, #172]	@ (800407c <TIM4_IRQHandler+0xd4>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d00a      	beq.n	8003ff0 <TIM4_IRQHandler+0x48>
    	__timer_4_config__ ->ISR_Routines.Capture_Compare_2_ISR();
 8003fda:	4b28      	ldr	r3, [pc, #160]	@ (800407c <TIM4_IRQHandler+0xd4>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fe2:	4798      	blx	r3

    	TIM4->SR &= ~TIM_SR_CC2IF;  // Clear the Capture Compare interrupt flag
 8003fe4:	4b26      	ldr	r3, [pc, #152]	@ (8004080 <TIM4_IRQHandler+0xd8>)
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	4a25      	ldr	r2, [pc, #148]	@ (8004080 <TIM4_IRQHandler+0xd8>)
 8003fea:	f023 0304 	bic.w	r3, r3, #4
 8003fee:	6113      	str	r3, [r2, #16]
    }
    if (__timer_4_config__ ->ISR_Routines.Capture_Compare_3_ISR) {
 8003ff0:	4b22      	ldr	r3, [pc, #136]	@ (800407c <TIM4_IRQHandler+0xd4>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d00a      	beq.n	8004012 <TIM4_IRQHandler+0x6a>
    	__timer_4_config__ ->ISR_Routines.Capture_Compare_3_ISR();
 8003ffc:	4b1f      	ldr	r3, [pc, #124]	@ (800407c <TIM4_IRQHandler+0xd4>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004004:	4798      	blx	r3

    	TIM4->SR &= ~TIM_SR_CC3IF;  // Clear the Capture Compare interrupt flag
 8004006:	4b1e      	ldr	r3, [pc, #120]	@ (8004080 <TIM4_IRQHandler+0xd8>)
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	4a1d      	ldr	r2, [pc, #116]	@ (8004080 <TIM4_IRQHandler+0xd8>)
 800400c:	f023 0308 	bic.w	r3, r3, #8
 8004010:	6113      	str	r3, [r2, #16]
    }
    if (__timer_4_config__ ->ISR_Routines.Capture_Compare_4_ISR) {
 8004012:	4b1a      	ldr	r3, [pc, #104]	@ (800407c <TIM4_IRQHandler+0xd4>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00a      	beq.n	8004034 <TIM4_IRQHandler+0x8c>
    	__timer_4_config__ ->ISR_Routines.Capture_Compare_4_ISR();
 800401e:	4b17      	ldr	r3, [pc, #92]	@ (800407c <TIM4_IRQHandler+0xd4>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004026:	4798      	blx	r3

    	TIM4->SR &= ~TIM_SR_CC4IF;  // Clear the Capture Compare interrupt flag
 8004028:	4b15      	ldr	r3, [pc, #84]	@ (8004080 <TIM4_IRQHandler+0xd8>)
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	4a14      	ldr	r2, [pc, #80]	@ (8004080 <TIM4_IRQHandler+0xd8>)
 800402e:	f023 0310 	bic.w	r3, r3, #16
 8004032:	6113      	str	r3, [r2, #16]
    }
    if (__timer_4_config__ ->ISR_Routines.Update_ISR) {
 8004034:	4b11      	ldr	r3, [pc, #68]	@ (800407c <TIM4_IRQHandler+0xd4>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800403c:	2b00      	cmp	r3, #0
 800403e:	d00a      	beq.n	8004056 <TIM4_IRQHandler+0xae>
    	__timer_4_config__ ->ISR_Routines.Update_ISR();
 8004040:	4b0e      	ldr	r3, [pc, #56]	@ (800407c <TIM4_IRQHandler+0xd4>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004048:	4798      	blx	r3

    	TIM4->SR &= ~TIM_SR_UIF;  // Clear the Capture Compare interrupt flag
 800404a:	4b0d      	ldr	r3, [pc, #52]	@ (8004080 <TIM4_IRQHandler+0xd8>)
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	4a0c      	ldr	r2, [pc, #48]	@ (8004080 <TIM4_IRQHandler+0xd8>)
 8004050:	f023 0301 	bic.w	r3, r3, #1
 8004054:	6113      	str	r3, [r2, #16]
    }
    if (__timer_4_config__ ->ISR_Routines.Trigger_ISR) {
 8004056:	4b09      	ldr	r3, [pc, #36]	@ (800407c <TIM4_IRQHandler+0xd4>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00a      	beq.n	8004078 <TIM4_IRQHandler+0xd0>
    	__timer_4_config__ ->ISR_Routines.Trigger_ISR();
 8004062:	4b06      	ldr	r3, [pc, #24]	@ (800407c <TIM4_IRQHandler+0xd4>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800406a:	4798      	blx	r3

    	TIM4->SR &= ~TIM_SR_TIF;  // Clear the Capture Compare interrupt flag
 800406c:	4b04      	ldr	r3, [pc, #16]	@ (8004080 <TIM4_IRQHandler+0xd8>)
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	4a03      	ldr	r2, [pc, #12]	@ (8004080 <TIM4_IRQHandler+0xd8>)
 8004072:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004076:	6113      	str	r3, [r2, #16]
    }
}
 8004078:	bf00      	nop
 800407a:	bd80      	pop	{r7, pc}
 800407c:	2001c4c8 	.word	0x2001c4c8
 8004080:	40000800 	.word	0x40000800

08004084 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	af00      	add	r7, sp, #0
    if (__timer_5_config__ ->ISR_Routines.Capture_Compare_1_ISR) {
 8004088:	4b33      	ldr	r3, [pc, #204]	@ (8004158 <TIM5_IRQHandler+0xd4>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004090:	2b00      	cmp	r3, #0
 8004092:	d00a      	beq.n	80040aa <TIM5_IRQHandler+0x26>
    	__timer_5_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 8004094:	4b30      	ldr	r3, [pc, #192]	@ (8004158 <TIM5_IRQHandler+0xd4>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800409c:	4798      	blx	r3

    	TIM5->SR &= ~TIM_SR_CC1IF;  // Clear the Capture Compare interrupt flag
 800409e:	4b2f      	ldr	r3, [pc, #188]	@ (800415c <TIM5_IRQHandler+0xd8>)
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	4a2e      	ldr	r2, [pc, #184]	@ (800415c <TIM5_IRQHandler+0xd8>)
 80040a4:	f023 0302 	bic.w	r3, r3, #2
 80040a8:	6113      	str	r3, [r2, #16]
    }
    if (__timer_5_config__ ->ISR_Routines.Capture_Compare_2_ISR) {
 80040aa:	4b2b      	ldr	r3, [pc, #172]	@ (8004158 <TIM5_IRQHandler+0xd4>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00a      	beq.n	80040cc <TIM5_IRQHandler+0x48>
    	__timer_5_config__ ->ISR_Routines.Capture_Compare_2_ISR();
 80040b6:	4b28      	ldr	r3, [pc, #160]	@ (8004158 <TIM5_IRQHandler+0xd4>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040be:	4798      	blx	r3

    	TIM5->SR &= ~TIM_SR_CC2IF;  // Clear the Capture Compare interrupt flag
 80040c0:	4b26      	ldr	r3, [pc, #152]	@ (800415c <TIM5_IRQHandler+0xd8>)
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	4a25      	ldr	r2, [pc, #148]	@ (800415c <TIM5_IRQHandler+0xd8>)
 80040c6:	f023 0304 	bic.w	r3, r3, #4
 80040ca:	6113      	str	r3, [r2, #16]
    }
    if (__timer_5_config__ ->ISR_Routines.Capture_Compare_3_ISR) {
 80040cc:	4b22      	ldr	r3, [pc, #136]	@ (8004158 <TIM5_IRQHandler+0xd4>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00a      	beq.n	80040ee <TIM5_IRQHandler+0x6a>
    	__timer_5_config__ ->ISR_Routines.Capture_Compare_3_ISR();
 80040d8:	4b1f      	ldr	r3, [pc, #124]	@ (8004158 <TIM5_IRQHandler+0xd4>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80040e0:	4798      	blx	r3

    	TIM5->SR &= ~TIM_SR_CC3IF;  // Clear the Capture Compare interrupt flag
 80040e2:	4b1e      	ldr	r3, [pc, #120]	@ (800415c <TIM5_IRQHandler+0xd8>)
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	4a1d      	ldr	r2, [pc, #116]	@ (800415c <TIM5_IRQHandler+0xd8>)
 80040e8:	f023 0308 	bic.w	r3, r3, #8
 80040ec:	6113      	str	r3, [r2, #16]
    }
    if (__timer_5_config__ ->ISR_Routines.Capture_Compare_4_ISR) {
 80040ee:	4b1a      	ldr	r3, [pc, #104]	@ (8004158 <TIM5_IRQHandler+0xd4>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00a      	beq.n	8004110 <TIM5_IRQHandler+0x8c>
    	__timer_5_config__ ->ISR_Routines.Capture_Compare_4_ISR();
 80040fa:	4b17      	ldr	r3, [pc, #92]	@ (8004158 <TIM5_IRQHandler+0xd4>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004102:	4798      	blx	r3

    	TIM5->SR &= ~TIM_SR_CC4IF;  // Clear the Capture Compare interrupt flag
 8004104:	4b15      	ldr	r3, [pc, #84]	@ (800415c <TIM5_IRQHandler+0xd8>)
 8004106:	691b      	ldr	r3, [r3, #16]
 8004108:	4a14      	ldr	r2, [pc, #80]	@ (800415c <TIM5_IRQHandler+0xd8>)
 800410a:	f023 0310 	bic.w	r3, r3, #16
 800410e:	6113      	str	r3, [r2, #16]
    }
    if (__timer_5_config__ ->ISR_Routines.Update_ISR) {
 8004110:	4b11      	ldr	r3, [pc, #68]	@ (8004158 <TIM5_IRQHandler+0xd4>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004118:	2b00      	cmp	r3, #0
 800411a:	d00a      	beq.n	8004132 <TIM5_IRQHandler+0xae>
    	__timer_5_config__ ->ISR_Routines.Update_ISR();
 800411c:	4b0e      	ldr	r3, [pc, #56]	@ (8004158 <TIM5_IRQHandler+0xd4>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004124:	4798      	blx	r3

    	TIM5->SR &= ~TIM_SR_UIF;  // Clear the Capture Compare interrupt flag
 8004126:	4b0d      	ldr	r3, [pc, #52]	@ (800415c <TIM5_IRQHandler+0xd8>)
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	4a0c      	ldr	r2, [pc, #48]	@ (800415c <TIM5_IRQHandler+0xd8>)
 800412c:	f023 0301 	bic.w	r3, r3, #1
 8004130:	6113      	str	r3, [r2, #16]
    }
    if (__timer_5_config__ ->ISR_Routines.Trigger_ISR) {
 8004132:	4b09      	ldr	r3, [pc, #36]	@ (8004158 <TIM5_IRQHandler+0xd4>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800413a:	2b00      	cmp	r3, #0
 800413c:	d00a      	beq.n	8004154 <TIM5_IRQHandler+0xd0>
    	__timer_5_config__ ->ISR_Routines.Trigger_ISR();
 800413e:	4b06      	ldr	r3, [pc, #24]	@ (8004158 <TIM5_IRQHandler+0xd4>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004146:	4798      	blx	r3

    	TIM5->SR &= ~TIM_SR_TIF;  // Clear the Capture Compare interrupt flag
 8004148:	4b04      	ldr	r3, [pc, #16]	@ (800415c <TIM5_IRQHandler+0xd8>)
 800414a:	691b      	ldr	r3, [r3, #16]
 800414c:	4a03      	ldr	r2, [pc, #12]	@ (800415c <TIM5_IRQHandler+0xd8>)
 800414e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004152:	6113      	str	r3, [r2, #16]
    }
}
 8004154:	bf00      	nop
 8004156:	bd80      	pop	{r7, pc}
 8004158:	2001c4cc 	.word	0x2001c4cc
 800415c:	40000c00 	.word	0x40000c00

08004160 <TIM6_DAC_IRQHandler>:

void TIM6_DAC_IRQHandler(void)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	af00      	add	r7, sp, #0
    if (__timer_6_config__->ISR_Routines.Update_ISR) {
 8004164:	4b09      	ldr	r3, [pc, #36]	@ (800418c <TIM6_DAC_IRQHandler+0x2c>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800416c:	2b00      	cmp	r3, #0
 800416e:	d00a      	beq.n	8004186 <TIM6_DAC_IRQHandler+0x26>
    	__timer_6_config__->ISR_Routines.Update_ISR();
 8004170:	4b06      	ldr	r3, [pc, #24]	@ (800418c <TIM6_DAC_IRQHandler+0x2c>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004178:	4798      	blx	r3
    	  TIM6->SR &= ~TIM_SR_UIF;  // Clear the Capture Compare interrupt flag
 800417a:	4b05      	ldr	r3, [pc, #20]	@ (8004190 <TIM6_DAC_IRQHandler+0x30>)
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	4a04      	ldr	r2, [pc, #16]	@ (8004190 <TIM6_DAC_IRQHandler+0x30>)
 8004180:	f023 0301 	bic.w	r3, r3, #1
 8004184:	6113      	str	r3, [r2, #16]

    }

}
 8004186:	bf00      	nop
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	2001c4d0 	.word	0x2001c4d0
 8004190:	40001000 	.word	0x40001000

08004194 <TIM7_IRQHandler>:

void TIM7_IRQHandler(void)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	af00      	add	r7, sp, #0
    if (__timer_7_config__->ISR_Routines.Update_ISR) {
 8004198:	4b09      	ldr	r3, [pc, #36]	@ (80041c0 <TIM7_IRQHandler+0x2c>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d00a      	beq.n	80041ba <TIM7_IRQHandler+0x26>
    	__timer_7_config__->ISR_Routines.Update_ISR();
 80041a4:	4b06      	ldr	r3, [pc, #24]	@ (80041c0 <TIM7_IRQHandler+0x2c>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80041ac:	4798      	blx	r3

    	TIM7->SR &= ~TIM_SR_UIF;  // Clear the Capture Compare interrupt flag
 80041ae:	4b05      	ldr	r3, [pc, #20]	@ (80041c4 <TIM7_IRQHandler+0x30>)
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	4a04      	ldr	r2, [pc, #16]	@ (80041c4 <TIM7_IRQHandler+0x30>)
 80041b4:	f023 0301 	bic.w	r3, r3, #1
 80041b8:	6113      	str	r3, [r2, #16]
    }
}
 80041ba:	bf00      	nop
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	2001c4d4 	.word	0x2001c4d4
 80041c4:	40001400 	.word	0x40001400

080041c8 <TIM8_BRK_TIM12_IRQHandler>:
//		(config->Interrupt_Request == Timer_Configurations.Interrupt_Request.Capture_Compare_Interrupt_4))
//{
//	NVIC_EnableIRQ(TIM8_CC_IRQn);
//}

void TIM8_BRK_TIM12_IRQHandler(void) {
 80041c8:	b580      	push	{r7, lr}
 80041ca:	af00      	add	r7, sp, #0
    if (__timer_8_config__ ->ISR_Routines.Break_ISR) {
 80041cc:	4b2b      	ldr	r3, [pc, #172]	@ (800427c <TIM8_BRK_TIM12_IRQHandler+0xb4>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00a      	beq.n	80041ee <TIM8_BRK_TIM12_IRQHandler+0x26>
    	__timer_8_config__ ->ISR_Routines.Break_ISR();
 80041d8:	4b28      	ldr	r3, [pc, #160]	@ (800427c <TIM8_BRK_TIM12_IRQHandler+0xb4>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80041e0:	4798      	blx	r3
    	TIM1->SR &= ~TIM_SR_BIF;  // Clear the Break interrupt flag
 80041e2:	4b27      	ldr	r3, [pc, #156]	@ (8004280 <TIM8_BRK_TIM12_IRQHandler+0xb8>)
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	4a26      	ldr	r2, [pc, #152]	@ (8004280 <TIM8_BRK_TIM12_IRQHandler+0xb8>)
 80041e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041ec:	6113      	str	r3, [r2, #16]
    }

    if (__timer_12_config__ ->ISR_Routines.Capture_Compare_1_ISR){
 80041ee:	4b25      	ldr	r3, [pc, #148]	@ (8004284 <TIM8_BRK_TIM12_IRQHandler+0xbc>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00a      	beq.n	8004210 <TIM8_BRK_TIM12_IRQHandler+0x48>
    	__timer_12_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 80041fa:	4b22      	ldr	r3, [pc, #136]	@ (8004284 <TIM8_BRK_TIM12_IRQHandler+0xbc>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004202:	4798      	blx	r3
    	TIM9->SR &= ~TIM_SR_CC1IF;  // Clear the Break interrupt flag
 8004204:	4b20      	ldr	r3, [pc, #128]	@ (8004288 <TIM8_BRK_TIM12_IRQHandler+0xc0>)
 8004206:	691b      	ldr	r3, [r3, #16]
 8004208:	4a1f      	ldr	r2, [pc, #124]	@ (8004288 <TIM8_BRK_TIM12_IRQHandler+0xc0>)
 800420a:	f023 0302 	bic.w	r3, r3, #2
 800420e:	6113      	str	r3, [r2, #16]
    }

    if (__timer_12_config__ ->ISR_Routines.Capture_Compare_2_ISR){
 8004210:	4b1c      	ldr	r3, [pc, #112]	@ (8004284 <TIM8_BRK_TIM12_IRQHandler+0xbc>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004218:	2b00      	cmp	r3, #0
 800421a:	d00a      	beq.n	8004232 <TIM8_BRK_TIM12_IRQHandler+0x6a>
    	__timer_12_config__ ->ISR_Routines.Capture_Compare_2_ISR();
 800421c:	4b19      	ldr	r3, [pc, #100]	@ (8004284 <TIM8_BRK_TIM12_IRQHandler+0xbc>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004224:	4798      	blx	r3
    	TIM9->SR &= ~TIM_SR_CC2IF;  // Clear the Break interrupt flag
 8004226:	4b18      	ldr	r3, [pc, #96]	@ (8004288 <TIM8_BRK_TIM12_IRQHandler+0xc0>)
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	4a17      	ldr	r2, [pc, #92]	@ (8004288 <TIM8_BRK_TIM12_IRQHandler+0xc0>)
 800422c:	f023 0304 	bic.w	r3, r3, #4
 8004230:	6113      	str	r3, [r2, #16]
    }

    if (__timer_12_config__ ->ISR_Routines.Update_ISR){
 8004232:	4b14      	ldr	r3, [pc, #80]	@ (8004284 <TIM8_BRK_TIM12_IRQHandler+0xbc>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800423a:	2b00      	cmp	r3, #0
 800423c:	d00a      	beq.n	8004254 <TIM8_BRK_TIM12_IRQHandler+0x8c>
    	__timer_12_config__ ->ISR_Routines.Update_ISR();
 800423e:	4b11      	ldr	r3, [pc, #68]	@ (8004284 <TIM8_BRK_TIM12_IRQHandler+0xbc>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004246:	4798      	blx	r3
    	TIM9->SR &= ~TIM_SR_UIF;  // Clear the Break interrupt flag
 8004248:	4b0f      	ldr	r3, [pc, #60]	@ (8004288 <TIM8_BRK_TIM12_IRQHandler+0xc0>)
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	4a0e      	ldr	r2, [pc, #56]	@ (8004288 <TIM8_BRK_TIM12_IRQHandler+0xc0>)
 800424e:	f023 0301 	bic.w	r3, r3, #1
 8004252:	6113      	str	r3, [r2, #16]
    }

    if (__timer_12_config__ ->ISR_Routines.Trigger_ISR){
 8004254:	4b0b      	ldr	r3, [pc, #44]	@ (8004284 <TIM8_BRK_TIM12_IRQHandler+0xbc>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800425c:	2b00      	cmp	r3, #0
 800425e:	d00a      	beq.n	8004276 <TIM8_BRK_TIM12_IRQHandler+0xae>
    	__timer_12_config__ ->ISR_Routines.Trigger_ISR();
 8004260:	4b08      	ldr	r3, [pc, #32]	@ (8004284 <TIM8_BRK_TIM12_IRQHandler+0xbc>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004268:	4798      	blx	r3
    	TIM9->SR &= ~TIM_SR_TIF;  // Clear the Break interrupt flag
 800426a:	4b07      	ldr	r3, [pc, #28]	@ (8004288 <TIM8_BRK_TIM12_IRQHandler+0xc0>)
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	4a06      	ldr	r2, [pc, #24]	@ (8004288 <TIM8_BRK_TIM12_IRQHandler+0xc0>)
 8004270:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004274:	6113      	str	r3, [r2, #16]
    }

}
 8004276:	bf00      	nop
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	2001c4d8 	.word	0x2001c4d8
 8004280:	40010000 	.word	0x40010000
 8004284:	2001c4e8 	.word	0x2001c4e8
 8004288:	40014000 	.word	0x40014000

0800428c <TIM8_UP_TIM13_IRQHandler>:

void TIM8_UP_TIM13_IRQHandler(void) {
 800428c:	b580      	push	{r7, lr}
 800428e:	af00      	add	r7, sp, #0
    if (__timer_1_config__ ->ISR_Routines.Update_ISR) {
 8004290:	4b1a      	ldr	r3, [pc, #104]	@ (80042fc <TIM8_UP_TIM13_IRQHandler+0x70>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00a      	beq.n	80042b2 <TIM8_UP_TIM13_IRQHandler+0x26>
    	__timer_1_config__ ->ISR_Routines.Update_ISR();
 800429c:	4b17      	ldr	r3, [pc, #92]	@ (80042fc <TIM8_UP_TIM13_IRQHandler+0x70>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80042a4:	4798      	blx	r3
    	TIM1->SR &= ~TIM_SR_UIF;  // Clear the Update interrupt flag
 80042a6:	4b16      	ldr	r3, [pc, #88]	@ (8004300 <TIM8_UP_TIM13_IRQHandler+0x74>)
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	4a15      	ldr	r2, [pc, #84]	@ (8004300 <TIM8_UP_TIM13_IRQHandler+0x74>)
 80042ac:	f023 0301 	bic.w	r3, r3, #1
 80042b0:	6113      	str	r3, [r2, #16]
    }

    if (__timer_13_config__ ->ISR_Routines.Update_ISR) {
 80042b2:	4b14      	ldr	r3, [pc, #80]	@ (8004304 <TIM8_UP_TIM13_IRQHandler+0x78>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d00a      	beq.n	80042d4 <TIM8_UP_TIM13_IRQHandler+0x48>
    	__timer_13_config__ ->ISR_Routines.Update_ISR();
 80042be:	4b11      	ldr	r3, [pc, #68]	@ (8004304 <TIM8_UP_TIM13_IRQHandler+0x78>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80042c6:	4798      	blx	r3
    	TIM13->SR &= ~TIM_SR_UIF;  // Clear the Update interrupt flag
 80042c8:	4b0f      	ldr	r3, [pc, #60]	@ (8004308 <TIM8_UP_TIM13_IRQHandler+0x7c>)
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	4a0e      	ldr	r2, [pc, #56]	@ (8004308 <TIM8_UP_TIM13_IRQHandler+0x7c>)
 80042ce:	f023 0301 	bic.w	r3, r3, #1
 80042d2:	6113      	str	r3, [r2, #16]
    }

    if (__timer_13_config__ ->ISR_Routines.Capture_Compare_1_ISR) {
 80042d4:	4b0b      	ldr	r3, [pc, #44]	@ (8004304 <TIM8_UP_TIM13_IRQHandler+0x78>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d00a      	beq.n	80042f6 <TIM8_UP_TIM13_IRQHandler+0x6a>
    	__timer_13_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 80042e0:	4b08      	ldr	r3, [pc, #32]	@ (8004304 <TIM8_UP_TIM13_IRQHandler+0x78>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042e8:	4798      	blx	r3
    	TIM13->SR &= ~TIM_SR_CC1IF;  // Clear the Update interrupt flag
 80042ea:	4b07      	ldr	r3, [pc, #28]	@ (8004308 <TIM8_UP_TIM13_IRQHandler+0x7c>)
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	4a06      	ldr	r2, [pc, #24]	@ (8004308 <TIM8_UP_TIM13_IRQHandler+0x7c>)
 80042f0:	f023 0302 	bic.w	r3, r3, #2
 80042f4:	6113      	str	r3, [r2, #16]
    }

}
 80042f6:	bf00      	nop
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	2001c4bc 	.word	0x2001c4bc
 8004300:	40010000 	.word	0x40010000
 8004304:	2001c4ec 	.word	0x2001c4ec
 8004308:	40001c00 	.word	0x40001c00

0800430c <TIM8_TRG_COM_TIM14_IRQHandler>:

void TIM8_TRG_COM_TIM14_IRQHandler(void) {
 800430c:	b580      	push	{r7, lr}
 800430e:	af00      	add	r7, sp, #0
    if (__timer_8_config__ ->ISR_Routines.Trigger_ISR) {
 8004310:	4b22      	ldr	r3, [pc, #136]	@ (800439c <TIM8_TRG_COM_TIM14_IRQHandler+0x90>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004318:	2b00      	cmp	r3, #0
 800431a:	d00a      	beq.n	8004332 <TIM8_TRG_COM_TIM14_IRQHandler+0x26>
    	__timer_8_config__ ->ISR_Routines.Trigger_ISR();
 800431c:	4b1f      	ldr	r3, [pc, #124]	@ (800439c <TIM8_TRG_COM_TIM14_IRQHandler+0x90>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004324:	4798      	blx	r3

    	TIM8->SR &= ~TIM_SR_TIF;  // Clear the Trigger interrupt flag
 8004326:	4b1e      	ldr	r3, [pc, #120]	@ (80043a0 <TIM8_TRG_COM_TIM14_IRQHandler+0x94>)
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	4a1d      	ldr	r2, [pc, #116]	@ (80043a0 <TIM8_TRG_COM_TIM14_IRQHandler+0x94>)
 800432c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004330:	6113      	str	r3, [r2, #16]
    }

    if (__timer_8_config__ ->ISR_Routines.Commutation_ISR) {
 8004332:	4b1a      	ldr	r3, [pc, #104]	@ (800439c <TIM8_TRG_COM_TIM14_IRQHandler+0x90>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00a      	beq.n	8004354 <TIM8_TRG_COM_TIM14_IRQHandler+0x48>
    	__timer_8_config__ ->ISR_Routines.Commutation_ISR();
 800433e:	4b17      	ldr	r3, [pc, #92]	@ (800439c <TIM8_TRG_COM_TIM14_IRQHandler+0x90>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004346:	4798      	blx	r3

    	TIM8->SR &= ~TIM_SR_COMIF;  // Clear the Trigger interrupt flag
 8004348:	4b15      	ldr	r3, [pc, #84]	@ (80043a0 <TIM8_TRG_COM_TIM14_IRQHandler+0x94>)
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	4a14      	ldr	r2, [pc, #80]	@ (80043a0 <TIM8_TRG_COM_TIM14_IRQHandler+0x94>)
 800434e:	f023 0320 	bic.w	r3, r3, #32
 8004352:	6113      	str	r3, [r2, #16]
    }

    if (__timer_14_config__ ->ISR_Routines.Update_ISR) {
 8004354:	4b13      	ldr	r3, [pc, #76]	@ (80043a4 <TIM8_TRG_COM_TIM14_IRQHandler+0x98>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800435c:	2b00      	cmp	r3, #0
 800435e:	d00a      	beq.n	8004376 <TIM8_TRG_COM_TIM14_IRQHandler+0x6a>
    	__timer_14_config__ ->ISR_Routines.Update_ISR();
 8004360:	4b10      	ldr	r3, [pc, #64]	@ (80043a4 <TIM8_TRG_COM_TIM14_IRQHandler+0x98>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004368:	4798      	blx	r3
    	TIM14->SR &= ~TIM_SR_UIF;  // Clear the Update interrupt flag
 800436a:	4b0f      	ldr	r3, [pc, #60]	@ (80043a8 <TIM8_TRG_COM_TIM14_IRQHandler+0x9c>)
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	4a0e      	ldr	r2, [pc, #56]	@ (80043a8 <TIM8_TRG_COM_TIM14_IRQHandler+0x9c>)
 8004370:	f023 0301 	bic.w	r3, r3, #1
 8004374:	6113      	str	r3, [r2, #16]
    }

    if (__timer_14_config__ ->ISR_Routines.Capture_Compare_1_ISR) {
 8004376:	4b0b      	ldr	r3, [pc, #44]	@ (80043a4 <TIM8_TRG_COM_TIM14_IRQHandler+0x98>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00a      	beq.n	8004398 <TIM8_TRG_COM_TIM14_IRQHandler+0x8c>
    	__timer_14_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 8004382:	4b08      	ldr	r3, [pc, #32]	@ (80043a4 <TIM8_TRG_COM_TIM14_IRQHandler+0x98>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800438a:	4798      	blx	r3
    	TIM14->SR &= ~TIM_SR_CC1IF;  // Clear the Update interrupt flag
 800438c:	4b06      	ldr	r3, [pc, #24]	@ (80043a8 <TIM8_TRG_COM_TIM14_IRQHandler+0x9c>)
 800438e:	691b      	ldr	r3, [r3, #16]
 8004390:	4a05      	ldr	r2, [pc, #20]	@ (80043a8 <TIM8_TRG_COM_TIM14_IRQHandler+0x9c>)
 8004392:	f023 0302 	bic.w	r3, r3, #2
 8004396:	6113      	str	r3, [r2, #16]
    }

}
 8004398:	bf00      	nop
 800439a:	bd80      	pop	{r7, pc}
 800439c:	2001c4d8 	.word	0x2001c4d8
 80043a0:	40010400 	.word	0x40010400
 80043a4:	2001c4f0 	.word	0x2001c4f0
 80043a8:	40002000 	.word	0x40002000

080043ac <TIM8_CC_IRQHandler>:

void TIM8_CC_IRQHandler(void) {
 80043ac:	b580      	push	{r7, lr}
 80043ae:	af00      	add	r7, sp, #0
    if (__timer_8_config__ ->ISR_Routines.Capture_Compare_1_ISR) {
 80043b0:	4b22      	ldr	r3, [pc, #136]	@ (800443c <TIM8_CC_IRQHandler+0x90>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00a      	beq.n	80043d2 <TIM8_CC_IRQHandler+0x26>
    	__timer_8_config__ ->ISR_Routines.Capture_Compare_1_ISR();
 80043bc:	4b1f      	ldr	r3, [pc, #124]	@ (800443c <TIM8_CC_IRQHandler+0x90>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043c4:	4798      	blx	r3

    	TIM8->SR &= ~TIM_SR_CC1IF;  // Clear the Capture Compare interrupt flag
 80043c6:	4b1e      	ldr	r3, [pc, #120]	@ (8004440 <TIM8_CC_IRQHandler+0x94>)
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	4a1d      	ldr	r2, [pc, #116]	@ (8004440 <TIM8_CC_IRQHandler+0x94>)
 80043cc:	f023 0302 	bic.w	r3, r3, #2
 80043d0:	6113      	str	r3, [r2, #16]
    }

    if (__timer_8_config__ ->ISR_Routines.Capture_Compare_2_ISR) {
 80043d2:	4b1a      	ldr	r3, [pc, #104]	@ (800443c <TIM8_CC_IRQHandler+0x90>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00a      	beq.n	80043f4 <TIM8_CC_IRQHandler+0x48>
    	__timer_8_config__ ->ISR_Routines.Capture_Compare_2_ISR();
 80043de:	4b17      	ldr	r3, [pc, #92]	@ (800443c <TIM8_CC_IRQHandler+0x90>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043e6:	4798      	blx	r3

    	TIM8->SR &= ~TIM_SR_CC2IF;  // Clear the Capture Compare interrupt flag
 80043e8:	4b15      	ldr	r3, [pc, #84]	@ (8004440 <TIM8_CC_IRQHandler+0x94>)
 80043ea:	691b      	ldr	r3, [r3, #16]
 80043ec:	4a14      	ldr	r2, [pc, #80]	@ (8004440 <TIM8_CC_IRQHandler+0x94>)
 80043ee:	f023 0304 	bic.w	r3, r3, #4
 80043f2:	6113      	str	r3, [r2, #16]
    }

    if (__timer_8_config__ ->ISR_Routines.Capture_Compare_3_ISR) {
 80043f4:	4b11      	ldr	r3, [pc, #68]	@ (800443c <TIM8_CC_IRQHandler+0x90>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d00a      	beq.n	8004416 <TIM8_CC_IRQHandler+0x6a>
    	__timer_8_config__ ->ISR_Routines.Capture_Compare_3_ISR();
 8004400:	4b0e      	ldr	r3, [pc, #56]	@ (800443c <TIM8_CC_IRQHandler+0x90>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004408:	4798      	blx	r3

    	TIM8->SR &= ~TIM_SR_CC3IF;  // Clear the Capture Compare interrupt flag
 800440a:	4b0d      	ldr	r3, [pc, #52]	@ (8004440 <TIM8_CC_IRQHandler+0x94>)
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	4a0c      	ldr	r2, [pc, #48]	@ (8004440 <TIM8_CC_IRQHandler+0x94>)
 8004410:	f023 0308 	bic.w	r3, r3, #8
 8004414:	6113      	str	r3, [r2, #16]
    }

    if (__timer_8_config__ ->ISR_Routines.Capture_Compare_4_ISR) {
 8004416:	4b09      	ldr	r3, [pc, #36]	@ (800443c <TIM8_CC_IRQHandler+0x90>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00a      	beq.n	8004438 <TIM8_CC_IRQHandler+0x8c>
    	__timer_8_config__ ->ISR_Routines.Capture_Compare_4_ISR();
 8004422:	4b06      	ldr	r3, [pc, #24]	@ (800443c <TIM8_CC_IRQHandler+0x90>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800442a:	4798      	blx	r3

    	TIM8->SR &= ~TIM_SR_CC4IF;  // Clear the Capture Compare interrupt flag
 800442c:	4b04      	ldr	r3, [pc, #16]	@ (8004440 <TIM8_CC_IRQHandler+0x94>)
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	4a03      	ldr	r2, [pc, #12]	@ (8004440 <TIM8_CC_IRQHandler+0x94>)
 8004432:	f023 0310 	bic.w	r3, r3, #16
 8004436:	6113      	str	r3, [r2, #16]
    }
}
 8004438:	bf00      	nop
 800443a:	bd80      	pop	{r7, pc}
 800443c:	2001c4d8 	.word	0x2001c4d8
 8004440:	40010400 	.word	0x40010400

08004444 <UART4_IRQHandler>:




void UART4_IRQHandler(void)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	af00      	add	r7, sp, #0
	USART_SR = UART4 -> SR;
 8004448:	4b57      	ldr	r3, [pc, #348]	@ (80045a8 <UART4_IRQHandler+0x164>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	b29a      	uxth	r2, r3
 800444e:	4b57      	ldr	r3, [pc, #348]	@ (80045ac <UART4_IRQHandler+0x168>)
 8004450:	801a      	strh	r2, [r3, #0]
	if(USART_SR & USART_SR_CTS)
 8004452:	4b56      	ldr	r3, [pc, #344]	@ (80045ac <UART4_IRQHandler+0x168>)
 8004454:	881b      	ldrh	r3, [r3, #0]
 8004456:	b29b      	uxth	r3, r3
 8004458:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800445c:	2b00      	cmp	r3, #0
 800445e:	d010      	beq.n	8004482 <UART4_IRQHandler+0x3e>
	{
	    if (__usart_4_config__ ->ISR_Routines.CTS_ISR) {
 8004460:	4b53      	ldr	r3, [pc, #332]	@ (80045b0 <UART4_IRQHandler+0x16c>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004468:	2b00      	cmp	r3, #0
 800446a:	d00a      	beq.n	8004482 <UART4_IRQHandler+0x3e>
	    	__usart_4_config__ ->ISR_Routines.CTS_ISR();
 800446c:	4b50      	ldr	r3, [pc, #320]	@ (80045b0 <UART4_IRQHandler+0x16c>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004474:	4798      	blx	r3
	    	UART4->SR &= ~USART_SR_CTS;  // Clear the Break interrupt flag
 8004476:	4b4c      	ldr	r3, [pc, #304]	@ (80045a8 <UART4_IRQHandler+0x164>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a4b      	ldr	r2, [pc, #300]	@ (80045a8 <UART4_IRQHandler+0x164>)
 800447c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004480:	6013      	str	r3, [r2, #0]
	    }
	}

	if(USART_SR & USART_SR_LBD)
 8004482:	4b4a      	ldr	r3, [pc, #296]	@ (80045ac <UART4_IRQHandler+0x168>)
 8004484:	881b      	ldrh	r3, [r3, #0]
 8004486:	b29b      	uxth	r3, r3
 8004488:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800448c:	2b00      	cmp	r3, #0
 800448e:	d010      	beq.n	80044b2 <UART4_IRQHandler+0x6e>
	{
	    if (__usart_4_config__ ->ISR_Routines.LIN_Break_Detection_ISR) {
 8004490:	4b47      	ldr	r3, [pc, #284]	@ (80045b0 <UART4_IRQHandler+0x16c>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d00a      	beq.n	80044b2 <UART4_IRQHandler+0x6e>
	    	__usart_4_config__ ->ISR_Routines.LIN_Break_Detection_ISR();
 800449c:	4b44      	ldr	r3, [pc, #272]	@ (80045b0 <UART4_IRQHandler+0x16c>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80044a4:	4798      	blx	r3
	    	UART4->SR &= ~USART_SR_LBD;  // Clear the Break interrupt flag
 80044a6:	4b40      	ldr	r3, [pc, #256]	@ (80045a8 <UART4_IRQHandler+0x164>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a3f      	ldr	r2, [pc, #252]	@ (80045a8 <UART4_IRQHandler+0x164>)
 80044ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80044b0:	6013      	str	r3, [r2, #0]
	    }
	}

	if(USART_SR & USART_SR_TXE)
 80044b2:	4b3e      	ldr	r3, [pc, #248]	@ (80045ac <UART4_IRQHandler+0x168>)
 80044b4:	881b      	ldrh	r3, [r3, #0]
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d010      	beq.n	80044e2 <UART4_IRQHandler+0x9e>
	{
	    if (__usart_4_config__ ->ISR_Routines.Transmit_Empty_ISR) {
 80044c0:	4b3b      	ldr	r3, [pc, #236]	@ (80045b0 <UART4_IRQHandler+0x16c>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d00a      	beq.n	80044e2 <UART4_IRQHandler+0x9e>
	    	__usart_4_config__ ->ISR_Routines.Transmit_Empty_ISR();
 80044cc:	4b38      	ldr	r3, [pc, #224]	@ (80045b0 <UART4_IRQHandler+0x16c>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80044d4:	4798      	blx	r3
	    	UART4->SR &= ~USART_SR_TXE;  // Clear the Break interrupt flag
 80044d6:	4b34      	ldr	r3, [pc, #208]	@ (80045a8 <UART4_IRQHandler+0x164>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a33      	ldr	r2, [pc, #204]	@ (80045a8 <UART4_IRQHandler+0x164>)
 80044dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80044e0:	6013      	str	r3, [r2, #0]
	    }
	}


	if(USART_SR & USART_SR_TC)
 80044e2:	4b32      	ldr	r3, [pc, #200]	@ (80045ac <UART4_IRQHandler+0x168>)
 80044e4:	881b      	ldrh	r3, [r3, #0]
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d010      	beq.n	8004512 <UART4_IRQHandler+0xce>
	{
	    if (__usart_4_config__ ->ISR_Routines.Transmission_Complete_ISR) {
 80044f0:	4b2f      	ldr	r3, [pc, #188]	@ (80045b0 <UART4_IRQHandler+0x16c>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d00a      	beq.n	8004512 <UART4_IRQHandler+0xce>
	    	__usart_4_config__ ->ISR_Routines.Transmission_Complete_ISR();
 80044fc:	4b2c      	ldr	r3, [pc, #176]	@ (80045b0 <UART4_IRQHandler+0x16c>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8004504:	4798      	blx	r3
	    	UART4->SR &= ~USART_SR_TC;  // Clear the Break interrupt flag
 8004506:	4b28      	ldr	r3, [pc, #160]	@ (80045a8 <UART4_IRQHandler+0x164>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a27      	ldr	r2, [pc, #156]	@ (80045a8 <UART4_IRQHandler+0x164>)
 800450c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004510:	6013      	str	r3, [r2, #0]
	    }
	}

	if(USART_SR & USART_SR_RXNE)
 8004512:	4b26      	ldr	r3, [pc, #152]	@ (80045ac <UART4_IRQHandler+0x168>)
 8004514:	881b      	ldrh	r3, [r3, #0]
 8004516:	b29b      	uxth	r3, r3
 8004518:	f003 0320 	and.w	r3, r3, #32
 800451c:	2b00      	cmp	r3, #0
 800451e:	d010      	beq.n	8004542 <UART4_IRQHandler+0xfe>
	{
	    if (__usart_4_config__ ->ISR_Routines.Receiver_Empty_ISR) {
 8004520:	4b23      	ldr	r3, [pc, #140]	@ (80045b0 <UART4_IRQHandler+0x16c>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d00a      	beq.n	8004542 <UART4_IRQHandler+0xfe>
	    	__usart_4_config__ ->ISR_Routines.Receiver_Empty_ISR();
 800452c:	4b20      	ldr	r3, [pc, #128]	@ (80045b0 <UART4_IRQHandler+0x16c>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8004534:	4798      	blx	r3
	    	UART4->SR &= ~USART_SR_RXNE;  // Clear the Break interrupt flag
 8004536:	4b1c      	ldr	r3, [pc, #112]	@ (80045a8 <UART4_IRQHandler+0x164>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a1b      	ldr	r2, [pc, #108]	@ (80045a8 <UART4_IRQHandler+0x164>)
 800453c:	f023 0320 	bic.w	r3, r3, #32
 8004540:	6013      	str	r3, [r2, #0]
	    }
	}


	if(USART_SR & USART_SR_IDLE)
 8004542:	4b1a      	ldr	r3, [pc, #104]	@ (80045ac <UART4_IRQHandler+0x168>)
 8004544:	881b      	ldrh	r3, [r3, #0]
 8004546:	b29b      	uxth	r3, r3
 8004548:	f003 0310 	and.w	r3, r3, #16
 800454c:	2b00      	cmp	r3, #0
 800454e:	d010      	beq.n	8004572 <UART4_IRQHandler+0x12e>
	{
	    if (__usart_4_config__ ->ISR_Routines.Idle_Line_ISR) {
 8004550:	4b17      	ldr	r3, [pc, #92]	@ (80045b0 <UART4_IRQHandler+0x16c>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004558:	2b00      	cmp	r3, #0
 800455a:	d00a      	beq.n	8004572 <UART4_IRQHandler+0x12e>
	    	__usart_4_config__ ->ISR_Routines.Idle_Line_ISR();
 800455c:	4b14      	ldr	r3, [pc, #80]	@ (80045b0 <UART4_IRQHandler+0x16c>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004564:	4798      	blx	r3
	    	UART4->SR &= ~USART_SR_IDLE;  // Clear the Break interrupt flag
 8004566:	4b10      	ldr	r3, [pc, #64]	@ (80045a8 <UART4_IRQHandler+0x164>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a0f      	ldr	r2, [pc, #60]	@ (80045a8 <UART4_IRQHandler+0x164>)
 800456c:	f023 0310 	bic.w	r3, r3, #16
 8004570:	6013      	str	r3, [r2, #0]
	    }
	}

	if(USART_SR & USART_SR_PE)
 8004572:	4b0e      	ldr	r3, [pc, #56]	@ (80045ac <UART4_IRQHandler+0x168>)
 8004574:	881b      	ldrh	r3, [r3, #0]
 8004576:	b29b      	uxth	r3, r3
 8004578:	f003 0301 	and.w	r3, r3, #1
 800457c:	2b00      	cmp	r3, #0
 800457e:	d010      	beq.n	80045a2 <UART4_IRQHandler+0x15e>
	{
	    if (__usart_4_config__ ->ISR_Routines.Parity_ISR) {
 8004580:	4b0b      	ldr	r3, [pc, #44]	@ (80045b0 <UART4_IRQHandler+0x16c>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004588:	2b00      	cmp	r3, #0
 800458a:	d00a      	beq.n	80045a2 <UART4_IRQHandler+0x15e>
	    	__usart_4_config__ ->ISR_Routines.Parity_ISR();
 800458c:	4b08      	ldr	r3, [pc, #32]	@ (80045b0 <UART4_IRQHandler+0x16c>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004594:	4798      	blx	r3
	    	UART4->SR &= ~USART_SR_PE;  // Clear the Break interrupt flag
 8004596:	4b04      	ldr	r3, [pc, #16]	@ (80045a8 <UART4_IRQHandler+0x164>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a03      	ldr	r2, [pc, #12]	@ (80045a8 <UART4_IRQHandler+0x164>)
 800459c:	f023 0301 	bic.w	r3, r3, #1
 80045a0:	6013      	str	r3, [r2, #0]
	    }
	}

}
 80045a2:	bf00      	nop
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	40004c00 	.word	0x40004c00
 80045ac:	2001c4fc 	.word	0x2001c4fc
 80045b0:	2001c4f8 	.word	0x2001c4f8

080045b4 <USART1_IRQHandler>:


void USART1_IRQHandler(void)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	af00      	add	r7, sp, #0
	USART_SR = USART1 -> SR;
 80045b8:	4b57      	ldr	r3, [pc, #348]	@ (8004718 <USART1_IRQHandler+0x164>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	b29a      	uxth	r2, r3
 80045be:	4b57      	ldr	r3, [pc, #348]	@ (800471c <USART1_IRQHandler+0x168>)
 80045c0:	801a      	strh	r2, [r3, #0]
	if(USART_SR & USART_SR_CTS)
 80045c2:	4b56      	ldr	r3, [pc, #344]	@ (800471c <USART1_IRQHandler+0x168>)
 80045c4:	881b      	ldrh	r3, [r3, #0]
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d010      	beq.n	80045f2 <USART1_IRQHandler+0x3e>
	{
	    if (__usart_1_config__ ->ISR_Routines.CTS_ISR) {
 80045d0:	4b53      	ldr	r3, [pc, #332]	@ (8004720 <USART1_IRQHandler+0x16c>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d00a      	beq.n	80045f2 <USART1_IRQHandler+0x3e>
	    	__usart_1_config__ ->ISR_Routines.CTS_ISR();
 80045dc:	4b50      	ldr	r3, [pc, #320]	@ (8004720 <USART1_IRQHandler+0x16c>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80045e4:	4798      	blx	r3
	    	USART1->SR &= ~USART_SR_CTS;  // Clear the Break interrupt flag
 80045e6:	4b4c      	ldr	r3, [pc, #304]	@ (8004718 <USART1_IRQHandler+0x164>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a4b      	ldr	r2, [pc, #300]	@ (8004718 <USART1_IRQHandler+0x164>)
 80045ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80045f0:	6013      	str	r3, [r2, #0]
	    }
	}

	if(USART_SR & USART_SR_LBD)
 80045f2:	4b4a      	ldr	r3, [pc, #296]	@ (800471c <USART1_IRQHandler+0x168>)
 80045f4:	881b      	ldrh	r3, [r3, #0]
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d010      	beq.n	8004622 <USART1_IRQHandler+0x6e>
	{
	    if (__usart_1_config__ ->ISR_Routines.LIN_Break_Detection_ISR) {
 8004600:	4b47      	ldr	r3, [pc, #284]	@ (8004720 <USART1_IRQHandler+0x16c>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00a      	beq.n	8004622 <USART1_IRQHandler+0x6e>
	    	__usart_1_config__ ->ISR_Routines.LIN_Break_Detection_ISR();
 800460c:	4b44      	ldr	r3, [pc, #272]	@ (8004720 <USART1_IRQHandler+0x16c>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004614:	4798      	blx	r3
	    	USART1->SR &= ~USART_SR_LBD;  // Clear the Break interrupt flag
 8004616:	4b40      	ldr	r3, [pc, #256]	@ (8004718 <USART1_IRQHandler+0x164>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a3f      	ldr	r2, [pc, #252]	@ (8004718 <USART1_IRQHandler+0x164>)
 800461c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004620:	6013      	str	r3, [r2, #0]
	    }
	}

	if(USART_SR & USART_SR_TXE)
 8004622:	4b3e      	ldr	r3, [pc, #248]	@ (800471c <USART1_IRQHandler+0x168>)
 8004624:	881b      	ldrh	r3, [r3, #0]
 8004626:	b29b      	uxth	r3, r3
 8004628:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800462c:	2b00      	cmp	r3, #0
 800462e:	d010      	beq.n	8004652 <USART1_IRQHandler+0x9e>
	{
	    if (__usart_1_config__ ->ISR_Routines.Transmit_Empty_ISR) {
 8004630:	4b3b      	ldr	r3, [pc, #236]	@ (8004720 <USART1_IRQHandler+0x16c>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004638:	2b00      	cmp	r3, #0
 800463a:	d00a      	beq.n	8004652 <USART1_IRQHandler+0x9e>
	    	__usart_1_config__ ->ISR_Routines.Transmit_Empty_ISR();
 800463c:	4b38      	ldr	r3, [pc, #224]	@ (8004720 <USART1_IRQHandler+0x16c>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004644:	4798      	blx	r3
	    	USART1->SR &= ~USART_SR_TXE;  // Clear the Break interrupt flag
 8004646:	4b34      	ldr	r3, [pc, #208]	@ (8004718 <USART1_IRQHandler+0x164>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a33      	ldr	r2, [pc, #204]	@ (8004718 <USART1_IRQHandler+0x164>)
 800464c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004650:	6013      	str	r3, [r2, #0]
	    }
	}


	if(USART_SR & USART_SR_TC)
 8004652:	4b32      	ldr	r3, [pc, #200]	@ (800471c <USART1_IRQHandler+0x168>)
 8004654:	881b      	ldrh	r3, [r3, #0]
 8004656:	b29b      	uxth	r3, r3
 8004658:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800465c:	2b00      	cmp	r3, #0
 800465e:	d010      	beq.n	8004682 <USART1_IRQHandler+0xce>
	{
	    if (__usart_1_config__ ->ISR_Routines.Transmission_Complete_ISR) {
 8004660:	4b2f      	ldr	r3, [pc, #188]	@ (8004720 <USART1_IRQHandler+0x16c>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00a      	beq.n	8004682 <USART1_IRQHandler+0xce>
	    	__usart_1_config__ ->ISR_Routines.Transmission_Complete_ISR();
 800466c:	4b2c      	ldr	r3, [pc, #176]	@ (8004720 <USART1_IRQHandler+0x16c>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8004674:	4798      	blx	r3
	    	USART1->SR &= ~USART_SR_TC;  // Clear the Break interrupt flag
 8004676:	4b28      	ldr	r3, [pc, #160]	@ (8004718 <USART1_IRQHandler+0x164>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a27      	ldr	r2, [pc, #156]	@ (8004718 <USART1_IRQHandler+0x164>)
 800467c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004680:	6013      	str	r3, [r2, #0]
	    }
	}

	if(USART_SR & USART_SR_RXNE)
 8004682:	4b26      	ldr	r3, [pc, #152]	@ (800471c <USART1_IRQHandler+0x168>)
 8004684:	881b      	ldrh	r3, [r3, #0]
 8004686:	b29b      	uxth	r3, r3
 8004688:	f003 0320 	and.w	r3, r3, #32
 800468c:	2b00      	cmp	r3, #0
 800468e:	d010      	beq.n	80046b2 <USART1_IRQHandler+0xfe>
	{
	    if (__usart_1_config__ ->ISR_Routines.Receiver_Empty_ISR) {
 8004690:	4b23      	ldr	r3, [pc, #140]	@ (8004720 <USART1_IRQHandler+0x16c>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d00a      	beq.n	80046b2 <USART1_IRQHandler+0xfe>
	    	__usart_1_config__ ->ISR_Routines.Receiver_Empty_ISR();
 800469c:	4b20      	ldr	r3, [pc, #128]	@ (8004720 <USART1_IRQHandler+0x16c>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80046a4:	4798      	blx	r3
	    	USART1->SR &= ~USART_SR_RXNE;  // Clear the Break interrupt flag
 80046a6:	4b1c      	ldr	r3, [pc, #112]	@ (8004718 <USART1_IRQHandler+0x164>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a1b      	ldr	r2, [pc, #108]	@ (8004718 <USART1_IRQHandler+0x164>)
 80046ac:	f023 0320 	bic.w	r3, r3, #32
 80046b0:	6013      	str	r3, [r2, #0]
	    }
	}


	if(USART_SR & USART_SR_IDLE)
 80046b2:	4b1a      	ldr	r3, [pc, #104]	@ (800471c <USART1_IRQHandler+0x168>)
 80046b4:	881b      	ldrh	r3, [r3, #0]
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	f003 0310 	and.w	r3, r3, #16
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d010      	beq.n	80046e2 <USART1_IRQHandler+0x12e>
	{
	    if (__usart_1_config__ ->ISR_Routines.Idle_Line_ISR) {
 80046c0:	4b17      	ldr	r3, [pc, #92]	@ (8004720 <USART1_IRQHandler+0x16c>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d00a      	beq.n	80046e2 <USART1_IRQHandler+0x12e>
	    	__usart_1_config__ ->ISR_Routines.Idle_Line_ISR();
 80046cc:	4b14      	ldr	r3, [pc, #80]	@ (8004720 <USART1_IRQHandler+0x16c>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80046d4:	4798      	blx	r3
	    	USART1->SR &= ~USART_SR_IDLE;  // Clear the Break interrupt flag
 80046d6:	4b10      	ldr	r3, [pc, #64]	@ (8004718 <USART1_IRQHandler+0x164>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a0f      	ldr	r2, [pc, #60]	@ (8004718 <USART1_IRQHandler+0x164>)
 80046dc:	f023 0310 	bic.w	r3, r3, #16
 80046e0:	6013      	str	r3, [r2, #0]
	    }
	}

	if(USART_SR & USART_SR_PE)
 80046e2:	4b0e      	ldr	r3, [pc, #56]	@ (800471c <USART1_IRQHandler+0x168>)
 80046e4:	881b      	ldrh	r3, [r3, #0]
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	f003 0301 	and.w	r3, r3, #1
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d010      	beq.n	8004712 <USART1_IRQHandler+0x15e>
	{
	    if (__usart_1_config__ ->ISR_Routines.Parity_ISR) {
 80046f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004720 <USART1_IRQHandler+0x16c>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d00a      	beq.n	8004712 <USART1_IRQHandler+0x15e>
	    	__usart_1_config__ ->ISR_Routines.Parity_ISR();
 80046fc:	4b08      	ldr	r3, [pc, #32]	@ (8004720 <USART1_IRQHandler+0x16c>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004704:	4798      	blx	r3
	    	USART1->SR &= ~USART_SR_PE;  // Clear the Break interrupt flag
 8004706:	4b04      	ldr	r3, [pc, #16]	@ (8004718 <USART1_IRQHandler+0x164>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a03      	ldr	r2, [pc, #12]	@ (8004718 <USART1_IRQHandler+0x164>)
 800470c:	f023 0301 	bic.w	r3, r3, #1
 8004710:	6013      	str	r3, [r2, #0]
	    }
	}

}
 8004712:	bf00      	nop
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	40011000 	.word	0x40011000
 800471c:	2001c4fc 	.word	0x2001c4fc
 8004720:	2001c4f4 	.word	0x2001c4f4

08004724 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	4603      	mov	r3, r0
 800472c:	6039      	str	r1, [r7, #0]
 800472e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004734:	2b00      	cmp	r3, #0
 8004736:	db0a      	blt.n	800474e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	b2da      	uxtb	r2, r3
 800473c:	490c      	ldr	r1, [pc, #48]	@ (8004770 <__NVIC_SetPriority+0x4c>)
 800473e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004742:	0112      	lsls	r2, r2, #4
 8004744:	b2d2      	uxtb	r2, r2
 8004746:	440b      	add	r3, r1
 8004748:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800474c:	e00a      	b.n	8004764 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	b2da      	uxtb	r2, r3
 8004752:	4908      	ldr	r1, [pc, #32]	@ (8004774 <__NVIC_SetPriority+0x50>)
 8004754:	79fb      	ldrb	r3, [r7, #7]
 8004756:	f003 030f 	and.w	r3, r3, #15
 800475a:	3b04      	subs	r3, #4
 800475c:	0112      	lsls	r2, r2, #4
 800475e:	b2d2      	uxtb	r2, r2
 8004760:	440b      	add	r3, r1
 8004762:	761a      	strb	r2, [r3, #24]
}
 8004764:	bf00      	nop
 8004766:	370c      	adds	r7, #12
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr
 8004770:	e000e100 	.word	0xe000e100
 8004774:	e000ed00 	.word	0xe000ed00

08004778 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	3b01      	subs	r3, #1
 8004784:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004788:	d301      	bcc.n	800478e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800478a:	2301      	movs	r3, #1
 800478c:	e00f      	b.n	80047ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800478e:	4a0a      	ldr	r2, [pc, #40]	@ (80047b8 <SysTick_Config+0x40>)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	3b01      	subs	r3, #1
 8004794:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004796:	210f      	movs	r1, #15
 8004798:	f04f 30ff 	mov.w	r0, #4294967295
 800479c:	f7ff ffc2 	bl	8004724 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80047a0:	4b05      	ldr	r3, [pc, #20]	@ (80047b8 <SysTick_Config+0x40>)
 80047a2:	2200      	movs	r2, #0
 80047a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047a6:	4b04      	ldr	r3, [pc, #16]	@ (80047b8 <SysTick_Config+0x40>)
 80047a8:	2207      	movs	r2, #7
 80047aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3708      	adds	r7, #8
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	e000e010 	.word	0xe000e010

080047bc <MCU_Clock_Setup>:
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af00      	add	r7, sp, #0
	SystemInit();
 80047c2:	f000 f961 	bl	8004a88 <SystemInit>
	uint8_t pll_m = 8;
 80047c6:	2308      	movs	r3, #8
 80047c8:	71fb      	strb	r3, [r7, #7]
	uint16_t pll_n = 336; //192
 80047ca:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80047ce:	80bb      	strh	r3, [r7, #4]
	uint8_t pll_p = 0;
 80047d0:	2300      	movs	r3, #0
 80047d2:	70fb      	strb	r3, [r7, #3]
	uint8_t pll_q = 7;
 80047d4:	2307      	movs	r3, #7
 80047d6:	70bb      	strb	r3, [r7, #2]
	RCC->PLLCFGR = 0x00000000;
 80047d8:	4b3c      	ldr	r3, [pc, #240]	@ (80048cc <MCU_Clock_Setup+0x110>)
 80047da:	2200      	movs	r2, #0
 80047dc:	605a      	str	r2, [r3, #4]
	RCC -> CR |= RCC_CR_HSEON;
 80047de:	4b3b      	ldr	r3, [pc, #236]	@ (80048cc <MCU_Clock_Setup+0x110>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a3a      	ldr	r2, [pc, #232]	@ (80048cc <MCU_Clock_Setup+0x110>)
 80047e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047e8:	6013      	str	r3, [r2, #0]
	while(!(RCC -> CR & RCC_CR_HSERDY)){}
 80047ea:	bf00      	nop
 80047ec:	4b37      	ldr	r3, [pc, #220]	@ (80048cc <MCU_Clock_Setup+0x110>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d0f9      	beq.n	80047ec <MCU_Clock_Setup+0x30>
	RCC -> APB1ENR |= RCC_APB1ENR_PWREN;
 80047f8:	4b34      	ldr	r3, [pc, #208]	@ (80048cc <MCU_Clock_Setup+0x110>)
 80047fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047fc:	4a33      	ldr	r2, [pc, #204]	@ (80048cc <MCU_Clock_Setup+0x110>)
 80047fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004802:	6413      	str	r3, [r2, #64]	@ 0x40
	PWR ->CR |= PWR_CR_VOS;
 8004804:	4b32      	ldr	r3, [pc, #200]	@ (80048d0 <MCU_Clock_Setup+0x114>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a31      	ldr	r2, [pc, #196]	@ (80048d0 <MCU_Clock_Setup+0x114>)
 800480a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800480e:	6013      	str	r3, [r2, #0]
	FLASH -> ACR |= FLASH_ACR_ICEN | FLASH_ACR_PRFTEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS;
 8004810:	4b30      	ldr	r3, [pc, #192]	@ (80048d4 <MCU_Clock_Setup+0x118>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a2f      	ldr	r2, [pc, #188]	@ (80048d4 <MCU_Clock_Setup+0x118>)
 8004816:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800481a:	f043 0305 	orr.w	r3, r3, #5
 800481e:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR |= (pll_q << 24) | (pll_p << 16) | (pll_n << 6) | (pll_m << 0);
 8004820:	4b2a      	ldr	r3, [pc, #168]	@ (80048cc <MCU_Clock_Setup+0x110>)
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	78ba      	ldrb	r2, [r7, #2]
 8004826:	0611      	lsls	r1, r2, #24
 8004828:	78fa      	ldrb	r2, [r7, #3]
 800482a:	0412      	lsls	r2, r2, #16
 800482c:	4311      	orrs	r1, r2
 800482e:	88ba      	ldrh	r2, [r7, #4]
 8004830:	0192      	lsls	r2, r2, #6
 8004832:	4311      	orrs	r1, r2
 8004834:	79fa      	ldrb	r2, [r7, #7]
 8004836:	430a      	orrs	r2, r1
 8004838:	4611      	mov	r1, r2
 800483a:	4a24      	ldr	r2, [pc, #144]	@ (80048cc <MCU_Clock_Setup+0x110>)
 800483c:	430b      	orrs	r3, r1
 800483e:	6053      	str	r3, [r2, #4]
	RCC ->PLLCFGR |= 1 << 22;
 8004840:	4b22      	ldr	r3, [pc, #136]	@ (80048cc <MCU_Clock_Setup+0x110>)
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	4a21      	ldr	r2, [pc, #132]	@ (80048cc <MCU_Clock_Setup+0x110>)
 8004846:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800484a:	6053      	str	r3, [r2, #4]
	RCC -> CFGR |= RCC_CFGR_HPRE_DIV1;
 800484c:	4b1f      	ldr	r3, [pc, #124]	@ (80048cc <MCU_Clock_Setup+0x110>)
 800484e:	4a1f      	ldr	r2, [pc, #124]	@ (80048cc <MCU_Clock_Setup+0x110>)
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE1_DIV4;
 8004854:	4b1d      	ldr	r3, [pc, #116]	@ (80048cc <MCU_Clock_Setup+0x110>)
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	4a1c      	ldr	r2, [pc, #112]	@ (80048cc <MCU_Clock_Setup+0x110>)
 800485a:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 800485e:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE2_DIV2;
 8004860:	4b1a      	ldr	r3, [pc, #104]	@ (80048cc <MCU_Clock_Setup+0x110>)
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	4a19      	ldr	r2, [pc, #100]	@ (80048cc <MCU_Clock_Setup+0x110>)
 8004866:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800486a:	6093      	str	r3, [r2, #8]
	RCC -> CR |= RCC_CR_PLLON;
 800486c:	4b17      	ldr	r3, [pc, #92]	@ (80048cc <MCU_Clock_Setup+0x110>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a16      	ldr	r2, [pc, #88]	@ (80048cc <MCU_Clock_Setup+0x110>)
 8004872:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004876:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY)){}
 8004878:	bf00      	nop
 800487a:	4b14      	ldr	r3, [pc, #80]	@ (80048cc <MCU_Clock_Setup+0x110>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d0f9      	beq.n	800487a <MCU_Clock_Setup+0xbe>
	RCC -> CFGR |= RCC_CFGR_SW_PLL;
 8004886:	4b11      	ldr	r3, [pc, #68]	@ (80048cc <MCU_Clock_Setup+0x110>)
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	4a10      	ldr	r2, [pc, #64]	@ (80048cc <MCU_Clock_Setup+0x110>)
 800488c:	f043 0302 	orr.w	r3, r3, #2
 8004890:	6093      	str	r3, [r2, #8]
	while((RCC -> CFGR & RCC_CFGR_SWS_PLL) != RCC_CFGR_SWS_PLL);
 8004892:	bf00      	nop
 8004894:	4b0d      	ldr	r3, [pc, #52]	@ (80048cc <MCU_Clock_Setup+0x110>)
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	f003 0308 	and.w	r3, r3, #8
 800489c:	2b08      	cmp	r3, #8
 800489e:	d1f9      	bne.n	8004894 <MCU_Clock_Setup+0xd8>
	SystemCoreClockUpdate();
 80048a0:	f000 f904 	bl	8004aac <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock/168);
 80048a4:	4b0c      	ldr	r3, [pc, #48]	@ (80048d8 <MCU_Clock_Setup+0x11c>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	08db      	lsrs	r3, r3, #3
 80048aa:	4a0c      	ldr	r2, [pc, #48]	@ (80048dc <MCU_Clock_Setup+0x120>)
 80048ac:	fba2 2303 	umull	r2, r3, r2, r3
 80048b0:	085b      	lsrs	r3, r3, #1
 80048b2:	4618      	mov	r0, r3
 80048b4:	f7ff ff60 	bl	8004778 <SysTick_Config>
	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80048b8:	4b04      	ldr	r3, [pc, #16]	@ (80048cc <MCU_Clock_Setup+0x110>)
 80048ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048bc:	4a03      	ldr	r2, [pc, #12]	@ (80048cc <MCU_Clock_Setup+0x110>)
 80048be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80048c2:	6453      	str	r3, [r2, #68]	@ 0x44
}
 80048c4:	bf00      	nop
 80048c6:	3708      	adds	r7, #8
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	40023800 	.word	0x40023800
 80048d0:	40007000 	.word	0x40007000
 80048d4:	40023c00 	.word	0x40023c00
 80048d8:	2001c200 	.word	0x2001c200
 80048dc:	18618619 	.word	0x18618619

080048e0 <Delay_Config>:
{
 80048e0:	b480      	push	{r7}
 80048e2:	af00      	add	r7, sp, #0
	SysTick->CTRL = 0;
 80048e4:	4b09      	ldr	r3, [pc, #36]	@ (800490c <Delay_Config+0x2c>)
 80048e6:	2200      	movs	r2, #0
 80048e8:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0x00FFFFFF;
 80048ea:	4b08      	ldr	r3, [pc, #32]	@ (800490c <Delay_Config+0x2c>)
 80048ec:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 80048f0:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 80048f2:	4b06      	ldr	r3, [pc, #24]	@ (800490c <Delay_Config+0x2c>)
 80048f4:	2200      	movs	r2, #0
 80048f6:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5;
 80048f8:	4b04      	ldr	r3, [pc, #16]	@ (800490c <Delay_Config+0x2c>)
 80048fa:	2205      	movs	r2, #5
 80048fc:	601a      	str	r2, [r3, #0]
	return (0UL);                                                     /* Function successful */
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	e000e010 	.word	0xe000e010

08004910 <Delay_ms>:
{
 8004910:	b480      	push	{r7}
 8004912:	b085      	sub	sp, #20
 8004914:	af00      	add	r7, sp, #0
 8004916:	ed87 0a01 	vstr	s0, [r7, #4]
	unsigned long x =0x29040 * (ms);
 800491a:	edd7 7a01 	vldr	s15, [r7, #4]
 800491e:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8004964 <Delay_ms+0x54>
 8004922:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004926:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800492a:	ee17 3a90 	vmov	r3, s15
 800492e:	60fb      	str	r3, [r7, #12]
	SysTick->LOAD =  x ;
 8004930:	4a0d      	ldr	r2, [pc, #52]	@ (8004968 <Delay_ms+0x58>)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0;
 8004936:	4b0c      	ldr	r3, [pc, #48]	@ (8004968 <Delay_ms+0x58>)
 8004938:	2200      	movs	r2, #0
 800493a:	609a      	str	r2, [r3, #8]
	SysTick->CTRL |= 1;
 800493c:	4b0a      	ldr	r3, [pc, #40]	@ (8004968 <Delay_ms+0x58>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a09      	ldr	r2, [pc, #36]	@ (8004968 <Delay_ms+0x58>)
 8004942:	f043 0301 	orr.w	r3, r3, #1
 8004946:	6013      	str	r3, [r2, #0]
	while((SysTick->CTRL & 0x00010000) == 0);
 8004948:	bf00      	nop
 800494a:	4b07      	ldr	r3, [pc, #28]	@ (8004968 <Delay_ms+0x58>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d0f9      	beq.n	800494a <Delay_ms+0x3a>
	return (0UL);                                                     /* Function successful */
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3714      	adds	r7, #20
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr
 8004964:	48241000 	.word	0x48241000
 8004968:	e000e010 	.word	0xe000e010

0800496c <Delay_s>:


__STATIC_INLINE uint32_t Delay_s(unsigned long s)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b082      	sub	sp, #8
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
	s = s * 1000;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800497a:	fb02 f303 	mul.w	r3, r2, r3
 800497e:	607b      	str	r3, [r7, #4]
	for (; s>0; s--)
 8004980:	e006      	b.n	8004990 <Delay_s+0x24>
	{
		Delay_ms(1);
 8004982:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8004986:	f7ff ffc3 	bl	8004910 <Delay_ms>
	for (; s>0; s--)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	3b01      	subs	r3, #1
 800498e:	607b      	str	r3, [r7, #4]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d1f5      	bne.n	8004982 <Delay_s+0x16>
	}
	return (0UL);
 8004996:	2300      	movs	r3, #0
}
 8004998:	4618      	mov	r0, r3
 800499a:	3708      	adds	r7, #8
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <main>:
		uint16_t color);

void CountDemo(GC9A01_Config *lcd);

int main(void)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af02      	add	r7, sp, #8
	MCU_Clock_Setup();
 80049a6:	f7ff ff09 	bl	80047bc <MCU_Clock_Setup>
	Delay_Config();
 80049aa:	f7ff ff99 	bl	80048e0 <Delay_Config>

	Delay_s(1);
 80049ae:	2001      	movs	r0, #1
 80049b0:	f7ff ffdc 	bl	800496c <Delay_s>


	Global_SPI.clock_pin      = SPI_Configurations.Pin._SPI1_.CLK1.PA5;
 80049b4:	220f      	movs	r2, #15
 80049b6:	4b2f      	ldr	r3, [pc, #188]	@ (8004a74 <main+0xd4>)
 80049b8:	711a      	strb	r2, [r3, #4]
	Global_SPI.miso_pin       = SPI_Configurations.Pin._SPI1_.MISO1.PA6;
 80049ba:	2210      	movs	r2, #16
 80049bc:	4b2d      	ldr	r3, [pc, #180]	@ (8004a74 <main+0xd4>)
 80049be:	719a      	strb	r2, [r3, #6]
	Global_SPI.mosi_pin       = SPI_Configurations.Pin._SPI1_.MOSI1.PA7;
 80049c0:	2211      	movs	r2, #17
 80049c2:	4b2c      	ldr	r3, [pc, #176]	@ (8004a74 <main+0xd4>)
 80049c4:	715a      	strb	r2, [r3, #5]
	Global_SPI.Port           = SPI1;
 80049c6:	4b2b      	ldr	r3, [pc, #172]	@ (8004a74 <main+0xd4>)
 80049c8:	4a2b      	ldr	r2, [pc, #172]	@ (8004a78 <main+0xd8>)
 80049ca:	601a      	str	r2, [r3, #0]
	Global_SPI.clock_phase    = SPI_Configurations.Clock_Phase.High_1;
 80049cc:	2316      	movs	r3, #22
 80049ce:	461a      	mov	r2, r3
 80049d0:	4b28      	ldr	r3, [pc, #160]	@ (8004a74 <main+0xd4>)
 80049d2:	839a      	strh	r2, [r3, #28]
	Global_SPI.clock_polarity = SPI_Configurations.Clock_Polarity.High_1;
 80049d4:	2320      	movs	r3, #32
 80049d6:	461a      	mov	r2, r3
 80049d8:	4b26      	ldr	r3, [pc, #152]	@ (8004a74 <main+0xd4>)
 80049da:	835a      	strh	r2, [r3, #26]
	Global_SPI.type           = SPI_Configurations.Type.Master;
 80049dc:	2332      	movs	r3, #50	@ 0x32
 80049de:	461a      	mov	r2, r3
 80049e0:	4b24      	ldr	r3, [pc, #144]	@ (8004a74 <main+0xd4>)
 80049e2:	831a      	strh	r2, [r3, #24]
	Global_SPI.prescaler      = SPI_Configurations.Prescaler.CLK_div_2;
 80049e4:	2328      	movs	r3, #40	@ 0x28
 80049e6:	461a      	mov	r2, r3
 80049e8:	4b22      	ldr	r3, [pc, #136]	@ (8004a74 <main+0xd4>)
 80049ea:	82da      	strh	r2, [r3, #22]
	Global_SPI.mode           = SPI_Configurations.Mode.Full_Duplex_Master;
 80049ec:	230b      	movs	r3, #11
 80049ee:	461a      	mov	r2, r3
 80049f0:	4b20      	ldr	r3, [pc, #128]	@ (8004a74 <main+0xd4>)
 80049f2:	81da      	strh	r2, [r3, #14]
	Global_SPI.frame_format   = SPI_Configurations.Frame_Format.MSB_First;
 80049f4:	2317      	movs	r3, #23
 80049f6:	461a      	mov	r2, r3
 80049f8:	4b1e      	ldr	r3, [pc, #120]	@ (8004a74 <main+0xd4>)
 80049fa:	829a      	strh	r2, [r3, #20]
	Global_SPI.dma            = SPI_Configurations.DMA_Type.TX_DMA_Enable | SPI_Configurations.DMA_Type.RX_DMA_Enable;
 80049fc:	2202      	movs	r2, #2
 80049fe:	2308      	movs	r3, #8
 8004a00:	4313      	orrs	r3, r2
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	461a      	mov	r2, r3
 8004a06:	4b1b      	ldr	r3, [pc, #108]	@ (8004a74 <main+0xd4>)
 8004a08:	841a      	strh	r2, [r3, #32]
	Global_SPI.data_format    = SPI_Configurations.Data_Format.Bit8;
 8004a0a:	230b      	movs	r3, #11
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	4b19      	ldr	r3, [pc, #100]	@ (8004a74 <main+0xd4>)
 8004a10:	825a      	strh	r2, [r3, #18]
	Global_SPI.crc            = SPI_Configurations.CRC_Enable.Disable;
 8004a12:	2300      	movs	r3, #0
 8004a14:	461a      	mov	r2, r3
 8004a16:	4b17      	ldr	r3, [pc, #92]	@ (8004a74 <main+0xd4>)
 8004a18:	821a      	strh	r2, [r3, #16]
	Global_SPI.interrupt      = SPI_Configurations.Interrupts.Disable;
 8004a1a:	2346      	movs	r3, #70	@ 0x46
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	4b15      	ldr	r3, [pc, #84]	@ (8004a74 <main+0xd4>)
 8004a20:	83da      	strh	r2, [r3, #30]



	Display.SPI_Port = &Global_SPI;
 8004a22:	4b16      	ldr	r3, [pc, #88]	@ (8004a7c <main+0xdc>)
 8004a24:	4a13      	ldr	r2, [pc, #76]	@ (8004a74 <main+0xd4>)
 8004a26:	601a      	str	r2, [r3, #0]
	Display.dc_pin = 2;
 8004a28:	4b14      	ldr	r3, [pc, #80]	@ (8004a7c <main+0xdc>)
 8004a2a:	2202      	movs	r2, #2
 8004a2c:	821a      	strh	r2, [r3, #16]
	Display.dc_port = GPIOA;
 8004a2e:	4b13      	ldr	r3, [pc, #76]	@ (8004a7c <main+0xdc>)
 8004a30:	4a13      	ldr	r2, [pc, #76]	@ (8004a80 <main+0xe0>)
 8004a32:	60da      	str	r2, [r3, #12]
	Display.rst_pin = 0;
 8004a34:	4b11      	ldr	r3, [pc, #68]	@ (8004a7c <main+0xdc>)
 8004a36:	2200      	movs	r2, #0
 8004a38:	831a      	strh	r2, [r3, #24]
	Display.rst_port = GPIOA;
 8004a3a:	4b10      	ldr	r3, [pc, #64]	@ (8004a7c <main+0xdc>)
 8004a3c:	4a10      	ldr	r2, [pc, #64]	@ (8004a80 <main+0xe0>)
 8004a3e:	615a      	str	r2, [r3, #20]
	Display.SPI_Port->NSS_Pin = 1;
 8004a40:	4b0e      	ldr	r3, [pc, #56]	@ (8004a7c <main+0xdc>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2201      	movs	r2, #1
 8004a46:	731a      	strb	r2, [r3, #12]
	Display.SPI_Port->NSS_Port = GPIOA;
 8004a48:	4b0c      	ldr	r3, [pc, #48]	@ (8004a7c <main+0xdc>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a0c      	ldr	r2, [pc, #48]	@ (8004a80 <main+0xe0>)
 8004a4e:	609a      	str	r2, [r3, #8]


	GC9A01_Init(&Display);
 8004a50:	480a      	ldr	r0, [pc, #40]	@ (8004a7c <main+0xdc>)
 8004a52:	f7fb fcf3 	bl	800043c <GC9A01_Init>


	for(;;)
	{

		GC9A01_DrawImage(&Display, 0, 0, 240, 240, sky);
 8004a56:	4b0b      	ldr	r3, [pc, #44]	@ (8004a84 <main+0xe4>)
 8004a58:	9301      	str	r3, [sp, #4]
 8004a5a:	23f0      	movs	r3, #240	@ 0xf0
 8004a5c:	9300      	str	r3, [sp, #0]
 8004a5e:	23f0      	movs	r3, #240	@ 0xf0
 8004a60:	2200      	movs	r2, #0
 8004a62:	2100      	movs	r1, #0
 8004a64:	4805      	ldr	r0, [pc, #20]	@ (8004a7c <main+0xdc>)
 8004a66:	f7fc f86c 	bl	8000b42 <GC9A01_DrawImage>
		Delay_s(1);
 8004a6a:	2001      	movs	r0, #1
 8004a6c:	f7ff ff7e 	bl	800496c <Delay_s>
		GC9A01_DrawImage(&Display, 0, 0, 240, 240, sky);
 8004a70:	bf00      	nop
 8004a72:	e7f0      	b.n	8004a56 <main+0xb6>
 8004a74:	2001c500 	.word	0x2001c500
 8004a78:	40013000 	.word	0x40013000
 8004a7c:	2001c524 	.word	0x2001c524
 8004a80:	40020000 	.word	0x40020000
 8004a84:	20000000 	.word	0x20000000

08004a88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004a8c:	4b06      	ldr	r3, [pc, #24]	@ (8004aa8 <SystemInit+0x20>)
 8004a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a92:	4a05      	ldr	r2, [pc, #20]	@ (8004aa8 <SystemInit+0x20>)
 8004a94:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004a98:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004a9c:	bf00      	nop
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr
 8004aa6:	bf00      	nop
 8004aa8:	e000ed00 	.word	0xe000ed00

08004aac <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b087      	sub	sp, #28
 8004ab0:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	613b      	str	r3, [r7, #16]
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	617b      	str	r3, [r7, #20]
 8004aba:	2302      	movs	r3, #2
 8004abc:	60fb      	str	r3, [r7, #12]
 8004abe:	2300      	movs	r3, #0
 8004ac0:	60bb      	str	r3, [r7, #8]
 8004ac2:	2302      	movs	r3, #2
 8004ac4:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8004ac6:	4b34      	ldr	r3, [pc, #208]	@ (8004b98 <SystemCoreClockUpdate+0xec>)
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	f003 030c 	and.w	r3, r3, #12
 8004ace:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	2b08      	cmp	r3, #8
 8004ad4:	d011      	beq.n	8004afa <SystemCoreClockUpdate+0x4e>
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	2b08      	cmp	r3, #8
 8004ada:	d844      	bhi.n	8004b66 <SystemCoreClockUpdate+0xba>
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d003      	beq.n	8004aea <SystemCoreClockUpdate+0x3e>
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	2b04      	cmp	r3, #4
 8004ae6:	d004      	beq.n	8004af2 <SystemCoreClockUpdate+0x46>
 8004ae8:	e03d      	b.n	8004b66 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8004aea:	4b2c      	ldr	r3, [pc, #176]	@ (8004b9c <SystemCoreClockUpdate+0xf0>)
 8004aec:	4a2c      	ldr	r2, [pc, #176]	@ (8004ba0 <SystemCoreClockUpdate+0xf4>)
 8004aee:	601a      	str	r2, [r3, #0]
      break;
 8004af0:	e03d      	b.n	8004b6e <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8004af2:	4b2a      	ldr	r3, [pc, #168]	@ (8004b9c <SystemCoreClockUpdate+0xf0>)
 8004af4:	4a2b      	ldr	r2, [pc, #172]	@ (8004ba4 <SystemCoreClockUpdate+0xf8>)
 8004af6:	601a      	str	r2, [r3, #0]
      break;
 8004af8:	e039      	b.n	8004b6e <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8004afa:	4b27      	ldr	r3, [pc, #156]	@ (8004b98 <SystemCoreClockUpdate+0xec>)
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	0d9b      	lsrs	r3, r3, #22
 8004b00:	f003 0301 	and.w	r3, r3, #1
 8004b04:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b06:	4b24      	ldr	r3, [pc, #144]	@ (8004b98 <SystemCoreClockUpdate+0xec>)
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b0e:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00c      	beq.n	8004b30 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8004b16:	4a23      	ldr	r2, [pc, #140]	@ (8004ba4 <SystemCoreClockUpdate+0xf8>)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b1e:	4a1e      	ldr	r2, [pc, #120]	@ (8004b98 <SystemCoreClockUpdate+0xec>)
 8004b20:	6852      	ldr	r2, [r2, #4]
 8004b22:	0992      	lsrs	r2, r2, #6
 8004b24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b28:	fb02 f303 	mul.w	r3, r2, r3
 8004b2c:	617b      	str	r3, [r7, #20]
 8004b2e:	e00b      	b.n	8004b48 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8004b30:	4a1b      	ldr	r2, [pc, #108]	@ (8004ba0 <SystemCoreClockUpdate+0xf4>)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b38:	4a17      	ldr	r2, [pc, #92]	@ (8004b98 <SystemCoreClockUpdate+0xec>)
 8004b3a:	6852      	ldr	r2, [r2, #4]
 8004b3c:	0992      	lsrs	r2, r2, #6
 8004b3e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b42:	fb02 f303 	mul.w	r3, r2, r3
 8004b46:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8004b48:	4b13      	ldr	r3, [pc, #76]	@ (8004b98 <SystemCoreClockUpdate+0xec>)
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	0c1b      	lsrs	r3, r3, #16
 8004b4e:	f003 0303 	and.w	r3, r3, #3
 8004b52:	3301      	adds	r3, #1
 8004b54:	005b      	lsls	r3, r3, #1
 8004b56:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8004b58:	697a      	ldr	r2, [r7, #20]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b60:	4a0e      	ldr	r2, [pc, #56]	@ (8004b9c <SystemCoreClockUpdate+0xf0>)
 8004b62:	6013      	str	r3, [r2, #0]
      break;
 8004b64:	e003      	b.n	8004b6e <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8004b66:	4b0d      	ldr	r3, [pc, #52]	@ (8004b9c <SystemCoreClockUpdate+0xf0>)
 8004b68:	4a0d      	ldr	r2, [pc, #52]	@ (8004ba0 <SystemCoreClockUpdate+0xf4>)
 8004b6a:	601a      	str	r2, [r3, #0]
      break;
 8004b6c:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8004b6e:	4b0a      	ldr	r3, [pc, #40]	@ (8004b98 <SystemCoreClockUpdate+0xec>)
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	091b      	lsrs	r3, r3, #4
 8004b74:	f003 030f 	and.w	r3, r3, #15
 8004b78:	4a0b      	ldr	r2, [pc, #44]	@ (8004ba8 <SystemCoreClockUpdate+0xfc>)
 8004b7a:	5cd3      	ldrb	r3, [r2, r3]
 8004b7c:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8004b7e:	4b07      	ldr	r3, [pc, #28]	@ (8004b9c <SystemCoreClockUpdate+0xf0>)
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	fa22 f303 	lsr.w	r3, r2, r3
 8004b88:	4a04      	ldr	r2, [pc, #16]	@ (8004b9c <SystemCoreClockUpdate+0xf0>)
 8004b8a:	6013      	str	r3, [r2, #0]
}
 8004b8c:	bf00      	nop
 8004b8e:	371c      	adds	r7, #28
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr
 8004b98:	40023800 	.word	0x40023800
 8004b9c:	2001c200 	.word	0x2001c200
 8004ba0:	00f42400 	.word	0x00f42400
 8004ba4:	017d7840 	.word	0x017d7840
 8004ba8:	08005064 	.word	0x08005064

08004bac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004bac:	480d      	ldr	r0, [pc, #52]	@ (8004be4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004bae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004bb0:	f7ff ff6a 	bl	8004a88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004bb4:	480c      	ldr	r0, [pc, #48]	@ (8004be8 <LoopForever+0x6>)
  ldr r1, =_edata
 8004bb6:	490d      	ldr	r1, [pc, #52]	@ (8004bec <LoopForever+0xa>)
  ldr r2, =_sidata
 8004bb8:	4a0d      	ldr	r2, [pc, #52]	@ (8004bf0 <LoopForever+0xe>)
  movs r3, #0
 8004bba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004bbc:	e002      	b.n	8004bc4 <LoopCopyDataInit>

08004bbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004bbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004bc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004bc2:	3304      	adds	r3, #4

08004bc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004bc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004bc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004bc8:	d3f9      	bcc.n	8004bbe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004bca:	4a0a      	ldr	r2, [pc, #40]	@ (8004bf4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004bcc:	4c0a      	ldr	r4, [pc, #40]	@ (8004bf8 <LoopForever+0x16>)
  movs r3, #0
 8004bce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004bd0:	e001      	b.n	8004bd6 <LoopFillZerobss>

08004bd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004bd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004bd4:	3204      	adds	r2, #4

08004bd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004bd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004bd8:	d3fb      	bcc.n	8004bd2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004bda:	f000 f811 	bl	8004c00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004bde:	f7ff fedf 	bl	80049a0 <main>

08004be2 <LoopForever>:

LoopForever:
  b LoopForever
 8004be2:	e7fe      	b.n	8004be2 <LoopForever>
  ldr   r0, =_estack
 8004be4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004be8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004bec:	2001c204 	.word	0x2001c204
  ldr r2, =_sidata
 8004bf0:	0800507c 	.word	0x0800507c
  ldr r2, =_sbss
 8004bf4:	2001c204 	.word	0x2001c204
  ldr r4, =_ebss
 8004bf8:	2001c544 	.word	0x2001c544

08004bfc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004bfc:	e7fe      	b.n	8004bfc <ADC_IRQHandler>
	...

08004c00 <__libc_init_array>:
 8004c00:	b570      	push	{r4, r5, r6, lr}
 8004c02:	4d0d      	ldr	r5, [pc, #52]	@ (8004c38 <__libc_init_array+0x38>)
 8004c04:	4c0d      	ldr	r4, [pc, #52]	@ (8004c3c <__libc_init_array+0x3c>)
 8004c06:	1b64      	subs	r4, r4, r5
 8004c08:	10a4      	asrs	r4, r4, #2
 8004c0a:	2600      	movs	r6, #0
 8004c0c:	42a6      	cmp	r6, r4
 8004c0e:	d109      	bne.n	8004c24 <__libc_init_array+0x24>
 8004c10:	4d0b      	ldr	r5, [pc, #44]	@ (8004c40 <__libc_init_array+0x40>)
 8004c12:	4c0c      	ldr	r4, [pc, #48]	@ (8004c44 <__libc_init_array+0x44>)
 8004c14:	f000 f818 	bl	8004c48 <_init>
 8004c18:	1b64      	subs	r4, r4, r5
 8004c1a:	10a4      	asrs	r4, r4, #2
 8004c1c:	2600      	movs	r6, #0
 8004c1e:	42a6      	cmp	r6, r4
 8004c20:	d105      	bne.n	8004c2e <__libc_init_array+0x2e>
 8004c22:	bd70      	pop	{r4, r5, r6, pc}
 8004c24:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c28:	4798      	blx	r3
 8004c2a:	3601      	adds	r6, #1
 8004c2c:	e7ee      	b.n	8004c0c <__libc_init_array+0xc>
 8004c2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c32:	4798      	blx	r3
 8004c34:	3601      	adds	r6, #1
 8004c36:	e7f2      	b.n	8004c1e <__libc_init_array+0x1e>
 8004c38:	08005074 	.word	0x08005074
 8004c3c:	08005074 	.word	0x08005074
 8004c40:	08005074 	.word	0x08005074
 8004c44:	08005078 	.word	0x08005078

08004c48 <_init>:
 8004c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c4a:	bf00      	nop
 8004c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c4e:	bc08      	pop	{r3}
 8004c50:	469e      	mov	lr, r3
 8004c52:	4770      	bx	lr

08004c54 <_fini>:
 8004c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c56:	bf00      	nop
 8004c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c5a:	bc08      	pop	{r3}
 8004c5c:	469e      	mov	lr, r3
 8004c5e:	4770      	bx	lr
